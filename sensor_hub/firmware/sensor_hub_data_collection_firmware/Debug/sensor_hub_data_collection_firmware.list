
sensor_hub_data_collection_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015504  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a64  080156c4  080156c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016128  08016128  00018070  2**0
                  CONTENTS
  4 .ARM          00000008  08016128  08016128  00017128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016130  08016130  00018070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016130  08016130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016134  08016134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08016138  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00054ca0  20000070  080161a8  00018070  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20054d10  080161a8  00018d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003514b  00000000  00000000  000180a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000719b  00000000  00000000  0004d1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b08  00000000  00000000  00054388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000216d  00000000  00000000  00056e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000361bf  00000000  00000000  00058ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042634  00000000  00000000  0008f1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012e652  00000000  00000000  000d17f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ffe42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc28  00000000  00000000  001ffe88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  0020bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080156ac 	.word	0x080156ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	080156ac 	.word	0x080156ac

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005aa:	2003      	movs	r0, #3
 80005ac:	f000 f902 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005b0:	200f      	movs	r0, #15
 80005b2:	f013 fc1b 	bl	8013dec <HAL_InitTick>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e001      	b.n	80005c6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005c2:	f013 fbeb 	bl	8013d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_IncTick+0x20>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <HAL_IncTick+0x24>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	4a04      	ldr	r2, [pc, #16]	@ (80005f4 <HAL_IncTick+0x24>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000004 	.word	0x20000004
 80005f4:	2000008c 	.word	0x2000008c

080005f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return uwTick;
 80005fc:	4b03      	ldr	r3, [pc, #12]	@ (800060c <HAL_GetTick+0x14>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	2000008c 	.word	0x2000008c

08000610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000618:	f7ff ffee 	bl	80005f8 <HAL_GetTick>
 800061c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000628:	d005      	beq.n	8000636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <HAL_Delay+0x44>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000636:	bf00      	nop
 8000638:	f7ff ffde 	bl	80005f8 <HAL_GetTick>
 800063c:	4602      	mov	r2, r0
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	429a      	cmp	r2, r3
 8000646:	d8f7      	bhi.n	8000638 <HAL_Delay+0x28>
  {
  }
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	@ (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4907      	ldr	r1, [pc, #28]	@ (80006f4 <__NVIC_EnableIRQ+0x38>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	@ (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	@ (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	@ 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	@ 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b07      	cmp	r3, #7
 80007c0:	d00f      	beq.n	80007e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b06      	cmp	r3, #6
 80007c6:	d00c      	beq.n	80007e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b05      	cmp	r3, #5
 80007cc:	d009      	beq.n	80007e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d006      	beq.n	80007e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d003      	beq.n	80007e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007da:	21a6      	movs	r1, #166	@ 0xa6
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80007de:	f012 feb5 	bl	801354c <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ff38 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	080156c4 	.word	0x080156c4

080007f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
 8000800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d903      	bls.n	8000814 <HAL_NVIC_SetPriority+0x20>
 800080c:	21be      	movs	r1, #190	@ 0xbe
 800080e:	480e      	ldr	r0, [pc, #56]	@ (8000848 <HAL_NVIC_SetPriority+0x54>)
 8000810:	f012 fe9c 	bl	801354c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	2b0f      	cmp	r3, #15
 8000818:	d903      	bls.n	8000822 <HAL_NVIC_SetPriority+0x2e>
 800081a:	21bf      	movs	r1, #191	@ 0xbf
 800081c:	480a      	ldr	r0, [pc, #40]	@ (8000848 <HAL_NVIC_SetPriority+0x54>)
 800081e:	f012 fe95 	bl	801354c <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000822:	f7ff ff3d 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 8000826:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	68b9      	ldr	r1, [r7, #8]
 800082c:	6978      	ldr	r0, [r7, #20]
 800082e:	f7ff ff8d 	bl	800074c <NVIC_EncodePriority>
 8000832:	4602      	mov	r2, r0
 8000834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff5c 	bl	80006f8 <__NVIC_SetPriority>
}
 8000840:	bf00      	nop
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	080156c4 	.word	0x080156c4

0800084c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	da03      	bge.n	8000866 <HAL_NVIC_EnableIRQ+0x1a>
 800085e:	21d2      	movs	r1, #210	@ 0xd2
 8000860:	4805      	ldr	r0, [pc, #20]	@ (8000878 <HAL_NVIC_EnableIRQ+0x2c>)
 8000862:	f012 fe73 	bl	801354c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff26 	bl	80006bc <__NVIC_EnableIRQ>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	080156c4 	.word	0x080156c4

0800087c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d101      	bne.n	800088e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e1b2      	b.n	8000bf4 <HAL_DFSDM_ChannelInit+0x378>
  }

  /* Check parameters */
  assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a70      	ldr	r2, [pc, #448]	@ (8000a54 <HAL_DFSDM_ChannelInit+0x1d8>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d027      	beq.n	80008e8 <HAL_DFSDM_ChannelInit+0x6c>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a6e      	ldr	r2, [pc, #440]	@ (8000a58 <HAL_DFSDM_ChannelInit+0x1dc>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d022      	beq.n	80008e8 <HAL_DFSDM_ChannelInit+0x6c>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a6d      	ldr	r2, [pc, #436]	@ (8000a5c <HAL_DFSDM_ChannelInit+0x1e0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d01d      	beq.n	80008e8 <HAL_DFSDM_ChannelInit+0x6c>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a6b      	ldr	r2, [pc, #428]	@ (8000a60 <HAL_DFSDM_ChannelInit+0x1e4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d018      	beq.n	80008e8 <HAL_DFSDM_ChannelInit+0x6c>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a6a      	ldr	r2, [pc, #424]	@ (8000a64 <HAL_DFSDM_ChannelInit+0x1e8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d013      	beq.n	80008e8 <HAL_DFSDM_ChannelInit+0x6c>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a68      	ldr	r2, [pc, #416]	@ (8000a68 <HAL_DFSDM_ChannelInit+0x1ec>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d00e      	beq.n	80008e8 <HAL_DFSDM_ChannelInit+0x6c>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a67      	ldr	r2, [pc, #412]	@ (8000a6c <HAL_DFSDM_ChannelInit+0x1f0>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d009      	beq.n	80008e8 <HAL_DFSDM_ChannelInit+0x6c>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a65      	ldr	r2, [pc, #404]	@ (8000a70 <HAL_DFSDM_ChannelInit+0x1f4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d004      	beq.n	80008e8 <HAL_DFSDM_ChannelInit+0x6c>
 80008de:	f240 1171 	movw	r1, #369	@ 0x171
 80008e2:	4864      	ldr	r0, [pc, #400]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 80008e4:	f012 fe32 	bl	801354c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hdfsdm_channel->Init.OutputClock.Activation));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	791b      	ldrb	r3, [r3, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d008      	beq.n	8000902 <HAL_DFSDM_ChannelInit+0x86>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d004      	beq.n	8000902 <HAL_DFSDM_ChannelInit+0x86>
 80008f8:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 80008fc:	485d      	ldr	r0, [pc, #372]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 80008fe:	f012 fe25 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_INPUT(hdfsdm_channel->Init.Input.Multiplexer));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00e      	beq.n	8000928 <HAL_DFSDM_ChannelInit+0xac>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	691b      	ldr	r3, [r3, #16]
 800090e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000912:	d009      	beq.n	8000928 <HAL_DFSDM_ChannelInit+0xac>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800091c:	d004      	beq.n	8000928 <HAL_DFSDM_ChannelInit+0xac>
 800091e:	f240 1173 	movw	r1, #371	@ 0x173
 8000922:	4854      	ldr	r0, [pc, #336]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000924:	f012 fe12 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_DATA_PACKING(hdfsdm_channel->Init.Input.DataPacking));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00e      	beq.n	800094e <HAL_DFSDM_ChannelInit+0xd2>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000938:	d009      	beq.n	800094e <HAL_DFSDM_ChannelInit+0xd2>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000942:	d004      	beq.n	800094e <HAL_DFSDM_ChannelInit+0xd2>
 8000944:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8000948:	484a      	ldr	r0, [pc, #296]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 800094a:	f012 fdff 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_INPUT_PINS(hdfsdm_channel->Init.Input.Pins));
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d009      	beq.n	800096a <HAL_DFSDM_ChannelInit+0xee>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800095e:	d004      	beq.n	800096a <HAL_DFSDM_ChannelInit+0xee>
 8000960:	f240 1175 	movw	r1, #373	@ 0x175
 8000964:	4843      	ldr	r0, [pc, #268]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000966:	f012 fdf1 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_SERIAL_INTERFACE_TYPE(hdfsdm_channel->Init.SerialInterface.Type));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d010      	beq.n	8000994 <HAL_DFSDM_ChannelInit+0x118>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d00c      	beq.n	8000994 <HAL_DFSDM_ChannelInit+0x118>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d008      	beq.n	8000994 <HAL_DFSDM_ChannelInit+0x118>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d004      	beq.n	8000994 <HAL_DFSDM_ChannelInit+0x118>
 800098a:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 800098e:	4839      	ldr	r0, [pc, #228]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000990:	f012 fddc 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_SPI_CLOCK(hdfsdm_channel->Init.SerialInterface.SpiClock));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6a1b      	ldr	r3, [r3, #32]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d010      	beq.n	80009be <HAL_DFSDM_ChannelInit+0x142>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a1b      	ldr	r3, [r3, #32]
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	d00c      	beq.n	80009be <HAL_DFSDM_ChannelInit+0x142>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a1b      	ldr	r3, [r3, #32]
 80009a8:	2b08      	cmp	r3, #8
 80009aa:	d008      	beq.n	80009be <HAL_DFSDM_ChannelInit+0x142>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a1b      	ldr	r3, [r3, #32]
 80009b0:	2b0c      	cmp	r3, #12
 80009b2:	d004      	beq.n	80009be <HAL_DFSDM_ChannelInit+0x142>
 80009b4:	f240 1177 	movw	r1, #375	@ 0x177
 80009b8:	482e      	ldr	r0, [pc, #184]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 80009ba:	f012 fdc7 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_FILTER_ORDER(hdfsdm_channel->Init.Awd.FilterOrder));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d013      	beq.n	80009ee <HAL_DFSDM_ChannelInit+0x172>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80009ce:	d00e      	beq.n	80009ee <HAL_DFSDM_ChannelInit+0x172>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80009d8:	d009      	beq.n	80009ee <HAL_DFSDM_ChannelInit+0x172>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80009e2:	d004      	beq.n	80009ee <HAL_DFSDM_ChannelInit+0x172>
 80009e4:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 80009e8:	4822      	ldr	r0, [pc, #136]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 80009ea:	f012 fdaf 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_DFSDM_ChannelInit+0x182>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fa:	2b20      	cmp	r3, #32
 80009fc:	d904      	bls.n	8000a08 <HAL_DFSDM_ChannelInit+0x18c>
 80009fe:	f240 1179 	movw	r1, #377	@ 0x179
 8000a02:	481c      	ldr	r0, [pc, #112]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000a04:	f012 fda2 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0c:	f513 0f00 	cmn.w	r3, #8388608	@ 0x800000
 8000a10:	db04      	blt.n	8000a1c <HAL_DFSDM_ChannelInit+0x1a0>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000a1a:	db04      	blt.n	8000a26 <HAL_DFSDM_ChannelInit+0x1aa>
 8000a1c:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8000a20:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000a22:	f012 fd93 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	2b1f      	cmp	r3, #31
 8000a2c:	d904      	bls.n	8000a38 <HAL_DFSDM_ChannelInit+0x1bc>
 8000a2e:	f240 117b 	movw	r1, #379	@ 0x17b
 8000a32:	4810      	ldr	r0, [pc, #64]	@ (8000a74 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000a34:	f012 fd8a 	bl	801354c <assert_failed>

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fc8b 	bl	8001358 <DFSDM_GetChannelFromInstance>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a0c      	ldr	r2, [pc, #48]	@ (8000a78 <HAL_DFSDM_ChannelInit+0x1fc>)
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d016      	beq.n	8000a7c <HAL_DFSDM_ChannelInit+0x200>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e0d0      	b.n	8000bf4 <HAL_DFSDM_ChannelInit+0x378>
 8000a52:	bf00      	nop
 8000a54:	40016000 	.word	0x40016000
 8000a58:	40016020 	.word	0x40016020
 8000a5c:	40016040 	.word	0x40016040
 8000a60:	40016060 	.word	0x40016060
 8000a64:	40016080 	.word	0x40016080
 8000a68:	400160a0 	.word	0x400160a0
 8000a6c:	400160c0 	.word	0x400160c0
 8000a70:	400160e0 	.word	0x400160e0
 8000a74:	08015700 	.word	0x08015700
 8000a78:	20000094 	.word	0x20000094
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f011 ff1d 	bl	80128bc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000a82:	4b5e      	ldr	r3, [pc, #376]	@ (8000bfc <HAL_DFSDM_ChannelInit+0x380>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a5c      	ldr	r2, [pc, #368]	@ (8000bfc <HAL_DFSDM_ChannelInit+0x380>)
 8000a8a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8000bfc <HAL_DFSDM_ChannelInit+0x380>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d141      	bne.n	8000b18 <HAL_DFSDM_ChannelInit+0x29c>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d009      	beq.n	8000ab0 <HAL_DFSDM_ChannelInit+0x234>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aa4:	d004      	beq.n	8000ab0 <HAL_DFSDM_ChannelInit+0x234>
 8000aa6:	f240 1199 	movw	r1, #409	@ 0x199
 8000aaa:	4855      	ldr	r0, [pc, #340]	@ (8000c00 <HAL_DFSDM_ChannelInit+0x384>)
 8000aac:	f012 fd4e 	bl	801354c <assert_failed>
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000ab0:	4b54      	ldr	r3, [pc, #336]	@ (8000c04 <HAL_DFSDM_ChannelInit+0x388>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a53      	ldr	r2, [pc, #332]	@ (8000c04 <HAL_DFSDM_ChannelInit+0x388>)
 8000ab6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000aba:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000abc:	4b51      	ldr	r3, [pc, #324]	@ (8000c04 <HAL_DFSDM_ChannelInit+0x388>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	494f      	ldr	r1, [pc, #316]	@ (8000c04 <HAL_DFSDM_ChannelInit+0x388>)
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000aca:	4b4e      	ldr	r3, [pc, #312]	@ (8000c04 <HAL_DFSDM_ChannelInit+0x388>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a4d      	ldr	r2, [pc, #308]	@ (8000c04 <HAL_DFSDM_ChannelInit+0x388>)
 8000ad0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000ad4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	791b      	ldrb	r3, [r3, #4]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d116      	bne.n	8000b0c <HAL_DFSDM_ChannelInit+0x290>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d904      	bls.n	8000af0 <HAL_DFSDM_ChannelInit+0x274>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000aee:	d904      	bls.n	8000afa <HAL_DFSDM_ChannelInit+0x27e>
 8000af0:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8000af4:	4842      	ldr	r0, [pc, #264]	@ (8000c00 <HAL_DFSDM_ChannelInit+0x384>)
 8000af6:	f012 fd29 	bl	801354c <assert_failed>
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000afa:	4b42      	ldr	r3, [pc, #264]	@ (8000c04 <HAL_DFSDM_ChannelInit+0x388>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	041b      	lsls	r3, r3, #16
 8000b06:	493f      	ldr	r1, [pc, #252]	@ (8000c04 <HAL_DFSDM_ChannelInit+0x388>)
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c04 <HAL_DFSDM_ChannelInit+0x388>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a3c      	ldr	r2, [pc, #240]	@ (8000c04 <HAL_DFSDM_ChannelInit+0x388>)
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b16:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8000b26:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6819      	ldr	r1, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000b36:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000b3c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 020f 	bic.w	r2, r2, #15
 8000b54:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6819      	ldr	r1, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000b64:	431a      	orrs	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8000b7c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6899      	ldr	r1, [r3, #8]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000b90:	431a      	orrs	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	430a      	orrs	r2, r1
 8000b98:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f002 0207 	and.w	r2, r2, #7
 8000ba8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6859      	ldr	r1, [r3, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000bd4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fbb8 	bl	8001358 <DFSDM_GetChannelFromInstance>
 8000be8:	4602      	mov	r2, r0
 8000bea:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <HAL_DFSDM_ChannelInit+0x38c>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000090 	.word	0x20000090
 8000c00:	08015700 	.word	0x08015700
 8000c04:	40016000 	.word	0x40016000
 8000c08:	20000094 	.word	0x20000094

08000c0c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e1d1      	b.n	8000fc2 <HAL_DFSDM_FilterInit+0x3b6>
  }

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a77      	ldr	r2, [pc, #476]	@ (8000e00 <HAL_DFSDM_FilterInit+0x1f4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d013      	beq.n	8000c50 <HAL_DFSDM_FilterInit+0x44>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a75      	ldr	r2, [pc, #468]	@ (8000e04 <HAL_DFSDM_FilterInit+0x1f8>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d00e      	beq.n	8000c50 <HAL_DFSDM_FilterInit+0x44>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <HAL_DFSDM_FilterInit+0x1fc>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d009      	beq.n	8000c50 <HAL_DFSDM_FilterInit+0x44>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a72      	ldr	r2, [pc, #456]	@ (8000e0c <HAL_DFSDM_FilterInit+0x200>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d004      	beq.n	8000c50 <HAL_DFSDM_FilterInit+0x44>
 8000c46:	f240 41fb 	movw	r1, #1275	@ 0x4fb
 8000c4a:	4871      	ldr	r0, [pc, #452]	@ (8000e10 <HAL_DFSDM_FilterInit+0x204>)
 8000c4c:	f012 fc7e 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_FILTER_REG_TRIGGER(hdfsdm_filter->Init.RegularParam.Trigger));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d008      	beq.n	8000c6a <HAL_DFSDM_FilterInit+0x5e>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d004      	beq.n	8000c6a <HAL_DFSDM_FilterInit+0x5e>
 8000c60:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8000c64:	486a      	ldr	r0, [pc, #424]	@ (8000e10 <HAL_DFSDM_FilterInit+0x204>)
 8000c66:	f012 fc71 	bl	801354c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.RegularParam.FastMode));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7a1b      	ldrb	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d008      	beq.n	8000c84 <HAL_DFSDM_FilterInit+0x78>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7a1b      	ldrb	r3, [r3, #8]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d004      	beq.n	8000c84 <HAL_DFSDM_FilterInit+0x78>
 8000c7a:	f240 41fd 	movw	r1, #1277	@ 0x4fd
 8000c7e:	4864      	ldr	r0, [pc, #400]	@ (8000e10 <HAL_DFSDM_FilterInit+0x204>)
 8000c80:	f012 fc64 	bl	801354c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.RegularParam.DmaMode));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7a5b      	ldrb	r3, [r3, #9]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d008      	beq.n	8000c9e <HAL_DFSDM_FilterInit+0x92>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7a5b      	ldrb	r3, [r3, #9]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d004      	beq.n	8000c9e <HAL_DFSDM_FilterInit+0x92>
 8000c94:	f240 41fe 	movw	r1, #1278	@ 0x4fe
 8000c98:	485d      	ldr	r0, [pc, #372]	@ (8000e10 <HAL_DFSDM_FilterInit+0x204>)
 8000c9a:	f012 fc57 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_FILTER_INJ_TRIGGER(hdfsdm_filter->Init.InjectedParam.Trigger));
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00c      	beq.n	8000cc0 <HAL_DFSDM_FilterInit+0xb4>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d008      	beq.n	8000cc0 <HAL_DFSDM_FilterInit+0xb4>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d004      	beq.n	8000cc0 <HAL_DFSDM_FilterInit+0xb4>
 8000cb6:	f240 41ff 	movw	r1, #1279	@ 0x4ff
 8000cba:	4855      	ldr	r0, [pc, #340]	@ (8000e10 <HAL_DFSDM_FilterInit+0x204>)
 8000cbc:	f012 fc46 	bl	801354c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.InjectedParam.ScanMode));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7c1b      	ldrb	r3, [r3, #16]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d008      	beq.n	8000cda <HAL_DFSDM_FilterInit+0xce>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7c1b      	ldrb	r3, [r3, #16]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d004      	beq.n	8000cda <HAL_DFSDM_FilterInit+0xce>
 8000cd0:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8000cd4:	484e      	ldr	r0, [pc, #312]	@ (8000e10 <HAL_DFSDM_FilterInit+0x204>)
 8000cd6:	f012 fc39 	bl	801354c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.InjectedParam.DmaMode));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7c5b      	ldrb	r3, [r3, #17]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d008      	beq.n	8000cf4 <HAL_DFSDM_FilterInit+0xe8>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7c5b      	ldrb	r3, [r3, #17]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d004      	beq.n	8000cf4 <HAL_DFSDM_FilterInit+0xe8>
 8000cea:	f240 5101 	movw	r1, #1281	@ 0x501
 8000cee:	4848      	ldr	r0, [pc, #288]	@ (8000e10 <HAL_DFSDM_FilterInit+0x204>)
 8000cf0:	f012 fc2c 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d01d      	beq.n	8000d38 <HAL_DFSDM_FilterInit+0x12c>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d04:	d018      	beq.n	8000d38 <HAL_DFSDM_FilterInit+0x12c>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d0e:	d013      	beq.n	8000d38 <HAL_DFSDM_FilterInit+0x12c>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8000d18:	d00e      	beq.n	8000d38 <HAL_DFSDM_FilterInit+0x12c>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d22:	d009      	beq.n	8000d38 <HAL_DFSDM_FilterInit+0x12c>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8000d2c:	d004      	beq.n	8000d38 <HAL_DFSDM_FilterInit+0x12c>
 8000d2e:	f240 5102 	movw	r1, #1282	@ 0x502
 8000d32:	4837      	ldr	r0, [pc, #220]	@ (8000e10 <HAL_DFSDM_FilterInit+0x204>)
 8000d34:	f012 fc0a 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <HAL_DFSDM_FilterInit+0x13e>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d48:	d904      	bls.n	8000d54 <HAL_DFSDM_FilterInit+0x148>
 8000d4a:	f240 5103 	movw	r1, #1283	@ 0x503
 8000d4e:	4830      	ldr	r0, [pc, #192]	@ (8000e10 <HAL_DFSDM_FilterInit+0x204>)
 8000d50:	f012 fbfc 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d004      	beq.n	8000d66 <HAL_DFSDM_FilterInit+0x15a>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d64:	d904      	bls.n	8000d70 <HAL_DFSDM_FilterInit+0x164>
 8000d66:	f240 5104 	movw	r1, #1284	@ 0x504
 8000d6a:	4829      	ldr	r0, [pc, #164]	@ (8000e10 <HAL_DFSDM_FilterInit+0x204>)
 8000d6c:	f012 fbee 	bl	801354c <assert_failed>

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <HAL_DFSDM_FilterInit+0x1f4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d109      	bne.n	8000d8e <HAL_DFSDM_FilterInit+0x182>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d003      	beq.n	8000d8a <HAL_DFSDM_FilterInit+0x17e>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_DFSDM_FilterInit+0x182>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e119      	b.n	8000fc2 <HAL_DFSDM_FilterInit+0x3b6>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f011 fcba 	bl	8012720 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8000dba:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7a1b      	ldrb	r3, [r3, #8]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d108      	bne.n	8000dd6 <HAL_DFSDM_FilterInit+0x1ca>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e007      	b.n	8000de6 <HAL_DFSDM_FilterInit+0x1da>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8000de4:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7a5b      	ldrb	r3, [r3, #9]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d112      	bne.n	8000e14 <HAL_DFSDM_FilterInit+0x208>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e011      	b.n	8000e24 <HAL_DFSDM_FilterInit+0x218>
 8000e00:	40016100 	.word	0x40016100
 8000e04:	40016180 	.word	0x40016180
 8000e08:	40016200 	.word	0x40016200
 8000e0c:	40016280 	.word	0x40016280
 8000e10:	08015700 	.word	0x08015700
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8000e22:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000e32:	f023 0308 	bic.w	r3, r3, #8
 8000e36:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d15c      	bne.n	8000efa <HAL_DFSDM_FilterInit+0x2ee>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d03b      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e50:	d036      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e5a:	d031      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000e64:	d02c      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e6e:	d027      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8000e78:	d022      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000e82:	d01d      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8000e8c:	d018      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e96:	d013      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8000ea0:	d00e      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 8000eaa:	d009      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 8000eb4:	d004      	beq.n	8000ec0 <HAL_DFSDM_FilterInit+0x2b4>
 8000eb6:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 8000eba:	4844      	ldr	r0, [pc, #272]	@ (8000fcc <HAL_DFSDM_FilterInit+0x3c0>)
 8000ebc:	f012 fb46 	bl	801354c <assert_failed>
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ec8:	d00e      	beq.n	8000ee8 <HAL_DFSDM_FilterInit+0x2dc>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ed2:	d009      	beq.n	8000ee8 <HAL_DFSDM_FilterInit+0x2dc>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8000edc:	d004      	beq.n	8000ee8 <HAL_DFSDM_FilterInit+0x2dc>
 8000ede:	f240 5141 	movw	r1, #1345	@ 0x541
 8000ee2:	483a      	ldr	r0, [pc, #232]	@ (8000fcc <HAL_DFSDM_FilterInit+0x3c0>)
 8000ee4:	f012 fb32 	bl	801354c <assert_failed>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7c1b      	ldrb	r3, [r3, #16]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d108      	bne.n	8000f14 <HAL_DFSDM_FilterInit+0x308>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f042 0210 	orr.w	r2, r2, #16
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e007      	b.n	8000f24 <HAL_DFSDM_FilterInit+0x318>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0210 	bic.w	r2, r2, #16
 8000f22:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7c5b      	ldrb	r3, [r3, #17]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d108      	bne.n	8000f3e <HAL_DFSDM_FilterInit+0x332>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	e007      	b.n	8000f4e <HAL_DFSDM_FilterInit+0x342>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0220 	bic.w	r2, r2, #32
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6812      	ldr	r2, [r2, #0]
 8000f58:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8000f5c:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000f60:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6959      	ldr	r1, [r3, #20]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000f74:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7a:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000f7c:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7c1a      	ldrb	r2, [r3, #16]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0201 	orr.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	08015700 	.word	0x08015700

08000fd0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a40      	ldr	r2, [pc, #256]	@ (80010e8 <HAL_DFSDM_FilterConfigRegChannel+0x118>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_DFSDM_FilterConfigRegChannel+0x42>
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a3f      	ldr	r2, [pc, #252]	@ (80010ec <HAL_DFSDM_FilterConfigRegChannel+0x11c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00e      	beq.n	8001012 <HAL_DFSDM_FilterConfigRegChannel+0x42>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a3d      	ldr	r2, [pc, #244]	@ (80010f0 <HAL_DFSDM_FilterConfigRegChannel+0x120>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d009      	beq.n	8001012 <HAL_DFSDM_FilterConfigRegChannel+0x42>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a3c      	ldr	r2, [pc, #240]	@ (80010f4 <HAL_DFSDM_FilterConfigRegChannel+0x124>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d004      	beq.n	8001012 <HAL_DFSDM_FilterConfigRegChannel+0x42>
 8001008:	f240 61bd 	movw	r1, #1725	@ 0x6bd
 800100c:	483a      	ldr	r0, [pc, #232]	@ (80010f8 <HAL_DFSDM_FilterConfigRegChannel+0x128>)
 800100e:	f012 fa9d 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d020      	beq.n	800105a <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4a38      	ldr	r2, [pc, #224]	@ (80010fc <HAL_DFSDM_FilterConfigRegChannel+0x12c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d01c      	beq.n	800105a <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4a37      	ldr	r2, [pc, #220]	@ (8001100 <HAL_DFSDM_FilterConfigRegChannel+0x130>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d018      	beq.n	800105a <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4a36      	ldr	r2, [pc, #216]	@ (8001104 <HAL_DFSDM_FilterConfigRegChannel+0x134>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d014      	beq.n	800105a <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4a35      	ldr	r2, [pc, #212]	@ (8001108 <HAL_DFSDM_FilterConfigRegChannel+0x138>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d010      	beq.n	800105a <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4a34      	ldr	r2, [pc, #208]	@ (800110c <HAL_DFSDM_FilterConfigRegChannel+0x13c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d00c      	beq.n	800105a <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4a33      	ldr	r2, [pc, #204]	@ (8001110 <HAL_DFSDM_FilterConfigRegChannel+0x140>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d008      	beq.n	800105a <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4a32      	ldr	r2, [pc, #200]	@ (8001114 <HAL_DFSDM_FilterConfigRegChannel+0x144>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d004      	beq.n	800105a <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 8001050:	f240 61be 	movw	r1, #1726	@ 0x6be
 8001054:	4828      	ldr	r0, [pc, #160]	@ (80010f8 <HAL_DFSDM_FilterConfigRegChannel+0x128>)
 8001056:	f012 fa79 	bl	801354c <assert_failed>
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <HAL_DFSDM_FilterConfigRegChannel+0xa0>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d004      	beq.n	8001070 <HAL_DFSDM_FilterConfigRegChannel+0xa0>
 8001066:	f240 61bf 	movw	r1, #1727	@ 0x6bf
 800106a:	4823      	ldr	r0, [pc, #140]	@ (80010f8 <HAL_DFSDM_FilterConfigRegChannel+0x128>)
 800106c:	f012 fa6e 	bl	801354c <assert_failed>

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001076:	2b00      	cmp	r3, #0
 8001078:	d02e      	beq.n	80010d8 <HAL_DFSDM_FilterConfigRegChannel+0x108>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d029      	beq.n	80010d8 <HAL_DFSDM_FilterConfigRegChannel+0x108>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001096:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d10d      	bne.n	80010ba <HAL_DFSDM_FilterConfigRegChannel+0xea>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e00a      	b.n	80010d0 <HAL_DFSDM_FilterConfigRegChannel+0x100>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010d6:	e001      	b.n	80010dc <HAL_DFSDM_FilterConfigRegChannel+0x10c>
  }
  else
  {
    status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40016100 	.word	0x40016100
 80010ec:	40016180 	.word	0x40016180
 80010f0:	40016200 	.word	0x40016200
 80010f4:	40016280 	.word	0x40016280
 80010f8:	08015700 	.word	0x08015700
 80010fc:	00010002 	.word	0x00010002
 8001100:	00020004 	.word	0x00020004
 8001104:	00030008 	.word	0x00030008
 8001108:	00040010 	.word	0x00040010
 800110c:	00050020 	.word	0x00050020
 8001110:	00060040 	.word	0x00060040
 8001114:	00070080 	.word	0x00070080

08001118 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a44      	ldr	r2, [pc, #272]	@ (8001240 <HAL_DFSDM_FilterRegularStart_DMA+0x128>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_DFSDM_FilterRegularStart_DMA+0x42>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a43      	ldr	r2, [pc, #268]	@ (8001244 <HAL_DFSDM_FilterRegularStart_DMA+0x12c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d00e      	beq.n	800115a <HAL_DFSDM_FilterRegularStart_DMA+0x42>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a41      	ldr	r2, [pc, #260]	@ (8001248 <HAL_DFSDM_FilterRegularStart_DMA+0x130>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d009      	beq.n	800115a <HAL_DFSDM_FilterRegularStart_DMA+0x42>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a40      	ldr	r2, [pc, #256]	@ (800124c <HAL_DFSDM_FilterRegularStart_DMA+0x134>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d004      	beq.n	800115a <HAL_DFSDM_FilterRegularStart_DMA+0x42>
 8001150:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 8001154:	483e      	ldr	r0, [pc, #248]	@ (8001250 <HAL_DFSDM_FilterRegularStart_DMA+0x138>)
 8001156:	f012 f9f9 	bl	801354c <assert_failed>

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <HAL_DFSDM_FilterRegularStart_DMA+0x4e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <HAL_DFSDM_FilterRegularStart_DMA+0x54>
  {
    status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	75fb      	strb	r3, [r7, #23]
 800116a:	e064      	b.n	8001236 <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800117a:	d002      	beq.n	8001182 <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
  {
    status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	75fb      	strb	r3, [r7, #23]
 8001180:	e059      	b.n	8001236 <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10e      	bne.n	80011a8 <HAL_DFSDM_FilterRegularStart_DMA+0x90>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10a      	bne.n	80011a8 <HAL_DFSDM_FilterRegularStart_DMA+0x90>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001196:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001198:	2b00      	cmp	r3, #0
 800119a:	d105      	bne.n	80011a8 <HAL_DFSDM_FilterRegularStart_DMA+0x90>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d002      	beq.n	80011a8 <HAL_DFSDM_FilterRegularStart_DMA+0x90>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]
 80011a6:	e046      	b.n	8001236 <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10b      	bne.n	80011c8 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d107      	bne.n	80011c8 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011bc:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80011be:	2b20      	cmp	r3, #32
 80011c0:	d102      	bne.n	80011c8 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
  {
    status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]
 80011c6:	e036      	b.n	8001236 <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d004      	beq.n	80011dc <HAL_DFSDM_FilterRegularStart_DMA+0xc4>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d12a      	bne.n	8001232 <HAL_DFSDM_FilterRegularStart_DMA+0x11a>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <HAL_DFSDM_FilterRegularStart_DMA+0x13c>)
 80011e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <HAL_DFSDM_FilterRegularStart_DMA+0x140>)
 80011ea:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f0:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80011f2:	2b20      	cmp	r3, #32
 80011f4:	d101      	bne.n	80011fa <HAL_DFSDM_FilterRegularStart_DMA+0xe2>
 80011f6:	4a19      	ldr	r2, [pc, #100]	@ (800125c <HAL_DFSDM_FilterRegularStart_DMA+0x144>)
 80011f8:	e000      	b.n	80011fc <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
 80011fa:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001200:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	331c      	adds	r3, #28
 800120c:	4619      	mov	r1, r3
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f000 fb1b 	bl	800184c <HAL_DMA_Start_IT>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_DFSDM_FilterRegularStart_DMA+0x112>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	22ff      	movs	r2, #255	@ 0xff
 8001220:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001228:	e005      	b.n	8001236 <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 f8e0 	bl	80013f0 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001230:	e001      	b.n	8001236 <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001236:	7dfb      	ldrb	r3, [r7, #23]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40016100 	.word	0x40016100
 8001244:	40016180 	.word	0x40016180
 8001248:	40016200 	.word	0x40016200
 800124c:	40016280 	.word	0x40016280
 8001250:	08015700 	.word	0x08015700
 8001254:	08001319 	.word	0x08001319
 8001258:	08001335 	.word	0x08001335
 800125c:	080012fd 	.word	0x080012fd

08001260 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <HAL_DFSDM_FilterRegularStop_DMA+0x74>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_DFSDM_FilterRegularStop_DMA+0x3e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <HAL_DFSDM_FilterRegularStop_DMA+0x78>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d00e      	beq.n	800129e <HAL_DFSDM_FilterRegularStop_DMA+0x3e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a15      	ldr	r2, [pc, #84]	@ (80012dc <HAL_DFSDM_FilterRegularStop_DMA+0x7c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d009      	beq.n	800129e <HAL_DFSDM_FilterRegularStop_DMA+0x3e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a14      	ldr	r2, [pc, #80]	@ (80012e0 <HAL_DFSDM_FilterRegularStop_DMA+0x80>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d004      	beq.n	800129e <HAL_DFSDM_FilterRegularStop_DMA+0x3e>
 8001294:	f640 0183 	movw	r1, #2179	@ 0x883
 8001298:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <HAL_DFSDM_FilterRegularStop_DMA+0x84>)
 800129a:	f012 f957 	bl	801354c <assert_failed>

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d007      	beq.n	80012b8 <HAL_DFSDM_FilterRegularStop_DMA+0x58>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d002      	beq.n	80012b8 <HAL_DFSDM_FilterRegularStop_DMA+0x58>
  {
    /* Return error status */
    status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e007      	b.n	80012c8 <HAL_DFSDM_FilterRegularStop_DMA+0x68>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fb4f 	bl	8001960 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f8ea 	bl	800149c <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40016100 	.word	0x40016100
 80012d8:	40016180 	.word	0x40016180
 80012dc:	40016200 	.word	0x40016200
 80012e0:	40016280 	.word	0x40016280
 80012e4:	08015700 	.word	0x08015700

080012e8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001308:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f012 f8e0 	bl	80134d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001324:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f012 f8e2 	bl	80134f0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001340:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2203      	movs	r2, #3
 8001346:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff ffcd 	bl	80012e8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d102      	bne.n	800136e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	e02b      	b.n	80013c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a19      	ldr	r2, [pc, #100]	@ (80013d8 <DFSDM_GetChannelFromInstance+0x80>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d102      	bne.n	800137c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001376:	2301      	movs	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e024      	b.n	80013c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a17      	ldr	r2, [pc, #92]	@ (80013dc <DFSDM_GetChannelFromInstance+0x84>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d102      	bne.n	800138a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e01d      	b.n	80013c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <DFSDM_GetChannelFromInstance+0x88>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d102      	bne.n	8001398 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001392:	2304      	movs	r3, #4
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e016      	b.n	80013c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <DFSDM_GetChannelFromInstance+0x8c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d102      	bne.n	80013a6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80013a0:	2305      	movs	r3, #5
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e00f      	b.n	80013c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0f      	ldr	r2, [pc, #60]	@ (80013e8 <DFSDM_GetChannelFromInstance+0x90>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d102      	bne.n	80013b4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80013ae:	2306      	movs	r3, #6
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e008      	b.n	80013c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <DFSDM_GetChannelFromInstance+0x94>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d102      	bne.n	80013c2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80013bc:	2307      	movs	r3, #7
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e001      	b.n	80013c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80013c2:	2303      	movs	r3, #3
 80013c4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40016000 	.word	0x40016000
 80013d8:	40016020 	.word	0x40016020
 80013dc:	40016040 	.word	0x40016040
 80013e0:	40016080 	.word	0x40016080
 80013e4:	400160a0 	.word	0x400160a0
 80013e8:	400160c0 	.word	0x400160c0
 80013ec:	400160e0 	.word	0x400160e0

080013f0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d108      	bne.n	8001412 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e033      	b.n	800147a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0201 	bic.w	r2, r2, #1
 8001420:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001430:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001448:	2b03      	cmp	r3, #3
 800144a:	d116      	bne.n	800147a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001450:	2b00      	cmp	r3, #0
 8001452:	d107      	bne.n	8001464 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0202 	orr.w	r2, r2, #2
 8001462:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800146a:	2b01      	cmp	r3, #1
 800146c:	d102      	bne.n	8001474 <DFSDM_RegConvStart+0x84>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	e000      	b.n	8001476 <DFSDM_RegConvStart+0x86>
 8001474:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <DFSDM_RegConvStart+0x98>
 8001484:	2202      	movs	r2, #2
 8001486:	e000      	b.n	800148a <DFSDM_RegConvStart+0x9a>
 8001488:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d107      	bne.n	80014cc <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80014ca:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d116      	bne.n	8001514 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0202 	orr.w	r2, r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001504:	2b01      	cmp	r3, #1
 8001506:	d102      	bne.n	800150e <DFSDM_RegConvStop+0x72>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150c:	e000      	b.n	8001510 <DFSDM_RegConvStop+0x74>
 800150e:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800151a:	2b02      	cmp	r3, #2
 800151c:	d101      	bne.n	8001522 <DFSDM_RegConvStop+0x86>
 800151e:	2201      	movs	r2, #1
 8001520:	e000      	b.n	8001524 <DFSDM_RegConvStop+0x88>
 8001522:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e176      	b.n	8001838 <HAL_DMA_Init+0x300>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6b      	ldr	r2, [pc, #428]	@ (80016fc <HAL_DMA_Init+0x1c4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d044      	beq.n	80015de <HAL_DMA_Init+0xa6>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a69      	ldr	r2, [pc, #420]	@ (8001700 <HAL_DMA_Init+0x1c8>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d03f      	beq.n	80015de <HAL_DMA_Init+0xa6>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a68      	ldr	r2, [pc, #416]	@ (8001704 <HAL_DMA_Init+0x1cc>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d03a      	beq.n	80015de <HAL_DMA_Init+0xa6>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a66      	ldr	r2, [pc, #408]	@ (8001708 <HAL_DMA_Init+0x1d0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d035      	beq.n	80015de <HAL_DMA_Init+0xa6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a65      	ldr	r2, [pc, #404]	@ (800170c <HAL_DMA_Init+0x1d4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d030      	beq.n	80015de <HAL_DMA_Init+0xa6>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a63      	ldr	r2, [pc, #396]	@ (8001710 <HAL_DMA_Init+0x1d8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d02b      	beq.n	80015de <HAL_DMA_Init+0xa6>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a62      	ldr	r2, [pc, #392]	@ (8001714 <HAL_DMA_Init+0x1dc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d026      	beq.n	80015de <HAL_DMA_Init+0xa6>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a60      	ldr	r2, [pc, #384]	@ (8001718 <HAL_DMA_Init+0x1e0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d021      	beq.n	80015de <HAL_DMA_Init+0xa6>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a5f      	ldr	r2, [pc, #380]	@ (800171c <HAL_DMA_Init+0x1e4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d01c      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001720 <HAL_DMA_Init+0x1e8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d017      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001724 <HAL_DMA_Init+0x1ec>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d012      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a5a      	ldr	r2, [pc, #360]	@ (8001728 <HAL_DMA_Init+0x1f0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a59      	ldr	r2, [pc, #356]	@ (800172c <HAL_DMA_Init+0x1f4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a57      	ldr	r2, [pc, #348]	@ (8001730 <HAL_DMA_Init+0x1f8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d003      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015d6:	21a5      	movs	r1, #165	@ 0xa5
 80015d8:	4856      	ldr	r0, [pc, #344]	@ (8001734 <HAL_DMA_Init+0x1fc>)
 80015da:	f011 ffb7 	bl	801354c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00c      	beq.n	8001600 <HAL_DMA_Init+0xc8>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d008      	beq.n	8001600 <HAL_DMA_Init+0xc8>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80015f6:	d003      	beq.n	8001600 <HAL_DMA_Init+0xc8>
 80015f8:	21a6      	movs	r1, #166	@ 0xa6
 80015fa:	484e      	ldr	r0, [pc, #312]	@ (8001734 <HAL_DMA_Init+0x1fc>)
 80015fc:	f011 ffa6 	bl	801354c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b40      	cmp	r3, #64	@ 0x40
 8001606:	d007      	beq.n	8001618 <HAL_DMA_Init+0xe0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_DMA_Init+0xe0>
 8001610:	21a7      	movs	r1, #167	@ 0xa7
 8001612:	4848      	ldr	r0, [pc, #288]	@ (8001734 <HAL_DMA_Init+0x1fc>)
 8001614:	f011 ff9a 	bl	801354c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	2b80      	cmp	r3, #128	@ 0x80
 800161e:	d007      	beq.n	8001630 <HAL_DMA_Init+0xf8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_DMA_Init+0xf8>
 8001628:	21a8      	movs	r1, #168	@ 0xa8
 800162a:	4842      	ldr	r0, [pc, #264]	@ (8001734 <HAL_DMA_Init+0x1fc>)
 800162c:	f011 ff8e 	bl	801354c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00d      	beq.n	8001654 <HAL_DMA_Init+0x11c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001640:	d008      	beq.n	8001654 <HAL_DMA_Init+0x11c>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800164a:	d003      	beq.n	8001654 <HAL_DMA_Init+0x11c>
 800164c:	21a9      	movs	r1, #169	@ 0xa9
 800164e:	4839      	ldr	r0, [pc, #228]	@ (8001734 <HAL_DMA_Init+0x1fc>)
 8001650:	f011 ff7c 	bl	801354c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00d      	beq.n	8001678 <HAL_DMA_Init+0x140>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001664:	d008      	beq.n	8001678 <HAL_DMA_Init+0x140>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800166e:	d003      	beq.n	8001678 <HAL_DMA_Init+0x140>
 8001670:	21aa      	movs	r1, #170	@ 0xaa
 8001672:	4830      	ldr	r0, [pc, #192]	@ (8001734 <HAL_DMA_Init+0x1fc>)
 8001674:	f011 ff6a 	bl	801354c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <HAL_DMA_Init+0x158>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	2b20      	cmp	r3, #32
 8001686:	d003      	beq.n	8001690 <HAL_DMA_Init+0x158>
 8001688:	21ab      	movs	r1, #171	@ 0xab
 800168a:	482a      	ldr	r0, [pc, #168]	@ (8001734 <HAL_DMA_Init+0x1fc>)
 800168c:	f011 ff5e 	bl	801354c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d012      	beq.n	80016be <HAL_DMA_Init+0x186>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016a0:	d00d      	beq.n	80016be <HAL_DMA_Init+0x186>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016aa:	d008      	beq.n	80016be <HAL_DMA_Init+0x186>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80016b4:	d003      	beq.n	80016be <HAL_DMA_Init+0x186>
 80016b6:	21ac      	movs	r1, #172	@ 0xac
 80016b8:	481e      	ldr	r0, [pc, #120]	@ (8001734 <HAL_DMA_Init+0x1fc>)
 80016ba:	f011 ff47 	bl	801354c <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b5d      	cmp	r3, #93	@ 0x5d
 80016c4:	d903      	bls.n	80016ce <HAL_DMA_Init+0x196>
 80016c6:	21ae      	movs	r1, #174	@ 0xae
 80016c8:	481a      	ldr	r0, [pc, #104]	@ (8001734 <HAL_DMA_Init+0x1fc>)
 80016ca:	f011 ff3f 	bl	801354c <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <HAL_DMA_Init+0x200>)
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d836      	bhi.n	8001748 <HAL_DMA_Init+0x210>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b16      	ldr	r3, [pc, #88]	@ (800173c <HAL_DMA_Init+0x204>)
 80016e2:	4413      	add	r3, r2
 80016e4:	4a16      	ldr	r2, [pc, #88]	@ (8001740 <HAL_DMA_Init+0x208>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	009a      	lsls	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <HAL_DMA_Init+0x20c>)
 80016f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80016f8:	e035      	b.n	8001766 <HAL_DMA_Init+0x22e>
 80016fa:	bf00      	nop
 80016fc:	40020008 	.word	0x40020008
 8001700:	4002001c 	.word	0x4002001c
 8001704:	40020030 	.word	0x40020030
 8001708:	40020044 	.word	0x40020044
 800170c:	40020058 	.word	0x40020058
 8001710:	4002006c 	.word	0x4002006c
 8001714:	40020080 	.word	0x40020080
 8001718:	40020408 	.word	0x40020408
 800171c:	4002041c 	.word	0x4002041c
 8001720:	40020430 	.word	0x40020430
 8001724:	40020444 	.word	0x40020444
 8001728:	40020458 	.word	0x40020458
 800172c:	4002046c 	.word	0x4002046c
 8001730:	40020480 	.word	0x40020480
 8001734:	0801573c 	.word	0x0801573c
 8001738:	40020407 	.word	0x40020407
 800173c:	bffdfff8 	.word	0xbffdfff8
 8001740:	cccccccd 	.word	0xcccccccd
 8001744:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b3c      	ldr	r3, [pc, #240]	@ (8001840 <HAL_DMA_Init+0x308>)
 8001750:	4413      	add	r3, r2
 8001752:	4a3c      	ldr	r2, [pc, #240]	@ (8001844 <HAL_DMA_Init+0x30c>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	009a      	lsls	r2, r3, #2
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a39      	ldr	r2, [pc, #228]	@ (8001848 <HAL_DMA_Init+0x310>)
 8001764:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2202      	movs	r2, #2
 800176a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800177c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001780:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800178a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fa1b 	bl	8001bf4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017c6:	d102      	bne.n	80017ce <HAL_DMA_Init+0x296>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017e2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d010      	beq.n	800180e <HAL_DMA_Init+0x2d6>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d80c      	bhi.n	800180e <HAL_DMA_Init+0x2d6>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fa3b 	bl	8001c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	e008      	b.n	8001820 <HAL_DMA_Init+0x2e8>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	bffdfbf8 	.word	0xbffdfbf8
 8001844:	cccccccd 	.word	0xcccccccd
 8001848:	40020400 	.word	0x40020400

0800184c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_DMA_Start_IT+0x20>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800186a:	d304      	bcc.n	8001876 <HAL_DMA_Start_IT+0x2a>
 800186c:	f240 11df 	movw	r1, #479	@ 0x1df
 8001870:	483a      	ldr	r0, [pc, #232]	@ (800195c <HAL_DMA_Start_IT+0x110>)
 8001872:	f011 fe6b 	bl	801354c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_DMA_Start_IT+0x38>
 8001880:	2302      	movs	r3, #2
 8001882:	e066      	b.n	8001952 <HAL_DMA_Start_IT+0x106>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d155      	bne.n	8001944 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f95a 	bl	8001b76 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 020e 	orr.w	r2, r2, #14
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e00f      	b.n	80018fc <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0204 	bic.w	r2, r2, #4
 80018ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 020a 	orr.w	r2, r2, #10
 80018fa:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001918:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001930:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e005      	b.n	8001950 <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800194c:	2302      	movs	r3, #2
 800194e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001950:	7dfb      	ldrb	r3, [r7, #23]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	0801573c 	.word	0x0801573c

08001960 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d008      	beq.n	800198a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2204      	movs	r2, #4
 800197c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e040      	b.n	8001a0c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 020e 	bic.w	r2, r2, #14
 8001998:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019a8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f003 021c 	and.w	r2, r3, #28
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	2101      	movs	r1, #1
 80019c8:	fa01 f202 	lsl.w	r2, r1, r2
 80019cc:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00c      	beq.n	80019fa <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019f8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a34:	f003 031c 	and.w	r3, r3, #28
 8001a38:	2204      	movs	r2, #4
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d026      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x7a>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d021      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0204 	bic.w	r2, r2, #4
 8001a6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a70:	f003 021c 	and.w	r2, r3, #28
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	2104      	movs	r1, #4
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d071      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a90:	e06c      	b.n	8001b6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	f003 031c 	and.w	r3, r3, #28
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d02e      	beq.n	8001b04 <HAL_DMA_IRQHandler+0xec>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d029      	beq.n	8001b04 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 020a 	bic.w	r2, r2, #10
 8001acc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	f003 021c 	and.w	r2, r3, #28
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d038      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b02:	e033      	b.n	8001b6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b08:	f003 031c 	and.w	r3, r3, #28
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d02a      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x156>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d025      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 020e 	bic.w	r2, r2, #14
 8001b30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	f003 021c 	and.w	r2, r3, #28
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
}
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b8c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b9e:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba4:	f003 021c 	and.w	r2, r3, #28
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d108      	bne.n	8001bd6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bd4:	e007      	b.n	8001be6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	60da      	str	r2, [r3, #12]
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d80a      	bhi.n	8001c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c14:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c1c:	e007      	b.n	8001c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	009a      	lsls	r2, r3, #2
 8001c26:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c28:	4413      	add	r3, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	3b08      	subs	r3, #8
 8001c36:	4a0c      	ldr	r2, [pc, #48]	@ (8001c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40020407 	.word	0x40020407
 8001c64:	4002081c 	.word	0x4002081c
 8001c68:	cccccccd 	.word	0xcccccccd
 8001c6c:	40020880 	.word	0x40020880

08001c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a08      	ldr	r2, [pc, #32]	@ (8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c92:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	1000823f 	.word	0x1000823f
 8001cb4:	40020940 	.word	0x40020940

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ccc:	d023      	beq.n	8001d16 <HAL_GPIO_Init+0x5e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a3e      	ldr	r2, [pc, #248]	@ (8001dcc <HAL_GPIO_Init+0x114>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01f      	beq.n	8001d16 <HAL_GPIO_Init+0x5e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a3d      	ldr	r2, [pc, #244]	@ (8001dd0 <HAL_GPIO_Init+0x118>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01b      	beq.n	8001d16 <HAL_GPIO_Init+0x5e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd4 <HAL_GPIO_Init+0x11c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d017      	beq.n	8001d16 <HAL_GPIO_Init+0x5e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd8 <HAL_GPIO_Init+0x120>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x5e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8001ddc <HAL_GPIO_Init+0x124>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00f      	beq.n	8001d16 <HAL_GPIO_Init+0x5e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a39      	ldr	r2, [pc, #228]	@ (8001de0 <HAL_GPIO_Init+0x128>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00b      	beq.n	8001d16 <HAL_GPIO_Init+0x5e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a38      	ldr	r2, [pc, #224]	@ (8001de4 <HAL_GPIO_Init+0x12c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x5e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a37      	ldr	r2, [pc, #220]	@ (8001de8 <HAL_GPIO_Init+0x130>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x5e>
 8001d0e:	21aa      	movs	r1, #170	@ 0xaa
 8001d10:	4836      	ldr	r0, [pc, #216]	@ (8001dec <HAL_GPIO_Init+0x134>)
 8001d12:	f011 fc1b 	bl	801354c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <HAL_GPIO_Init+0x72>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d28:	d303      	bcc.n	8001d32 <HAL_GPIO_Init+0x7a>
 8001d2a:	21ab      	movs	r1, #171	@ 0xab
 8001d2c:	482f      	ldr	r0, [pc, #188]	@ (8001dec <HAL_GPIO_Init+0x134>)
 8001d2e:	f011 fc0d 	bl	801354c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 822b 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	f000 8226 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b11      	cmp	r3, #17
 8001d4c:	f000 8221 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	f000 821c 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	f000 8217 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001d6c:	f000 8211 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001d78:	f000 820b 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001d84:	f000 8205 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001d90:	f000 81ff 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8001d9c:	f000 81f9 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8001da8:	f000 81f3 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	f000 81ee 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b0b      	cmp	r3, #11
 8001dbc:	f000 81e9 	beq.w	8002192 <HAL_GPIO_Init+0x4da>
 8001dc0:	21ac      	movs	r1, #172	@ 0xac
 8001dc2:	480a      	ldr	r0, [pc, #40]	@ (8001dec <HAL_GPIO_Init+0x134>)
 8001dc4:	f011 fbc2 	bl	801354c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc8:	e1e3      	b.n	8002192 <HAL_GPIO_Init+0x4da>
 8001dca:	bf00      	nop
 8001dcc:	48000400 	.word	0x48000400
 8001dd0:	48000800 	.word	0x48000800
 8001dd4:	48000c00 	.word	0x48000c00
 8001dd8:	48001000 	.word	0x48001000
 8001ddc:	48001400 	.word	0x48001400
 8001de0:	48001800 	.word	0x48001800
 8001de4:	48001c00 	.word	0x48001c00
 8001de8:	48002000 	.word	0x48002000
 8001dec:	08015774 	.word	0x08015774
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 81c2 	beq.w	800218c <HAL_GPIO_Init+0x4d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d005      	beq.n	8001e20 <HAL_GPIO_Init+0x168>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d144      	bne.n	8001eaa <HAL_GPIO_Init+0x1f2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00f      	beq.n	8001e48 <HAL_GPIO_Init+0x190>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d00b      	beq.n	8001e48 <HAL_GPIO_Init+0x190>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d007      	beq.n	8001e48 <HAL_GPIO_Init+0x190>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x190>
 8001e40:	21bb      	movs	r1, #187	@ 0xbb
 8001e42:	4895      	ldr	r0, [pc, #596]	@ (8002098 <HAL_GPIO_Init+0x3e0>)
 8001e44:	f011 fb82 	bl	801354c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e7e:	2201      	movs	r2, #1
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 0201 	and.w	r2, r3, #1
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d027      	beq.n	8001f06 <HAL_GPIO_Init+0x24e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_GPIO_Init+0x21e>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d007      	beq.n	8001ed6 <HAL_GPIO_Init+0x21e>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x21e>
 8001ece:	21dc      	movs	r1, #220	@ 0xdc
 8001ed0:	4871      	ldr	r0, [pc, #452]	@ (8002098 <HAL_GPIO_Init+0x3e0>)
 8001ed2:	f011 fb3b 	bl	801354c <assert_failed>

        temp = GPIOx->PUPDR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d153      	bne.n	8001fba <HAL_GPIO_Init+0x302>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f18:	d023      	beq.n	8001f62 <HAL_GPIO_Init+0x2aa>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a5f      	ldr	r2, [pc, #380]	@ (800209c <HAL_GPIO_Init+0x3e4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01f      	beq.n	8001f62 <HAL_GPIO_Init+0x2aa>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a5e      	ldr	r2, [pc, #376]	@ (80020a0 <HAL_GPIO_Init+0x3e8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01b      	beq.n	8001f62 <HAL_GPIO_Init+0x2aa>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a5d      	ldr	r2, [pc, #372]	@ (80020a4 <HAL_GPIO_Init+0x3ec>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d017      	beq.n	8001f62 <HAL_GPIO_Init+0x2aa>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a5c      	ldr	r2, [pc, #368]	@ (80020a8 <HAL_GPIO_Init+0x3f0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x2aa>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a5b      	ldr	r2, [pc, #364]	@ (80020ac <HAL_GPIO_Init+0x3f4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00f      	beq.n	8001f62 <HAL_GPIO_Init+0x2aa>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a5a      	ldr	r2, [pc, #360]	@ (80020b0 <HAL_GPIO_Init+0x3f8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00b      	beq.n	8001f62 <HAL_GPIO_Init+0x2aa>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a59      	ldr	r2, [pc, #356]	@ (80020b4 <HAL_GPIO_Init+0x3fc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x2aa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a58      	ldr	r2, [pc, #352]	@ (80020b8 <HAL_GPIO_Init+0x400>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x2aa>
 8001f5a:	21e8      	movs	r1, #232	@ 0xe8
 8001f5c:	484e      	ldr	r0, [pc, #312]	@ (8002098 <HAL_GPIO_Init+0x3e0>)
 8001f5e:	f011 faf5 	bl	801354c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d903      	bls.n	8001f72 <HAL_GPIO_Init+0x2ba>
 8001f6a:	21e9      	movs	r1, #233	@ 0xe9
 8001f6c:	484a      	ldr	r0, [pc, #296]	@ (8002098 <HAL_GPIO_Init+0x3e0>)
 8001f6e:	f011 faed 	bl	801354c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	6939      	ldr	r1, [r7, #16]
 8001fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0203 	and.w	r2, r3, #3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80c8 	beq.w	800218c <HAL_GPIO_Init+0x4d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80020bc <HAL_GPIO_Init+0x404>)
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002000:	4a2e      	ldr	r2, [pc, #184]	@ (80020bc <HAL_GPIO_Init+0x404>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6613      	str	r3, [r2, #96]	@ 0x60
 8002008:	4b2c      	ldr	r3, [pc, #176]	@ (80020bc <HAL_GPIO_Init+0x404>)
 800200a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002014:	4a2a      	ldr	r2, [pc, #168]	@ (80020c0 <HAL_GPIO_Init+0x408>)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800203e:	d041      	beq.n	80020c4 <HAL_GPIO_Init+0x40c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a16      	ldr	r2, [pc, #88]	@ (800209c <HAL_GPIO_Init+0x3e4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d025      	beq.n	8002094 <HAL_GPIO_Init+0x3dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a15      	ldr	r2, [pc, #84]	@ (80020a0 <HAL_GPIO_Init+0x3e8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d01f      	beq.n	8002090 <HAL_GPIO_Init+0x3d8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <HAL_GPIO_Init+0x3ec>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d019      	beq.n	800208c <HAL_GPIO_Init+0x3d4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a13      	ldr	r2, [pc, #76]	@ (80020a8 <HAL_GPIO_Init+0x3f0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <HAL_GPIO_Init+0x3d0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <HAL_GPIO_Init+0x3f4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00d      	beq.n	8002084 <HAL_GPIO_Init+0x3cc>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a11      	ldr	r2, [pc, #68]	@ (80020b0 <HAL_GPIO_Init+0x3f8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0x3c8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a10      	ldr	r2, [pc, #64]	@ (80020b4 <HAL_GPIO_Init+0x3fc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_GPIO_Init+0x3c4>
 8002078:	2307      	movs	r3, #7
 800207a:	e024      	b.n	80020c6 <HAL_GPIO_Init+0x40e>
 800207c:	2308      	movs	r3, #8
 800207e:	e022      	b.n	80020c6 <HAL_GPIO_Init+0x40e>
 8002080:	2306      	movs	r3, #6
 8002082:	e020      	b.n	80020c6 <HAL_GPIO_Init+0x40e>
 8002084:	2305      	movs	r3, #5
 8002086:	e01e      	b.n	80020c6 <HAL_GPIO_Init+0x40e>
 8002088:	2304      	movs	r3, #4
 800208a:	e01c      	b.n	80020c6 <HAL_GPIO_Init+0x40e>
 800208c:	2303      	movs	r3, #3
 800208e:	e01a      	b.n	80020c6 <HAL_GPIO_Init+0x40e>
 8002090:	2302      	movs	r3, #2
 8002092:	e018      	b.n	80020c6 <HAL_GPIO_Init+0x40e>
 8002094:	2301      	movs	r3, #1
 8002096:	e016      	b.n	80020c6 <HAL_GPIO_Init+0x40e>
 8002098:	08015774 	.word	0x08015774
 800209c:	48000400 	.word	0x48000400
 80020a0:	48000800 	.word	0x48000800
 80020a4:	48000c00 	.word	0x48000c00
 80020a8:	48001000 	.word	0x48001000
 80020ac:	48001400 	.word	0x48001400
 80020b0:	48001800 	.word	0x48001800
 80020b4:	48001c00 	.word	0x48001c00
 80020b8:	48002000 	.word	0x48002000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010000 	.word	0x40010000
 80020c4:	2300      	movs	r3, #0
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	f002 0203 	and.w	r2, r2, #3
 80020cc:	0092      	lsls	r2, r2, #2
 80020ce:	4093      	lsls	r3, r2
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020d6:	4935      	ldr	r1, [pc, #212]	@ (80021ac <HAL_GPIO_Init+0x4f4>)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020e4:	4b32      	ldr	r3, [pc, #200]	@ (80021b0 <HAL_GPIO_Init+0x4f8>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002108:	4a29      	ldr	r2, [pc, #164]	@ (80021b0 <HAL_GPIO_Init+0x4f8>)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800210e:	4b28      	ldr	r3, [pc, #160]	@ (80021b0 <HAL_GPIO_Init+0x4f8>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002132:	4a1f      	ldr	r2, [pc, #124]	@ (80021b0 <HAL_GPIO_Init+0x4f8>)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002138:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <HAL_GPIO_Init+0x4f8>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x4a4>
        {
          temp |= iocurrent;
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <HAL_GPIO_Init+0x4f8>)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002162:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <HAL_GPIO_Init+0x4f8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x4ce>
        {
          temp |= iocurrent;
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <HAL_GPIO_Init+0x4f8>)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3301      	adds	r3, #1
 8002190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	f47f ae27 	bne.w	8001df0 <HAL_GPIO_Init+0x138>
  }
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40010400 	.word	0x40010400

080021b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d104      	bne.n	80021d0 <HAL_GPIO_ReadPin+0x1c>
 80021c6:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 80021ca:	4809      	ldr	r0, [pc, #36]	@ (80021f0 <HAL_GPIO_ReadPin+0x3c>)
 80021cc:	f011 f9be 	bl	801354c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e001      	b.n	80021e6 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	08015774 	.word	0x08015774

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d104      	bne.n	8002214 <HAL_GPIO_WritePin+0x20>
 800220a:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 800220e:	480e      	ldr	r0, [pc, #56]	@ (8002248 <HAL_GPIO_WritePin+0x54>)
 8002210:	f011 f99c 	bl	801354c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <HAL_GPIO_WritePin+0x36>
 800221a:	787b      	ldrb	r3, [r7, #1]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d004      	beq.n	800222a <HAL_GPIO_WritePin+0x36>
 8002220:	f240 11af 	movw	r1, #431	@ 0x1af
 8002224:	4808      	ldr	r0, [pc, #32]	@ (8002248 <HAL_GPIO_WritePin+0x54>)
 8002226:	f011 f991 	bl	801354c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800222a:	787b      	ldrb	r3, [r7, #1]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002230:	887a      	ldrh	r2, [r7, #2]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002236:	e002      	b.n	800223e <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002238:	887a      	ldrh	r2, [r7, #2]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	08015774 	.word	0x08015774

0800224c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e115      	b.n	800248a <HAL_I2C_Init+0x23e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a8c      	ldr	r2, [pc, #560]	@ (8002494 <HAL_I2C_Init+0x248>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <HAL_I2C_Init+0x44>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a8a      	ldr	r2, [pc, #552]	@ (8002498 <HAL_I2C_Init+0x24c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00e      	beq.n	8002290 <HAL_I2C_Init+0x44>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a89      	ldr	r2, [pc, #548]	@ (800249c <HAL_I2C_Init+0x250>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d009      	beq.n	8002290 <HAL_I2C_Init+0x44>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a87      	ldr	r2, [pc, #540]	@ (80024a0 <HAL_I2C_Init+0x254>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_I2C_Init+0x44>
 8002286:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800228a:	4886      	ldr	r0, [pc, #536]	@ (80024a4 <HAL_I2C_Init+0x258>)
 800228c:	f011 f95e 	bl	801354c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002298:	d304      	bcc.n	80022a4 <HAL_I2C_Init+0x58>
 800229a:	f240 2121 	movw	r1, #545	@ 0x221
 800229e:	4881      	ldr	r0, [pc, #516]	@ (80024a4 <HAL_I2C_Init+0x258>)
 80022a0:	f011 f954 	bl	801354c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d008      	beq.n	80022be <HAL_I2C_Init+0x72>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d004      	beq.n	80022be <HAL_I2C_Init+0x72>
 80022b4:	f240 2122 	movw	r1, #546	@ 0x222
 80022b8:	487a      	ldr	r0, [pc, #488]	@ (80024a4 <HAL_I2C_Init+0x258>)
 80022ba:	f011 f947 	bl	801354c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_I2C_Init+0x8e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022ce:	d004      	beq.n	80022da <HAL_I2C_Init+0x8e>
 80022d0:	f240 2123 	movw	r1, #547	@ 0x223
 80022d4:	4873      	ldr	r0, [pc, #460]	@ (80024a4 <HAL_I2C_Init+0x258>)
 80022d6:	f011 f939 	bl	801354c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	2bff      	cmp	r3, #255	@ 0xff
 80022e0:	d904      	bls.n	80022ec <HAL_I2C_Init+0xa0>
 80022e2:	f44f 7109 	mov.w	r1, #548	@ 0x224
 80022e6:	486f      	ldr	r0, [pc, #444]	@ (80024a4 <HAL_I2C_Init+0x258>)
 80022e8:	f011 f930 	bl	801354c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_I2C_Init+0xea>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d01c      	beq.n	8002336 <HAL_I2C_Init+0xea>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d018      	beq.n	8002336 <HAL_I2C_Init+0xea>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d014      	beq.n	8002336 <HAL_I2C_Init+0xea>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d010      	beq.n	8002336 <HAL_I2C_Init+0xea>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b05      	cmp	r3, #5
 800231a:	d00c      	beq.n	8002336 <HAL_I2C_Init+0xea>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b06      	cmp	r3, #6
 8002322:	d008      	beq.n	8002336 <HAL_I2C_Init+0xea>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b07      	cmp	r3, #7
 800232a:	d004      	beq.n	8002336 <HAL_I2C_Init+0xea>
 800232c:	f240 2125 	movw	r1, #549	@ 0x225
 8002330:	485c      	ldr	r0, [pc, #368]	@ (80024a4 <HAL_I2C_Init+0x258>)
 8002332:	f011 f90b 	bl	801354c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_I2C_Init+0x106>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002346:	d004      	beq.n	8002352 <HAL_I2C_Init+0x106>
 8002348:	f240 2126 	movw	r1, #550	@ 0x226
 800234c:	4855      	ldr	r0, [pc, #340]	@ (80024a4 <HAL_I2C_Init+0x258>)
 800234e:	f011 f8fd 	bl	801354c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_I2C_Init+0x122>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002362:	d004      	beq.n	800236e <HAL_I2C_Init+0x122>
 8002364:	f240 2127 	movw	r1, #551	@ 0x227
 8002368:	484e      	ldr	r0, [pc, #312]	@ (80024a4 <HAL_I2C_Init+0x258>)
 800236a:	f011 f8ef 	bl	801354c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f010 fdc0 	bl	8012f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2224      	movs	r2, #36	@ 0x24
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	e006      	b.n	80023e4 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d108      	bne.n	80023fe <HAL_I2C_Init+0x1b2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	e007      	b.n	800240e <HAL_I2C_Init+0x1c2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800240c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800241c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002420:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002430:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69d9      	ldr	r1, [r3, #28]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1a      	ldr	r2, [r3, #32]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40005400 	.word	0x40005400
 8002498:	40005800 	.word	0x40005800
 800249c:	40005c00 	.word	0x40005c00
 80024a0:	40008400 	.word	0x40008400
 80024a4:	080157b0 	.word	0x080157b0

080024a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	461a      	mov	r2, r3
 80024b4:	460b      	mov	r3, r1
 80024b6:	817b      	strh	r3, [r7, #10]
 80024b8:	4613      	mov	r3, r2
 80024ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	f040 80fd 	bne.w	80026c4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_I2C_Master_Transmit+0x30>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e0f6      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024e0:	f7fe f88a 	bl	80005f8 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2319      	movs	r3, #25
 80024ec:	2201      	movs	r2, #1
 80024ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fa0a 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0e1      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2221      	movs	r2, #33	@ 0x21
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2210      	movs	r2, #16
 800250e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	893a      	ldrh	r2, [r7, #8]
 8002522:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	2bff      	cmp	r3, #255	@ 0xff
 8002532:	d906      	bls.n	8002542 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	22ff      	movs	r2, #255	@ 0xff
 8002538:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800253a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e007      	b.n	8002552 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800254c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002550:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002556:	2b00      	cmp	r3, #0
 8002558:	d024      	beq.n	80025a4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	8979      	ldrh	r1, [r7, #10]
 8002596:	4b4e      	ldr	r3, [pc, #312]	@ (80026d0 <HAL_I2C_Master_Transmit+0x228>)
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fc05 	bl	8002dac <I2C_TransferConfig>
 80025a2:	e066      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	4b48      	ldr	r3, [pc, #288]	@ (80026d0 <HAL_I2C_Master_Transmit+0x228>)
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fbfa 	bl	8002dac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025b8:	e05b      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	6a39      	ldr	r1, [r7, #32]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f9fd 	bl	80029be <I2C_WaitOnTXISFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07b      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d034      	beq.n	8002672 <HAL_I2C_Master_Transmit+0x1ca>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d130      	bne.n	8002672 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2200      	movs	r2, #0
 8002618:	2180      	movs	r1, #128	@ 0x80
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f976 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e04d      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	2bff      	cmp	r3, #255	@ 0xff
 8002632:	d90e      	bls.n	8002652 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	22ff      	movs	r2, #255	@ 0xff
 8002638:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263e:	b2da      	uxtb	r2, r3
 8002640:	8979      	ldrh	r1, [r7, #10]
 8002642:	2300      	movs	r3, #0
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 fbae 	bl	8002dac <I2C_TransferConfig>
 8002650:	e00f      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002660:	b2da      	uxtb	r2, r3
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	2300      	movs	r3, #0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fb9d 	bl	8002dac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d19e      	bne.n	80025ba <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	6a39      	ldr	r1, [r7, #32]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f9e3 	bl	8002a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e01a      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2220      	movs	r2, #32
 8002696:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <HAL_I2C_Master_Transmit+0x22c>)
 80026a4:	400b      	ands	r3, r1
 80026a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	80002000 	.word	0x80002000
 80026d4:	fe00e800 	.word	0xfe00e800

080026d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	461a      	mov	r2, r3
 80026e4:	460b      	mov	r3, r1
 80026e6:	817b      	strh	r3, [r7, #10]
 80026e8:	4613      	mov	r3, r2
 80026ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	f040 80db 	bne.w	80028b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_I2C_Master_Receive+0x30>
 8002704:	2302      	movs	r3, #2
 8002706:	e0d4      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002710:	f7fd ff72 	bl	80005f8 <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2319      	movs	r3, #25
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f8f2 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0bf      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2222      	movs	r2, #34	@ 0x22
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2210      	movs	r2, #16
 800273e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	893a      	ldrh	r2, [r7, #8]
 8002752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	2bff      	cmp	r3, #255	@ 0xff
 8002762:	d90e      	bls.n	8002782 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276e:	b2da      	uxtb	r2, r3
 8002770:	8979      	ldrh	r1, [r7, #10]
 8002772:	4b52      	ldr	r3, [pc, #328]	@ (80028bc <HAL_I2C_Master_Receive+0x1e4>)
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fb16 	bl	8002dac <I2C_TransferConfig>
 8002780:	e06d      	b.n	800285e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	b2da      	uxtb	r2, r3
 8002792:	8979      	ldrh	r1, [r7, #10]
 8002794:	4b49      	ldr	r3, [pc, #292]	@ (80028bc <HAL_I2C_Master_Receive+0x1e4>)
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fb05 	bl	8002dac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027a2:	e05c      	b.n	800285e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	6a39      	ldr	r1, [r7, #32]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f993 	bl	8002ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e07c      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d034      	beq.n	800285e <HAL_I2C_Master_Receive+0x186>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d130      	bne.n	800285e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	@ 0x80
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f880 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e04d      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	2bff      	cmp	r3, #255	@ 0xff
 800281e:	d90e      	bls.n	800283e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	22ff      	movs	r2, #255	@ 0xff
 8002824:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	b2da      	uxtb	r2, r3
 800282c:	8979      	ldrh	r1, [r7, #10]
 800282e:	2300      	movs	r3, #0
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fab8 	bl	8002dac <I2C_TransferConfig>
 800283c:	e00f      	b.n	800285e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	b2da      	uxtb	r2, r3
 800284e:	8979      	ldrh	r1, [r7, #10]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 faa7 	bl	8002dac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d19d      	bne.n	80027a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	6a39      	ldr	r1, [r7, #32]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f8ed 	bl	8002a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e01a      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2220      	movs	r2, #32
 8002882:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_I2C_Master_Receive+0x1e8>)
 8002890:	400b      	ands	r3, r1
 8002892:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	80002400 	.word	0x80002400
 80028c0:	fe00e800 	.word	0xfe00e800

080028c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d103      	bne.n	80028e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d007      	beq.n	8002900 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	619a      	str	r2, [r3, #24]
  }
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800291c:	e03b      	b.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f962 	bl	8002bec <I2C_IsErrorOccurred>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e041      	b.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d02d      	beq.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293a:	f7fd fe5d 	bl	80005f8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d302      	bcc.n	8002950 <I2C_WaitOnFlagUntilTimeout+0x44>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d122      	bne.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	429a      	cmp	r2, r3
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	429a      	cmp	r2, r3
 800296c:	d113      	bne.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	f043 0220 	orr.w	r2, r3, #32
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00f      	b.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699a      	ldr	r2, [r3, #24]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4013      	ands	r3, r2
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d0b4      	beq.n	800291e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029ca:	e033      	b.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f90b 	bl	8002bec <I2C_IsErrorOccurred>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e031      	b.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d025      	beq.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e8:	f7fd fe06 	bl	80005f8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d302      	bcc.n	80029fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d11a      	bne.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d013      	beq.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e007      	b.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d1c4      	bne.n	80029cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a58:	e02f      	b.n	8002aba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f8c4 	bl	8002bec <I2C_IsErrorOccurred>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e02d      	b.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7fd fdc3 	bl	80005f8 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11a      	bne.n	8002aba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	d013      	beq.n	8002aba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f043 0220 	orr.w	r2, r3, #32
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e007      	b.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d1c8      	bne.n	8002a5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ae4:	e071      	b.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f87e 	bl	8002bec <I2C_IsErrorOccurred>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d13b      	bne.n	8002b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d138      	bne.n	8002b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d105      	bne.n	8002b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d121      	bne.n	8002b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2204      	movs	r2, #4
 8002b42:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002b58:	400b      	ands	r3, r1
 8002b5a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	75fb      	strb	r3, [r7, #23]
 8002b78:	e002      	b.n	8002b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002b80:	f7fd fd3a 	bl	80005f8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d302      	bcc.n	8002b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d119      	bne.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d00f      	beq.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	f043 0220 	orr.w	r2, r3, #32
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d002      	beq.n	8002bde <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d083      	beq.n	8002ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	fe00e800 	.word	0xfe00e800

08002bec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d068      	beq.n	8002cea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c20:	e049      	b.n	8002cb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d045      	beq.n	8002cb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c2a:	f7fd fce5 	bl	80005f8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d302      	bcc.n	8002c40 <I2C_IsErrorOccurred+0x54>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d13a      	bne.n	8002cb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c62:	d121      	bne.n	8002ca8 <I2C_IsErrorOccurred+0xbc>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c6a:	d01d      	beq.n	8002ca8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d01a      	beq.n	8002ca8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c82:	f7fd fcb9 	bl	80005f8 <HAL_GetTick>
 8002c86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c88:	e00e      	b.n	8002ca8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c8a:	f7fd fcb5 	bl	80005f8 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b19      	cmp	r3, #25
 8002c96:	d907      	bls.n	8002ca8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f043 0320 	orr.w	r3, r3, #32
 8002c9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002ca6:	e006      	b.n	8002cb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d1e9      	bne.n	8002c8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d003      	beq.n	8002ccc <I2C_IsErrorOccurred+0xe0>
 8002cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0aa      	beq.n	8002c22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	f043 0302 	orr.w	r3, r3, #2
 8002d46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01c      	beq.n	8002d9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff fdaf 	bl	80028c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <I2C_IsErrorOccurred+0x1bc>)
 8002d72:	400b      	ands	r3, r1
 8002d74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3728      	adds	r7, #40	@ 0x28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	fe00e800 	.word	0xfe00e800

08002dac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	817b      	strh	r3, [r7, #10]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8002e80 <I2C_TransferConfig+0xd4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <I2C_TransferConfig+0x44>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002e84 <I2C_TransferConfig+0xd8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <I2C_TransferConfig+0x44>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8002e88 <I2C_TransferConfig+0xdc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <I2C_TransferConfig+0x44>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e8c <I2C_TransferConfig+0xe0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <I2C_TransferConfig+0x44>
 8002de6:	f641 41a9 	movw	r1, #7337	@ 0x1ca9
 8002dea:	4829      	ldr	r0, [pc, #164]	@ (8002e90 <I2C_TransferConfig+0xe4>)
 8002dec:	f010 fbae 	bl	801354c <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df6:	d00b      	beq.n	8002e10 <I2C_TransferConfig+0x64>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dfe:	d007      	beq.n	8002e10 <I2C_TransferConfig+0x64>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <I2C_TransferConfig+0x64>
 8002e06:	f641 41aa 	movw	r1, #7338	@ 0x1caa
 8002e0a:	4821      	ldr	r0, [pc, #132]	@ (8002e90 <I2C_TransferConfig+0xe4>)
 8002e0c:	f010 fb9e 	bl	801354c <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	4a20      	ldr	r2, [pc, #128]	@ (8002e94 <I2C_TransferConfig+0xe8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00f      	beq.n	8002e38 <I2C_TransferConfig+0x8c>
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002e98 <I2C_TransferConfig+0xec>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00b      	beq.n	8002e38 <I2C_TransferConfig+0x8c>
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	4a1e      	ldr	r2, [pc, #120]	@ (8002e9c <I2C_TransferConfig+0xf0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <I2C_TransferConfig+0x8c>
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <I2C_TransferConfig+0x8c>
 8002e2e:	f641 41ab 	movw	r1, #7339	@ 0x1cab
 8002e32:	4817      	ldr	r0, [pc, #92]	@ (8002e90 <I2C_TransferConfig+0xe4>)
 8002e34:	f010 fb8a 	bl	801354c <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e38:	897b      	ldrh	r3, [r7, #10]
 8002e3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e3e:	7a7b      	ldrb	r3, [r7, #9]
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e46:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e54:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	0d5b      	lsrs	r3, r3, #21
 8002e60:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <I2C_TransferConfig+0xf4>)
 8002e66:	430b      	orrs	r3, r1
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	ea02 0103 	and.w	r1, r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e78:	bf00      	nop
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40005400 	.word	0x40005400
 8002e84:	40005800 	.word	0x40005800
 8002e88:	40005c00 	.word	0x40005c00
 8002e8c:	40008400 	.word	0x40008400
 8002e90:	080157b0 	.word	0x080157b0
 8002e94:	80004000 	.word	0x80004000
 8002e98:	80002400 	.word	0x80002400
 8002e9c:	80002000 	.word	0x80002000
 8002ea0:	03ff63ff 	.word	0x03ff63ff

08002ea4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a32      	ldr	r2, [pc, #200]	@ (8002f7c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d012      	beq.n	8002ede <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a30      	ldr	r2, [pc, #192]	@ (8002f80 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8002f84 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d008      	beq.n	8002ede <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f88 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d003      	beq.n	8002ede <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002ed6:	2163      	movs	r1, #99	@ 0x63
 8002ed8:	482c      	ldr	r0, [pc, #176]	@ (8002f8c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8002eda:	f010 fb37 	bl	801354c <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eea:	d003      	beq.n	8002ef4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002eec:	2164      	movs	r1, #100	@ 0x64
 8002eee:	4827      	ldr	r0, [pc, #156]	@ (8002f8c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8002ef0:	f010 fb2c 	bl	801354c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d138      	bne.n	8002f72 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e032      	b.n	8002f74 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2224      	movs	r2, #36	@ 0x24
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f3c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40005400 	.word	0x40005400
 8002f80:	40005800 	.word	0x40005800
 8002f84:	40005c00 	.word	0x40005c00
 8002f88:	40008400 	.word	0x40008400
 8002f8c:	080157e8 	.word	0x080157e8

08002f90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a31      	ldr	r2, [pc, #196]	@ (8003064 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d012      	beq.n	8002fca <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8003068 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2e      	ldr	r2, [pc, #184]	@ (800306c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d008      	beq.n	8002fca <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8003070 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d003      	beq.n	8002fca <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002fc2:	2191      	movs	r1, #145	@ 0x91
 8002fc4:	482b      	ldr	r0, [pc, #172]	@ (8003074 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8002fc6:	f010 fac1 	bl	801354c <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b0f      	cmp	r3, #15
 8002fce:	d903      	bls.n	8002fd8 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8002fd0:	2192      	movs	r1, #146	@ 0x92
 8002fd2:	4828      	ldr	r0, [pc, #160]	@ (8003074 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8002fd4:	f010 faba 	bl	801354c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d139      	bne.n	8003058 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e033      	b.n	800305a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2224      	movs	r2, #36	@ 0x24
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003020:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40005400 	.word	0x40005400
 8003068:	40005800 	.word	0x40005800
 800306c:	40005c00 	.word	0x40005c00
 8003070:	40008400 	.word	0x40008400
 8003074:	080157e8 	.word	0x080157e8

08003078 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800307c:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a04      	ldr	r2, [pc, #16]	@ (8003094 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40007000 	.word	0x40007000

08003098 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800309c:	4b0d      	ldr	r3, [pc, #52]	@ (80030d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a8:	d102      	bne.n	80030b0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80030aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030ae:	e00b      	b.n	80030c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80030b0:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80030b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030be:	d102      	bne.n	80030c6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80030c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030c4:	e000      	b.n	80030c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80030c6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40007000 	.word	0x40007000

080030d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_PWREx_ControlVoltageScaling+0x26>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ec:	d007      	beq.n	80030fe <HAL_PWREx_ControlVoltageScaling+0x26>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f4:	d003      	beq.n	80030fe <HAL_PWREx_ControlVoltageScaling+0x26>
 80030f6:	21a7      	movs	r1, #167	@ 0xa7
 80030f8:	484d      	ldr	r0, [pc, #308]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x158>)
 80030fa:	f010 fa27 	bl	801354c <assert_failed>

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d141      	bne.n	8003188 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003104:	4b4b      	ldr	r3, [pc, #300]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800310c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003110:	d131      	bne.n	8003176 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003112:	4b48      	ldr	r3, [pc, #288]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003118:	4a46      	ldr	r2, [pc, #280]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800311a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800311e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003122:	4b44      	ldr	r3, [pc, #272]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800312a:	4a42      	ldr	r2, [pc, #264]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800312c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003130:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003132:	4b41      	ldr	r3, [pc, #260]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2232      	movs	r2, #50	@ 0x32
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	4a3f      	ldr	r2, [pc, #252]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x164>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0c9b      	lsrs	r3, r3, #18
 8003144:	3301      	adds	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003148:	e002      	b.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3b01      	subs	r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003150:	4b38      	ldr	r3, [pc, #224]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315c:	d102      	bne.n	8003164 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f2      	bne.n	800314a <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003164:	4b33      	ldr	r3, [pc, #204]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003170:	d158      	bne.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e057      	b.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003176:	4b2f      	ldr	r3, [pc, #188]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800317c:	4a2d      	ldr	r2, [pc, #180]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800317e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003182:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003186:	e04d      	b.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800318e:	d141      	bne.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003190:	4b28      	ldr	r3, [pc, #160]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319c:	d131      	bne.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800319e:	4b25      	ldr	r3, [pc, #148]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031a4:	4a23      	ldr	r2, [pc, #140]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ae:	4b21      	ldr	r3, [pc, #132]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80031be:	4b1e      	ldr	r3, [pc, #120]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2232      	movs	r2, #50	@ 0x32
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	4a1c      	ldr	r2, [pc, #112]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x164>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0c9b      	lsrs	r3, r3, #18
 80031d0:	3301      	adds	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d4:	e002      	b.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3b01      	subs	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031dc:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e8:	d102      	bne.n	80031f0 <HAL_PWREx_ControlVoltageScaling+0x118>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f2      	bne.n	80031d6 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031f0:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fc:	d112      	bne.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e011      	b.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003202:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003208:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800320e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003212:	e007      	b.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003214:	4b07      	ldr	r3, [pc, #28]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800321c:	4a05      	ldr	r2, [pc, #20]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800321e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	08015824 	.word	0x08015824
 8003234:	40007000 	.word	0x40007000
 8003238:	20000010 	.word	0x20000010
 800323c:	431bde83 	.word	0x431bde83

08003240 <HAL_PWREx_EnableBatteryCharging>:
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_5     5 kOhms resistor
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_1_5 1.5 kOhms resistor
  * @retval None
  */
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_PWREx_EnableBatteryCharging+0x20>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003254:	d004      	beq.n	8003260 <HAL_PWREx_EnableBatteryCharging+0x20>
 8003256:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800325a:	480a      	ldr	r0, [pc, #40]	@ (8003284 <HAL_PWREx_EnableBatteryCharging+0x44>)
 800325c:	f010 f976 	bl	801354c <assert_failed>

  /* Specify resistor selection */
  MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
 8003260:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <HAL_PWREx_EnableBatteryCharging+0x48>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003268:	4907      	ldr	r1, [pc, #28]	@ (8003288 <HAL_PWREx_EnableBatteryCharging+0x48>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	60cb      	str	r3, [r1, #12]

  /* Enable battery charging */
  SET_BIT(PWR->CR4, PWR_CR4_VBE);
 8003270:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <HAL_PWREx_EnableBatteryCharging+0x48>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a04      	ldr	r2, [pc, #16]	@ (8003288 <HAL_PWREx_EnableBatteryCharging+0x48>)
 8003276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800327a:	60d3      	str	r3, [r2, #12]
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	08015824 	.word	0x08015824
 8003288:	40007000 	.word	0x40007000

0800328c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003290:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a04      	ldr	r2, [pc, #16]	@ (80032a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800329a:	6053      	str	r3, [r2, #4]
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40007000 	.word	0x40007000

080032ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f000 bd3e 	b.w	8003d3c <HAL_RCC_OscConfig+0xa90>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_RCC_OscConfig+0x2e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80032ce:	d904      	bls.n	80032da <HAL_RCC_OscConfig+0x2e>
 80032d0:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 80032d4:	489b      	ldr	r0, [pc, #620]	@ (8003544 <HAL_RCC_OscConfig+0x298>)
 80032d6:	f010 f939 	bl	801354c <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032da:	4b9b      	ldr	r3, [pc, #620]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e4:	4b98      	ldr	r3, [pc, #608]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 813f 	beq.w	800357a <HAL_RCC_OscConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCC_OscConfig+0x6a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d004      	beq.n	8003316 <HAL_RCC_OscConfig+0x6a>
 800330c:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8003310:	488c      	ldr	r0, [pc, #560]	@ (8003544 <HAL_RCC_OscConfig+0x298>)
 8003312:	f010 f91b 	bl	801354c <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	2bff      	cmp	r3, #255	@ 0xff
 800331c:	d904      	bls.n	8003328 <HAL_RCC_OscConfig+0x7c>
 800331e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8003322:	4888      	ldr	r0, [pc, #544]	@ (8003544 <HAL_RCC_OscConfig+0x298>)
 8003324:	f010 f912 	bl	801354c <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d030      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	2b10      	cmp	r3, #16
 8003336:	d02c      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	2b20      	cmp	r3, #32
 800333e:	d028      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	2b30      	cmp	r3, #48	@ 0x30
 8003346:	d024      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	2b40      	cmp	r3, #64	@ 0x40
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	2b50      	cmp	r3, #80	@ 0x50
 8003356:	d01c      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	2b60      	cmp	r3, #96	@ 0x60
 800335e:	d018      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	2b70      	cmp	r3, #112	@ 0x70
 8003366:	d014      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	2b80      	cmp	r3, #128	@ 0x80
 800336e:	d010      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	2b90      	cmp	r3, #144	@ 0x90
 8003376:	d00c      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	2ba0      	cmp	r3, #160	@ 0xa0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	2bb0      	cmp	r3, #176	@ 0xb0
 8003386:	d004      	beq.n	8003392 <HAL_RCC_OscConfig+0xe6>
 8003388:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800338c:	486d      	ldr	r0, [pc, #436]	@ (8003544 <HAL_RCC_OscConfig+0x298>)
 800338e:	f010 f8dd 	bl	801354c <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_RCC_OscConfig+0xfc>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2b0c      	cmp	r3, #12
 800339c:	f040 808f 	bne.w	80034be <HAL_RCC_OscConfig+0x212>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	f040 808b 	bne.w	80034be <HAL_RCC_OscConfig+0x212>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033a8:	4b67      	ldr	r3, [pc, #412]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <HAL_RCC_OscConfig+0x116>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f000 bcbd 	b.w	8003d3c <HAL_RCC_OscConfig+0xa90>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	4b60      	ldr	r3, [pc, #384]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <HAL_RCC_OscConfig+0x130>
 80033d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033da:	e005      	b.n	80033e8 <HAL_RCC_OscConfig+0x13c>
 80033dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 80033de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d224      	bcs.n	8003436 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 ffaf 	bl	8004354 <RCC_SetFlashLatencyFromMSIRange>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f000 bc9d 	b.w	8003d3c <HAL_RCC_OscConfig+0xa90>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003402:	4b51      	ldr	r3, [pc, #324]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a50      	ldr	r2, [pc, #320]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b4e      	ldr	r3, [pc, #312]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	494b      	ldr	r1, [pc, #300]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003420:	4b49      	ldr	r3, [pc, #292]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	4946      	ldr	r1, [pc, #280]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
 8003434:	e026      	b.n	8003484 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003436:	4b44      	ldr	r3, [pc, #272]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a43      	ldr	r2, [pc, #268]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b41      	ldr	r3, [pc, #260]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	493e      	ldr	r1, [pc, #248]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003454:	4b3c      	ldr	r3, [pc, #240]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	4939      	ldr	r1, [pc, #228]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 ff6e 	bl	8004354 <RCC_SetFlashLatencyFromMSIRange>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f000 bc5c 	b.w	8003d3c <HAL_RCC_OscConfig+0xa90>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003484:	f000 fe60 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b2f      	ldr	r3, [pc, #188]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	492d      	ldr	r1, [pc, #180]	@ (800354c <HAL_RCC_OscConfig+0x2a0>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
 80034a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003550 <HAL_RCC_OscConfig+0x2a4>)
 80034a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <HAL_RCC_OscConfig+0x2a8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f010 fc9f 	bl	8013dec <HAL_InitTick>
 80034ae:	4603      	mov	r3, r0
 80034b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05f      	beq.n	8003578 <HAL_RCC_OscConfig+0x2cc>
        {
          return status;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	f000 bc3f 	b.w	8003d3c <HAL_RCC_OscConfig+0xa90>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d033      	beq.n	800352e <HAL_RCC_OscConfig+0x282>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034c6:	4b20      	ldr	r3, [pc, #128]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034d2:	f7fd f891 	bl	80005f8 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034d8:	e009      	b.n	80034ee <HAL_RCC_OscConfig+0x242>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034da:	f7fd f88d 	bl	80005f8 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d902      	bls.n	80034ee <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	f000 bc27 	b.w	8003d3c <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ee:	4b16      	ldr	r3, [pc, #88]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ef      	beq.n	80034da <HAL_RCC_OscConfig+0x22e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034fa:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b10      	ldr	r3, [pc, #64]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	490d      	ldr	r1, [pc, #52]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	4908      	ldr	r1, [pc, #32]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003528:	4313      	orrs	r3, r2
 800352a:	604b      	str	r3, [r1, #4]
 800352c:	e025      	b.n	800357a <HAL_RCC_OscConfig+0x2ce>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a05      	ldr	r2, [pc, #20]	@ (8003548 <HAL_RCC_OscConfig+0x29c>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800353a:	f7fd f85d 	bl	80005f8 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003540:	e013      	b.n	800356a <HAL_RCC_OscConfig+0x2be>
 8003542:	bf00      	nop
 8003544:	08015860 	.word	0x08015860
 8003548:	40021000 	.word	0x40021000
 800354c:	080160ac 	.word	0x080160ac
 8003550:	20000010 	.word	0x20000010
 8003554:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003558:	f7fd f84e 	bl	80005f8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e3e8      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800356a:	4b97      	ldr	r3, [pc, #604]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x2ac>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x2ce>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d07e      	beq.n	8003684 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00e      	beq.n	80035ac <HAL_RCC_OscConfig+0x300>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003596:	d009      	beq.n	80035ac <HAL_RCC_OscConfig+0x300>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a0:	d004      	beq.n	80035ac <HAL_RCC_OscConfig+0x300>
 80035a2:	f240 2119 	movw	r1, #537	@ 0x219
 80035a6:	4889      	ldr	r0, [pc, #548]	@ (80037cc <HAL_RCC_OscConfig+0x520>)
 80035a8:	f00f ffd0 	bl	801354c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d005      	beq.n	80035be <HAL_RCC_OscConfig+0x312>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d10e      	bne.n	80035d6 <HAL_RCC_OscConfig+0x32a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d10b      	bne.n	80035d6 <HAL_RCC_OscConfig+0x32a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035be:	4b82      	ldr	r3, [pc, #520]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d05b      	beq.n	8003682 <HAL_RCC_OscConfig+0x3d6>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d157      	bne.n	8003682 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e3b2      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x342>
 80035e0:	4b79      	ldr	r3, [pc, #484]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a78      	ldr	r2, [pc, #480]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	e01d      	b.n	800362a <HAL_RCC_OscConfig+0x37e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f6:	d10c      	bne.n	8003612 <HAL_RCC_OscConfig+0x366>
 80035f8:	4b73      	ldr	r3, [pc, #460]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a72      	ldr	r2, [pc, #456]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 80035fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	4b70      	ldr	r3, [pc, #448]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a6f      	ldr	r2, [pc, #444]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 800360a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	e00b      	b.n	800362a <HAL_RCC_OscConfig+0x37e>
 8003612:	4b6d      	ldr	r3, [pc, #436]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6c      	ldr	r2, [pc, #432]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	4b6a      	ldr	r3, [pc, #424]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a69      	ldr	r2, [pc, #420]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003624:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003628:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d013      	beq.n	800365a <HAL_RCC_OscConfig+0x3ae>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fc ffe1 	bl	80005f8 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363a:	f7fc ffdd 	bl	80005f8 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b64      	cmp	r3, #100	@ 0x64
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e377      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364c:	4b5e      	ldr	r3, [pc, #376]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x38e>
 8003658:	e014      	b.n	8003684 <HAL_RCC_OscConfig+0x3d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fc ffcd 	bl	80005f8 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x3c8>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003662:	f7fc ffc9 	bl	80005f8 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	@ 0x64
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x3c8>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e363      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003674:	4b54      	ldr	r3, [pc, #336]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x3b6>
 8003680:	e000      	b.n	8003684 <HAL_RCC_OscConfig+0x3d8>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003682:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d077      	beq.n	8003780 <HAL_RCC_OscConfig+0x4d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HAL_RCC_OscConfig+0x400>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a0:	d004      	beq.n	80036ac <HAL_RCC_OscConfig+0x400>
 80036a2:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80036a6:	4849      	ldr	r0, [pc, #292]	@ (80037cc <HAL_RCC_OscConfig+0x520>)
 80036a8:	f00f ff50 	bl	801354c <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80036b2:	d904      	bls.n	80036be <HAL_RCC_OscConfig+0x412>
 80036b4:	f240 214d 	movw	r1, #589	@ 0x24d
 80036b8:	4844      	ldr	r0, [pc, #272]	@ (80037cc <HAL_RCC_OscConfig+0x520>)
 80036ba:	f00f ff47 	bl	801354c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_OscConfig+0x424>
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d119      	bne.n	80036fe <HAL_RCC_OscConfig+0x452>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d116      	bne.n	80036fe <HAL_RCC_OscConfig+0x452>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d0:	4b3d      	ldr	r3, [pc, #244]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_OscConfig+0x43c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_OscConfig+0x43c>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e329      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b37      	ldr	r3, [pc, #220]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	4934      	ldr	r1, [pc, #208]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036fc:	e040      	b.n	8003780 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d023      	beq.n	800374e <HAL_RCC_OscConfig+0x4a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003706:	4b30      	ldr	r3, [pc, #192]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2f      	ldr	r2, [pc, #188]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fc ff71 	bl	80005f8 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x480>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371a:	f7fc ff6d 	bl	80005f8 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x480>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e307      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800372c:	4b26      	ldr	r3, [pc, #152]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x46e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4b23      	ldr	r3, [pc, #140]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	4920      	ldr	r1, [pc, #128]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
 800374c:	e018      	b.n	8003780 <HAL_RCC_OscConfig+0x4d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374e:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1d      	ldr	r2, [pc, #116]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fc ff4d 	bl	80005f8 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x4c8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003762:	f7fc ff49 	bl	80005f8 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x4c8>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e2e3      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003774:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x4b6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d04e      	beq.n	800382a <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4fa>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d004      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4fa>
 800379c:	f240 218d 	movw	r1, #653	@ 0x28d
 80037a0:	480a      	ldr	r0, [pc, #40]	@ (80037cc <HAL_RCC_OscConfig+0x520>)
 80037a2:	f00f fed3 	bl	801354c <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d021      	beq.n	80037f2 <HAL_RCC_OscConfig+0x546>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b4:	4a04      	ldr	r2, [pc, #16]	@ (80037c8 <HAL_RCC_OscConfig+0x51c>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fc ff1b 	bl	80005f8 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037c4:	e00d      	b.n	80037e2 <HAL_RCC_OscConfig+0x536>
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08015860 	.word	0x08015860
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fc ff12 	bl	80005f8 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e2ac      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037e2:	4b93      	ldr	r3, [pc, #588]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80037e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ef      	beq.n	80037d0 <HAL_RCC_OscConfig+0x524>
 80037f0:	e01b      	b.n	800382a <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f2:	4b8f      	ldr	r3, [pc, #572]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80037f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037f8:	4a8d      	ldr	r2, [pc, #564]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003802:	f7fc fef9 	bl	80005f8 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380a:	f7fc fef5 	bl	80005f8 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e28f      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800381c:	4b84      	ldr	r3, [pc, #528]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1ef      	bne.n	800380a <HAL_RCC_OscConfig+0x55e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80b2 	beq.w	800399c <HAL_RCC_OscConfig+0x6f0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003838:	2300      	movs	r3, #0
 800383a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00c      	beq.n	800385e <HAL_RCC_OscConfig+0x5b2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d008      	beq.n	800385e <HAL_RCC_OscConfig+0x5b2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b05      	cmp	r3, #5
 8003852:	d004      	beq.n	800385e <HAL_RCC_OscConfig+0x5b2>
 8003854:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8003858:	4876      	ldr	r0, [pc, #472]	@ (8003a34 <HAL_RCC_OscConfig+0x788>)
 800385a:	f00f fe77 	bl	801354c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800385e:	4b74      	ldr	r3, [pc, #464]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_RCC_OscConfig+0x5da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4b71      	ldr	r3, [pc, #452]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	4a70      	ldr	r2, [pc, #448]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003874:	6593      	str	r3, [r2, #88]	@ 0x58
 8003876:	4b6e      	ldr	r3, [pc, #440]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003886:	4b6c      	ldr	r3, [pc, #432]	@ (8003a38 <HAL_RCC_OscConfig+0x78c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCC_OscConfig+0x618>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003892:	4b69      	ldr	r3, [pc, #420]	@ (8003a38 <HAL_RCC_OscConfig+0x78c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a68      	ldr	r2, [pc, #416]	@ (8003a38 <HAL_RCC_OscConfig+0x78c>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fc feab 	bl	80005f8 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x60c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fc fea7 	bl	80005f8 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x60c>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e241      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003a38 <HAL_RCC_OscConfig+0x78c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x5fa>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d108      	bne.n	80038de <HAL_RCC_OscConfig+0x632>
 80038cc:	4b58      	ldr	r3, [pc, #352]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d2:	4a57      	ldr	r2, [pc, #348]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038dc:	e024      	b.n	8003928 <HAL_RCC_OscConfig+0x67c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b05      	cmp	r3, #5
 80038e4:	d110      	bne.n	8003908 <HAL_RCC_OscConfig+0x65c>
 80038e6:	4b52      	ldr	r3, [pc, #328]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	4a50      	ldr	r2, [pc, #320]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003906:	e00f      	b.n	8003928 <HAL_RCC_OscConfig+0x67c>
 8003908:	4b49      	ldr	r3, [pc, #292]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390e:	4a48      	ldr	r2, [pc, #288]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003918:	4b45      	ldr	r3, [pc, #276]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391e:	4a44      	ldr	r2, [pc, #272]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 8003920:	f023 0304 	bic.w	r3, r3, #4
 8003924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d016      	beq.n	800395e <HAL_RCC_OscConfig+0x6b2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fc fe62 	bl	80005f8 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x6a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fc fe5e 	bl	80005f8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x6a2>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e1f6      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800394e:	4b38      	ldr	r3, [pc, #224]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ed      	beq.n	8003938 <HAL_RCC_OscConfig+0x68c>
 800395c:	e015      	b.n	800398a <HAL_RCC_OscConfig+0x6de>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fc fe4b 	bl	80005f8 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x6d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fc fe47 	bl	80005f8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x6d0>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e1df      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800397c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ed      	bne.n	8003966 <HAL_RCC_OscConfig+0x6ba>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800398a:	7ffb      	ldrb	r3, [r7, #31]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <HAL_RCC_OscConfig+0x6f0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003990:	4b27      	ldr	r3, [pc, #156]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003994:	4a26      	ldr	r2, [pc, #152]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 8003996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800399a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d050      	beq.n	8003a4a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_OscConfig+0x716>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d004      	beq.n	80039c2 <HAL_RCC_OscConfig+0x716>
 80039b8:	f240 3145 	movw	r1, #837	@ 0x345
 80039bc:	481d      	ldr	r0, [pc, #116]	@ (8003a34 <HAL_RCC_OscConfig+0x788>)
 80039be:	f00f fdc5 	bl	801354c <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x758>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039ca:	4b19      	ldr	r3, [pc, #100]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80039cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039d0:	4a17      	ldr	r2, [pc, #92]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fc fe0d 	bl	80005f8 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x748>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e2:	f7fc fe09 	bl	80005f8 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x748>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e1a3      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 80039f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0ef      	beq.n	80039e2 <HAL_RCC_OscConfig+0x736>
 8003a02:	e022      	b.n	8003a4a <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a04:	4b0a      	ldr	r3, [pc, #40]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 8003a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a0a:	4a09      	ldr	r2, [pc, #36]	@ (8003a30 <HAL_RCC_OscConfig+0x784>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fc fdf0 	bl	80005f8 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a1a:	e00f      	b.n	8003a3c <HAL_RCC_OscConfig+0x790>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a1c:	f7fc fdec 	bl	80005f8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d908      	bls.n	8003a3c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e186      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	08015860 	.word	0x08015860
 8003a38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a3c:	4b96      	ldr	r3, [pc, #600]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e8      	bne.n	8003a1c <HAL_RCC_OscConfig+0x770>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x7c0>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d008      	beq.n	8003a6c <HAL_RCC_OscConfig+0x7c0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d004      	beq.n	8003a6c <HAL_RCC_OscConfig+0x7c0>
 8003a62:	f240 316e 	movw	r1, #878	@ 0x36e
 8003a66:	488d      	ldr	r0, [pc, #564]	@ (8003c9c <HAL_RCC_OscConfig+0x9f0>)
 8003a68:	f00f fd70 	bl	801354c <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8162 	beq.w	8003d3a <HAL_RCC_OscConfig+0xa8e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	f040 8138 	bne.w	8003cf0 <HAL_RCC_OscConfig+0xa44>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d010      	beq.n	8003aaa <HAL_RCC_OscConfig+0x7fe>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d00c      	beq.n	8003aaa <HAL_RCC_OscConfig+0x7fe>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_OscConfig+0x7fe>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d004      	beq.n	8003aaa <HAL_RCC_OscConfig+0x7fe>
 8003aa0:	f240 3176 	movw	r1, #886	@ 0x376
 8003aa4:	487d      	ldr	r0, [pc, #500]	@ (8003c9c <HAL_RCC_OscConfig+0x9f0>)
 8003aa6:	f00f fd51 	bl	801354c <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_OscConfig+0x80e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d904      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x818>
 8003aba:	f240 3177 	movw	r1, #887	@ 0x377
 8003abe:	4877      	ldr	r0, [pc, #476]	@ (8003c9c <HAL_RCC_OscConfig+0x9f0>)
 8003ac0:	f00f fd44 	bl	801354c <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac8:	2b07      	cmp	r3, #7
 8003aca:	d903      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x828>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad0:	2b56      	cmp	r3, #86	@ 0x56
 8003ad2:	d904      	bls.n	8003ade <HAL_RCC_OscConfig+0x832>
 8003ad4:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8003ad8:	4870      	ldr	r0, [pc, #448]	@ (8003c9c <HAL_RCC_OscConfig+0x9f0>)
 8003ada:	f00f fd37 	bl	801354c <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d903      	bls.n	8003aee <HAL_RCC_OscConfig+0x842>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aea:	2b1f      	cmp	r3, #31
 8003aec:	d904      	bls.n	8003af8 <HAL_RCC_OscConfig+0x84c>
 8003aee:	f240 317a 	movw	r1, #890	@ 0x37a
 8003af2:	486a      	ldr	r0, [pc, #424]	@ (8003c9c <HAL_RCC_OscConfig+0x9f0>)
 8003af4:	f00f fd2a 	bl	801354c <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d010      	beq.n	8003b22 <HAL_RCC_OscConfig+0x876>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d00c      	beq.n	8003b22 <HAL_RCC_OscConfig+0x876>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0c:	2b06      	cmp	r3, #6
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_OscConfig+0x876>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d004      	beq.n	8003b22 <HAL_RCC_OscConfig+0x876>
 8003b18:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8003b1c:	485f      	ldr	r0, [pc, #380]	@ (8003c9c <HAL_RCC_OscConfig+0x9f0>)
 8003b1e:	f00f fd15 	bl	801354c <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d010      	beq.n	8003b4c <HAL_RCC_OscConfig+0x8a0>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d00c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x8a0>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d008      	beq.n	8003b4c <HAL_RCC_OscConfig+0x8a0>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d004      	beq.n	8003b4c <HAL_RCC_OscConfig+0x8a0>
 8003b42:	f240 317d 	movw	r1, #893	@ 0x37d
 8003b46:	4855      	ldr	r0, [pc, #340]	@ (8003c9c <HAL_RCC_OscConfig+0x9f0>)
 8003b48:	f00f fd00 	bl	801354c <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b4c:	4b52      	ldr	r3, [pc, #328]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f003 0203 	and.w	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d12c      	bne.n	8003bba <HAL_RCC_OscConfig+0x90e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d123      	bne.n	8003bba <HAL_RCC_OscConfig+0x90e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d11b      	bne.n	8003bba <HAL_RCC_OscConfig+0x90e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d113      	bne.n	8003bba <HAL_RCC_OscConfig+0x90e>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d109      	bne.n	8003bba <HAL_RCC_OscConfig+0x90e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d074      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x9f8>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b0c      	cmp	r3, #12
 8003bbe:	d068      	beq.n	8003c92 <HAL_RCC_OscConfig+0x9e6>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bc0:	4b35      	ldr	r3, [pc, #212]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x92c>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bcc:	4b32      	ldr	r3, [pc, #200]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x930>
#endif
            )
          {
            return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0af      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003be6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003be8:	f7fc fd06 	bl	80005f8 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x956>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fc fd02 	bl	80005f8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x956>
              {
                return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e09c      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c02:	4b25      	ldr	r3, [pc, #148]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x944>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c0e:	4b22      	ldr	r3, [pc, #136]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	4b23      	ldr	r3, [pc, #140]	@ (8003ca0 <HAL_RCC_OscConfig+0x9f4>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c1e:	3a01      	subs	r2, #1
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	4311      	orrs	r1, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c28:	0212      	lsls	r2, r2, #8
 8003c2a:	4311      	orrs	r1, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c30:	0852      	lsrs	r2, r2, #1
 8003c32:	3a01      	subs	r2, #1
 8003c34:	0552      	lsls	r2, r2, #21
 8003c36:	4311      	orrs	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c3c:	0852      	lsrs	r2, r2, #1
 8003c3e:	3a01      	subs	r2, #1
 8003c40:	0652      	lsls	r2, r2, #25
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c48:	06d2      	lsls	r2, r2, #27
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	4912      	ldr	r1, [pc, #72]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c52:	4b11      	ldr	r3, [pc, #68]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a10      	ldr	r2, [pc, #64]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003c58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c5c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	4a0d      	ldr	r2, [pc, #52]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003c64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c68:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c6a:	f7fc fcc5 	bl	80005f8 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x9d8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fc fcc1 	bl	80005f8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x9d8>
              {
                return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e05b      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c84:	4b04      	ldr	r3, [pc, #16]	@ (8003c98 <HAL_RCC_OscConfig+0x9ec>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x9c6>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c90:	e053      	b.n	8003d3a <HAL_RCC_OscConfig+0xa8e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e052      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	08015860 	.word	0x08015860
 8003ca0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca4:	4b27      	ldr	r3, [pc, #156]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d144      	bne.n	8003d3a <HAL_RCC_OscConfig+0xa8e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cb0:	4b24      	ldr	r3, [pc, #144]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cbc:	4b21      	ldr	r3, [pc, #132]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a20      	ldr	r2, [pc, #128]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cc8:	f7fc fc96 	bl	80005f8 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xa36>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fc fc92 	bl	80005f8 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xa36>
            {
              return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e02c      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce2:	4b18      	ldr	r3, [pc, #96]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xa24>
 8003cee:	e024      	b.n	8003d3a <HAL_RCC_OscConfig+0xa8e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	d01f      	beq.n	8003d36 <HAL_RCC_OscConfig+0xa8a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf6:	4b13      	ldr	r3, [pc, #76]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a12      	ldr	r2, [pc, #72]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003cfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fc fc79 	bl	80005f8 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0xa70>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fc fc75 	bl	80005f8 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0xa70>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e00f      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1c:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0xa5e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d28:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	4905      	ldr	r1, [pc, #20]	@ (8003d44 <HAL_RCC_OscConfig+0xa98>)
 8003d2e:	4b06      	ldr	r3, [pc, #24]	@ (8003d48 <HAL_RCC_OscConfig+0xa9c>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	60cb      	str	r3, [r1, #12]
 8003d34:	e001      	b.n	8003d3a <HAL_RCC_OscConfig+0xa8e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_RCC_OscConfig+0xa90>
      }
    }
  }
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	feeefffc 	.word	0xfeeefffc

08003d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e1e1      	b.n	8004128 <HAL_RCC_ClockConfig+0x3dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x28>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b0f      	cmp	r3, #15
 8003d72:	d904      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x32>
 8003d74:	f240 4159 	movw	r1, #1113	@ 0x459
 8003d78:	488e      	ldr	r0, [pc, #568]	@ (8003fb4 <HAL_RCC_ClockConfig+0x268>)
 8003d7a:	f00f fbe7 	bl	801354c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d031      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d02e      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d02b      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d028      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d025      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b05      	cmp	r3, #5
 8003da0:	d022      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b06      	cmp	r3, #6
 8003da6:	d01f      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b07      	cmp	r3, #7
 8003dac:	d01c      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d019      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b09      	cmp	r3, #9
 8003db8:	d016      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b0a      	cmp	r3, #10
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b0b      	cmp	r3, #11
 8003dc4:	d010      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b0c      	cmp	r3, #12
 8003dca:	d00d      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b0d      	cmp	r3, #13
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b0e      	cmp	r3, #14
 8003dd6:	d007      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	d004      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x9c>
 8003dde:	f240 415a 	movw	r1, #1114	@ 0x45a
 8003de2:	4874      	ldr	r0, [pc, #464]	@ (8003fb4 <HAL_RCC_ClockConfig+0x268>)
 8003de4:	f00f fbb2 	bl	801354c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b73      	ldr	r3, [pc, #460]	@ (8003fb8 <HAL_RCC_ClockConfig+0x26c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b70      	ldr	r3, [pc, #448]	@ (8003fb8 <HAL_RCC_ClockConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 020f 	bic.w	r2, r3, #15
 8003dfe:	496e      	ldr	r1, [pc, #440]	@ (8003fb8 <HAL_RCC_ClockConfig+0x26c>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b6c      	ldr	r3, [pc, #432]	@ (8003fb8 <HAL_RCC_ClockConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e187      	b.n	8004128 <HAL_RCC_ClockConfig+0x3dc>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d039      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x14c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d024      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b80      	cmp	r3, #128	@ 0x80
 8003e32:	d020      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b90      	cmp	r3, #144	@ 0x90
 8003e3a:	d01c      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e42:	d018      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2bb0      	cmp	r3, #176	@ 0xb0
 8003e4a:	d014      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e52:	d010      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2bd0      	cmp	r3, #208	@ 0xd0
 8003e5a:	d00c      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2be0      	cmp	r3, #224	@ 0xe0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2bf0      	cmp	r3, #240	@ 0xf0
 8003e6a:	d004      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
 8003e6c:	f240 4172 	movw	r1, #1138	@ 0x472
 8003e70:	4850      	ldr	r0, [pc, #320]	@ (8003fb4 <HAL_RCC_ClockConfig+0x268>)
 8003e72:	f00f fb6b 	bl	801354c <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	4b50      	ldr	r3, [pc, #320]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d908      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x14c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e86:	4b4d      	ldr	r3, [pc, #308]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	494a      	ldr	r1, [pc, #296]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8098 	beq.w	8003fd6 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d010      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x184>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d00c      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x184>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x184>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d004      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x184>
 8003ec6:	f240 417d 	movw	r1, #1149	@ 0x47d
 8003eca:	483a      	ldr	r0, [pc, #232]	@ (8003fb4 <HAL_RCC_ClockConfig+0x268>)
 8003ecc:	f00f fb3e 	bl	801354c <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d11e      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed8:	4b38      	ldr	r3, [pc, #224]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x19c>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e11f      	b.n	8004128 <HAL_RCC_ClockConfig+0x3dc>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003ee8:	f000 fa8e 	bl	8004408 <RCC_GetSysClockFreqFromPLLSource>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4a34      	ldr	r2, [pc, #208]	@ (8003fc0 <HAL_RCC_ClockConfig+0x274>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d946      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x236>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ef4:	4b31      	ldr	r3, [pc, #196]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d140      	bne.n	8003f82 <HAL_RCC_ClockConfig+0x236>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f00:	4b2e      	ldr	r3, [pc, #184]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f08:	4a2c      	ldr	r2, [pc, #176]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f0e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f10:	2380      	movs	r3, #128	@ 0x80
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e035      	b.n	8003f82 <HAL_RCC_ClockConfig+0x236>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x1e2>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f1e:	4b27      	ldr	r3, [pc, #156]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d115      	bne.n	8003f56 <HAL_RCC_ClockConfig+0x20a>
        {
          return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0fc      	b.n	8004128 <HAL_RCC_ClockConfig+0x3dc>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0x1fa>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f36:	4b21      	ldr	r3, [pc, #132]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCC_ClockConfig+0x20a>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e0f0      	b.n	8004128 <HAL_RCC_ClockConfig+0x3dc>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f46:	4b1d      	ldr	r3, [pc, #116]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_ClockConfig+0x20a>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0e8      	b.n	8004128 <HAL_RCC_ClockConfig+0x3dc>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003f56:	f000 f8f7 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4a18      	ldr	r2, [pc, #96]	@ (8003fc0 <HAL_RCC_ClockConfig+0x274>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d90f      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x236>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f62:	4b16      	ldr	r3, [pc, #88]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCC_ClockConfig+0x236>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f6e:	4b13      	ldr	r3, [pc, #76]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f76:	4a11      	ldr	r2, [pc, #68]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f7e:	2380      	movs	r3, #128	@ 0x80
 8003f80:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f82:	4b0e      	ldr	r3, [pc, #56]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f023 0203 	bic.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	490b      	ldr	r1, [pc, #44]	@ (8003fbc <HAL_RCC_ClockConfig+0x270>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f94:	f7fc fb30 	bl	80005f8 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	e013      	b.n	8003fc4 <HAL_RCC_ClockConfig+0x278>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9c:	f7fc fb2c 	bl	80005f8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d90a      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x278>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e0ba      	b.n	8004128 <HAL_RCC_ClockConfig+0x3dc>
 8003fb2:	bf00      	nop
 8003fb4:	08015860 	.word	0x08015860
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	04c4b400 	.word	0x04c4b400
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc4:	4b5a      	ldr	r3, [pc, #360]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 020c 	and.w	r2, r3, #12
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d1e2      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x250>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b80      	cmp	r3, #128	@ 0x80
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x29c>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003fdc:	4b54      	ldr	r3, [pc, #336]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a53      	ldr	r2, [pc, #332]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 8003fe2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fe6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_RCC_ClockConfig+0x2ca>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004000:	429a      	cmp	r2, r3
 8004002:	d208      	bcs.n	8004016 <HAL_RCC_ClockConfig+0x2ca>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b4a      	ldr	r3, [pc, #296]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4947      	ldr	r1, [pc, #284]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004016:	4b47      	ldr	r3, [pc, #284]	@ (8004134 <HAL_RCC_ClockConfig+0x3e8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d210      	bcs.n	8004046 <HAL_RCC_ClockConfig+0x2fa>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004024:	4b43      	ldr	r3, [pc, #268]	@ (8004134 <HAL_RCC_ClockConfig+0x3e8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 020f 	bic.w	r2, r3, #15
 800402c:	4941      	ldr	r1, [pc, #260]	@ (8004134 <HAL_RCC_ClockConfig+0x3e8>)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004034:	4b3f      	ldr	r3, [pc, #252]	@ (8004134 <HAL_RCC_ClockConfig+0x3e8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d001      	beq.n	8004046 <HAL_RCC_ClockConfig+0x2fa>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e070      	b.n	8004128 <HAL_RCC_ClockConfig+0x3dc>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d025      	beq.n	800409e <HAL_RCC_ClockConfig+0x352>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d018      	beq.n	800408c <HAL_RCC_ClockConfig+0x340>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004062:	d013      	beq.n	800408c <HAL_RCC_ClockConfig+0x340>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800406c:	d00e      	beq.n	800408c <HAL_RCC_ClockConfig+0x340>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004076:	d009      	beq.n	800408c <HAL_RCC_ClockConfig+0x340>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004080:	d004      	beq.n	800408c <HAL_RCC_ClockConfig+0x340>
 8004082:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8004086:	482c      	ldr	r0, [pc, #176]	@ (8004138 <HAL_RCC_ClockConfig+0x3ec>)
 8004088:	f00f fa60 	bl	801354c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800408c:	4b28      	ldr	r3, [pc, #160]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4925      	ldr	r1, [pc, #148]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d026      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x3ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x398>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ba:	d013      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x398>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040c4:	d00e      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x398>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80040ce:	d009      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x398>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040d8:	d004      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x398>
 80040da:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 80040de:	4816      	ldr	r0, [pc, #88]	@ (8004138 <HAL_RCC_ClockConfig+0x3ec>)
 80040e0:	f00f fa34 	bl	801354c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e4:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	490f      	ldr	r1, [pc, #60]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040f8:	f000 f826 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <HAL_RCC_ClockConfig+0x3e4>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	490c      	ldr	r1, [pc, #48]	@ (800413c <HAL_RCC_ClockConfig+0x3f0>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	4a0a      	ldr	r2, [pc, #40]	@ (8004140 <HAL_RCC_ClockConfig+0x3f4>)
 8004116:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004118:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_RCC_ClockConfig+0x3f8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f00f fe65 	bl	8013dec <HAL_InitTick>
 8004122:	4603      	mov	r3, r0
 8004124:	73fb      	strb	r3, [r7, #15]

  return status;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	40022000 	.word	0x40022000
 8004138:	08015860 	.word	0x08015860
 800413c:	080160ac 	.word	0x080160ac
 8004140:	20000010 	.word	0x20000010
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	b480      	push	{r7}
 800414a:	b089      	sub	sp, #36	@ 0x24
 800414c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	2300      	movs	r3, #0
 8004154:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004156:	4b3e      	ldr	r3, [pc, #248]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004160:	4b3b      	ldr	r3, [pc, #236]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x34>
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b0c      	cmp	r3, #12
 8004174:	d121      	bne.n	80041ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d11e      	bne.n	80041ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800417c:	4b34      	ldr	r3, [pc, #208]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004188:	4b31      	ldr	r3, [pc, #196]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 800418a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	e005      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004198:	4b2d      	ldr	r3, [pc, #180]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10d      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b8:	e00a      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d102      	bne.n	80041c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041c0:	4b25      	ldr	r3, [pc, #148]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x110>)
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	e004      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041cc:	4b23      	ldr	r3, [pc, #140]	@ (800425c <HAL_RCC_GetSysClockFreq+0x114>)
 80041ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b0c      	cmp	r3, #12
 80041d4:	d134      	bne.n	8004240 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0xa6>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d003      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0xac>
 80041ec:	e005      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x110>)
 80041f0:	617b      	str	r3, [r7, #20]
      break;
 80041f2:	e005      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041f4:	4b19      	ldr	r3, [pc, #100]	@ (800425c <HAL_RCC_GetSysClockFreq+0x114>)
 80041f6:	617b      	str	r3, [r7, #20]
      break;
 80041f8:	e002      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	617b      	str	r3, [r7, #20]
      break;
 80041fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004200:	4b13      	ldr	r3, [pc, #76]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	3301      	adds	r3, #1
 800420c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800420e:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	fb03 f202 	mul.w	r2, r3, r2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004226:	4b0a      	ldr	r3, [pc, #40]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	0e5b      	lsrs	r3, r3, #25
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	3301      	adds	r3, #1
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004240:	69bb      	ldr	r3, [r7, #24]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3724      	adds	r7, #36	@ 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000
 8004254:	080160c4 	.word	0x080160c4
 8004258:	00f42400 	.word	0x00f42400
 800425c:	016e3600 	.word	0x016e3600

08004260 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004264:	4b03      	ldr	r3, [pc, #12]	@ (8004274 <HAL_RCC_GetHCLKFreq+0x14>)
 8004266:	681b      	ldr	r3, [r3, #0]
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000010 	.word	0x20000010

08004278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800427c:	f7ff fff0 	bl	8004260 <HAL_RCC_GetHCLKFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b06      	ldr	r3, [pc, #24]	@ (800429c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	4904      	ldr	r1, [pc, #16]	@ (80042a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40021000 	.word	0x40021000
 80042a0:	080160bc 	.word	0x080160bc

080042a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042a8:	f7ff ffda 	bl	8004260 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0adb      	lsrs	r3, r3, #11
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4904      	ldr	r1, [pc, #16]	@ (80042cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	080160bc 	.word	0x080160bc

080042d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <HAL_RCC_GetClockConfig+0x1a>
 80042e0:	f240 6194 	movw	r1, #1684	@ 0x694
 80042e4:	4818      	ldr	r0, [pc, #96]	@ (8004348 <HAL_RCC_GetClockConfig+0x78>)
 80042e6:	f00f f931 	bl	801354c <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d104      	bne.n	80042fa <HAL_RCC_GetClockConfig+0x2a>
 80042f0:	f240 6195 	movw	r1, #1685	@ 0x695
 80042f4:	4814      	ldr	r0, [pc, #80]	@ (8004348 <HAL_RCC_GetClockConfig+0x78>)
 80042f6:	f00f f929 	bl	801354c <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	220f      	movs	r2, #15
 80042fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004300:	4b12      	ldr	r3, [pc, #72]	@ (800434c <HAL_RCC_GetClockConfig+0x7c>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0203 	and.w	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800430c:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <HAL_RCC_GetClockConfig+0x7c>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004318:	4b0c      	ldr	r3, [pc, #48]	@ (800434c <HAL_RCC_GetClockConfig+0x7c>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004324:	4b09      	ldr	r3, [pc, #36]	@ (800434c <HAL_RCC_GetClockConfig+0x7c>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	08db      	lsrs	r3, r3, #3
 800432a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004332:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <HAL_RCC_GetClockConfig+0x80>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 020f 	and.w	r2, r3, #15
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	601a      	str	r2, [r3, #0]
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	08015860 	.word	0x08015860
 800434c:	40021000 	.word	0x40021000
 8004350:	40022000 	.word	0x40022000

08004354 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004360:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800436c:	f7fe fe94 	bl	8003098 <HAL_PWREx_GetVoltageRange>
 8004370:	6178      	str	r0, [r7, #20]
 8004372:	e014      	b.n	800439e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004374:	4b22      	ldr	r3, [pc, #136]	@ (8004400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004378:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800437a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800437e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004380:	4b1f      	ldr	r3, [pc, #124]	@ (8004400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800438c:	f7fe fe84 	bl	8003098 <HAL_PWREx_GetVoltageRange>
 8004390:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004392:	4b1b      	ldr	r3, [pc, #108]	@ (8004400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	4a1a      	ldr	r2, [pc, #104]	@ (8004400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800439c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a4:	d10b      	bne.n	80043be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b80      	cmp	r3, #128	@ 0x80
 80043aa:	d913      	bls.n	80043d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80043b0:	d902      	bls.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043b2:	2302      	movs	r3, #2
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	e00d      	b.n	80043d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043b8:	2301      	movs	r3, #1
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	e00a      	b.n	80043d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80043c2:	d902      	bls.n	80043ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80043c4:	2302      	movs	r3, #2
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e004      	b.n	80043d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b70      	cmp	r3, #112	@ 0x70
 80043ce:	d101      	bne.n	80043d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043d0:	2301      	movs	r3, #1
 80043d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 020f 	bic.w	r2, r3, #15
 80043dc:	4909      	ldr	r1, [pc, #36]	@ (8004404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043e4:	4b07      	ldr	r3, [pc, #28]	@ (8004404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d001      	beq.n	80043f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000
 8004404:	40022000 	.word	0x40022000

08004408 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800440e:	4b2d      	ldr	r3, [pc, #180]	@ (80044c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d00b      	beq.n	8004436 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d825      	bhi.n	8004470 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d008      	beq.n	800443c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d11f      	bne.n	8004470 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004430:	4b25      	ldr	r3, [pc, #148]	@ (80044c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004432:	613b      	str	r3, [r7, #16]
    break;
 8004434:	e01f      	b.n	8004476 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004436:	4b25      	ldr	r3, [pc, #148]	@ (80044cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004438:	613b      	str	r3, [r7, #16]
    break;
 800443a:	e01c      	b.n	8004476 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800443c:	4b21      	ldr	r3, [pc, #132]	@ (80044c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004448:	4b1e      	ldr	r3, [pc, #120]	@ (80044c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800444a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e005      	b.n	8004464 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004458:	4b1a      	ldr	r3, [pc, #104]	@ (80044c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004464:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446c:	613b      	str	r3, [r7, #16]
    break;
 800446e:	e002      	b.n	8004476 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]
    break;
 8004474:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004476:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	3301      	adds	r3, #1
 8004482:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004484:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	fb03 f202 	mul.w	r2, r3, r2
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	fbb2 f3f3 	udiv	r3, r2, r3
 800449a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800449c:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	0e5b      	lsrs	r3, r3, #25
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	3301      	adds	r3, #1
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80044b6:	683b      	ldr	r3, [r7, #0]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40021000 	.word	0x40021000
 80044c8:	00f42400 	.word	0x00f42400
 80044cc:	016e3600 	.word	0x016e3600
 80044d0:	080160c4 	.word	0x080160c4

080044d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044dc:	2300      	movs	r3, #0
 80044de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e0:	2300      	movs	r3, #0
 80044e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b94      	ldr	r3, [pc, #592]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b92      	ldr	r3, [pc, #584]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x30>
 80044fc:	21c9      	movs	r1, #201	@ 0xc9
 80044fe:	4891      	ldr	r0, [pc, #580]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004500:	f00f f824 	bl	801354c <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800450c:	2b00      	cmp	r3, #0
 800450e:	d058      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d013      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800451c:	2b20      	cmp	r3, #32
 800451e:	d00f      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d00b      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800452c:	2b60      	cmp	r3, #96	@ 0x60
 800452e:	d007      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004534:	2b80      	cmp	r3, #128	@ 0x80
 8004536:	d003      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004538:	21d1      	movs	r1, #209	@ 0xd1
 800453a:	4882      	ldr	r0, [pc, #520]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800453c:	f00f f806 	bl	801354c <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004544:	2b80      	cmp	r3, #128	@ 0x80
 8004546:	d02a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xca>
 8004548:	2b80      	cmp	r3, #128	@ 0x80
 800454a:	d825      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800454c:	2b60      	cmp	r3, #96	@ 0x60
 800454e:	d026      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xca>
 8004550:	2b60      	cmp	r3, #96	@ 0x60
 8004552:	d821      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8004554:	2b40      	cmp	r3, #64	@ 0x40
 8004556:	d006      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004558:	2b40      	cmp	r3, #64	@ 0x40
 800455a:	d81d      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004560:	2b20      	cmp	r3, #32
 8004562:	d010      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8004564:	e018      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004566:	4b78      	ldr	r3, [pc, #480]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4a77      	ldr	r2, [pc, #476]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004570:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004572:	e015      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f001 fc76 	bl	8005e6c <RCCEx_PLLSAI1_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004584:	e00c      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3320      	adds	r3, #32
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f001 fded 	bl	800616c <RCCEx_PLLSAI2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004596:	e003      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	74fb      	strb	r3, [r7, #19]
      break;
 800459c:	e000      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      break;
 800459e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10b      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a6:	4b68      	ldr	r3, [pc, #416]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80045a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045ac:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045b4:	4964      	ldr	r1, [pc, #400]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80045bc:	e001      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d064      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d018      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045de:	d013      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d00e      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045f2:	d009      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045fc:	d004      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80045fe:	f240 110f 	movw	r1, #271	@ 0x10f
 8004602:	4850      	ldr	r0, [pc, #320]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004604:	f00e ffa2 	bl	801354c <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004610:	d030      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004616:	d82a      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800461c:	d02a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800461e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004622:	d824      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004628:	d008      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800462a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800462e:	d81e      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004638:	d010      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x188>
 800463a:	e018      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x19a>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800463c:	4b42      	ldr	r3, [pc, #264]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a41      	ldr	r2, [pc, #260]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004646:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004648:	e015      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1a2>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3304      	adds	r3, #4
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f001 fc0b 	bl	8005e6c <RCCEx_PLLSAI1_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800465a:	e00c      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1a2>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3320      	adds	r3, #32
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f001 fd82 	bl	800616c <RCCEx_PLLSAI2_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800466c:	e003      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	74fb      	strb	r3, [r7, #19]
      break;
 8004672:	e000      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      break;
 8004674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004676:	7cfb      	ldrb	r3, [r7, #19]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800467c:	4b32      	ldr	r3, [pc, #200]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800467e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004682:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468a:	492f      	ldr	r1, [pc, #188]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004692:	e001      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80c6 	beq.w	8004832 <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a6:	2300      	movs	r3, #0
 80046a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d016      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046be:	d010      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d6:	d004      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80046d8:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80046dc:	4819      	ldr	r0, [pc, #100]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80046de:	f00e ff35 	bl	801354c <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046e2:	4b19      	ldr	r3, [pc, #100]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f8:	4b13      	ldr	r3, [pc, #76]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fc:	4a12      	ldr	r2, [pc, #72]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80046fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004702:	6593      	str	r3, [r2, #88]	@ 0x58
 8004704:	4b10      	ldr	r3, [pc, #64]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004710:	2301      	movs	r3, #1
 8004712:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004714:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a0c      	ldr	r2, [pc, #48]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800471a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800471e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004720:	f7fb ff6a 	bl	80005f8 <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004726:	e013      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004728:	f7fb ff66 	bl	80005f8 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d90c      	bls.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        ret = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	74fb      	strb	r3, [r7, #19]
        break;
 800473a:	e00f      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800473c:	017f7fff 	.word	0x017f7fff
 8004740:	fe808000 	.word	0xfe808000
 8004744:	08015898 	.word	0x08015898
 8004748:	40021000 	.word	0x40021000
 800474c:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004750:	4b30      	ldr	r3, [pc, #192]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0e5      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x254>
      }
    }

    if(ret == HAL_OK)
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d15c      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004762:	4b2d      	ldr	r3, [pc, #180]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800476c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01f      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	d019      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004780:	4b25      	ldr	r3, [pc, #148]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800478a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800478c:	4b22      	ldr	r3, [pc, #136]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004792:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800479c:	4b1e      	ldr	r3, [pc, #120]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d016      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fb ff1b 	bl	80005f8 <HAL_GetTick>
 80047c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c4:	e00b      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f7fb ff17 	bl	80005f8 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d902      	bls.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x30a>
          {
            ret = HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	74fb      	strb	r3, [r7, #19]
            break;
 80047dc:	e006      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x318>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047de:	4b0e      	ldr	r3, [pc, #56]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ec      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
          }
        }
      }

      if(ret == HAL_OK)
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10c      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x338>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f2:	4b09      	ldr	r3, [pc, #36]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004802:	4905      	ldr	r1, [pc, #20]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800480a:	e009      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800480c:	7cfb      	ldrb	r3, [r7, #19]
 800480e:	74bb      	strb	r3, [r7, #18]
 8004810:	e006      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004812:	bf00      	nop
 8004814:	40007000 	.word	0x40007000
 8004818:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004820:	7c7b      	ldrb	r3, [r7, #17]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b8d      	ldr	r3, [pc, #564]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482a:	4a8c      	ldr	r2, [pc, #560]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800482c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004830:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01f      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d010      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d00c      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004852:	2b03      	cmp	r3, #3
 8004854:	d008      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485a:	2b02      	cmp	r3, #2
 800485c:	d004      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800485e:	f240 1199 	movw	r1, #409	@ 0x199
 8004862:	487f      	ldr	r0, [pc, #508]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004864:	f00e fe72 	bl	801354c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004868:	4b7c      	ldr	r3, [pc, #496]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f023 0203 	bic.w	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004876:	4979      	ldr	r1, [pc, #484]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01f      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	2b04      	cmp	r3, #4
 8004898:	d00c      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d008      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d004      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80048aa:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80048ae:	486c      	ldr	r0, [pc, #432]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80048b0:	f00e fe4c 	bl	801354c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b4:	4b69      	ldr	r3, [pc, #420]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ba:	f023 020c 	bic.w	r2, r3, #12
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	4966      	ldr	r1, [pc, #408]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01f      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d00c      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	2b30      	cmp	r3, #48	@ 0x30
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d004      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80048f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80048fa:	4859      	ldr	r0, [pc, #356]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80048fc:	f00e fe26 	bl	801354c <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004900:	4b56      	ldr	r3, [pc, #344]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004906:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490e:	4953      	ldr	r1, [pc, #332]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01f      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004926:	2b00      	cmp	r3, #0
 8004928:	d010      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492e:	2b40      	cmp	r3, #64	@ 0x40
 8004930:	d00c      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004936:	2bc0      	cmp	r3, #192	@ 0xc0
 8004938:	d008      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493e:	2b80      	cmp	r3, #128	@ 0x80
 8004940:	d004      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004942:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8004946:	4846      	ldr	r0, [pc, #280]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004948:	f00e fe00 	bl	801354c <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800494c:	4b43      	ldr	r3, [pc, #268]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004952:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495a:	4940      	ldr	r1, [pc, #256]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d022      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d013      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800497e:	d00e      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004984:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004988:	d009      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800498e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004992:	d004      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004994:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8004998:	4831      	ldr	r0, [pc, #196]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800499a:	f00e fdd7 	bl	801354c <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800499e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ac:	492b      	ldr	r1, [pc, #172]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d022      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d013      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d0:	d00e      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049da:	d009      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049e4:	d004      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80049e6:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80049ea:	481d      	ldr	r0, [pc, #116]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80049ec:	f00e fdae 	bl	801354c <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049f0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fe:	4917      	ldr	r1, [pc, #92]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d028      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d013      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a22:	d00e      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a36:	d004      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8004a38:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004a3c:	4808      	ldr	r0, [pc, #32]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004a3e:	f00e fd85 	bl	801354c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a42:	4b06      	ldr	r3, [pc, #24]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a50:	4902      	ldr	r1, [pc, #8]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a58:	e004      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	08015898 	.word	0x08015898
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d022      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d013      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a80:	d00e      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a8a:	d009      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a94:	d004      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004a96:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8004a9a:	489f      	ldr	r0, [pc, #636]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004a9c:	f00e fd56 	bl	801354c <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aa0:	4b9e      	ldr	r3, [pc, #632]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aae:	499b      	ldr	r1, [pc, #620]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01d      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad2:	d009      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004adc:	d004      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004ade:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8004ae2:	488d      	ldr	r0, [pc, #564]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004ae4:	f00e fd32 	bl	801354c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af6:	4989      	ldr	r1, [pc, #548]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01d      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x672>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00e      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b1a:	d009      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b24:	d004      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004b26:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8004b2a:	487b      	ldr	r0, [pc, #492]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004b2c:	f00e fd0e 	bl	801354c <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b30:	4b7a      	ldr	r3, [pc, #488]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3e:	4977      	ldr	r1, [pc, #476]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01d      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00e      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b62:	d009      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b6c:	d004      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004b6e:	f240 2107 	movw	r1, #519	@ 0x207
 8004b72:	4869      	ldr	r0, [pc, #420]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004b74:	f00e fcea 	bl	801354c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b78:	4b68      	ldr	r3, [pc, #416]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b86:	4965      	ldr	r1, [pc, #404]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01b      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d008      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d004      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8004bb2:	f240 2113 	movw	r1, #531	@ 0x213
 8004bb6:	4858      	ldr	r0, [pc, #352]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004bb8:	f00e fcc8 	bl	801354c <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bbc:	4b57      	ldr	r3, [pc, #348]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bc2:	f023 0203 	bic.w	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bca:	4954      	ldr	r1, [pc, #336]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d040      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x78c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d013      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bee:	d00e      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bf8:	d009      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c02:	d004      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004c04:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8004c08:	4843      	ldr	r0, [pc, #268]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c0a:	f00e fc9f 	bl	801354c <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c0e:	4b43      	ldr	r3, [pc, #268]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c14:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1c:	493f      	ldr	r1, [pc, #252]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c2c:	d106      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	4a3a      	ldr	r2, [pc, #232]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c38:	60d3      	str	r3, [r2, #12]
 8004c3a:	e011      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 f90d 	bl	8005e6c <RCCEx_PLLSAI1_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x78c>
        {
          /* set overall return value */
          status = ret;
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d06b      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x870>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c74:	d017      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d013      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c86:	d00e      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c90:	d009      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c9a:	d004      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c9c:	f240 2141 	movw	r1, #577	@ 0x241
 8004ca0:	481d      	ldr	r0, [pc, #116]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004ca2:	f00e fc53 	bl	801354c <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cae:	d108      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cb6:	4a19      	ldr	r2, [pc, #100]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cbc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004cc0:	e012      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x814>
 8004cc2:	4b16      	ldr	r3, [pc, #88]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cc8:	4a14      	ldr	r2, [pc, #80]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004cd2:	4b12      	ldr	r3, [pc, #72]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ce0:	490e      	ldr	r1, [pc, #56]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	4a09      	ldr	r2, [pc, #36]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004cf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cfc:	60d3      	str	r3, [r2, #12]
 8004cfe:	e021      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x870>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d08:	d10a      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d0a:	4b04      	ldr	r3, [pc, #16]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	4a03      	ldr	r2, [pc, #12]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d14:	60d3      	str	r3, [r2, #12]
 8004d16:	e015      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8004d18:	08015898 	.word	0x08015898
 8004d1c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x870>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	2101      	movs	r1, #1
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 f89b 	bl	8005e6c <RCCEx_PLLSAI1_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d3a:	7cfb      	ldrb	r3, [r7, #19]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x870>
      {
        /* set overall return value */
        status = ret;
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d040      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d013      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d60:	d00e      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d6a:	d009      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d70:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d74:	d004      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8004d76:	f240 2166 	movw	r1, #614	@ 0x266
 8004d7a:	489f      	ldr	r0, [pc, #636]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004d7c:	f00e fbe6 	bl	801354c <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d80:	4b9e      	ldr	r3, [pc, #632]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d8e:	499b      	ldr	r1, [pc, #620]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d9e:	d106      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004da0:	4b96      	ldr	r3, [pc, #600]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4a95      	ldr	r2, [pc, #596]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004daa:	60d3      	str	r3, [r2, #12]
 8004dac:	e011      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004db2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004db6:	d10c      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 f854 	bl	8005e6c <RCCEx_PLLSAI1_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      {
        /* set overall return value */
        status = ret;
 8004dce:	7cfb      	ldrb	r3, [r7, #19]
 8004dd0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d034      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x974>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d010      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x936>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x936>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dfe:	d004      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x936>
 8004e00:	f240 2186 	movw	r1, #646	@ 0x286
 8004e04:	487c      	ldr	r0, [pc, #496]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004e06:	f00e fba1 	bl	801354c <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e10:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e1a:	4978      	ldr	r1, [pc, #480]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e2c:	d10c      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x974>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3304      	adds	r3, #4
 8004e32:	2102      	movs	r1, #2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f001 f819 	bl	8005e6c <RCCEx_PLLSAI1_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x974>
      {
        /* set overall return value */
        status = ret;
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d004      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8004e68:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8004e6c:	4862      	ldr	r0, [pc, #392]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004e6e:	f00e fb6d 	bl	801354c <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e72:	4b62      	ldr	r3, [pc, #392]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e78:	f023 0204 	bic.w	r2, r3, #4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e82:	495e      	ldr	r1, [pc, #376]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01f      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d009      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d004      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 8004eb4:	f240 21cf 	movw	r1, #719	@ 0x2cf
 8004eb8:	484f      	ldr	r0, [pc, #316]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004eba:	f00e fb47 	bl	801354c <assert_failed>

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004ec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ec4:	f023 0218 	bic.w	r2, r3, #24
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ece:	494b      	ldr	r1, [pc, #300]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d051      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xab2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d016      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef6:	d010      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f0e:	d004      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8004f10:	f240 21df 	movw	r1, #735	@ 0x2df
 8004f14:	4838      	ldr	r0, [pc, #224]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004f16:	f00e fb19 	bl	801354c <assert_failed>

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f1a:	4b38      	ldr	r3, [pc, #224]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a37      	ldr	r2, [pc, #220]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f26:	f7fb fb67 	bl	80005f8 <HAL_GetTick>
 8004f2a:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f2c:	e009      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f2e:	f7fb fb63 	bl	80005f8 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d902      	bls.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
      {
        ret = HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	74fb      	strb	r3, [r7, #19]
        break;
 8004f40:	e005      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f42:	4b2e      	ldr	r3, [pc, #184]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1ef      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
      }
    }

    if(ret == HAL_OK)
 8004f4e:	7cfb      	ldrb	r3, [r7, #19]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d113      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004f54:	4b29      	ldr	r3, [pc, #164]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f64:	4925      	ldr	r1, [pc, #148]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3320      	adds	r3, #32
 8004f70:	2102      	movs	r1, #2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 f8fa 	bl	800616c <RCCEx_PLLSAI2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xab2>
    {
      /* set overall return value */
      status = ret;
 8004f82:	7cfb      	ldrb	r3, [r7, #19]
 8004f84:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d02d      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d010      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fb2:	d004      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004fb4:	f240 3123 	movw	r1, #803	@ 0x323
 8004fb8:	480f      	ldr	r0, [pc, #60]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004fba:	f00e fac7 	bl	801354c <assert_failed>

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fc4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fce:	490b      	ldr	r1, [pc, #44]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fe0:	d105      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe2:	4b06      	ldr	r3, [pc, #24]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	4a05      	ldr	r2, [pc, #20]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004fe8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fec:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fee:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	08015898 	.word	0x08015898
 8004ffc:	40021000 	.word	0x40021000

08005000 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	61fb      	str	r3, [r7, #28]
#if defined(SDMMC1) && defined(RCC_CCIPR2_SDMMCSEL)
  uint32_t pllp;  /* no init needed */
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	4b4e      	ldr	r3, [pc, #312]	@ (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x148>)
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d004      	beq.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	4b4c      	ldr	r3, [pc, #304]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>)
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 8005020:	f240 418b 	movw	r1, #1163	@ 0x48b
 8005024:	484a      	ldr	r0, [pc, #296]	@ (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005026:	f00e fa91 	bl	801354c <assert_failed>

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005030:	d13e      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005032:	4b48      	ldr	r3, [pc, #288]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800503c:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005044:	d028      	beq.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800504c:	f200 86f9 	bhi.w	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005056:	d005      	beq.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800505e:	d00e      	beq.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005060:	f000 beef 	b.w	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005064:	4b3b      	ldr	r3, [pc, #236]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	f040 86e9 	bne.w	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
        frequency = LSE_VALUE;
 8005074:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005078:	61fb      	str	r3, [r7, #28]
      break;
 800507a:	f000 bee4 	b.w	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800507e:	4b35      	ldr	r3, [pc, #212]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b02      	cmp	r3, #2
 800508a:	f040 86de 	bne.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = LSI_VALUE;
 800508e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005092:	61fb      	str	r3, [r7, #28]
      break;
 8005094:	f000 bed9 	b.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005098:	4b2e      	ldr	r3, [pc, #184]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050a4:	f040 86d3 	bne.w	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
        frequency = HSE_VALUE / 32U;
 80050a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80050aa:	61fb      	str	r3, [r7, #28]
      break;
 80050ac:	f000 becf 	b.w	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050b0:	4b28      	ldr	r3, [pc, #160]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d036      	beq.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d850      	bhi.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d003      	beq.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d020      	beq.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80050d2:	e049      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80050d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d116      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80050e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 80050ec:	4b19      	ldr	r3, [pc, #100]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	e005      	b.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80050f8:	4b16      	ldr	r3, [pc, #88]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	4a15      	ldr	r2, [pc, #84]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800510c:	e02f      	b.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        pllvco = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]
      break;
 8005112:	e02c      	b.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005114:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005120:	d102      	bne.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
      {
        pllvco = HSI_VALUE;
 8005122:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005124:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005126:	e022      	b.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        pllvco = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
      break;
 800512c:	e01f      	b.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800512e:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800513a:	d102      	bne.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        pllvco = HSE_VALUE;
 800513c:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800513e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005140:	e015      	b.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        pllvco = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
      break;
 8005146:	e012      	b.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8005148:	017f7fff 	.word	0x017f7fff
 800514c:	fe808000 	.word	0xfe808000
 8005150:	08015898 	.word	0x08015898
 8005154:	40021000 	.word	0x40021000
 8005158:	000b71b0 	.word	0x000b71b0
 800515c:	080160c4 	.word	0x080160c4
 8005160:	00f42400 	.word	0x00f42400
 8005164:	016e3600 	.word	0x016e3600
    default:
      /* No source */
      pllvco = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	61bb      	str	r3, [r7, #24]
      break;
 800516c:	bf00      	nop
    }

    switch(PeriphClk)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005174:	f000 85fb 	beq.w	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800517e:	f200 8668 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005188:	f000 845e 	beq.w	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005192:	f200 865e 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800519c:	f000 8526 	beq.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051a6:	f200 8654 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051b0:	f000 817c 	beq.w	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051ba:	f200 864a 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051c4:	f000 80c2 	beq.w	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051ce:	f200 8640 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d8:	f000 8425 	beq.w	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e2:	f200 8636 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ec:	f000 83d9 	beq.w	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051f6:	f200 862c 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005200:	f000 80a4 	beq.w	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800520a:	f200 8622 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005214:	f000 8092 	beq.w	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521e:	f200 8618 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005228:	f000 8080 	beq.w	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005232:	f200 860e 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523c:	f000 8549 	beq.w	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005246:	f200 8604 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005250:	f000 84f5 	beq.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800525a:	f200 85fa 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005264:	f000 8496 	beq.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800526e:	f200 85f0 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b80      	cmp	r3, #128	@ 0x80
 8005276:	f000 8461 	beq.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b80      	cmp	r3, #128	@ 0x80
 800527e:	f200 85e8 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b20      	cmp	r3, #32
 8005286:	d84b      	bhi.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 85e1 	beq.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3b01      	subs	r3, #1
 8005294:	2b1f      	cmp	r3, #31
 8005296:	f200 85dc 	bhi.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800529a:	a201      	add	r2, pc, #4	@ (adr r2, 80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080056a1 	.word	0x080056a1
 80052a4:	0800570f 	.word	0x0800570f
 80052a8:	08005e53 	.word	0x08005e53
 80052ac:	080057a3 	.word	0x080057a3
 80052b0:	08005e53 	.word	0x08005e53
 80052b4:	08005e53 	.word	0x08005e53
 80052b8:	08005e53 	.word	0x08005e53
 80052bc:	0800581b 	.word	0x0800581b
 80052c0:	08005e53 	.word	0x08005e53
 80052c4:	08005e53 	.word	0x08005e53
 80052c8:	08005e53 	.word	0x08005e53
 80052cc:	08005e53 	.word	0x08005e53
 80052d0:	08005e53 	.word	0x08005e53
 80052d4:	08005e53 	.word	0x08005e53
 80052d8:	08005e53 	.word	0x08005e53
 80052dc:	0800589f 	.word	0x0800589f
 80052e0:	08005e53 	.word	0x08005e53
 80052e4:	08005e53 	.word	0x08005e53
 80052e8:	08005e53 	.word	0x08005e53
 80052ec:	08005e53 	.word	0x08005e53
 80052f0:	08005e53 	.word	0x08005e53
 80052f4:	08005e53 	.word	0x08005e53
 80052f8:	08005e53 	.word	0x08005e53
 80052fc:	08005e53 	.word	0x08005e53
 8005300:	08005e53 	.word	0x08005e53
 8005304:	08005e53 	.word	0x08005e53
 8005308:	08005e53 	.word	0x08005e53
 800530c:	08005e53 	.word	0x08005e53
 8005310:	08005e53 	.word	0x08005e53
 8005314:	08005e53 	.word	0x08005e53
 8005318:	08005e53 	.word	0x08005e53
 800531c:	08005921 	.word	0x08005921
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b40      	cmp	r3, #64	@ 0x40
 8005324:	f000 83de 	beq.w	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005328:	f000 bd93 	b.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005332:	f001 f89b 	bl	800646c <RCCEx_GetSAIxPeriphCLKFreq>
 8005336:	61f8      	str	r0, [r7, #28]
      break;
 8005338:	f000 bd8e 	b.w	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005342:	f001 f893 	bl	800646c <RCCEx_GetSAIxPeriphCLKFreq>
 8005346:	61f8      	str	r0, [r7, #28]
      break;
 8005348:	f000 bd86 	b.w	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800534c:	4b9a      	ldr	r3, [pc, #616]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005352:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800535e:	d015      	beq.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005366:	f200 8092 	bhi.w	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005370:	d029      	beq.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005378:	f200 8089 	bhi.w	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d07b      	beq.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005388:	d04a      	beq.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          break;
 800538a:	e080      	b.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800538c:	4b8a      	ldr	r3, [pc, #552]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b02      	cmp	r3, #2
 8005396:	d17d      	bne.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005398:	4b87      	ldr	r3, [pc, #540]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 80053a4:	4b84      	ldr	r3, [pc, #528]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	091b      	lsrs	r3, r3, #4
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	e005      	b.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80053b0:	4b81      	ldr	r3, [pc, #516]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80053b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053b6:	0a1b      	lsrs	r3, r3, #8
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	4a7f      	ldr	r2, [pc, #508]	@ (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>)
 80053be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c2:	61fb      	str	r3, [r7, #28]
          break;
 80053c4:	e066      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80053c6:	4b7c      	ldr	r3, [pc, #496]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053d2:	d162      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80053d4:	4b78      	ldr	r3, [pc, #480]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053e0:	d15b      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80053e2:	4b75      	ldr	r3, [pc, #468]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ec:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	fb03 f202 	mul.w	r2, r3, r2
 80053f6:	4b70      	ldr	r3, [pc, #448]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	091b      	lsrs	r3, r3, #4
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	3301      	adds	r3, #1
 8005402:	fbb2 f3f3 	udiv	r3, r2, r3
 8005406:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005408:	4b6b      	ldr	r3, [pc, #428]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	0d5b      	lsrs	r3, r3, #21
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	3301      	adds	r3, #1
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	61fb      	str	r3, [r7, #28]
          break;
 800541e:	e03c      	b.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005420:	4b65      	ldr	r3, [pc, #404]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800542c:	d138      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800542e:	4b62      	ldr	r3, [pc, #392]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800543a:	d131      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800543c:	4b5e      	ldr	r3, [pc, #376]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	0a1b      	lsrs	r3, r3, #8
 8005442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005446:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	fb03 f202 	mul.w	r2, r3, r2
 8005450:	4b59      	ldr	r3, [pc, #356]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	3301      	adds	r3, #1
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005462:	4b55      	ldr	r3, [pc, #340]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	0d5b      	lsrs	r3, r3, #21
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	3301      	adds	r3, #1
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	fbb2 f3f3 	udiv	r3, r2, r3
 8005476:	61fb      	str	r3, [r7, #28]
          break;
 8005478:	e012      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800547a:	4b4f      	ldr	r3, [pc, #316]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800547c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b02      	cmp	r3, #2
 8005486:	d10e      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
            frequency = HSI48_VALUE;
 8005488:	4b4d      	ldr	r3, [pc, #308]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>)
 800548a:	61fb      	str	r3, [r7, #28]
          break;
 800548c:	e00b      	b.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          break;
 800548e:	bf00      	nop
 8005490:	f000 bce2 	b.w	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005494:	bf00      	nop
 8005496:	f000 bcdf 	b.w	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800549a:	bf00      	nop
 800549c:	f000 bcdc 	b.w	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80054a0:	bf00      	nop
 80054a2:	f000 bcd9 	b.w	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80054a6:	bf00      	nop
        break;
 80054a8:	f000 bcd6 	b.w	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80054ac:	4b42      	ldr	r3, [pc, #264]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80054ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ba:	d13d      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80054bc:	4b3e      	ldr	r3, [pc, #248]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054c8:	f040 84c5 	bne.w	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80054cc:	4b3a      	ldr	r3, [pc, #232]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d8:	f040 84bd 	bne.w	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80054dc:	4b36      	ldr	r3, [pc, #216]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	0a1b      	lsrs	r3, r3, #8
 80054e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054e6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	fb03 f202 	mul.w	r2, r3, r2
 80054f0:	4b31      	ldr	r3, [pc, #196]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	3301      	adds	r3, #1
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005502:	4b2d      	ldr	r3, [pc, #180]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	0edb      	lsrs	r3, r3, #27
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005514:	4b28      	ldr	r3, [pc, #160]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x526>
                pllp = 17U;
 8005520:	2311      	movs	r3, #17
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	e001      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
                pllp = 7U;
 8005526:	2307      	movs	r3, #7
 8005528:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	61fb      	str	r3, [r7, #28]
      break;
 8005534:	f000 bc8f 	b.w	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005538:	4b1f      	ldr	r3, [pc, #124]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800554a:	d016      	beq.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005552:	f200 809b 	bhi.w	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800555c:	d032      	beq.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005564:	f200 8092 	bhi.w	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8084 	beq.w	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005576:	d052      	beq.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 8005578:	e088      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800557a:	4b0f      	ldr	r3, [pc, #60]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b02      	cmp	r3, #2
 8005584:	f040 8084 	bne.w	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005588:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005594:	4b08      	ldr	r3, [pc, #32]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	e005      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
 80055a0:	4b05      	ldr	r3, [pc, #20]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a6:	0a1b      	lsrs	r3, r3, #8
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	4a03      	ldr	r2, [pc, #12]	@ (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>)
 80055ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b2:	61fb      	str	r3, [r7, #28]
          break;
 80055b4:	e06c      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000
 80055bc:	080160c4 	.word	0x080160c4
 80055c0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80055c4:	4ba5      	ldr	r3, [pc, #660]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055d0:	d160      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80055d2:	4ba2      	ldr	r3, [pc, #648]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055de:	d159      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80055e0:	4b9e      	ldr	r3, [pc, #632]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ea:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	fb03 f202 	mul.w	r2, r3, r2
 80055f4:	4b99      	ldr	r3, [pc, #612]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	3301      	adds	r3, #1
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005606:	4b95      	ldr	r3, [pc, #596]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	0d5b      	lsrs	r3, r3, #21
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	3301      	adds	r3, #1
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	fbb2 f3f3 	udiv	r3, r2, r3
 800561a:	61fb      	str	r3, [r7, #28]
          break;
 800561c:	e03a      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800561e:	4b8f      	ldr	r3, [pc, #572]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800562a:	d135      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800562c:	4b8b      	ldr	r3, [pc, #556]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005638:	d12e      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800563a:	4b88      	ldr	r3, [pc, #544]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005644:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	fb03 f202 	mul.w	r2, r3, r2
 800564e:	4b83      	ldr	r3, [pc, #524]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	091b      	lsrs	r3, r3, #4
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	3301      	adds	r3, #1
 800565a:	fbb2 f3f3 	udiv	r3, r2, r3
 800565e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005660:	4b7e      	ldr	r3, [pc, #504]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	0d5b      	lsrs	r3, r3, #21
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	3301      	adds	r3, #1
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	61fb      	str	r3, [r7, #28]
          break;
 8005676:	e00f      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005678:	4b78      	ldr	r3, [pc, #480]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800567a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b02      	cmp	r3, #2
 8005684:	d10a      	bne.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI48_VALUE;
 8005686:	4b76      	ldr	r3, [pc, #472]	@ (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8005688:	61fb      	str	r3, [r7, #28]
          break;
 800568a:	e007      	b.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          break;
 800568c:	bf00      	nop
 800568e:	e3e2      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 8005690:	bf00      	nop
 8005692:	e3e0      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 8005694:	bf00      	nop
 8005696:	e3de      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 8005698:	bf00      	nop
 800569a:	e3dc      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 800569c:	bf00      	nop
      break;
 800569e:	e3da      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80056a0:	4b6e      	ldr	r3, [pc, #440]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d827      	bhi.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80056b2:	a201      	add	r2, pc, #4	@ (adr r2, 80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056c9 	.word	0x080056c9
 80056bc:	080056d1 	.word	0x080056d1
 80056c0:	080056d9 	.word	0x080056d9
 80056c4:	080056ed 	.word	0x080056ed
          frequency = HAL_RCC_GetPCLK2Freq();
 80056c8:	f7fe fdec 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 80056cc:	61f8      	str	r0, [r7, #28]
          break;
 80056ce:	e01d      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetSysClockFreq();
 80056d0:	f7fe fd3a 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 80056d4:	61f8      	str	r0, [r7, #28]
          break;
 80056d6:	e019      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056d8:	4b60      	ldr	r3, [pc, #384]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e4:	d10f      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
            frequency = HSI_VALUE;
 80056e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80056e8:	61fb      	str	r3, [r7, #28]
          break;
 80056ea:	e00c      	b.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056ec:	4b5b      	ldr	r3, [pc, #364]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d107      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
            frequency = LSE_VALUE;
 80056fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056fe:	61fb      	str	r3, [r7, #28]
          break;
 8005700:	e003      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          break;
 8005702:	bf00      	nop
 8005704:	e3a8      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005706:	bf00      	nop
 8005708:	e3a6      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800570a:	bf00      	nop
        break;
 800570c:	e3a4      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800570e:	4b53      	ldr	r3, [pc, #332]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b0c      	cmp	r3, #12
 800571e:	d83a      	bhi.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8005720:	a201      	add	r2, pc, #4	@ (adr r2, 8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x728>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	0800575d 	.word	0x0800575d
 800572c:	08005797 	.word	0x08005797
 8005730:	08005797 	.word	0x08005797
 8005734:	08005797 	.word	0x08005797
 8005738:	08005765 	.word	0x08005765
 800573c:	08005797 	.word	0x08005797
 8005740:	08005797 	.word	0x08005797
 8005744:	08005797 	.word	0x08005797
 8005748:	0800576d 	.word	0x0800576d
 800574c:	08005797 	.word	0x08005797
 8005750:	08005797 	.word	0x08005797
 8005754:	08005797 	.word	0x08005797
 8005758:	08005781 	.word	0x08005781
          frequency = HAL_RCC_GetPCLK1Freq();
 800575c:	f7fe fd8c 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005760:	61f8      	str	r0, [r7, #28]
          break;
 8005762:	e01d      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005764:	f7fe fcf0 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005768:	61f8      	str	r0, [r7, #28]
          break;
 800576a:	e019      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800576c:	4b3b      	ldr	r3, [pc, #236]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005778:	d10f      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
            frequency = HSI_VALUE;
 800577a:	4b3a      	ldr	r3, [pc, #232]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800577c:	61fb      	str	r3, [r7, #28]
          break;
 800577e:	e00c      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005780:	4b36      	ldr	r3, [pc, #216]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b02      	cmp	r3, #2
 800578c:	d107      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
            frequency = LSE_VALUE;
 800578e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005792:	61fb      	str	r3, [r7, #28]
          break;
 8005794:	e003      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          break;
 8005796:	bf00      	nop
 8005798:	e35e      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800579a:	bf00      	nop
 800579c:	e35c      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800579e:	bf00      	nop
        break;
 80057a0:	e35a      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80057a2:	4b2e      	ldr	r3, [pc, #184]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80057a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b30      	cmp	r3, #48	@ 0x30
 80057b2:	d021      	beq.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b30      	cmp	r3, #48	@ 0x30
 80057b8:	d829      	bhi.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d011      	beq.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d823      	bhi.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d004      	beq.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          break;
 80057d2:	e01c      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057d4:	f7fe fd50 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 80057d8:	61f8      	str	r0, [r7, #28]
          break;
 80057da:	e01d      	b.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
          frequency = HAL_RCC_GetSysClockFreq();
 80057dc:	f7fe fcb4 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 80057e0:	61f8      	str	r0, [r7, #28]
          break;
 80057e2:	e019      	b.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057e4:	4b1d      	ldr	r3, [pc, #116]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f0:	d10f      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            frequency = HSI_VALUE;
 80057f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80057f4:	61fb      	str	r3, [r7, #28]
          break;
 80057f6:	e00c      	b.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057f8:	4b18      	ldr	r3, [pc, #96]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b02      	cmp	r3, #2
 8005804:	d107      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = LSE_VALUE;
 8005806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800580a:	61fb      	str	r3, [r7, #28]
          break;
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          break;
 800580e:	bf00      	nop
 8005810:	e322      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005812:	bf00      	nop
 8005814:	e320      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005816:	bf00      	nop
        break;
 8005818:	e31e      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800581a:	4b10      	ldr	r3, [pc, #64]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005820:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2bc0      	cmp	r3, #192	@ 0xc0
 800582a:	d027      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005830:	d82f      	bhi.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b80      	cmp	r3, #128	@ 0x80
 8005836:	d017      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b80      	cmp	r3, #128	@ 0x80
 800583c:	d829      	bhi.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b40      	cmp	r3, #64	@ 0x40
 8005848:	d004      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
          break;
 800584a:	e022      	b.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800584c:	f7fe fd14 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005850:	61f8      	str	r0, [r7, #28]
          break;
 8005852:	e023      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005854:	f7fe fc78 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005858:	61f8      	str	r0, [r7, #28]
          break;
 800585a:	e01f      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800585c:	40021000 	.word	0x40021000
 8005860:	02dc6c00 	.word	0x02dc6c00
 8005864:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005868:	4b9b      	ldr	r3, [pc, #620]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005874:	d10f      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8005876:	4b99      	ldr	r3, [pc, #612]	@ (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005878:	61fb      	str	r3, [r7, #28]
          break;
 800587a:	e00c      	b.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800587c:	4b96      	ldr	r3, [pc, #600]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b02      	cmp	r3, #2
 8005888:	d107      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = LSE_VALUE;
 800588a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800588e:	61fb      	str	r3, [r7, #28]
          break;
 8005890:	e003      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          break;
 8005892:	bf00      	nop
 8005894:	e2e0      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005896:	bf00      	nop
 8005898:	e2de      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800589a:	bf00      	nop
        break;
 800589c:	e2dc      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800589e:	4b8e      	ldr	r3, [pc, #568]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b0:	d025      	beq.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b8:	d82c      	bhi.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c0:	d013      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c8:	d824      	bhi.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d6:	d004      	beq.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
          break;
 80058d8:	e01c      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058da:	f7fe fccd 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 80058de:	61f8      	str	r0, [r7, #28]
          break;
 80058e0:	e01d      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
          frequency = HAL_RCC_GetSysClockFreq();
 80058e2:	f7fe fc31 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 80058e6:	61f8      	str	r0, [r7, #28]
          break;
 80058e8:	e019      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058ea:	4b7b      	ldr	r3, [pc, #492]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058f6:	d10f      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            frequency = HSI_VALUE;
 80058f8:	4b78      	ldr	r3, [pc, #480]	@ (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80058fa:	61fb      	str	r3, [r7, #28]
          break;
 80058fc:	e00c      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058fe:	4b76      	ldr	r3, [pc, #472]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d107      	bne.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = LSE_VALUE;
 800590c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005910:	61fb      	str	r3, [r7, #28]
          break;
 8005912:	e003      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          break;
 8005914:	bf00      	nop
 8005916:	e29f      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005918:	bf00      	nop
 800591a:	e29d      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800591c:	bf00      	nop
        break;
 800591e:	e29b      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005920:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005926:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005932:	d025      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800593a:	d82c      	bhi.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005942:	d013      	beq.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800594a:	d824      	bhi.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d004      	beq.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005958:	d004      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          break;
 800595a:	e01c      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
          frequency = HAL_RCC_GetPCLK1Freq();
 800595c:	f7fe fc8c 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005960:	61f8      	str	r0, [r7, #28]
          break;
 8005962:	e01d      	b.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005964:	f7fe fbf0 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005968:	61f8      	str	r0, [r7, #28]
          break;
 800596a:	e019      	b.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800596c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005978:	d10f      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            frequency = HSI_VALUE;
 800597a:	4b58      	ldr	r3, [pc, #352]	@ (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800597c:	61fb      	str	r3, [r7, #28]
          break;
 800597e:	e00c      	b.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005980:	4b55      	ldr	r3, [pc, #340]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b02      	cmp	r3, #2
 800598c:	d107      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = LSE_VALUE;
 800598e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005992:	61fb      	str	r3, [r7, #28]
          break;
 8005994:	e003      	b.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          break;
 8005996:	bf00      	nop
 8005998:	e25e      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800599a:	bf00      	nop
 800599c:	e25c      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800599e:	bf00      	nop
        break;
 80059a0:	e25a      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80059a2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059b4:	d007      	beq.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059bc:	d12f      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = HAL_RCC_GetSysClockFreq();
 80059be:	f7fe fbc3 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 80059c2:	61f8      	str	r0, [r7, #28]
          break;
 80059c4:	e02e      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80059c6:	4b44      	ldr	r3, [pc, #272]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059d2:	d126      	bne.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 80059d4:	4b40      	ldr	r3, [pc, #256]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d020      	beq.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80059e0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059ea:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	fb03 f202 	mul.w	r2, r3, r2
 80059f4:	4b38      	ldr	r3, [pc, #224]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	3301      	adds	r3, #1
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005a06:	4b34      	ldr	r3, [pc, #208]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	0e5b      	lsrs	r3, r3, #25
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	3301      	adds	r3, #1
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	61fb      	str	r3, [r7, #28]
          break;
 8005a1c:	e001      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8005a1e:	bf00      	nop
 8005a20:	e21a      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005a22:	bf00      	nop
        break;
 8005a24:	e218      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005a26:	4b2c      	ldr	r3, [pc, #176]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d103      	bne.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005a38:	f7fe fc34 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 8005a3c:	61f8      	str	r0, [r7, #28]
        break;
 8005a3e:	e20b      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a40:	f7fe fb82 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005a44:	61f8      	str	r0, [r7, #28]
        break;
 8005a46:	e207      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005a48:	4b23      	ldr	r3, [pc, #140]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a4e:	f003 0318 	and.w	r3, r3, #24
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d010      	beq.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d834      	bhi.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d024      	beq.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          break;
 8005a6c:	e02d      	b.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005a6e:	69b9      	ldr	r1, [r7, #24]
 8005a70:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005a74:	f000 fcfa 	bl	800646c <RCCEx_GetSAIxPeriphCLKFreq>
 8005a78:	61f8      	str	r0, [r7, #28]
          break;
 8005a7a:	e02b      	b.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a7c:	4b16      	ldr	r3, [pc, #88]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d122      	bne.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005a88:	4b13      	ldr	r3, [pc, #76]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8005a94:	4b10      	ldr	r3, [pc, #64]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	091b      	lsrs	r3, r3, #4
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	e005      	b.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab2:	61fb      	str	r3, [r7, #28]
          break;
 8005ab4:	e00b      	b.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0xace>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ab6:	4b08      	ldr	r3, [pc, #32]	@ (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ac2:	d106      	bne.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            frequency = HSI_VALUE;
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005ac6:	61fb      	str	r3, [r7, #28]
          break;
 8005ac8:	e003      	b.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
          break;
 8005aca:	bf00      	nop
 8005acc:	e1c4      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005ace:	bf00      	nop
 8005ad0:	e1c2      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005ad2:	bf00      	nop
        break;
 8005ad4:	e1c0      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8005ad6:	bf00      	nop
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	00f42400 	.word	0x00f42400
 8005ae0:	080160c4 	.word	0x080160c4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005ae4:	4b96      	ldr	r3, [pc, #600]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af6:	d013      	beq.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005afe:	d819      	bhi.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d004      	beq.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0c:	d004      	beq.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
          break;
 8005b0e:	e011      	b.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7fe fbb2 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005b14:	61f8      	str	r0, [r7, #28]
          break;
 8005b16:	e010      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b18:	f7fe fb16 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005b1c:	61f8      	str	r0, [r7, #28]
          break;
 8005b1e:	e00c      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b20:	4b87      	ldr	r3, [pc, #540]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2c:	d104      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            frequency = HSI_VALUE;
 8005b2e:	4b85      	ldr	r3, [pc, #532]	@ (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005b30:	61fb      	str	r3, [r7, #28]
          break;
 8005b32:	e001      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
          break;
 8005b34:	bf00      	nop
 8005b36:	e18f      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005b38:	bf00      	nop
        break;
 8005b3a:	e18d      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005b3c:	4b80      	ldr	r3, [pc, #512]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b42:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b4e:	d013      	beq.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b56:	d819      	bhi.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b64:	d004      	beq.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
          break;
 8005b66:	e011      	b.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b68:	f7fe fb86 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005b6c:	61f8      	str	r0, [r7, #28]
          break;
 8005b6e:	e010      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b70:	f7fe faea 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005b74:	61f8      	str	r0, [r7, #28]
          break;
 8005b76:	e00c      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b78:	4b71      	ldr	r3, [pc, #452]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b84:	d104      	bne.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            frequency = HSI_VALUE;
 8005b86:	4b6f      	ldr	r3, [pc, #444]	@ (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005b88:	61fb      	str	r3, [r7, #28]
          break;
 8005b8a:	e001      	b.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
          break;
 8005b8c:	bf00      	nop
 8005b8e:	e163      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005b90:	bf00      	nop
        break;
 8005b92:	e161      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005b94:	4b6a      	ldr	r3, [pc, #424]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ba6:	d013      	beq.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bae:	d819      	bhi.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bbc:	d004      	beq.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
          break;
 8005bbe:	e011      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bc0:	f7fe fb5a 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005bc4:	61f8      	str	r0, [r7, #28]
          break;
 8005bc6:	e010      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bc8:	f7fe fabe 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005bcc:	61f8      	str	r0, [r7, #28]
          break;
 8005bce:	e00c      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bd0:	4b5b      	ldr	r3, [pc, #364]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bdc:	d104      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            frequency = HSI_VALUE;
 8005bde:	4b59      	ldr	r3, [pc, #356]	@ (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005be0:	61fb      	str	r3, [r7, #28]
          break;
 8005be2:	e001      	b.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          break;
 8005be4:	bf00      	nop
 8005be6:	e137      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005be8:	bf00      	nop
        break;
 8005bea:	e135      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005bec:	4b54      	ldr	r3, [pc, #336]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d011      	beq.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d818      	bhi.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d004      	beq.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8005c10:	e011      	b.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c12:	f7fe fb31 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005c16:	61f8      	str	r0, [r7, #28]
          break;
 8005c18:	e010      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c1a:	f7fe fa95 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005c1e:	61f8      	str	r0, [r7, #28]
          break;
 8005c20:	e00c      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c22:	4b47      	ldr	r3, [pc, #284]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c2e:	d104      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            frequency = HSI_VALUE;
 8005c30:	4b44      	ldr	r3, [pc, #272]	@ (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005c32:	61fb      	str	r3, [r7, #28]
          break;
 8005c34:	e001      	b.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
          break;
 8005c36:	bf00      	nop
 8005c38:	e10e      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005c3a:	bf00      	nop
        break;
 8005c3c:	e10c      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c3e:	4b40      	ldr	r3, [pc, #256]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c44:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c50:	d02c      	beq.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c58:	d833      	bhi.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c60:	d01a      	beq.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c68:	d82b      	bhi.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c76:	d004      	beq.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
          break;
 8005c78:	e023      	b.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c7a:	f7fe fafd 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005c7e:	61f8      	str	r0, [r7, #28]
          break;
 8005c80:	e026      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c82:	4b2f      	ldr	r3, [pc, #188]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d11a      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 8005c90:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005c94:	61fb      	str	r3, [r7, #28]
          break;
 8005c96:	e016      	b.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c98:	4b29      	ldr	r3, [pc, #164]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca4:	d111      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            frequency = HSI_VALUE;
 8005ca6:	4b27      	ldr	r3, [pc, #156]	@ (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005ca8:	61fb      	str	r3, [r7, #28]
          break;
 8005caa:	e00e      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cac:	4b24      	ldr	r3, [pc, #144]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d109      	bne.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            frequency = LSE_VALUE;
 8005cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cbe:	61fb      	str	r3, [r7, #28]
          break;
 8005cc0:	e005      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
          break;
 8005cc2:	bf00      	nop
 8005cc4:	e0c8      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005cc6:	bf00      	nop
 8005cc8:	e0c6      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005cca:	bf00      	nop
 8005ccc:	e0c4      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005cce:	bf00      	nop
        break;
 8005cd0:	e0c2      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ce4:	d030      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cec:	d837      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cf4:	d01a      	beq.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cfc:	d82f      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d0a:	d004      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
          break;
 8005d0c:	e027      	b.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d0e:	f7fe fab3 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005d12:	61f8      	str	r0, [r7, #28]
          break;
 8005d14:	e02a      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d16:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d11e      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8005d24:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005d28:	61fb      	str	r3, [r7, #28]
          break;
 8005d2a:	e01a      	b.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d2c:	4b04      	ldr	r3, [pc, #16]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d38:	d115      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
            frequency = HSI_VALUE;
 8005d3a:	4b02      	ldr	r3, [pc, #8]	@ (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005d3c:	61fb      	str	r3, [r7, #28]
          break;
 8005d3e:	e012      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 8005d40:	40021000 	.word	0x40021000
 8005d44:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d48:	4b46      	ldr	r3, [pc, #280]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d109      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            frequency = LSE_VALUE;
 8005d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d5a:	61fb      	str	r3, [r7, #28]
          break;
 8005d5c:	e005      	b.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
          break;
 8005d5e:	bf00      	nop
 8005d60:	e07a      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005d62:	bf00      	nop
 8005d64:	e078      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005d66:	bf00      	nop
 8005d68:	e076      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005d6a:	bf00      	nop
        break;
 8005d6c:	e074      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d74:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d80:	d02c      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d88:	d855      	bhi.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d96:	d004      	beq.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0xda2>
          break;
 8005d98:	e04d      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d9a:	f7fe f9d5 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005d9e:	61f8      	str	r0, [r7, #28]
          break;
 8005da0:	e04e      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005da2:	4b30      	ldr	r3, [pc, #192]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d145      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005dae:	4b2d      	ldr	r3, [pc, #180]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xdc6>
 8005dba:	4b2a      	ldr	r3, [pc, #168]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	091b      	lsrs	r3, r3, #4
 8005dc0:	f003 030f 	and.w	r3, r3, #15
 8005dc4:	e005      	b.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8005dc6:	4b27      	ldr	r3, [pc, #156]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dcc:	0a1b      	lsrs	r3, r3, #8
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	4a25      	ldr	r2, [pc, #148]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>)
 8005dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd8:	61fb      	str	r3, [r7, #28]
          break;
 8005dda:	e02e      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005ddc:	4b21      	ldr	r3, [pc, #132]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005de4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005de8:	d129      	bne.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005dea:	4b1e      	ldr	r3, [pc, #120]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df6:	d122      	bne.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005df8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e02:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	fb03 f202 	mul.w	r2, r3, r2
 8005e0c:	4b15      	ldr	r3, [pc, #84]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	091b      	lsrs	r3, r3, #4
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	3301      	adds	r3, #1
 8005e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005e1e:	4b11      	ldr	r3, [pc, #68]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	0d5b      	lsrs	r3, r3, #21
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	3301      	adds	r3, #1
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e32:	61fb      	str	r3, [r7, #28]
          break;
 8005e34:	e003      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
          break;
 8005e36:	bf00      	nop
 8005e38:	e00e      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005e3a:	bf00      	nop
 8005e3c:	e00c      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005e3e:	bf00      	nop
        break;
 8005e40:	e00a      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e42:	bf00      	nop
 8005e44:	e008      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e46:	bf00      	nop
 8005e48:	e006      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e4a:	bf00      	nop
 8005e4c:	e004      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e4e:	bf00      	nop
 8005e50:	e002      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e52:	bf00      	nop
 8005e54:	e000      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e56:	bf00      	nop
    }
  }

  return(frequency);
 8005e58:	69fb      	ldr	r3, [r7, #28]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40021000 	.word	0x40021000
 8005e68:	080160c4 	.word	0x080160c4

08005e6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d010      	beq.n	8005ea4 <RCCEx_PLLSAI1_Config+0x38>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d00c      	beq.n	8005ea4 <RCCEx_PLLSAI1_Config+0x38>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d008      	beq.n	8005ea4 <RCCEx_PLLSAI1_Config+0x38>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d004      	beq.n	8005ea4 <RCCEx_PLLSAI1_Config+0x38>
 8005e9a:	f640 3162 	movw	r1, #2914	@ 0xb62
 8005e9e:	4882      	ldr	r0, [pc, #520]	@ (80060a8 <RCCEx_PLLSAI1_Config+0x23c>)
 8005ea0:	f00d fb54 	bl	801354c <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <RCCEx_PLLSAI1_Config+0x48>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d904      	bls.n	8005ebe <RCCEx_PLLSAI1_Config+0x52>
 8005eb4:	f640 3163 	movw	r1, #2915	@ 0xb63
 8005eb8:	487b      	ldr	r0, [pc, #492]	@ (80060a8 <RCCEx_PLLSAI1_Config+0x23c>)
 8005eba:	f00d fb47 	bl	801354c <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b07      	cmp	r3, #7
 8005ec4:	d903      	bls.n	8005ece <RCCEx_PLLSAI1_Config+0x62>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ecc:	d904      	bls.n	8005ed8 <RCCEx_PLLSAI1_Config+0x6c>
 8005ece:	f640 3164 	movw	r1, #2916	@ 0xb64
 8005ed2:	4875      	ldr	r0, [pc, #468]	@ (80060a8 <RCCEx_PLLSAI1_Config+0x23c>)
 8005ed4:	f00d fb3a 	bl	801354c <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <RCCEx_PLLSAI1_Config+0x90>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d105      	bne.n	8005efc <RCCEx_PLLSAI1_Config+0x90>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d007      	beq.n	8005f0c <RCCEx_PLLSAI1_Config+0xa0>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <RCCEx_PLLSAI1_Config+0xaa>
 8005f0c:	f640 3165 	movw	r1, #2917	@ 0xb65
 8005f10:	4865      	ldr	r0, [pc, #404]	@ (80060a8 <RCCEx_PLLSAI1_Config+0x23c>)
 8005f12:	f00d fb1b 	bl	801354c <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f16:	4b65      	ldr	r3, [pc, #404]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <RCCEx_PLLSAI1_Config+0xd4>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f22:	4b62      	ldr	r3, [pc, #392]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f003 0203 	and.w	r2, r3, #3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d103      	bne.n	8005f3a <RCCEx_PLLSAI1_Config+0xce>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
       ||
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d142      	bne.n	8005fc0 <RCCEx_PLLSAI1_Config+0x154>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
 8005f3e:	e03f      	b.n	8005fc0 <RCCEx_PLLSAI1_Config+0x154>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d018      	beq.n	8005f7a <RCCEx_PLLSAI1_Config+0x10e>
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d825      	bhi.n	8005f98 <RCCEx_PLLSAI1_Config+0x12c>
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d002      	beq.n	8005f56 <RCCEx_PLLSAI1_Config+0xea>
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d009      	beq.n	8005f68 <RCCEx_PLLSAI1_Config+0xfc>
 8005f54:	e020      	b.n	8005f98 <RCCEx_PLLSAI1_Config+0x12c>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f56:	4b55      	ldr	r3, [pc, #340]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d11d      	bne.n	8005f9e <RCCEx_PLLSAI1_Config+0x132>
      {
        status = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f66:	e01a      	b.n	8005f9e <RCCEx_PLLSAI1_Config+0x132>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f68:	4b50      	ldr	r3, [pc, #320]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d116      	bne.n	8005fa2 <RCCEx_PLLSAI1_Config+0x136>
      {
        status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f78:	e013      	b.n	8005fa2 <RCCEx_PLLSAI1_Config+0x136>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10f      	bne.n	8005fa6 <RCCEx_PLLSAI1_Config+0x13a>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f86:	4b49      	ldr	r3, [pc, #292]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <RCCEx_PLLSAI1_Config+0x13a>
        {
          status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f96:	e006      	b.n	8005fa6 <RCCEx_PLLSAI1_Config+0x13a>
    default:
      status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9c:	e004      	b.n	8005fa8 <RCCEx_PLLSAI1_Config+0x13c>
      break;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <RCCEx_PLLSAI1_Config+0x13c>
      break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <RCCEx_PLLSAI1_Config+0x13c>
      break;
 8005fa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d108      	bne.n	8005fc0 <RCCEx_PLLSAI1_Config+0x154>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005fae:	4b3f      	ldr	r3, [pc, #252]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f023 0203 	bic.w	r2, r3, #3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	493c      	ldr	r1, [pc, #240]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f040 80c6 	bne.w	8006154 <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005fc8:	4b38      	ldr	r3, [pc, #224]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a37      	ldr	r2, [pc, #220]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005fce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd4:	f7fa fb10 	bl	80005f8 <HAL_GetTick>
 8005fd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fda:	e009      	b.n	8005ff0 <RCCEx_PLLSAI1_Config+0x184>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fdc:	f7fa fb0c 	bl	80005f8 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d902      	bls.n	8005ff0 <RCCEx_PLLSAI1_Config+0x184>
      {
        status = HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	73fb      	strb	r3, [r7, #15]
        break;
 8005fee:	e005      	b.n	8005ffc <RCCEx_PLLSAI1_Config+0x190>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1ef      	bne.n	8005fdc <RCCEx_PLLSAI1_Config+0x170>
      }
    }

    if(status == HAL_OK)
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f040 80a8 	bne.w	8006154 <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d120      	bne.n	800604c <RCCEx_PLLSAI1_Config+0x1e0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d903      	bls.n	800601a <RCCEx_PLLSAI1_Config+0x1ae>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	2b1f      	cmp	r3, #31
 8006018:	d904      	bls.n	8006024 <RCCEx_PLLSAI1_Config+0x1b8>
 800601a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800601e:	4822      	ldr	r0, [pc, #136]	@ (80060a8 <RCCEx_PLLSAI1_Config+0x23c>)
 8006020:	f00d fa94 	bl	801354c <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006024:	4b21      	ldr	r3, [pc, #132]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	4b21      	ldr	r3, [pc, #132]	@ (80060b0 <RCCEx_PLLSAI1_Config+0x244>)
 800602a:	4013      	ands	r3, r2
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6892      	ldr	r2, [r2, #8]
 8006030:	0211      	lsls	r1, r2, #8
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68d2      	ldr	r2, [r2, #12]
 8006036:	06d2      	lsls	r2, r2, #27
 8006038:	4311      	orrs	r1, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6852      	ldr	r2, [r2, #4]
 800603e:	3a01      	subs	r2, #1
 8006040:	0112      	lsls	r2, r2, #4
 8006042:	430a      	orrs	r2, r1
 8006044:	4919      	ldr	r1, [pc, #100]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 8006046:	4313      	orrs	r3, r2
 8006048:	610b      	str	r3, [r1, #16]
 800604a:	e05f      	b.n	800610c <RCCEx_PLLSAI1_Config+0x2a0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d132      	bne.n	80060b8 <RCCEx_PLLSAI1_Config+0x24c>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d010      	beq.n	800607c <RCCEx_PLLSAI1_Config+0x210>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b04      	cmp	r3, #4
 8006060:	d00c      	beq.n	800607c <RCCEx_PLLSAI1_Config+0x210>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b06      	cmp	r3, #6
 8006068:	d008      	beq.n	800607c <RCCEx_PLLSAI1_Config+0x210>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b08      	cmp	r3, #8
 8006070:	d004      	beq.n	800607c <RCCEx_PLLSAI1_Config+0x210>
 8006072:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8006076:	480c      	ldr	r0, [pc, #48]	@ (80060a8 <RCCEx_PLLSAI1_Config+0x23c>)
 8006078:	f00d fa68 	bl	801354c <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800607c:	4b0b      	ldr	r3, [pc, #44]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <RCCEx_PLLSAI1_Config+0x248>)
 8006082:	4013      	ands	r3, r2
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6892      	ldr	r2, [r2, #8]
 8006088:	0211      	lsls	r1, r2, #8
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6912      	ldr	r2, [r2, #16]
 800608e:	0852      	lsrs	r2, r2, #1
 8006090:	3a01      	subs	r2, #1
 8006092:	0552      	lsls	r2, r2, #21
 8006094:	4311      	orrs	r1, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6852      	ldr	r2, [r2, #4]
 800609a:	3a01      	subs	r2, #1
 800609c:	0112      	lsls	r2, r2, #4
 800609e:	430a      	orrs	r2, r1
 80060a0:	4902      	ldr	r1, [pc, #8]	@ (80060ac <RCCEx_PLLSAI1_Config+0x240>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	610b      	str	r3, [r1, #16]
 80060a6:	e031      	b.n	800610c <RCCEx_PLLSAI1_Config+0x2a0>
 80060a8:	08015898 	.word	0x08015898
 80060ac:	40021000 	.word	0x40021000
 80060b0:	07ff800f 	.word	0x07ff800f
 80060b4:	ff9f800f 	.word	0xff9f800f
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d010      	beq.n	80060e2 <RCCEx_PLLSAI1_Config+0x276>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d00c      	beq.n	80060e2 <RCCEx_PLLSAI1_Config+0x276>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d008      	beq.n	80060e2 <RCCEx_PLLSAI1_Config+0x276>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d004      	beq.n	80060e2 <RCCEx_PLLSAI1_Config+0x276>
 80060d8:	f640 31ee 	movw	r1, #3054	@ 0xbee
 80060dc:	4820      	ldr	r0, [pc, #128]	@ (8006160 <RCCEx_PLLSAI1_Config+0x2f4>)
 80060de:	f00d fa35 	bl	801354c <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060e2:	4b20      	ldr	r3, [pc, #128]	@ (8006164 <RCCEx_PLLSAI1_Config+0x2f8>)
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	4b20      	ldr	r3, [pc, #128]	@ (8006168 <RCCEx_PLLSAI1_Config+0x2fc>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6892      	ldr	r2, [r2, #8]
 80060ee:	0211      	lsls	r1, r2, #8
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6952      	ldr	r2, [r2, #20]
 80060f4:	0852      	lsrs	r2, r2, #1
 80060f6:	3a01      	subs	r2, #1
 80060f8:	0652      	lsls	r2, r2, #25
 80060fa:	4311      	orrs	r1, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6852      	ldr	r2, [r2, #4]
 8006100:	3a01      	subs	r2, #1
 8006102:	0112      	lsls	r2, r2, #4
 8006104:	430a      	orrs	r2, r1
 8006106:	4917      	ldr	r1, [pc, #92]	@ (8006164 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006108:	4313      	orrs	r3, r2
 800610a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800610c:	4b15      	ldr	r3, [pc, #84]	@ (8006164 <RCCEx_PLLSAI1_Config+0x2f8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a14      	ldr	r2, [pc, #80]	@ (8006164 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006112:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006116:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006118:	f7fa fa6e 	bl	80005f8 <HAL_GetTick>
 800611c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800611e:	e009      	b.n	8006134 <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006120:	f7fa fa6a 	bl	80005f8 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d902      	bls.n	8006134 <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	73fb      	strb	r3, [r7, #15]
          break;
 8006132:	e005      	b.n	8006140 <RCCEx_PLLSAI1_Config+0x2d4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006134:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0ef      	beq.n	8006120 <RCCEx_PLLSAI1_Config+0x2b4>
        }
      }

      if(status == HAL_OK)
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006146:	4b07      	ldr	r3, [pc, #28]	@ (8006164 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	4905      	ldr	r1, [pc, #20]	@ (8006164 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006150:	4313      	orrs	r3, r2
 8006152:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	08015898 	.word	0x08015898
 8006164:	40021000 	.word	0x40021000
 8006168:	f9ff800f 	.word	0xf9ff800f

0800616c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d010      	beq.n	80061a4 <RCCEx_PLLSAI2_Config+0x38>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d00c      	beq.n	80061a4 <RCCEx_PLLSAI2_Config+0x38>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d008      	beq.n	80061a4 <RCCEx_PLLSAI2_Config+0x38>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b03      	cmp	r3, #3
 8006198:	d004      	beq.n	80061a4 <RCCEx_PLLSAI2_Config+0x38>
 800619a:	f640 412f 	movw	r1, #3119	@ 0xc2f
 800619e:	4882      	ldr	r0, [pc, #520]	@ (80063a8 <RCCEx_PLLSAI2_Config+0x23c>)
 80061a0:	f00d f9d4 	bl	801354c <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <RCCEx_PLLSAI2_Config+0x48>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d904      	bls.n	80061be <RCCEx_PLLSAI2_Config+0x52>
 80061b4:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 80061b8:	487b      	ldr	r0, [pc, #492]	@ (80063a8 <RCCEx_PLLSAI2_Config+0x23c>)
 80061ba:	f00d f9c7 	bl	801354c <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b07      	cmp	r3, #7
 80061c4:	d903      	bls.n	80061ce <RCCEx_PLLSAI2_Config+0x62>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80061cc:	d904      	bls.n	80061d8 <RCCEx_PLLSAI2_Config+0x6c>
 80061ce:	f640 4131 	movw	r1, #3121	@ 0xc31
 80061d2:	4875      	ldr	r0, [pc, #468]	@ (80063a8 <RCCEx_PLLSAI2_Config+0x23c>)
 80061d4:	f00d f9ba 	bl	801354c <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10b      	bne.n	80061fc <RCCEx_PLLSAI2_Config+0x90>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <RCCEx_PLLSAI2_Config+0x90>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <RCCEx_PLLSAI2_Config+0xa0>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8006204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d004      	beq.n	8006216 <RCCEx_PLLSAI2_Config+0xaa>
 800620c:	f640 4132 	movw	r1, #3122	@ 0xc32
 8006210:	4865      	ldr	r0, [pc, #404]	@ (80063a8 <RCCEx_PLLSAI2_Config+0x23c>)
 8006212:	f00d f99b 	bl	801354c <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006216:	4b65      	ldr	r3, [pc, #404]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00e      	beq.n	8006240 <RCCEx_PLLSAI2_Config+0xd4>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006222:	4b62      	ldr	r3, [pc, #392]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f003 0203 	and.w	r2, r3, #3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d103      	bne.n	800623a <RCCEx_PLLSAI2_Config+0xce>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
       ||
 8006236:	2b00      	cmp	r3, #0
 8006238:	d142      	bne.n	80062c0 <RCCEx_PLLSAI2_Config+0x154>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	73fb      	strb	r3, [r7, #15]
 800623e:	e03f      	b.n	80062c0 <RCCEx_PLLSAI2_Config+0x154>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d018      	beq.n	800627a <RCCEx_PLLSAI2_Config+0x10e>
 8006248:	2b03      	cmp	r3, #3
 800624a:	d825      	bhi.n	8006298 <RCCEx_PLLSAI2_Config+0x12c>
 800624c:	2b01      	cmp	r3, #1
 800624e:	d002      	beq.n	8006256 <RCCEx_PLLSAI2_Config+0xea>
 8006250:	2b02      	cmp	r3, #2
 8006252:	d009      	beq.n	8006268 <RCCEx_PLLSAI2_Config+0xfc>
 8006254:	e020      	b.n	8006298 <RCCEx_PLLSAI2_Config+0x12c>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006256:	4b55      	ldr	r3, [pc, #340]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d11d      	bne.n	800629e <RCCEx_PLLSAI2_Config+0x132>
      {
        status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006266:	e01a      	b.n	800629e <RCCEx_PLLSAI2_Config+0x132>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006268:	4b50      	ldr	r3, [pc, #320]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006270:	2b00      	cmp	r3, #0
 8006272:	d116      	bne.n	80062a2 <RCCEx_PLLSAI2_Config+0x136>
      {
        status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006278:	e013      	b.n	80062a2 <RCCEx_PLLSAI2_Config+0x136>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800627a:	4b4c      	ldr	r3, [pc, #304]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10f      	bne.n	80062a6 <RCCEx_PLLSAI2_Config+0x13a>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006286:	4b49      	ldr	r3, [pc, #292]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <RCCEx_PLLSAI2_Config+0x13a>
        {
          status = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006296:	e006      	b.n	80062a6 <RCCEx_PLLSAI2_Config+0x13a>
    default:
      status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
      break;
 800629c:	e004      	b.n	80062a8 <RCCEx_PLLSAI2_Config+0x13c>
      break;
 800629e:	bf00      	nop
 80062a0:	e002      	b.n	80062a8 <RCCEx_PLLSAI2_Config+0x13c>
      break;
 80062a2:	bf00      	nop
 80062a4:	e000      	b.n	80062a8 <RCCEx_PLLSAI2_Config+0x13c>
      break;
 80062a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d108      	bne.n	80062c0 <RCCEx_PLLSAI2_Config+0x154>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80062ae:	4b3f      	ldr	r3, [pc, #252]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f023 0203 	bic.w	r2, r3, #3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	493c      	ldr	r1, [pc, #240]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f040 80c6 	bne.w	8006454 <RCCEx_PLLSAI2_Config+0x2e8>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80062c8:	4b38      	ldr	r3, [pc, #224]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a37      	ldr	r2, [pc, #220]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 80062ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d4:	f7fa f990 	bl	80005f8 <HAL_GetTick>
 80062d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062da:	e009      	b.n	80062f0 <RCCEx_PLLSAI2_Config+0x184>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062dc:	f7fa f98c 	bl	80005f8 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d902      	bls.n	80062f0 <RCCEx_PLLSAI2_Config+0x184>
      {
        status = HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	73fb      	strb	r3, [r7, #15]
        break;
 80062ee:	e005      	b.n	80062fc <RCCEx_PLLSAI2_Config+0x190>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062f0:	4b2e      	ldr	r3, [pc, #184]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1ef      	bne.n	80062dc <RCCEx_PLLSAI2_Config+0x170>
      }
    }

    if(status == HAL_OK)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f040 80a8 	bne.w	8006454 <RCCEx_PLLSAI2_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d120      	bne.n	800634c <RCCEx_PLLSAI2_Config+0x1e0>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d903      	bls.n	800631a <RCCEx_PLLSAI2_Config+0x1ae>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b1f      	cmp	r3, #31
 8006318:	d904      	bls.n	8006324 <RCCEx_PLLSAI2_Config+0x1b8>
 800631a:	f640 4185 	movw	r1, #3205	@ 0xc85
 800631e:	4822      	ldr	r0, [pc, #136]	@ (80063a8 <RCCEx_PLLSAI2_Config+0x23c>)
 8006320:	f00d f914 	bl	801354c <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006324:	4b21      	ldr	r3, [pc, #132]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 8006326:	695a      	ldr	r2, [r3, #20]
 8006328:	4b21      	ldr	r3, [pc, #132]	@ (80063b0 <RCCEx_PLLSAI2_Config+0x244>)
 800632a:	4013      	ands	r3, r2
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6892      	ldr	r2, [r2, #8]
 8006330:	0211      	lsls	r1, r2, #8
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68d2      	ldr	r2, [r2, #12]
 8006336:	06d2      	lsls	r2, r2, #27
 8006338:	4311      	orrs	r1, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6852      	ldr	r2, [r2, #4]
 800633e:	3a01      	subs	r2, #1
 8006340:	0112      	lsls	r2, r2, #4
 8006342:	430a      	orrs	r2, r1
 8006344:	4919      	ldr	r1, [pc, #100]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 8006346:	4313      	orrs	r3, r2
 8006348:	614b      	str	r3, [r1, #20]
 800634a:	e05f      	b.n	800640c <RCCEx_PLLSAI2_Config+0x2a0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d132      	bne.n	80063b8 <RCCEx_PLLSAI2_Config+0x24c>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d010      	beq.n	800637c <RCCEx_PLLSAI2_Config+0x210>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b04      	cmp	r3, #4
 8006360:	d00c      	beq.n	800637c <RCCEx_PLLSAI2_Config+0x210>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b06      	cmp	r3, #6
 8006368:	d008      	beq.n	800637c <RCCEx_PLLSAI2_Config+0x210>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b08      	cmp	r3, #8
 8006370:	d004      	beq.n	800637c <RCCEx_PLLSAI2_Config+0x210>
 8006372:	f640 41aa 	movw	r1, #3242	@ 0xcaa
 8006376:	480c      	ldr	r0, [pc, #48]	@ (80063a8 <RCCEx_PLLSAI2_Config+0x23c>)
 8006378:	f00d f8e8 	bl	801354c <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800637c:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 800637e:	695a      	ldr	r2, [r3, #20]
 8006380:	4b0c      	ldr	r3, [pc, #48]	@ (80063b4 <RCCEx_PLLSAI2_Config+0x248>)
 8006382:	4013      	ands	r3, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6892      	ldr	r2, [r2, #8]
 8006388:	0211      	lsls	r1, r2, #8
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6912      	ldr	r2, [r2, #16]
 800638e:	0852      	lsrs	r2, r2, #1
 8006390:	3a01      	subs	r2, #1
 8006392:	0552      	lsls	r2, r2, #21
 8006394:	4311      	orrs	r1, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6852      	ldr	r2, [r2, #4]
 800639a:	3a01      	subs	r2, #1
 800639c:	0112      	lsls	r2, r2, #4
 800639e:	430a      	orrs	r2, r1
 80063a0:	4902      	ldr	r1, [pc, #8]	@ (80063ac <RCCEx_PLLSAI2_Config+0x240>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	614b      	str	r3, [r1, #20]
 80063a6:	e031      	b.n	800640c <RCCEx_PLLSAI2_Config+0x2a0>
 80063a8:	08015898 	.word	0x08015898
 80063ac:	40021000 	.word	0x40021000
 80063b0:	07ff800f 	.word	0x07ff800f
 80063b4:	ff9f800f 	.word	0xff9f800f
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d010      	beq.n	80063e2 <RCCEx_PLLSAI2_Config+0x276>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d00c      	beq.n	80063e2 <RCCEx_PLLSAI2_Config+0x276>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	2b06      	cmp	r3, #6
 80063ce:	d008      	beq.n	80063e2 <RCCEx_PLLSAI2_Config+0x276>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d004      	beq.n	80063e2 <RCCEx_PLLSAI2_Config+0x276>
 80063d8:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 80063dc:	4820      	ldr	r0, [pc, #128]	@ (8006460 <RCCEx_PLLSAI2_Config+0x2f4>)
 80063de:	f00d f8b5 	bl	801354c <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063e2:	4b20      	ldr	r3, [pc, #128]	@ (8006464 <RCCEx_PLLSAI2_Config+0x2f8>)
 80063e4:	695a      	ldr	r2, [r3, #20]
 80063e6:	4b20      	ldr	r3, [pc, #128]	@ (8006468 <RCCEx_PLLSAI2_Config+0x2fc>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6892      	ldr	r2, [r2, #8]
 80063ee:	0211      	lsls	r1, r2, #8
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6952      	ldr	r2, [r2, #20]
 80063f4:	0852      	lsrs	r2, r2, #1
 80063f6:	3a01      	subs	r2, #1
 80063f8:	0652      	lsls	r2, r2, #25
 80063fa:	4311      	orrs	r1, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6852      	ldr	r2, [r2, #4]
 8006400:	3a01      	subs	r2, #1
 8006402:	0112      	lsls	r2, r2, #4
 8006404:	430a      	orrs	r2, r1
 8006406:	4917      	ldr	r1, [pc, #92]	@ (8006464 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006408:	4313      	orrs	r3, r2
 800640a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800640c:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <RCCEx_PLLSAI2_Config+0x2f8>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a14      	ldr	r2, [pc, #80]	@ (8006464 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006416:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006418:	f7fa f8ee 	bl	80005f8 <HAL_GetTick>
 800641c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800641e:	e009      	b.n	8006434 <RCCEx_PLLSAI2_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006420:	f7fa f8ea 	bl	80005f8 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d902      	bls.n	8006434 <RCCEx_PLLSAI2_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	73fb      	strb	r3, [r7, #15]
          break;
 8006432:	e005      	b.n	8006440 <RCCEx_PLLSAI2_Config+0x2d4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006434:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0ef      	beq.n	8006420 <RCCEx_PLLSAI2_Config+0x2b4>
        }
      }

      if(status == HAL_OK)
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <RCCEx_PLLSAI2_Config+0x2e8>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006446:	4b07      	ldr	r3, [pc, #28]	@ (8006464 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	4905      	ldr	r1, [pc, #20]	@ (8006464 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006450:	4313      	orrs	r3, r2
 8006452:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	08015898 	.word	0x08015898
 8006464:	40021000 	.word	0x40021000
 8006468:	f9ff800f 	.word	0xf9ff800f

0800646c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800646c:	b480      	push	{r7}
 800646e:	b089      	sub	sp, #36	@ 0x24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006488:	d10b      	bne.n	80064a2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800648a:	4b7e      	ldr	r3, [pc, #504]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800648c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006490:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006494:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b60      	cmp	r3, #96	@ 0x60
 800649a:	d112      	bne.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800649c:	4b7a      	ldr	r3, [pc, #488]	@ (8006688 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	e00f      	b.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a8:	d10b      	bne.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80064aa:	4b76      	ldr	r3, [pc, #472]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064b4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064bc:	d101      	bne.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80064be:	4b72      	ldr	r3, [pc, #456]	@ (8006688 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80064c0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 80d6 	bne.w	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b40      	cmp	r3, #64	@ 0x40
 80064d2:	d003      	beq.n	80064dc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064da:	d13b      	bne.n	8006554 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80064dc:	4b69      	ldr	r3, [pc, #420]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064e8:	f040 80c4 	bne.w	8006674 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80064ec:	4b65      	ldr	r3, [pc, #404]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80bd 	beq.w	8006674 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80064fa:	4b62      	ldr	r3, [pc, #392]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	091b      	lsrs	r3, r3, #4
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	3301      	adds	r3, #1
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800650e:	4b5d      	ldr	r3, [pc, #372]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006518:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800651a:	4b5a      	ldr	r3, [pc, #360]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	0edb      	lsrs	r3, r3, #27
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800652c:	4b55      	ldr	r3, [pc, #340]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006538:	2311      	movs	r3, #17
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e001      	b.n	8006542 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800653e:	2307      	movs	r3, #7
 8006540:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	fb03 f202 	mul.w	r2, r3, r2
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006552:	e08f      	b.n	8006674 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d13a      	bne.n	80065d0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800655a:	4b4a      	ldr	r3, [pc, #296]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006562:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006566:	f040 8086 	bne.w	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800656a:	4b46      	ldr	r3, [pc, #280]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d07f      	beq.n	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006576:	4b43      	ldr	r3, [pc, #268]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	3301      	adds	r3, #1
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	fbb2 f3f3 	udiv	r3, r2, r3
 8006588:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800658a:	4b3e      	ldr	r3, [pc, #248]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006594:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006596:	4b3b      	ldr	r3, [pc, #236]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	0edb      	lsrs	r3, r3, #27
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80065a8:	4b36      	ldr	r3, [pc, #216]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80065b4:	2311      	movs	r3, #17
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	e001      	b.n	80065be <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80065ba:	2307      	movs	r3, #7
 80065bc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	fb03 f202 	mul.w	r2, r3, r2
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	61fb      	str	r3, [r7, #28]
 80065ce:	e052      	b.n	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2b80      	cmp	r3, #128	@ 0x80
 80065d4:	d003      	beq.n	80065de <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065dc:	d109      	bne.n	80065f2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065de:	4b29      	ldr	r3, [pc, #164]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ea:	d144      	bne.n	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80065ec:	4b27      	ldr	r3, [pc, #156]	@ (800668c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80065ee:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065f0:	e041      	b.n	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d003      	beq.n	8006600 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065fe:	d13a      	bne.n	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006600:	4b20      	ldr	r3, [pc, #128]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800660c:	d133      	bne.n	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800660e:	4b1d      	ldr	r3, [pc, #116]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d02d      	beq.n	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800661a:	4b1a      	ldr	r3, [pc, #104]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	091b      	lsrs	r3, r3, #4
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	3301      	adds	r3, #1
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	fbb2 f3f3 	udiv	r3, r2, r3
 800662c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800662e:	4b15      	ldr	r3, [pc, #84]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	0a1b      	lsrs	r3, r3, #8
 8006634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006638:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800663a:	4b12      	ldr	r3, [pc, #72]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	0edb      	lsrs	r3, r3, #27
 8006640:	f003 031f 	and.w	r3, r3, #31
 8006644:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800664c:	4b0d      	ldr	r3, [pc, #52]	@ (8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006658:	2311      	movs	r3, #17
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e001      	b.n	8006662 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800665e:	2307      	movs	r3, #7
 8006660:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	fb03 f202 	mul.w	r2, r3, r2
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	e000      	b.n	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006674:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006676:	69fb      	ldr	r3, [r7, #28]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3724      	adds	r7, #36	@ 0x24
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	40021000 	.word	0x40021000
 8006688:	001fff68 	.word	0x001fff68
 800668c:	00f42400 	.word	0x00f42400

08006690 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 80e2 	beq.w	8006868 <HAL_RTC_Init+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a72      	ldr	r2, [pc, #456]	@ (8006874 <HAL_RTC_Init+0x1e4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <HAL_RTC_Init+0x26>
 80066ae:	21fe      	movs	r1, #254	@ 0xfe
 80066b0:	4871      	ldr	r0, [pc, #452]	@ (8006878 <HAL_RTC_Init+0x1e8>)
 80066b2:	f00c ff4b 	bl	801354c <assert_failed>
    assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b40      	cmp	r3, #64	@ 0x40
 80066bc:	d007      	beq.n	80066ce <HAL_RTC_Init+0x3e>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_RTC_Init+0x3e>
 80066c6:	21ff      	movs	r1, #255	@ 0xff
 80066c8:	486b      	ldr	r0, [pc, #428]	@ (8006878 <HAL_RTC_Init+0x1e8>)
 80066ca:	f00c ff3f 	bl	801354c <assert_failed>
    assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066d4:	d904      	bls.n	80066e0 <HAL_RTC_Init+0x50>
 80066d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80066da:	4867      	ldr	r0, [pc, #412]	@ (8006878 <HAL_RTC_Init+0x1e8>)
 80066dc:	f00c ff36 	bl	801354c <assert_failed>
    assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e8:	d304      	bcc.n	80066f4 <HAL_RTC_Init+0x64>
 80066ea:	f240 1101 	movw	r1, #257	@ 0x101
 80066ee:	4862      	ldr	r0, [pc, #392]	@ (8006878 <HAL_RTC_Init+0x1e8>)
 80066f0:	f00c ff2c 	bl	801354c <assert_failed>
    assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d013      	beq.n	8006724 <HAL_RTC_Init+0x94>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006704:	d00e      	beq.n	8006724 <HAL_RTC_Init+0x94>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800670e:	d009      	beq.n	8006724 <HAL_RTC_Init+0x94>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006718:	d004      	beq.n	8006724 <HAL_RTC_Init+0x94>
 800671a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800671e:	4856      	ldr	r0, [pc, #344]	@ (8006878 <HAL_RTC_Init+0x1e8>)
 8006720:	f00c ff14 	bl	801354c <assert_failed>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <HAL_RTC_Init+0xae>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d004      	beq.n	800673e <HAL_RTC_Init+0xae>
 8006734:	f240 1103 	movw	r1, #259	@ 0x103
 8006738:	484f      	ldr	r0, [pc, #316]	@ (8006878 <HAL_RTC_Init+0x1e8>)
 800673a:	f00c ff07 	bl	801354c <assert_failed>
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <HAL_RTC_Init+0xca>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800674e:	d004      	beq.n	800675a <HAL_RTC_Init+0xca>
 8006750:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8006754:	4848      	ldr	r0, [pc, #288]	@ (8006878 <HAL_RTC_Init+0x1e8>)
 8006756:	f00c fef9 	bl	801354c <assert_failed>
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d008      	beq.n	8006774 <HAL_RTC_Init+0xe4>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d004      	beq.n	8006774 <HAL_RTC_Init+0xe4>
 800676a:	f240 1105 	movw	r1, #261	@ 0x105
 800676e:	4842      	ldr	r0, [pc, #264]	@ (8006878 <HAL_RTC_Init+0x1e8>)
 8006770:	f00c feec 	bl	801354c <assert_failed>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d106      	bne.n	800678e <HAL_RTC_Init+0xfe>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f00c ff13 	bl	80135b4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2202      	movs	r2, #2
 8006792:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d058      	beq.n	8006856 <HAL_RTC_Init+0x1c6>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	22ca      	movs	r2, #202	@ 0xca
 80067aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2253      	movs	r2, #83	@ 0x53
 80067b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f949 	bl	8006a4c <RTC_EnterInitMode>
 80067ba:	4603      	mov	r3, r0
 80067bc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d127      	bne.n	8006814 <HAL_RTC_Init+0x184>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80067d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067d6:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6899      	ldr	r1, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68d2      	ldr	r2, [r2, #12]
 80067fe:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6919      	ldr	r1, [r3, #16]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	041a      	lsls	r2, r3, #16
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f94d 	bl	8006ab4 <RTC_ExitInitMode>
 800681a:	4603      	mov	r3, r0
 800681c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d113      	bne.n	800684c <HAL_RTC_Init+0x1bc>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0203 	bic.w	r2, r2, #3
 8006832:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69da      	ldr	r2, [r3, #28]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	22ff      	movs	r2, #255	@ 0xff
 8006852:	625a      	str	r2, [r3, #36]	@ 0x24
 8006854:	e001      	b.n	800685a <HAL_RTC_Init+0x1ca>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d103      	bne.n	8006868 <HAL_RTC_Init+0x1d8>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40002800 	.word	0x40002800
 8006878:	080158d4 	.word	0x080158d4

0800687c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <HAL_RTC_GetTime+0x22>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d004      	beq.n	800689e <HAL_RTC_GetTime+0x22>
 8006894:	f240 6121 	movw	r1, #1569	@ 0x621
 8006898:	482c      	ldr	r0, [pc, #176]	@ (800694c <HAL_RTC_GetTime+0xd0>)
 800689a:	f00c fe57 	bl	801354c <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80068c0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80068c4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	0a1b      	lsrs	r3, r3, #8
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	0d9b      	lsrs	r3, r3, #22
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d11a      	bne.n	8006940 <HAL_RTC_GetTime+0xc4>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f90e 	bl	8006b30 <RTC_Bcd2ToByte>
 8006914:	4603      	mov	r3, r0
 8006916:	461a      	mov	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	4618      	mov	r0, r3
 8006922:	f000 f905 	bl	8006b30 <RTC_Bcd2ToByte>
 8006926:	4603      	mov	r3, r0
 8006928:	461a      	mov	r2, r3
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	789b      	ldrb	r3, [r3, #2]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 f8fc 	bl	8006b30 <RTC_Bcd2ToByte>
 8006938:	4603      	mov	r3, r0
 800693a:	461a      	mov	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	080158d4 	.word	0x080158d4

08006950 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <HAL_RTC_GetDate+0x22>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d004      	beq.n	8006972 <HAL_RTC_GetDate+0x22>
 8006968:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800696c:	4824      	ldr	r0, [pc, #144]	@ (8006a00 <HAL_RTC_GetDate+0xb0>)
 800696e:	f00c fded 	bl	801354c <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800697c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006980:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	b2da      	uxtb	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	0a1b      	lsrs	r3, r3, #8
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	b2da      	uxtb	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	0b5b      	lsrs	r3, r3, #13
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d11a      	bne.n	80069f6 <HAL_RTC_GetDate+0xa6>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	78db      	ldrb	r3, [r3, #3]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 f8b3 	bl	8006b30 <RTC_Bcd2ToByte>
 80069ca:	4603      	mov	r3, r0
 80069cc:	461a      	mov	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f8aa 	bl	8006b30 <RTC_Bcd2ToByte>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	789b      	ldrb	r3, [r3, #2]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 f8a1 	bl	8006b30 <RTC_Bcd2ToByte>
 80069ee:	4603      	mov	r3, r0
 80069f0:	461a      	mov	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	080158d4 	.word	0x080158d4

08006a04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0d      	ldr	r2, [pc, #52]	@ (8006a48 <HAL_RTC_WaitForSynchro+0x44>)
 8006a12:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006a14:	f7f9 fdf0 	bl	80005f8 <HAL_GetTick>
 8006a18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a1a:	e009      	b.n	8006a30 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a1c:	f7f9 fdec 	bl	80005f8 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a2a:	d901      	bls.n	8006a30 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e007      	b.n	8006a40 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0ee      	beq.n	8006a1c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	0003ff5f 	.word	0x0003ff5f

08006a4c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d120      	bne.n	8006aa8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a70:	f7f9 fdc2 	bl	80005f8 <HAL_GetTick>
 8006a74:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a76:	e00d      	b.n	8006a94 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a78:	f7f9 fdbe 	bl	80005f8 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a86:	d905      	bls.n	8006a94 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2203      	movs	r2, #3
 8006a90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d102      	bne.n	8006aa8 <RTC_EnterInitMode+0x5c>
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d1e7      	bne.n	8006a78 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b2c <RTC_ExitInitMode+0x78>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	4a19      	ldr	r2, [pc, #100]	@ (8006b2c <RTC_ExitInitMode+0x78>)
 8006ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aca:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006acc:	4b17      	ldr	r3, [pc, #92]	@ (8006b2c <RTC_ExitInitMode+0x78>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10c      	bne.n	8006af2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff ff93 	bl	8006a04 <HAL_RTC_WaitForSynchro>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01e      	beq.n	8006b22 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	73fb      	strb	r3, [r7, #15]
 8006af0:	e017      	b.n	8006b22 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006af2:	4b0e      	ldr	r3, [pc, #56]	@ (8006b2c <RTC_ExitInitMode+0x78>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	4a0d      	ldr	r2, [pc, #52]	@ (8006b2c <RTC_ExitInitMode+0x78>)
 8006af8:	f023 0320 	bic.w	r3, r3, #32
 8006afc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff ff80 	bl	8006a04 <HAL_RTC_WaitForSynchro>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b16:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <RTC_ExitInitMode+0x78>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	4a04      	ldr	r2, [pc, #16]	@ (8006b2c <RTC_ExitInitMode+0x78>)
 8006b1c:	f043 0320 	orr.w	r3, r3, #32
 8006b20:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40002800 	.word	0x40002800

08006b30 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	0092      	lsls	r2, r2, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	4413      	add	r3, r2
 8006b56:	b2db      	uxtb	r3, r3
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	@ 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e0d4      	b.n	8006d20 <HAL_SD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a6b      	ldr	r2, [pc, #428]	@ (8006d28 <HAL_SD_Init+0x1c4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d004      	beq.n	8006b8a <HAL_SD_Init+0x26>
 8006b80:	f240 1173 	movw	r1, #371	@ 0x173
 8006b84:	4869      	ldr	r0, [pc, #420]	@ (8006d2c <HAL_SD_Init+0x1c8>)
 8006b86:	f00c fce1 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d009      	beq.n	8006ba6 <HAL_SD_Init+0x42>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9a:	d004      	beq.n	8006ba6 <HAL_SD_Init+0x42>
 8006b9c:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8006ba0:	4862      	ldr	r0, [pc, #392]	@ (8006d2c <HAL_SD_Init+0x1c8>)
 8006ba2:	f00c fcd3 	bl	801354c <assert_failed>
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <HAL_SD_Init+0x5e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb6:	d004      	beq.n	8006bc2 <HAL_SD_Init+0x5e>
 8006bb8:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8006bbc:	485b      	ldr	r0, [pc, #364]	@ (8006d2c <HAL_SD_Init+0x1c8>)
 8006bbe:	f00c fcc5 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00e      	beq.n	8006be8 <HAL_SD_Init+0x84>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bd2:	d009      	beq.n	8006be8 <HAL_SD_Init+0x84>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bdc:	d004      	beq.n	8006be8 <HAL_SD_Init+0x84>
 8006bde:	f240 1179 	movw	r1, #377	@ 0x179
 8006be2:	4852      	ldr	r0, [pc, #328]	@ (8006d2c <HAL_SD_Init+0x1c8>)
 8006be4:	f00c fcb2 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d009      	beq.n	8006c04 <HAL_SD_Init+0xa0>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bf8:	d004      	beq.n	8006c04 <HAL_SD_Init+0xa0>
 8006bfa:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8006bfe:	484b      	ldr	r0, [pc, #300]	@ (8006d2c <HAL_SD_Init+0x1c8>)
 8006c00:	f00c fca4 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c0c:	d304      	bcc.n	8006c18 <HAL_SD_Init+0xb4>
 8006c0e:	f240 117b 	movw	r1, #379	@ 0x17b
 8006c12:	4846      	ldr	r0, [pc, #280]	@ (8006d2c <HAL_SD_Init+0x1c8>)
 8006c14:	f00c fc9a 	bl	801354c <assert_failed>

  if(hsd->State == HAL_SD_STATE_RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <HAL_SD_Init+0xcc>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f00c feb0 	bl	8013990 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2203      	movs	r2, #3
 8006c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f879 	bl	8006d30 <HAL_SD_InitCard>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_SD_Init+0xe4>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e06b      	b.n	8006d20 <HAL_SD_Init+0x1bc>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006c48:	f107 0308 	add.w	r3, r7, #8
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fdc4 	bl	80077dc <HAL_SD_GetCardStatus>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_SD_Init+0xfa>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e060      	b.n	8006d20 <HAL_SD_Init+0x1bc>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006c5e:	7e3b      	ldrb	r3, [r7, #24]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006c64:	7e7b      	ldrb	r3, [r7, #25]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d10a      	bne.n	8006c88 <HAL_SD_Init+0x124>
 8006c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d102      	bne.n	8006c7e <HAL_SD_Init+0x11a>
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d004      	beq.n	8006c88 <HAL_SD_Init+0x124>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c86:	e00b      	b.n	8006ca0 <HAL_SD_Init+0x13c>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d104      	bne.n	8006c9a <HAL_SD_Init+0x136>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c98:	e002      	b.n	8006ca0 <HAL_SD_Init+0x13c>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fe7a 	bl	80079a0 <HAL_SD_ConfigWideBusOperation>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_SD_Init+0x152>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e034      	b.n	8006d20 <HAL_SD_Init+0x1bc>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006cb6:	f7f9 fc9f 	bl	80005f8 <HAL_GetTick>
 8006cba:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006cbc:	e014      	b.n	8006ce8 <HAL_SD_Init+0x184>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006cbe:	f7f9 fc9b 	bl	80005f8 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ccc:	d10c      	bne.n	8006ce8 <HAL_SD_Init+0x184>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006cd4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e01b      	b.n	8006d20 <HAL_SD_Init+0x1bc>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 ff7f 	bl	8007bec <HAL_SD_GetCardState>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d1e4      	bne.n	8006cbe <HAL_SD_Init+0x15a>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fe50 	bl	80079a0 <HAL_SD_ConfigWideBusOperation>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_SD_Init+0x1a6>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e00a      	b.n	8006d20 <HAL_SD_Init+0x1bc>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3728      	adds	r7, #40	@ 0x28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	50062400 	.word	0x50062400
 8006d2c:	0801590c 	.word	0x0801590c

08006d30 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d30:	b5b0      	push	{r4, r5, r7, lr}
 8006d32:	b08e      	sub	sp, #56	@ 0x38
 8006d34:	af04      	add	r7, sp, #16
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006d40:	2300      	movs	r3, #0
 8006d42:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006d48:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006d4c:	f7fe f958 	bl	8005000 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d50:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006d66:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e079      	b.n	8006e60 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	4a3d      	ldr	r2, [pc, #244]	@ (8006e68 <HAL_SD_InitCard+0x138>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	091b      	lsrs	r3, r3, #4
 8006d78:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d107      	bne.n	8006d98 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0210 	orr.w	r2, r2, #16
 8006d96:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681d      	ldr	r5, [r3, #0]
 8006d9c:	466c      	mov	r4, sp
 8006d9e:	f107 0314 	add.w	r3, r7, #20
 8006da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006daa:	f107 0308 	add.w	r3, r7, #8
 8006dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006db0:	4628      	mov	r0, r5
 8006db2:	f003 ff3b 	bl	800ac2c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f003 ffc2 	bl	800ad44 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dca:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006dcc:	4a27      	ldr	r2, [pc, #156]	@ (8006e6c <HAL_SD_InitCard+0x13c>)
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7f9 fc1a 	bl	8000610 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 ffe5 	bl	8007dac <SD_PowerON>
 8006de2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e02e      	b.n	8006e60 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 ff12 	bl	8007c2c <SD_InitCard>
 8006e08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e01b      	b.n	8006e60 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006e30:	4618      	mov	r0, r3
 8006e32:	f004 f8df 	bl	800aff4 <SDMMC_CmdBlockLength>
 8006e36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00f      	beq.n	8006e5e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a0b      	ldr	r2, [pc, #44]	@ (8006e70 <HAL_SD_InitCard+0x140>)
 8006e44:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3728      	adds	r7, #40	@ 0x28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bdb0      	pop	{r4, r5, r7, pc}
 8006e68:	014f8b59 	.word	0x014f8b59
 8006e6c:	00012110 	.word	0x00012110
 8006e70:	1fe00fff 	.word	0x1fe00fff

08006e74 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08c      	sub	sp, #48	@ 0x30
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d107      	bne.n	8006e9c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e08d      	b.n	8006fb8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	f040 8086 	bne.w	8006fb6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006eb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	441a      	add	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d907      	bls.n	8006ece <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e074      	b.n	8006fb8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	62da      	str	r2, [r3, #44]	@ 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	025a      	lsls	r2, r3, #9
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d002      	beq.n	8006efa <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8006ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef6:	025b      	lsls	r3, r3, #9
 8006ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295
 8006efe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	025b      	lsls	r3, r3, #9
 8006f04:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f06:	2390      	movs	r3, #144	@ 0x90
 8006f08:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8006f12:	2300      	movs	r3, #0
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f107 0210 	add.w	r2, r7, #16
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f003 ffc9 	bl	800aeb8 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f34:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2201      	movs	r2, #1
 8006f44:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d90a      	bls.n	8006f62 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2282      	movs	r2, #130	@ 0x82
 8006f50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f004 f891 	bl	800b080 <SDMMC_CmdReadMultiBlock>
 8006f5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006f60:	e009      	b.n	8006f76 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2281      	movs	r2, #129	@ 0x81
 8006f66:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f004 f863 	bl	800b03a <SDMMC_CmdReadSingleBlock>
 8006f74:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d012      	beq.n	8006fa2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0f      	ldr	r2, [pc, #60]	@ (8006fc0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006f82:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e00a      	b.n	8006fb8 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8006fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

      return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e000      	b.n	8006fb8 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3730      	adds	r7, #48	@ 0x30
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	1fe00fff 	.word	0x1fe00fff

08006fc4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08c      	sub	sp, #48	@ 0x30
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d107      	bne.n	8006fec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e08d      	b.n	8007108 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	f040 8086 	bne.w	8007106 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	441a      	add	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700a:	429a      	cmp	r2, r3
 800700c:	d907      	bls.n	800701e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007012:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e074      	b.n	8007108 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2203      	movs	r2, #3
 8007022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2200      	movs	r2, #0
 800702c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	025a      	lsls	r2, r3, #9
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007040:	2b01      	cmp	r3, #1
 8007042:	d002      	beq.n	800704a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	025b      	lsls	r3, r3, #9
 8007048:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800704a:	f04f 33ff 	mov.w	r3, #4294967295
 800704e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	025b      	lsls	r3, r3, #9
 8007054:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007056:	2390      	movs	r3, #144	@ 0x90
 8007058:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800705a:	2300      	movs	r3, #0
 800705c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800705e:	2300      	movs	r3, #0
 8007060:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007062:	2300      	movs	r3, #0
 8007064:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f107 0210 	add.w	r2, r7, #16
 800706e:	4611      	mov	r1, r2
 8007070:	4618      	mov	r0, r3
 8007072:	f003 ff21 	bl	800aeb8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007084:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2201      	movs	r2, #1
 8007094:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d90a      	bls.n	80070b2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	22a0      	movs	r2, #160	@ 0xa0
 80070a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070a8:	4618      	mov	r0, r3
 80070aa:	f004 f82f 	bl	800b10c <SDMMC_CmdWriteMultiBlock>
 80070ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80070b0:	e009      	b.n	80070c6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2290      	movs	r2, #144	@ 0x90
 80070b6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070be:	4618      	mov	r0, r3
 80070c0:	f004 f801 	bl	800b0c6 <SDMMC_CmdWriteSingleBlock>
 80070c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80070c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d012      	beq.n	80070f2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007110 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80070d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070da:	431a      	orrs	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e00a      	b.n	8007108 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8007100:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e000      	b.n	8007108 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007106:	2302      	movs	r3, #2
  }
}
 8007108:	4618      	mov	r0, r3
 800710a:	3730      	adds	r7, #48	@ 0x30
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	1fe00fff 	.word	0x1fe00fff

08007114 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007120:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d008      	beq.n	8007142 <HAL_SD_IRQHandler+0x2e>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 0308 	and.w	r3, r3, #8
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 f9a0 	bl	8008480 <SD_Read_IT>
 8007140:	e199      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80ae 	beq.w	80072ae <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800715a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800716a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800716e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800717e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800718e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d038      	beq.n	800720c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d104      	bne.n	80071ae <HAL_SD_IRQHandler+0x9a>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d011      	beq.n	80071d2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f003 ffce 	bl	800b154 <SDMMC_CmdStopTransfer>
 80071b8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f957 	bl	8007480 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a90      	ldr	r2, [pc, #576]	@ (8007418 <HAL_SD_IRQHandler+0x304>)
 80071d8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d104      	bne.n	80071fc <HAL_SD_IRQHandler+0xe8>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f00b fa0f 	bl	8012620 <HAL_SD_RxCpltCallback>
 8007202:	e138      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f00b fa01 	bl	801260c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800720a:	e134      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 812f 	beq.w	8007476 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2200      	movs	r2, #0
 800721e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2200      	movs	r2, #0
 8007226:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2200      	movs	r2, #0
 800722e:	651a      	str	r2, [r3, #80]	@ 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d104      	bne.n	8007244 <HAL_SD_IRQHandler+0x130>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d011      	beq.n	8007268 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f003 ff83 	bl	800b154 <SDMMC_CmdStopTransfer>
 800724e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d008      	beq.n	8007268 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f90c 	bl	8007480 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <HAL_SD_IRQHandler+0x176>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f00b f9be 	bl	801260c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d105      	bne.n	80072a6 <HAL_SD_IRQHandler+0x192>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 80e8 	beq.w	8007476 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f00b f9ba 	bl	8012620 <HAL_SD_RxCpltCallback>
}
 80072ac:	e0e3      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_SD_IRQHandler+0x1ba>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 f92b 	bl	8008522 <SD_Write_IT>
 80072cc:	e0d3      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d4:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 809f 	beq.w	800741c <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f0:	f043 0202 	orr.w	r2, r3, #2
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d005      	beq.n	8007312 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730a:	f043 0208 	orr.w	r2, r3, #8
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b00      	cmp	r3, #0
 800731e:	d005      	beq.n	800732c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	f043 0220 	orr.w	r2, r3, #32
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007332:	f003 0310 	and.w	r3, r3, #16
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733e:	f043 0210 	orr.w	r2, r3, #16
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a33      	ldr	r2, [pc, #204]	@ (8007418 <HAL_SD_IRQHandler+0x304>)
 800734c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800735c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800736c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800737c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800738c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f003 fede 	bl	800b154 <SDMMC_CmdStopTransfer>
 8007398:	4602      	mov	r2, r0
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073b2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f852 	bl	8007480 <HAL_SD_ErrorCallback>
}
 80073dc:	e04b      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d046      	beq.n	8007476 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d042      	beq.n	8007476 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80073fe:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2200      	movs	r2, #0
 8007406:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_ErrorCallback(hsd);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f835 	bl	8007480 <HAL_SD_ErrorCallback>
}
 8007416:	e02e      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
 8007418:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d025      	beq.n	8007476 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007432:	639a      	str	r2, [r3, #56]	@ 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10c      	bne.n	800745c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 f8e6 	bl	800861e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8007452:	e010      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f8ce 	bl	80085f6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800745a:	e00c      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 f8cf 	bl	800860a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800746c:	e003      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 f8b7 	bl	80085e2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8007474:	e7ff      	b.n	8007476 <HAL_SD_IRQHandler+0x362>
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop

08007480 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a2:	0f9b      	lsrs	r3, r3, #30
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ae:	0e9b      	lsrs	r3, r3, #26
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c0:	0e1b      	lsrs	r3, r3, #24
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 0303 	and.w	r3, r3, #3
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074de:	0a1b      	lsrs	r3, r3, #8
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074f4:	0d1b      	lsrs	r3, r3, #20
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007500:	0c1b      	lsrs	r3, r3, #16
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	b2da      	uxtb	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007512:	0bdb      	lsrs	r3, r3, #15
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	b2da      	uxtb	r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007524:	0b9b      	lsrs	r3, r3, #14
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	b2da      	uxtb	r2, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007536:	0b5b      	lsrs	r3, r3, #13
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007548:	0b1b      	lsrs	r3, r3, #12
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	b2da      	uxtb	r2, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2200      	movs	r2, #0
 800755a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d163      	bne.n	800762c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007568:	009a      	lsls	r2, r3, #2
 800756a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800756e:	4013      	ands	r3, r2
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007574:	0f92      	lsrs	r2, r2, #30
 8007576:	431a      	orrs	r2, r3
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007580:	0edb      	lsrs	r3, r3, #27
 8007582:	b2db      	uxtb	r3, r3
 8007584:	f003 0307 	and.w	r3, r3, #7
 8007588:	b2da      	uxtb	r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007592:	0e1b      	lsrs	r3, r3, #24
 8007594:	b2db      	uxtb	r3, r3
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	b2da      	uxtb	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075a4:	0d5b      	lsrs	r3, r3, #21
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075b6:	0c9b      	lsrs	r3, r3, #18
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075c8:	0bdb      	lsrs	r3, r3, #15
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	7e1b      	ldrb	r3, [r3, #24]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	3302      	adds	r3, #2
 80075ec:	2201      	movs	r2, #1
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80075f6:	fb03 f202 	mul.w	r2, r3, r2
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	7a1b      	ldrb	r3, [r3, #8]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	2201      	movs	r2, #1
 800760a:	409a      	lsls	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	651a      	str	r2, [r3, #80]	@ 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007618:	0a52      	lsrs	r2, r2, #9
 800761a:	fb03 f202 	mul.w	r2, r3, r2
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007628:	659a      	str	r2, [r3, #88]	@ 0x58
 800762a:	e031      	b.n	8007690 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d11d      	bne.n	8007670 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007638:	041b      	lsls	r3, r3, #16
 800763a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007642:	0c1b      	lsrs	r3, r3, #16
 8007644:	431a      	orrs	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	3301      	adds	r3, #1
 8007650:	029a      	lsls	r2, r3, #10
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 512U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007664:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	659a      	str	r2, [r3, #88]	@ 0x58
 800766e:	e00f      	b.n	8007690 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a58      	ldr	r2, [pc, #352]	@ (80077d8 <HAL_SD_GetCardCSD+0x344>)
 8007676:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e09d      	b.n	80077cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007694:	0b9b      	lsrs	r3, r3, #14
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	b2da      	uxtb	r2, r3
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076a6:	09db      	lsrs	r3, r3, #7
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076c8:	0fdb      	lsrs	r3, r3, #31
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076d4:	0f5b      	lsrs	r3, r3, #29
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076e6:	0e9b      	lsrs	r3, r3, #26
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076f8:	0d9b      	lsrs	r3, r3, #22
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	b2da      	uxtb	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800770a:	0d5b      	lsrs	r3, r3, #21
 800770c:	b2db      	uxtb	r3, r3
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	b2da      	uxtb	r2, r3
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007726:	0c1b      	lsrs	r3, r3, #16
 8007728:	b2db      	uxtb	r3, r3
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	b2da      	uxtb	r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800773a:	0bdb      	lsrs	r3, r3, #15
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	b2da      	uxtb	r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800774e:	0b9b      	lsrs	r3, r3, #14
 8007750:	b2db      	uxtb	r3, r3
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	b2da      	uxtb	r2, r3
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007762:	0b5b      	lsrs	r3, r3, #13
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	b2da      	uxtb	r2, r3
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007776:	0b1b      	lsrs	r3, r3, #12
 8007778:	b2db      	uxtb	r3, r3
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	b2da      	uxtb	r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800778a:	0a9b      	lsrs	r3, r3, #10
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	b2da      	uxtb	r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	1fe00fff 	.word	0x1fe00fff

080077dc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b094      	sub	sp, #80	@ 0x50
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80077ec:	f107 0308 	add.w	r3, r7, #8
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fbe6 	bl	8007fc4 <SD_SendSDStatus>
 80077f8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80077fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d011      	beq.n	8007824 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a4f      	ldr	r2, [pc, #316]	@ (8007944 <HAL_SD_GetCardStatus+0x168>)
 8007806:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800780c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007822:	e070      	b.n	8007906 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	099b      	lsrs	r3, r3, #6
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	b2da      	uxtb	r2, r3
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	b2da      	uxtb	r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	0a1b      	lsrs	r3, r3, #8
 8007848:	b29b      	uxth	r3, r3
 800784a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800784e:	b29a      	uxth	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	0e1b      	lsrs	r3, r3, #24
 8007854:	b29b      	uxth	r3, r3
 8007856:	4313      	orrs	r3, r2
 8007858:	b29a      	uxth	r2, r3
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	061a      	lsls	r2, r3, #24
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800786a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007874:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	0e1b      	lsrs	r3, r3, #24
 800787a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	b2da      	uxtb	r2, r3
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	0a1b      	lsrs	r3, r3, #8
 800788c:	b2da      	uxtb	r2, r3
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	0d1b      	lsrs	r3, r3, #20
 8007896:	b2db      	uxtb	r3, r3
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	b2da      	uxtb	r2, r3
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	4313      	orrs	r3, r2
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	0a9b      	lsrs	r3, r3, #10
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	0a1b      	lsrs	r3, r3, #8
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	091b      	lsrs	r3, r3, #4
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	0e1b      	lsrs	r3, r3, #24
 8007900:	b2da      	uxtb	r2, r3
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800790e:	4618      	mov	r0, r3
 8007910:	f003 fb70 	bl	800aff4 <SDMMC_CmdBlockLength>
 8007914:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00d      	beq.n	8007938 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a08      	ldr	r2, [pc, #32]	@ (8007944 <HAL_SD_GetCardStatus+0x168>)
 8007922:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007928:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8007938:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800793c:	4618      	mov	r0, r3
 800793e:	3750      	adds	r7, #80	@ 0x50
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	1fe00fff 	.word	0x1fe00fff

08007948 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80079a0:	b5b0      	push	{r4, r5, r7, lr}
 80079a2:	b090      	sub	sp, #64	@ 0x40
 80079a4:	af04      	add	r7, sp, #16
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00c      	beq.n	80079d0 <HAL_SD_ConfigWideBusOperation+0x30>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079bc:	d008      	beq.n	80079d0 <HAL_SD_ConfigWideBusOperation+0x30>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079c4:	d004      	beq.n	80079d0 <HAL_SD_ConfigWideBusOperation+0x30>
 80079c6:	f640 214b 	movw	r1, #2635	@ 0xa4b
 80079ca:	4883      	ldr	r0, [pc, #524]	@ (8007bd8 <HAL_SD_ConfigWideBusOperation+0x238>)
 80079cc:	f00b fdbe 	bl	801354c <assert_failed>

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2203      	movs	r2, #3
 80079d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d02e      	beq.n	8007a3e <HAL_SD_ConfigWideBusOperation+0x9e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079e6:	d106      	bne.n	80079f6 <HAL_SD_ConfigWideBusOperation+0x56>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80079f4:	e029      	b.n	8007a4a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079fc:	d10a      	bne.n	8007a14 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fbd8 	bl	80081b4 <SD_WideBus_Enable>
 8007a04:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a12:	e01a      	b.n	8007a4a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <HAL_SD_ConfigWideBusOperation+0x90>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fc15 	bl	800824a <SD_WideBus_Disable>
 8007a20:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a2e:	e00c      	b.n	8007a4a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a34:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a3c:	e005      	b.n	8007a4a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a42:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d007      	beq.n	8007a62 <HAL_SD_ConfigWideBusOperation+0xc2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a61      	ldr	r2, [pc, #388]	@ (8007bdc <HAL_SD_ConfigWideBusOperation+0x23c>)
 8007a58:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007a60:	e097      	b.n	8007b92 <HAL_SD_ConfigWideBusOperation+0x1f2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007a62:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007a66:	f7fd facb 	bl	8005000 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a6a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 8086 	beq.w	8007b80 <HAL_SD_ConfigWideBusOperation+0x1e0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	695a      	ldr	r2, [r3, #20]
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	4953      	ldr	r1, [pc, #332]	@ (8007be0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8007a92:	fba1 1303 	umull	r1, r3, r1, r3
 8007a96:	0e1b      	lsrs	r3, r3, #24
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d303      	bcc.n	8007aa4 <HAL_SD_ConfigWideBusOperation+0x104>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	e05a      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x1ba>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aac:	d103      	bne.n	8007ab6 <HAL_SD_ConfigWideBusOperation+0x116>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	61fb      	str	r3, [r7, #28]
 8007ab4:	e051      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x1ba>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007abe:	d126      	bne.n	8007b0e <HAL_SD_ConfigWideBusOperation+0x16e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10e      	bne.n	8007ae6 <HAL_SD_ConfigWideBusOperation+0x146>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	4a46      	ldr	r2, [pc, #280]	@ (8007be4 <HAL_SD_ConfigWideBusOperation+0x244>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d906      	bls.n	8007ade <HAL_SD_ConfigWideBusOperation+0x13e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad2:	4a43      	ldr	r2, [pc, #268]	@ (8007be0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8007ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad8:	0e5b      	lsrs	r3, r3, #25
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	e03d      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	61fb      	str	r3, [r7, #28]
 8007ae4:	e039      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af2:	4a3c      	ldr	r2, [pc, #240]	@ (8007be4 <HAL_SD_ConfigWideBusOperation+0x244>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d906      	bls.n	8007b06 <HAL_SD_ConfigWideBusOperation+0x166>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	4a39      	ldr	r2, [pc, #228]	@ (8007be0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8007afc:	fba2 2303 	umull	r2, r3, r2, r3
 8007b00:	0e5b      	lsrs	r3, r3, #25
 8007b02:	61fb      	str	r3, [r7, #28]
 8007b04:	e029      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	61fb      	str	r3, [r7, #28]
 8007b0c:	e025      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x1ba>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10e      	bne.n	8007b34 <HAL_SD_ConfigWideBusOperation+0x194>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b18:	4a33      	ldr	r2, [pc, #204]	@ (8007be8 <HAL_SD_ConfigWideBusOperation+0x248>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d906      	bls.n	8007b2c <HAL_SD_ConfigWideBusOperation+0x18c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	4a2f      	ldr	r2, [pc, #188]	@ (8007be0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8007b22:	fba2 2303 	umull	r2, r3, r2, r3
 8007b26:	0e1b      	lsrs	r3, r3, #24
 8007b28:	61fb      	str	r3, [r7, #28]
 8007b2a:	e016      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	e012      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b40:	4a29      	ldr	r2, [pc, #164]	@ (8007be8 <HAL_SD_ConfigWideBusOperation+0x248>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d906      	bls.n	8007b54 <HAL_SD_ConfigWideBusOperation+0x1b4>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b48:	4a25      	ldr	r2, [pc, #148]	@ (8007be0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	0e1b      	lsrs	r3, r3, #24
 8007b50:	61fb      	str	r3, [r7, #28]
 8007b52:	e002      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681d      	ldr	r5, [r3, #0]
 8007b64:	466c      	mov	r4, sp
 8007b66:	f107 0318 	add.w	r3, r7, #24
 8007b6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b72:	f107 030c 	add.w	r3, r7, #12
 8007b76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f003 f857 	bl	800ac2c <SDMMC_Init>
 8007b7e:	e008      	b.n	8007b92 <HAL_SD_ConfigWideBusOperation+0x1f2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b84:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f003 fa2a 	bl	800aff4 <SDMMC_CmdBlockLength>
 8007ba0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00c      	beq.n	8007bc2 <HAL_SD_ConfigWideBusOperation+0x222>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a0b      	ldr	r2, [pc, #44]	@ (8007bdc <HAL_SD_ConfigWideBusOperation+0x23c>)
 8007bae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3730      	adds	r7, #48	@ 0x30
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	0801590c 	.word	0x0801590c
 8007bdc:	1fe00fff 	.word	0x1fe00fff
 8007be0:	55e63b89 	.word	0x55e63b89
 8007be4:	02faf080 	.word	0x02faf080
 8007be8:	017d7840 	.word	0x017d7840

08007bec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007bf8:	f107 030c 	add.w	r3, r7, #12
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fab0 	bl	8008164 <SD_SendStatus>
 8007c04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	0a5b      	lsrs	r3, r3, #9
 8007c1c:	f003 030f 	and.w	r3, r3, #15
 8007c20:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007c22:	693b      	ldr	r3, [r7, #16]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c2c:	b5b0      	push	{r4, r5, r7, lr}
 8007c2e:	b090      	sub	sp, #64	@ 0x40
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007c34:	2301      	movs	r3, #1
 8007c36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f003 f893 	bl	800ad68 <SDMMC_GetPowerState>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c48:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007c4c:	e0a9      	b.n	8007da2 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d02e      	beq.n	8007cb4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f003 fb9a 	bl	800b394 <SDMMC_CmdSendCID>
 8007c60:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <SD_InitCard+0x40>
    {
      return errorstate;
 8007c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c6a:	e09a      	b.n	8007da2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f003 f8fc 	bl	800ae70 <SDMMC_GetResponse>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2104      	movs	r1, #4
 8007c84:	4618      	mov	r0, r3
 8007c86:	f003 f8f3 	bl	800ae70 <SDMMC_GetResponse>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2108      	movs	r1, #8
 8007c96:	4618      	mov	r0, r3
 8007c98:	f003 f8ea 	bl	800ae70 <SDMMC_GetResponse>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	210c      	movs	r1, #12
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f003 f8e1 	bl	800ae70 <SDMMC_GetResponse>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d00d      	beq.n	8007cd8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f107 020e 	add.w	r2, r7, #14
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f003 fba3 	bl	800b412 <SDMMC_CmdSetRelAdd>
 8007ccc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <SD_InitCard+0xac>
    {
      return errorstate;
 8007cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd6:	e064      	b.n	8007da2 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d036      	beq.n	8007d4e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007ce0:	89fb      	ldrh	r3, [r7, #14]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cf0:	041b      	lsls	r3, r3, #16
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f003 fb6c 	bl	800b3d2 <SDMMC_CmdSendCSD>
 8007cfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <SD_InitCard+0xda>
    {
      return errorstate;
 8007d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d04:	e04d      	b.n	8007da2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f003 f8af 	bl	800ae70 <SDMMC_GetResponse>
 8007d12:	4602      	mov	r2, r0
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2104      	movs	r1, #4
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f003 f8a6 	bl	800ae70 <SDMMC_GetResponse>
 8007d24:	4602      	mov	r2, r0
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2108      	movs	r1, #8
 8007d30:	4618      	mov	r0, r3
 8007d32:	f003 f89d 	bl	800ae70 <SDMMC_GetResponse>
 8007d36:	4602      	mov	r2, r0
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	210c      	movs	r1, #12
 8007d42:	4618      	mov	r0, r3
 8007d44:	f003 f894 	bl	800ae70 <SDMMC_GetResponse>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2104      	movs	r1, #4
 8007d54:	4618      	mov	r0, r3
 8007d56:	f003 f88b 	bl	800ae70 <SDMMC_GetResponse>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	0d1a      	lsrs	r2, r3, #20
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007d62:	f107 0310 	add.w	r3, r7, #16
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff fb93 	bl	8007494 <HAL_SD_GetCardCSD>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d78:	e013      	b.n	8007da2 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6819      	ldr	r1, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d82:	041b      	lsls	r3, r3, #16
 8007d84:	2200      	movs	r2, #0
 8007d86:	461c      	mov	r4, r3
 8007d88:	4615      	mov	r5, r2
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	4608      	mov	r0, r1
 8007d90:	f003 fa16 	bl	800b1c0 <SDMMC_CmdSelDesel>
 8007d94:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <SD_InitCard+0x174>
  {
    return errorstate;
 8007d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d9e:	e000      	b.n	8007da2 <SD_InitCard+0x176>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3740      	adds	r7, #64	@ 0x40
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007dac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61fb      	str	r3, [r7, #28]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8007dc0:	f7f8 fc1a 	bl	80005f8 <HAL_GetTick>
 8007dc4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f003 fa1c 	bl	800b208 <SDMMC_CmdGoIdleState>
 8007dd0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <SD_PowerON+0x30>
  {
    return errorstate;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	e0ed      	b.n	8007fb8 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f003 fa2f 	bl	800b244 <SDMMC_CmdOperCond>
 8007de6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00d      	beq.n	8007e0a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f003 fa05 	bl	800b208 <SDMMC_CmdGoIdleState>
 8007dfe:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d004      	beq.n	8007e10 <SD_PowerON+0x64>
    {
      return errorstate;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	e0d6      	b.n	8007fb8 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d137      	bne.n	8007e88 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f003 fa30 	bl	800b284 <SDMMC_CmdAppCommand>
 8007e24:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d02d      	beq.n	8007e88 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e30:	e0c2      	b.n	8007fb8 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2100      	movs	r1, #0
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f003 fa23 	bl	800b284 <SDMMC_CmdAppCommand>
 8007e3e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <SD_PowerON+0x9e>
    {
      return errorstate;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	e0b6      	b.n	8007fb8 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	495c      	ldr	r1, [pc, #368]	@ (8007fc0 <SD_PowerON+0x214>)
 8007e50:	4618      	mov	r0, r3
 8007e52:	f003 fa3a 	bl	800b2ca <SDMMC_CmdAppOperCommand>
 8007e56:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e62:	e0a9      	b.n	8007fb8 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f003 f800 	bl	800ae70 <SDMMC_GetResponse>
 8007e70:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	0fdb      	lsrs	r3, r3, #31
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d101      	bne.n	8007e7e <SD_PowerON+0xd2>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e000      	b.n	8007e80 <SD_PowerON+0xd4>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61bb      	str	r3, [r7, #24]

    count++;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3301      	adds	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d802      	bhi.n	8007e98 <SD_PowerON+0xec>
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0cc      	beq.n	8007e32 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d902      	bls.n	8007ea8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ea2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ea6:	e087      	b.n	8007fb8 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d07e      	beq.n	8007fb0 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d17a      	bne.n	8007fb6 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d075      	beq.n	8007fb6 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0208 	orr.w	r2, r2, #8
 8007ee0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f003 fafa 	bl	800b4e0 <SDMMC_CmdVoltageSwitch>
 8007eec:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00c      	beq.n	8007f0e <SD_PowerON+0x162>
        {
          return errorstate;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	e05f      	b.n	8007fb8 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ef8:	f7f8 fb7e 	bl	80005f8 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d102      	bne.n	8007f0e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007f08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f0c:	e054      	b.n	8007fb8 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f1c:	d1ec      	bne.n	8007ef8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007f26:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f36:	d002      	beq.n	8007f3e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007f38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007f3c:	e03c      	b.n	8007fb8 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8007f3e:	2001      	movs	r0, #1
 8007f40:	f000 fb44 	bl	80085cc <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0204 	orr.w	r2, r2, #4
 8007f52:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007f54:	e00a      	b.n	8007f6c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f56:	f7f8 fb4f 	bl	80005f8 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f64:	d102      	bne.n	8007f6c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007f66:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f6a:	e025      	b.n	8007fb8 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f7a:	d1ec      	bne.n	8007f56 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007f84:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f94:	d102      	bne.n	8007f9c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007f96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f9a:	e00d      	b.n	8007fb8 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2213      	movs	r2, #19
 8007fa2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fac:	639a      	str	r2, [r3, #56]	@ 0x38
 8007fae:	e002      	b.n	8007fb6 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3720      	adds	r7, #32
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	c1100000 	.word	0xc1100000

08007fc4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08c      	sub	sp, #48	@ 0x30
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007fce:	f7f8 fb13 	bl	80005f8 <HAL_GetTick>
 8007fd2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f002 ff46 	bl	800ae70 <SDMMC_GetResponse>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fee:	d102      	bne.n	8007ff6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ff0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ff4:	e0b0      	b.n	8008158 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2140      	movs	r1, #64	@ 0x40
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f002 fff9 	bl	800aff4 <SDMMC_CmdBlockLength>
 8008002:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	e0a0      	b.n	8008158 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800801e:	041b      	lsls	r3, r3, #16
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f003 f92e 	bl	800b284 <SDMMC_CmdAppCommand>
 8008028:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	e08d      	b.n	8008158 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800803c:	f04f 33ff 	mov.w	r3, #4294967295
 8008040:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008042:	2340      	movs	r3, #64	@ 0x40
 8008044:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008046:	2360      	movs	r3, #96	@ 0x60
 8008048:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800804a:	2302      	movs	r3, #2
 800804c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800804e:	2300      	movs	r3, #0
 8008050:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008052:	2301      	movs	r3, #1
 8008054:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f107 0208 	add.w	r2, r7, #8
 800805e:	4611      	mov	r1, r2
 8008060:	4618      	mov	r0, r3
 8008062:	f002 ff29 	bl	800aeb8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4618      	mov	r0, r3
 800806c:	f003 fa16 	bl	800b49c <SDMMC_CmdStatusRegister>
 8008070:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d02b      	beq.n	80080d0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	e069      	b.n	8008158 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800808a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d013      	beq.n	80080ba <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008092:	2300      	movs	r3, #0
 8008094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008096:	e00d      	b.n	80080b4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	f002 fe33 	bl	800ad08 <SDMMC_ReadFIFO>
 80080a2:	4602      	mov	r2, r0
 80080a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a6:	601a      	str	r2, [r3, #0]
        pData++;
 80080a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080aa:	3304      	adds	r3, #4
 80080ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      for(count = 0U; count < 8U; count++)
 80080ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b0:	3301      	adds	r3, #1
 80080b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b6:	2b07      	cmp	r3, #7
 80080b8:	d9ee      	bls.n	8008098 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080ba:	f7f8 fa9d 	bl	80005f8 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c8:	d102      	bne.n	80080d0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80080ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80080ce:	e043      	b.n	8008158 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0d2      	beq.n	8008084 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80080ec:	2308      	movs	r3, #8
 80080ee:	e033      	b.n	8008158 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80080fe:	2302      	movs	r3, #2
 8008100:	e02a      	b.n	8008158 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b00      	cmp	r3, #0
 800810e:	d017      	beq.n	8008140 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008110:	2320      	movs	r3, #32
 8008112:	e021      	b.n	8008158 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4618      	mov	r0, r3
 800811a:	f002 fdf5 	bl	800ad08 <SDMMC_ReadFIFO>
 800811e:	4602      	mov	r2, r0
 8008120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008122:	601a      	str	r2, [r3, #0]
    pData++;
 8008124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008126:	3304      	adds	r3, #4
 8008128:	62bb      	str	r3, [r7, #40]	@ 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800812a:	f7f8 fa65 	bl	80005f8 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008138:	d102      	bne.n	8008140 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800813a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800813e:	e00b      	b.n	8008158 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008146:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e2      	bne.n	8008114 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a03      	ldr	r2, [pc, #12]	@ (8008160 <SD_SendSDStatus+0x19c>)
 8008154:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3730      	adds	r7, #48	@ 0x30
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	18000f3a 	.word	0x18000f3a

08008164 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d102      	bne.n	800817a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008178:	e018      	b.n	80081ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008182:	041b      	lsls	r3, r3, #16
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f003 f965 	bl	800b456 <SDMMC_CmdSendStatus>
 800818c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	e009      	b.n	80081ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2100      	movs	r1, #0
 800819e:	4618      	mov	r0, r3
 80081a0:	f002 fe66 	bl	800ae70 <SDMMC_GetResponse>
 80081a4:	4602      	mov	r2, r0
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80081bc:	2300      	movs	r3, #0
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	2300      	movs	r3, #0
 80081c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2100      	movs	r1, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f002 fe50 	bl	800ae70 <SDMMC_GetResponse>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081da:	d102      	bne.n	80081e2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80081e0:	e02f      	b.n	8008242 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081e2:	f107 030c 	add.w	r3, r7, #12
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f879 	bl	80082e0 <SD_FindSCR>
 80081ee:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	e023      	b.n	8008242 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d01c      	beq.n	800823e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800820c:	041b      	lsls	r3, r3, #16
 800820e:	4619      	mov	r1, r3
 8008210:	4610      	mov	r0, r2
 8008212:	f003 f837 	bl	800b284 <SDMMC_CmdAppCommand>
 8008216:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	e00f      	b.n	8008242 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2102      	movs	r1, #2
 8008228:	4618      	mov	r0, r3
 800822a:	f003 f86e 	bl	800b30a <SDMMC_CmdBusWidth>
 800822e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	e003      	b.n	8008242 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800823a:	2300      	movs	r3, #0
 800823c:	e001      	b.n	8008242 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800823e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b086      	sub	sp, #24
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	2300      	movs	r3, #0
 8008258:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2100      	movs	r1, #0
 8008260:	4618      	mov	r0, r3
 8008262:	f002 fe05 	bl	800ae70 <SDMMC_GetResponse>
 8008266:	4603      	mov	r3, r0
 8008268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800826c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008270:	d102      	bne.n	8008278 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008272:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008276:	e02f      	b.n	80082d8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008278:	f107 030c 	add.w	r3, r7, #12
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f82e 	bl	80082e0 <SD_FindSCR>
 8008284:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	e023      	b.n	80082d8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01c      	beq.n	80082d4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082a2:	041b      	lsls	r3, r3, #16
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f002 ffec 	bl	800b284 <SDMMC_CmdAppCommand>
 80082ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	e00f      	b.n	80082d8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2100      	movs	r1, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f003 f823 	bl	800b30a <SDMMC_CmdBusWidth>
 80082c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	e003      	b.n	80082d8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80082d0:	2300      	movs	r3, #0
 80082d2:	e001      	b.n	80082d8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08e      	sub	sp, #56	@ 0x38
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082ea:	f7f8 f985 	bl	80005f8 <HAL_GetTick>
 80082ee:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80082f4:	2300      	movs	r3, #0
 80082f6:	60bb      	str	r3, [r7, #8]
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2108      	movs	r1, #8
 8008306:	4618      	mov	r0, r3
 8008308:	f002 fe74 	bl	800aff4 <SDMMC_CmdBlockLength>
 800830c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800830e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008316:	e0ad      	b.n	8008474 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f002 ffad 	bl	800b284 <SDMMC_CmdAppCommand>
 800832a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800832c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008334:	e09e      	b.n	8008474 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008336:	f04f 33ff 	mov.w	r3, #4294967295
 800833a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800833c:	2308      	movs	r3, #8
 800833e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008340:	2330      	movs	r3, #48	@ 0x30
 8008342:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008344:	2302      	movs	r3, #2
 8008346:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008348:	2300      	movs	r3, #0
 800834a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800834c:	2301      	movs	r3, #1
 800834e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f107 0210 	add.w	r2, r7, #16
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f002 fdac 	bl	800aeb8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f002 fff3 	bl	800b350 <SDMMC_CmdSendSCR>
 800836a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	2b00      	cmp	r3, #0
 8008370:	d027      	beq.n	80083c2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	e07e      	b.n	8008474 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800837c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d113      	bne.n	80083ac <SD_FindSCR+0xcc>
 8008384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008386:	2b00      	cmp	r3, #0
 8008388:	d110      	bne.n	80083ac <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4618      	mov	r0, r3
 8008390:	f002 fcba 	bl	800ad08 <SDMMC_ReadFIFO>
 8008394:	4603      	mov	r3, r0
 8008396:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f002 fcb3 	bl	800ad08 <SDMMC_ReadFIFO>
 80083a2:	4603      	mov	r3, r0
 80083a4:	60fb      	str	r3, [r7, #12]
      index++;
 80083a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a8:	3301      	adds	r3, #1
 80083aa:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80083ac:	f7f8 f924 	bl	80005f8 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ba:	d102      	bne.n	80083c2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80083bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80083c0:	e058      	b.n	8008474 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083c8:	f240 532a 	movw	r3, #1322	@ 0x52a
 80083cc:	4013      	ands	r3, r2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0d1      	beq.n	8008376 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d8:	f003 0308 	and.w	r3, r3, #8
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2208      	movs	r2, #8
 80083e6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80083e8:	2308      	movs	r3, #8
 80083ea:	e043      	b.n	8008474 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2202      	movs	r2, #2
 8008400:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008402:	2302      	movs	r3, #2
 8008404:	e036      	b.n	8008474 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2220      	movs	r2, #32
 800841a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800841c:	2320      	movs	r3, #32
 800841e:	e029      	b.n	8008474 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a15      	ldr	r2, [pc, #84]	@ (800847c <SD_FindSCR+0x19c>)
 8008426:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	061a      	lsls	r2, r3, #24
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008434:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	0a1b      	lsrs	r3, r3, #8
 800843a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800843e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	0e1b      	lsrs	r3, r3, #24
 8008444:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008448:	601a      	str	r2, [r3, #0]
    scr++;
 800844a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844c:	3304      	adds	r3, #4
 800844e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	061a      	lsls	r2, r3, #24
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800845c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	0a1b      	lsrs	r3, r3, #8
 8008462:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008466:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	0e1b      	lsrs	r3, r3, #24
 800846c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800846e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008470:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3738      	adds	r7, #56	@ 0x38
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	18000f3a 	.word	0x18000f3a

08008480 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008492:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d03f      	beq.n	800851a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	e033      	b.n	8008508 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f002 fc2f 	bl	800ad08 <SDMMC_ReadFIFO>
 80084aa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3301      	adds	r3, #1
 80084b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	3b01      	subs	r3, #1
 80084be:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	0a1b      	lsrs	r3, r3, #8
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3301      	adds	r3, #1
 80084ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	0c1b      	lsrs	r3, r3, #16
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3301      	adds	r3, #1
 80084e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	0e1b      	lsrs	r3, r3, #24
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3301      	adds	r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	3b01      	subs	r3, #1
 8008500:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	3301      	adds	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2b07      	cmp	r3, #7
 800850c:	d9c8      	bls.n	80084a0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800851a:	bf00      	nop
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b086      	sub	sp, #24
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008534:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d043      	beq.n	80085c4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	e037      	b.n	80085b2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3301      	adds	r3, #1
 800854c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	3b01      	subs	r3, #1
 8008552:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	021a      	lsls	r2, r3, #8
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4313      	orrs	r3, r2
 800855e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3301      	adds	r3, #1
 8008564:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	3b01      	subs	r3, #1
 800856a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	041a      	lsls	r2, r3, #16
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4313      	orrs	r3, r2
 8008576:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3301      	adds	r3, #1
 800857c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	3b01      	subs	r3, #1
 8008582:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	061a      	lsls	r2, r3, #24
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	4313      	orrs	r3, r2
 800858e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3301      	adds	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	3b01      	subs	r3, #1
 800859a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f107 0208 	add.w	r2, r7, #8
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f002 fbbb 	bl	800ad22 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	3301      	adds	r3, #1
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b07      	cmp	r3, #7
 80085b6:	d9c4      	bls.n	8008542 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80085c4:	bf00      	nop
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80085ea:	bf00      	nop
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b083      	sub	sp, #12
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
	...

08008634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e1dd      	b.n	8008a02 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a7b      	ldr	r2, [pc, #492]	@ (8008838 <HAL_SPI_Init+0x204>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00e      	beq.n	800866e <HAL_SPI_Init+0x3a>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a79      	ldr	r2, [pc, #484]	@ (800883c <HAL_SPI_Init+0x208>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d009      	beq.n	800866e <HAL_SPI_Init+0x3a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a78      	ldr	r2, [pc, #480]	@ (8008840 <HAL_SPI_Init+0x20c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d004      	beq.n	800866e <HAL_SPI_Init+0x3a>
 8008664:	f240 1147 	movw	r1, #327	@ 0x147
 8008668:	4876      	ldr	r0, [pc, #472]	@ (8008844 <HAL_SPI_Init+0x210>)
 800866a:	f00a ff6f 	bl	801354c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <HAL_SPI_Init+0x56>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800867e:	d004      	beq.n	800868a <HAL_SPI_Init+0x56>
 8008680:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8008684:	486f      	ldr	r0, [pc, #444]	@ (8008844 <HAL_SPI_Init+0x210>)
 8008686:	f00a ff61 	bl	801354c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00e      	beq.n	80086b0 <HAL_SPI_Init+0x7c>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800869a:	d009      	beq.n	80086b0 <HAL_SPI_Init+0x7c>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086a4:	d004      	beq.n	80086b0 <HAL_SPI_Init+0x7c>
 80086a6:	f240 1149 	movw	r1, #329	@ 0x149
 80086aa:	4866      	ldr	r0, [pc, #408]	@ (8008844 <HAL_SPI_Init+0x210>)
 80086ac:	f00a ff4e 	bl	801354c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80086b8:	d040      	beq.n	800873c <HAL_SPI_Init+0x108>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80086c2:	d03b      	beq.n	800873c <HAL_SPI_Init+0x108>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80086cc:	d036      	beq.n	800873c <HAL_SPI_Init+0x108>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086d6:	d031      	beq.n	800873c <HAL_SPI_Init+0x108>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80086e0:	d02c      	beq.n	800873c <HAL_SPI_Init+0x108>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80086ea:	d027      	beq.n	800873c <HAL_SPI_Init+0x108>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 80086f4:	d022      	beq.n	800873c <HAL_SPI_Init+0x108>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086fe:	d01d      	beq.n	800873c <HAL_SPI_Init+0x108>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008708:	d018      	beq.n	800873c <HAL_SPI_Init+0x108>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008712:	d013      	beq.n	800873c <HAL_SPI_Init+0x108>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800871c:	d00e      	beq.n	800873c <HAL_SPI_Init+0x108>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008726:	d009      	beq.n	800873c <HAL_SPI_Init+0x108>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008730:	d004      	beq.n	800873c <HAL_SPI_Init+0x108>
 8008732:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8008736:	4843      	ldr	r0, [pc, #268]	@ (8008844 <HAL_SPI_Init+0x210>)
 8008738:	f00a ff08 	bl	801354c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008744:	d00d      	beq.n	8008762 <HAL_SPI_Init+0x12e>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <HAL_SPI_Init+0x12e>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008756:	d004      	beq.n	8008762 <HAL_SPI_Init+0x12e>
 8008758:	f240 114b 	movw	r1, #331	@ 0x14b
 800875c:	4839      	ldr	r0, [pc, #228]	@ (8008844 <HAL_SPI_Init+0x210>)
 800875e:	f00a fef5 	bl	801354c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008766:	2b08      	cmp	r3, #8
 8008768:	d008      	beq.n	800877c <HAL_SPI_Init+0x148>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800876e:	2b00      	cmp	r3, #0
 8008770:	d004      	beq.n	800877c <HAL_SPI_Init+0x148>
 8008772:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8008776:	4833      	ldr	r0, [pc, #204]	@ (8008844 <HAL_SPI_Init+0x210>)
 8008778:	f00a fee8 	bl	801354c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d020      	beq.n	80087c6 <HAL_SPI_Init+0x192>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	2b08      	cmp	r3, #8
 800878a:	d01c      	beq.n	80087c6 <HAL_SPI_Init+0x192>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	2b10      	cmp	r3, #16
 8008792:	d018      	beq.n	80087c6 <HAL_SPI_Init+0x192>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	2b18      	cmp	r3, #24
 800879a:	d014      	beq.n	80087c6 <HAL_SPI_Init+0x192>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	2b20      	cmp	r3, #32
 80087a2:	d010      	beq.n	80087c6 <HAL_SPI_Init+0x192>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	2b28      	cmp	r3, #40	@ 0x28
 80087aa:	d00c      	beq.n	80087c6 <HAL_SPI_Init+0x192>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	2b30      	cmp	r3, #48	@ 0x30
 80087b2:	d008      	beq.n	80087c6 <HAL_SPI_Init+0x192>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	2b38      	cmp	r3, #56	@ 0x38
 80087ba:	d004      	beq.n	80087c6 <HAL_SPI_Init+0x192>
 80087bc:	f240 114d 	movw	r1, #333	@ 0x14d
 80087c0:	4820      	ldr	r0, [pc, #128]	@ (8008844 <HAL_SPI_Init+0x210>)
 80087c2:	f00a fec3 	bl	801354c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d008      	beq.n	80087e0 <HAL_SPI_Init+0x1ac>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	2b80      	cmp	r3, #128	@ 0x80
 80087d4:	d004      	beq.n	80087e0 <HAL_SPI_Init+0x1ac>
 80087d6:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80087da:	481a      	ldr	r0, [pc, #104]	@ (8008844 <HAL_SPI_Init+0x210>)
 80087dc:	f00a feb6 	bl	801354c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d008      	beq.n	80087fa <HAL_SPI_Init+0x1c6>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d004      	beq.n	80087fa <HAL_SPI_Init+0x1c6>
 80087f0:	f240 114f 	movw	r1, #335	@ 0x14f
 80087f4:	4813      	ldr	r0, [pc, #76]	@ (8008844 <HAL_SPI_Init+0x210>)
 80087f6:	f00a fea9 	bl	801354c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d151      	bne.n	80088a6 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d008      	beq.n	800881c <HAL_SPI_Init+0x1e8>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	2b02      	cmp	r3, #2
 8008810:	d004      	beq.n	800881c <HAL_SPI_Init+0x1e8>
 8008812:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8008816:	480b      	ldr	r0, [pc, #44]	@ (8008844 <HAL_SPI_Init+0x210>)
 8008818:	f00a fe98 	bl	801354c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d011      	beq.n	8008848 <HAL_SPI_Init+0x214>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d00d      	beq.n	8008848 <HAL_SPI_Init+0x214>
 800882c:	f240 1153 	movw	r1, #339	@ 0x153
 8008830:	4804      	ldr	r0, [pc, #16]	@ (8008844 <HAL_SPI_Init+0x210>)
 8008832:	f00a fe8b 	bl	801354c <assert_failed>
 8008836:	e007      	b.n	8008848 <HAL_SPI_Init+0x214>
 8008838:	40013000 	.word	0x40013000
 800883c:	40003800 	.word	0x40003800
 8008840:	40003c00 	.word	0x40003c00
 8008844:	08015944 	.word	0x08015944

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008850:	d125      	bne.n	800889e <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d050      	beq.n	80088fc <HAL_SPI_Init+0x2c8>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	2b08      	cmp	r3, #8
 8008860:	d04c      	beq.n	80088fc <HAL_SPI_Init+0x2c8>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	2b10      	cmp	r3, #16
 8008868:	d048      	beq.n	80088fc <HAL_SPI_Init+0x2c8>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	2b18      	cmp	r3, #24
 8008870:	d044      	beq.n	80088fc <HAL_SPI_Init+0x2c8>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	2b20      	cmp	r3, #32
 8008878:	d040      	beq.n	80088fc <HAL_SPI_Init+0x2c8>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	2b28      	cmp	r3, #40	@ 0x28
 8008880:	d03c      	beq.n	80088fc <HAL_SPI_Init+0x2c8>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	2b30      	cmp	r3, #48	@ 0x30
 8008888:	d038      	beq.n	80088fc <HAL_SPI_Init+0x2c8>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	2b38      	cmp	r3, #56	@ 0x38
 8008890:	d034      	beq.n	80088fc <HAL_SPI_Init+0x2c8>
 8008892:	f240 1157 	movw	r1, #343	@ 0x157
 8008896:	485d      	ldr	r0, [pc, #372]	@ (8008a0c <HAL_SPI_Init+0x3d8>)
 8008898:	f00a fe58 	bl	801354c <assert_failed>
 800889c:	e02e      	b.n	80088fc <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	61da      	str	r2, [r3, #28]
 80088a4:	e02a      	b.n	80088fc <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d020      	beq.n	80088f0 <HAL_SPI_Init+0x2bc>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	2b08      	cmp	r3, #8
 80088b4:	d01c      	beq.n	80088f0 <HAL_SPI_Init+0x2bc>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	2b10      	cmp	r3, #16
 80088bc:	d018      	beq.n	80088f0 <HAL_SPI_Init+0x2bc>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	2b18      	cmp	r3, #24
 80088c4:	d014      	beq.n	80088f0 <HAL_SPI_Init+0x2bc>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	d010      	beq.n	80088f0 <HAL_SPI_Init+0x2bc>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	2b28      	cmp	r3, #40	@ 0x28
 80088d4:	d00c      	beq.n	80088f0 <HAL_SPI_Init+0x2bc>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	2b30      	cmp	r3, #48	@ 0x30
 80088dc:	d008      	beq.n	80088f0 <HAL_SPI_Init+0x2bc>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	2b38      	cmp	r3, #56	@ 0x38
 80088e4:	d004      	beq.n	80088f0 <HAL_SPI_Init+0x2bc>
 80088e6:	f240 1161 	movw	r1, #353	@ 0x161
 80088ea:	4848      	ldr	r0, [pc, #288]	@ (8008a0c <HAL_SPI_Init+0x3d8>)
 80088ec:	f00a fe2e 	bl	801354c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f00b f996 	bl	8013c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008932:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800893c:	d902      	bls.n	8008944 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	e002      	b.n	800894a <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008948:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008952:	d007      	beq.n	8008964 <HAL_SPI_Init+0x330>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800895c:	d002      	beq.n	8008964 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008974:	431a      	orrs	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800899c:	431a      	orrs	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089a6:	ea42 0103 	orr.w	r1, r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	0c1b      	lsrs	r3, r3, #16
 80089c0:	f003 0204 	and.w	r2, r3, #4
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c8:	f003 0310 	and.w	r3, r3, #16
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80089e0:	ea42 0103 	orr.w	r1, r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	08015944 	.word	0x08015944

08008a10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08a      	sub	sp, #40	@ 0x28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d004      	beq.n	8008a34 <HAL_SPI_TransmitReceive+0x24>
 8008a2a:	f44f 619f 	mov.w	r1, #1272	@ 0x4f8
 8008a2e:	4887      	ldr	r0, [pc, #540]	@ (8008c4c <HAL_SPI_TransmitReceive+0x23c>)
 8008a30:	f00a fd8c 	bl	801354c <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a34:	f7f7 fde0 	bl	80005f8 <HAL_GetTick>
 8008a38:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a40:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008a48:	887b      	ldrh	r3, [r7, #2]
 8008a4a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008a4c:	887b      	ldrh	r3, [r7, #2]
 8008a4e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a50:	7ffb      	ldrb	r3, [r7, #31]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d00c      	beq.n	8008a70 <HAL_SPI_TransmitReceive+0x60>
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a5c:	d106      	bne.n	8008a6c <HAL_SPI_TransmitReceive+0x5c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d102      	bne.n	8008a6c <HAL_SPI_TransmitReceive+0x5c>
 8008a66:	7ffb      	ldrb	r3, [r7, #31]
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d001      	beq.n	8008a70 <HAL_SPI_TransmitReceive+0x60>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e1f5      	b.n	8008e5c <HAL_SPI_TransmitReceive+0x44c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d005      	beq.n	8008a82 <HAL_SPI_TransmitReceive+0x72>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <HAL_SPI_TransmitReceive+0x72>
 8008a7c:	887b      	ldrh	r3, [r7, #2]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_SPI_TransmitReceive+0x76>
  {
    return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e1ea      	b.n	8008e5c <HAL_SPI_TransmitReceive+0x44c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_SPI_TransmitReceive+0x84>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e1e3      	b.n	8008e5c <HAL_SPI_TransmitReceive+0x44c>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d003      	beq.n	8008ab0 <HAL_SPI_TransmitReceive+0xa0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2205      	movs	r2, #5
 8008aac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	887a      	ldrh	r2, [r7, #2]
 8008ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	887a      	ldrh	r2, [r7, #2]
 8008ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	887a      	ldrh	r2, [r7, #2]
 8008ad6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	887a      	ldrh	r2, [r7, #2]
 8008adc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008af2:	d802      	bhi.n	8008afa <HAL_SPI_TransmitReceive+0xea>
 8008af4:	8abb      	ldrh	r3, [r7, #20]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d908      	bls.n	8008b0c <HAL_SPI_TransmitReceive+0xfc>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008b08:	605a      	str	r2, [r3, #4]
 8008b0a:	e007      	b.n	8008b1c <HAL_SPI_TransmitReceive+0x10c>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008b1a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b26:	2b40      	cmp	r3, #64	@ 0x40
 8008b28:	d007      	beq.n	8008b3a <HAL_SPI_TransmitReceive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b42:	f240 8085 	bls.w	8008c50 <HAL_SPI_TransmitReceive+0x240>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <HAL_SPI_TransmitReceive+0x144>
 8008b4e:	8afb      	ldrh	r3, [r7, #22]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d16f      	bne.n	8008c34 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b58:	881a      	ldrh	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b64:	1c9a      	adds	r2, r3, #2
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	3b01      	subs	r3, #1
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b78:	e05c      	b.n	8008c34 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d11b      	bne.n	8008bc0 <HAL_SPI_TransmitReceive+0x1b0>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d016      	beq.n	8008bc0 <HAL_SPI_TransmitReceive+0x1b0>
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d113      	bne.n	8008bc0 <HAL_SPI_TransmitReceive+0x1b0>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9c:	881a      	ldrh	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba8:	1c9a      	adds	r2, r3, #2
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d11c      	bne.n	8008c08 <HAL_SPI_TransmitReceive+0x1f8>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d016      	beq.n	8008c08 <HAL_SPI_TransmitReceive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be4:	b292      	uxth	r2, r2
 8008be6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bec:	1c9a      	adds	r2, r3, #2
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c04:	2301      	movs	r3, #1
 8008c06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c08:	f7f7 fcf6 	bl	80005f8 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d80d      	bhi.n	8008c34 <HAL_SPI_TransmitReceive+0x224>
 8008c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1e:	d009      	beq.n	8008c34 <HAL_SPI_TransmitReceive+0x224>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e113      	b.n	8008e5c <HAL_SPI_TransmitReceive+0x44c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d19d      	bne.n	8008b7a <HAL_SPI_TransmitReceive+0x16a>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d197      	bne.n	8008b7a <HAL_SPI_TransmitReceive+0x16a>
 8008c4a:	e0e7      	b.n	8008e1c <HAL_SPI_TransmitReceive+0x40c>
 8008c4c:	08015944 	.word	0x08015944
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_SPI_TransmitReceive+0x250>
 8008c58:	8afb      	ldrh	r3, [r7, #22]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	f040 80d1 	bne.w	8008e02 <HAL_SPI_TransmitReceive+0x3f2>
    {
      if (hspi->TxXferCount > 1U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d912      	bls.n	8008c90 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6e:	881a      	ldrh	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c7a:	1c9a      	adds	r2, r3, #2
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b02      	subs	r3, #2
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c8e:	e0b8      	b.n	8008e02 <HAL_SPI_TransmitReceive+0x3f2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	330c      	adds	r3, #12
 8008c9a:	7812      	ldrb	r2, [r2, #0]
 8008c9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cb6:	e0a4      	b.n	8008e02 <HAL_SPI_TransmitReceive+0x3f2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d134      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x320>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d02f      	beq.n	8008d30 <HAL_SPI_TransmitReceive+0x320>
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d12c      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d912      	bls.n	8008d06 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce4:	881a      	ldrh	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf0:	1c9a      	adds	r2, r3, #2
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	3b02      	subs	r3, #2
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d04:	e012      	b.n	8008d2c <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	7812      	ldrb	r2, [r2, #0]
 8008d12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d148      	bne.n	8008dd0 <HAL_SPI_TransmitReceive+0x3c0>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d042      	beq.n	8008dd0 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d923      	bls.n	8008d9e <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68da      	ldr	r2, [r3, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d60:	b292      	uxth	r2, r2
 8008d62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d68:	1c9a      	adds	r2, r3, #2
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	3b02      	subs	r3, #2
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d81f      	bhi.n	8008dcc <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d9a:	605a      	str	r2, [r3, #4]
 8008d9c:	e016      	b.n	8008dcc <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f103 020c 	add.w	r2, r3, #12
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008daa:	7812      	ldrb	r2, [r2, #0]
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008dd0:	f7f7 fc12 	bl	80005f8 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d803      	bhi.n	8008de8 <HAL_SPI_TransmitReceive+0x3d8>
 8008de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de6:	d102      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x3de>
 8008de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d109      	bne.n	8008e02 <HAL_SPI_TransmitReceive+0x3f2>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e02c      	b.n	8008e5c <HAL_SPI_TransmitReceive+0x44c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f47f af55 	bne.w	8008cb8 <HAL_SPI_TransmitReceive+0x2a8>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f47f af4e 	bne.w	8008cb8 <HAL_SPI_TransmitReceive+0x2a8>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e1c:	6a3a      	ldr	r2, [r7, #32]
 8008e1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f000 f93d 	bl	80090a0 <SPI_EndRxTxTransaction>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d008      	beq.n	8008e3e <HAL_SPI_TransmitReceive+0x42e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e00e      	b.n	8008e5c <HAL_SPI_TransmitReceive+0x44c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <HAL_SPI_TransmitReceive+0x44a>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <HAL_SPI_TransmitReceive+0x44c>
  }
  else
  {
    return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
  }
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3728      	adds	r7, #40	@ 0x28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	603b      	str	r3, [r7, #0]
 8008e70:	4613      	mov	r3, r2
 8008e72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e74:	f7f7 fbc0 	bl	80005f8 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7c:	1a9b      	subs	r3, r3, r2
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	4413      	add	r3, r2
 8008e82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e84:	f7f7 fbb8 	bl	80005f8 <HAL_GetTick>
 8008e88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e8a:	4b39      	ldr	r3, [pc, #228]	@ (8008f70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	015b      	lsls	r3, r3, #5
 8008e90:	0d1b      	lsrs	r3, r3, #20
 8008e92:	69fa      	ldr	r2, [r7, #28]
 8008e94:	fb02 f303 	mul.w	r3, r2, r3
 8008e98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e9a:	e054      	b.n	8008f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea2:	d050      	beq.n	8008f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ea4:	f7f7 fba8 	bl	80005f8 <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	69fa      	ldr	r2, [r7, #28]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d902      	bls.n	8008eba <SPI_WaitFlagStateUntilTimeout+0x56>
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d13d      	bne.n	8008f36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ed2:	d111      	bne.n	8008ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008edc:	d004      	beq.n	8008ee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ee6:	d107      	bne.n	8008ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f00:	d10f      	bne.n	8008f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e017      	b.n	8008f66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	bf0c      	ite	eq
 8008f56:	2301      	moveq	r3, #1
 8008f58:	2300      	movne	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d19b      	bne.n	8008e9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3720      	adds	r7, #32
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000010 	.word	0x20000010

08008f74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	@ 0x28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008f86:	f7f7 fb37 	bl	80005f8 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	4413      	add	r3, r2
 8008f94:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008f96:	f7f7 fb2f 	bl	80005f8 <HAL_GetTick>
 8008f9a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	330c      	adds	r3, #12
 8008fa2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800909c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	00da      	lsls	r2, r3, #3
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	0d1b      	lsrs	r3, r3, #20
 8008fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fb6:	fb02 f303 	mul.w	r3, r2, r3
 8008fba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008fbc:	e060      	b.n	8009080 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008fc4:	d107      	bne.n	8008fd6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d104      	bne.n	8008fd6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fdc:	d050      	beq.n	8009080 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fde:	f7f7 fb0b 	bl	80005f8 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d902      	bls.n	8008ff4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d13d      	bne.n	8009070 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009002:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800900c:	d111      	bne.n	8009032 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009016:	d004      	beq.n	8009022 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009020:	d107      	bne.n	8009032 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009030:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800903a:	d10f      	bne.n	800905c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800905a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e010      	b.n	8009092 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	3b01      	subs	r3, #1
 800907e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689a      	ldr	r2, [r3, #8]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	4013      	ands	r3, r2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	429a      	cmp	r2, r3
 800908e:	d196      	bne.n	8008fbe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3728      	adds	r7, #40	@ 0x28
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20000010 	.word	0x20000010

080090a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f7ff ff5b 	bl	8008f74 <SPI_WaitFifoStateUntilTimeout>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d007      	beq.n	80090d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090c8:	f043 0220 	orr.w	r2, r3, #32
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e027      	b.n	8009124 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2200      	movs	r2, #0
 80090dc:	2180      	movs	r1, #128	@ 0x80
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f7ff fec0 	bl	8008e64 <SPI_WaitFlagStateUntilTimeout>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d007      	beq.n	80090fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090ee:	f043 0220 	orr.w	r2, r3, #32
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e014      	b.n	8009124 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2200      	movs	r2, #0
 8009102:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f7ff ff34 	bl	8008f74 <SPI_WaitFifoStateUntilTimeout>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009116:	f043 0220 	orr.w	r2, r3, #32
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e000      	b.n	8009124 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e0e6      	b.n	800930c <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a74      	ldr	r2, [pc, #464]	@ (8009314 <HAL_TIM_Base_Init+0x1e8>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d036      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009150:	d031      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a70      	ldr	r2, [pc, #448]	@ (8009318 <HAL_TIM_Base_Init+0x1ec>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d02c      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a6e      	ldr	r2, [pc, #440]	@ (800931c <HAL_TIM_Base_Init+0x1f0>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d027      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a6d      	ldr	r2, [pc, #436]	@ (8009320 <HAL_TIM_Base_Init+0x1f4>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d022      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a6b      	ldr	r2, [pc, #428]	@ (8009324 <HAL_TIM_Base_Init+0x1f8>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d01d      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a6a      	ldr	r2, [pc, #424]	@ (8009328 <HAL_TIM_Base_Init+0x1fc>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d018      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a68      	ldr	r2, [pc, #416]	@ (800932c <HAL_TIM_Base_Init+0x200>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d013      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a67      	ldr	r2, [pc, #412]	@ (8009330 <HAL_TIM_Base_Init+0x204>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d00e      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a65      	ldr	r2, [pc, #404]	@ (8009334 <HAL_TIM_Base_Init+0x208>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d009      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a64      	ldr	r2, [pc, #400]	@ (8009338 <HAL_TIM_Base_Init+0x20c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d004      	beq.n	80091b6 <HAL_TIM_Base_Init+0x8a>
 80091ac:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80091b0:	4862      	ldr	r0, [pc, #392]	@ (800933c <HAL_TIM_Base_Init+0x210>)
 80091b2:	f00a f9cb 	bl	801354c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d014      	beq.n	80091e8 <HAL_TIM_Base_Init+0xbc>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	2b10      	cmp	r3, #16
 80091c4:	d010      	beq.n	80091e8 <HAL_TIM_Base_Init+0xbc>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	d00c      	beq.n	80091e8 <HAL_TIM_Base_Init+0xbc>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	2b40      	cmp	r3, #64	@ 0x40
 80091d4:	d008      	beq.n	80091e8 <HAL_TIM_Base_Init+0xbc>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	2b60      	cmp	r3, #96	@ 0x60
 80091dc:	d004      	beq.n	80091e8 <HAL_TIM_Base_Init+0xbc>
 80091de:	f240 1117 	movw	r1, #279	@ 0x117
 80091e2:	4856      	ldr	r0, [pc, #344]	@ (800933c <HAL_TIM_Base_Init+0x210>)
 80091e4:	f00a f9b2 	bl	801354c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00e      	beq.n	800920e <HAL_TIM_Base_Init+0xe2>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091f8:	d009      	beq.n	800920e <HAL_TIM_Base_Init+0xe2>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009202:	d004      	beq.n	800920e <HAL_TIM_Base_Init+0xe2>
 8009204:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8009208:	484c      	ldr	r0, [pc, #304]	@ (800933c <HAL_TIM_Base_Init+0x210>)
 800920a:	f00a f99f 	bl	801354c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009216:	d004      	beq.n	8009222 <HAL_TIM_Base_Init+0xf6>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a40      	ldr	r2, [pc, #256]	@ (8009320 <HAL_TIM_Base_Init+0x1f4>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d107      	bne.n	8009232 <HAL_TIM_Base_Init+0x106>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	bf14      	ite	ne
 800922a:	2301      	movne	r3, #1
 800922c:	2300      	moveq	r3, #0
 800922e:	b2db      	uxtb	r3, r3
 8009230:	e00e      	b.n	8009250 <HAL_TIM_Base_Init+0x124>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d006      	beq.n	8009248 <HAL_TIM_Base_Init+0x11c>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009242:	d201      	bcs.n	8009248 <HAL_TIM_Base_Init+0x11c>
 8009244:	2301      	movs	r3, #1
 8009246:	e000      	b.n	800924a <HAL_TIM_Base_Init+0x11e>
 8009248:	2300      	movs	r3, #0
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b00      	cmp	r3, #0
 8009252:	d104      	bne.n	800925e <HAL_TIM_Base_Init+0x132>
 8009254:	f240 1119 	movw	r1, #281	@ 0x119
 8009258:	4838      	ldr	r0, [pc, #224]	@ (800933c <HAL_TIM_Base_Init+0x210>)
 800925a:	f00a f977 	bl	801354c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d008      	beq.n	8009278 <HAL_TIM_Base_Init+0x14c>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	2b80      	cmp	r3, #128	@ 0x80
 800926c:	d004      	beq.n	8009278 <HAL_TIM_Base_Init+0x14c>
 800926e:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8009272:	4832      	ldr	r0, [pc, #200]	@ (800933c <HAL_TIM_Base_Init+0x210>)
 8009274:	f00a f96a 	bl	801354c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d106      	bne.n	8009292 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f857 	bl	8009340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2202      	movs	r2, #2
 8009296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3304      	adds	r3, #4
 80092a2:	4619      	mov	r1, r3
 80092a4:	4610      	mov	r0, r2
 80092a6:	f000 fa39 	bl	800971c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	40012c00 	.word	0x40012c00
 8009318:	40000400 	.word	0x40000400
 800931c:	40000800 	.word	0x40000800
 8009320:	40000c00 	.word	0x40000c00
 8009324:	40001000 	.word	0x40001000
 8009328:	40001400 	.word	0x40001400
 800932c:	40013400 	.word	0x40013400
 8009330:	40014000 	.word	0x40014000
 8009334:	40014400 	.word	0x40014400
 8009338:	40014800 	.word	0x40014800
 800933c:	0801597c 	.word	0x0801597c

08009340 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a4a      	ldr	r2, [pc, #296]	@ (800948c <HAL_TIM_Base_Start_IT+0x138>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d036      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800936e:	d031      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a46      	ldr	r2, [pc, #280]	@ (8009490 <HAL_TIM_Base_Start_IT+0x13c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d02c      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a45      	ldr	r2, [pc, #276]	@ (8009494 <HAL_TIM_Base_Start_IT+0x140>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d027      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a43      	ldr	r2, [pc, #268]	@ (8009498 <HAL_TIM_Base_Start_IT+0x144>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d022      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a42      	ldr	r2, [pc, #264]	@ (800949c <HAL_TIM_Base_Start_IT+0x148>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d01d      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a40      	ldr	r2, [pc, #256]	@ (80094a0 <HAL_TIM_Base_Start_IT+0x14c>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d018      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a3f      	ldr	r2, [pc, #252]	@ (80094a4 <HAL_TIM_Base_Start_IT+0x150>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d013      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a3d      	ldr	r2, [pc, #244]	@ (80094a8 <HAL_TIM_Base_Start_IT+0x154>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00e      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a3c      	ldr	r2, [pc, #240]	@ (80094ac <HAL_TIM_Base_Start_IT+0x158>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d009      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a3a      	ldr	r2, [pc, #232]	@ (80094b0 <HAL_TIM_Base_Start_IT+0x15c>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d004      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 80093ca:	f240 11d3 	movw	r1, #467	@ 0x1d3
 80093ce:	4839      	ldr	r0, [pc, #228]	@ (80094b4 <HAL_TIM_Base_Start_IT+0x160>)
 80093d0:	f00a f8bc 	bl	801354c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d001      	beq.n	80093e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e04f      	b.n	8009484 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0201 	orr.w	r2, r2, #1
 80093fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a22      	ldr	r2, [pc, #136]	@ (800948c <HAL_TIM_Base_Start_IT+0x138>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d01d      	beq.n	8009442 <HAL_TIM_Base_Start_IT+0xee>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800940e:	d018      	beq.n	8009442 <HAL_TIM_Base_Start_IT+0xee>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a1e      	ldr	r2, [pc, #120]	@ (8009490 <HAL_TIM_Base_Start_IT+0x13c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d013      	beq.n	8009442 <HAL_TIM_Base_Start_IT+0xee>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a1d      	ldr	r2, [pc, #116]	@ (8009494 <HAL_TIM_Base_Start_IT+0x140>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d00e      	beq.n	8009442 <HAL_TIM_Base_Start_IT+0xee>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a1b      	ldr	r2, [pc, #108]	@ (8009498 <HAL_TIM_Base_Start_IT+0x144>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d009      	beq.n	8009442 <HAL_TIM_Base_Start_IT+0xee>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a1c      	ldr	r2, [pc, #112]	@ (80094a4 <HAL_TIM_Base_Start_IT+0x150>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d004      	beq.n	8009442 <HAL_TIM_Base_Start_IT+0xee>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a1a      	ldr	r2, [pc, #104]	@ (80094a8 <HAL_TIM_Base_Start_IT+0x154>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d115      	bne.n	800946e <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	4b1b      	ldr	r3, [pc, #108]	@ (80094b8 <HAL_TIM_Base_Start_IT+0x164>)
 800944a:	4013      	ands	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b06      	cmp	r3, #6
 8009452:	d015      	beq.n	8009480 <HAL_TIM_Base_Start_IT+0x12c>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800945a:	d011      	beq.n	8009480 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0201 	orr.w	r2, r2, #1
 800946a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800946c:	e008      	b.n	8009480 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f042 0201 	orr.w	r2, r2, #1
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	e000      	b.n	8009482 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	40012c00 	.word	0x40012c00
 8009490:	40000400 	.word	0x40000400
 8009494:	40000800 	.word	0x40000800
 8009498:	40000c00 	.word	0x40000c00
 800949c:	40001000 	.word	0x40001000
 80094a0:	40001400 	.word	0x40001400
 80094a4:	40013400 	.word	0x40013400
 80094a8:	40014000 	.word	0x40014000
 80094ac:	40014400 	.word	0x40014400
 80094b0:	40014800 	.word	0x40014800
 80094b4:	0801597c 	.word	0x0801597c
 80094b8:	00010007 	.word	0x00010007

080094bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d020      	beq.n	8009520 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f003 0302 	and.w	r3, r3, #2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d01b      	beq.n	8009520 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f06f 0202 	mvn.w	r2, #2
 80094f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	f003 0303 	and.w	r3, r3, #3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d003      	beq.n	800950e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f8e9 	bl	80096de <HAL_TIM_IC_CaptureCallback>
 800950c:	e005      	b.n	800951a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f8db 	bl	80096ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f8ec 	bl	80096f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	d020      	beq.n	800956c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d01b      	beq.n	800956c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f06f 0204 	mvn.w	r2, #4
 800953c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2202      	movs	r2, #2
 8009542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f8c3 	bl	80096de <HAL_TIM_IC_CaptureCallback>
 8009558:	e005      	b.n	8009566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f8b5 	bl	80096ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f8c6 	bl	80096f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f003 0308 	and.w	r3, r3, #8
 8009572:	2b00      	cmp	r3, #0
 8009574:	d020      	beq.n	80095b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f003 0308 	and.w	r3, r3, #8
 800957c:	2b00      	cmp	r3, #0
 800957e:	d01b      	beq.n	80095b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f06f 0208 	mvn.w	r2, #8
 8009588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2204      	movs	r2, #4
 800958e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f89d 	bl	80096de <HAL_TIM_IC_CaptureCallback>
 80095a4:	e005      	b.n	80095b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f88f 	bl	80096ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f8a0 	bl	80096f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f003 0310 	and.w	r3, r3, #16
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d020      	beq.n	8009604 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f003 0310 	and.w	r3, r3, #16
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01b      	beq.n	8009604 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f06f 0210 	mvn.w	r2, #16
 80095d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2208      	movs	r2, #8
 80095da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d003      	beq.n	80095f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f877 	bl	80096de <HAL_TIM_IC_CaptureCallback>
 80095f0:	e005      	b.n	80095fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f869 	bl	80096ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f87a 	bl	80096f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f003 0301 	and.w	r3, r3, #1
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00c      	beq.n	8009628 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	d007      	beq.n	8009628 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f06f 0201 	mvn.w	r2, #1
 8009620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f009 ff7a 	bl	801351c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00c      	beq.n	8009656 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009642:	2b00      	cmp	r3, #0
 8009644:	d007      	beq.n	8009656 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800964e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f913 	bl	800987c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00c      	beq.n	800967a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009666:	2b00      	cmp	r3, #0
 8009668:	d007      	beq.n	800967a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f90b 	bl	8009890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00c      	beq.n	800969e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968a:	2b00      	cmp	r3, #0
 800968c:	d007      	beq.n	800969e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f834 	bl	8009706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f003 0320 	and.w	r3, r3, #32
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00c      	beq.n	80096c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f06f 0220 	mvn.w	r2, #32
 80096ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f8d3 	bl	8009868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096c2:	bf00      	nop
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096e6:	bf00      	nop
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b083      	sub	sp, #12
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096fa:	bf00      	nop
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800970e:	bf00      	nop
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
	...

0800971c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a46      	ldr	r2, [pc, #280]	@ (8009848 <TIM_Base_SetConfig+0x12c>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d013      	beq.n	800975c <TIM_Base_SetConfig+0x40>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800973a:	d00f      	beq.n	800975c <TIM_Base_SetConfig+0x40>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a43      	ldr	r2, [pc, #268]	@ (800984c <TIM_Base_SetConfig+0x130>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d00b      	beq.n	800975c <TIM_Base_SetConfig+0x40>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a42      	ldr	r2, [pc, #264]	@ (8009850 <TIM_Base_SetConfig+0x134>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d007      	beq.n	800975c <TIM_Base_SetConfig+0x40>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a41      	ldr	r2, [pc, #260]	@ (8009854 <TIM_Base_SetConfig+0x138>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d003      	beq.n	800975c <TIM_Base_SetConfig+0x40>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a40      	ldr	r2, [pc, #256]	@ (8009858 <TIM_Base_SetConfig+0x13c>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d108      	bne.n	800976e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a35      	ldr	r2, [pc, #212]	@ (8009848 <TIM_Base_SetConfig+0x12c>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d01f      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800977c:	d01b      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a32      	ldr	r2, [pc, #200]	@ (800984c <TIM_Base_SetConfig+0x130>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d017      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a31      	ldr	r2, [pc, #196]	@ (8009850 <TIM_Base_SetConfig+0x134>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d013      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a30      	ldr	r2, [pc, #192]	@ (8009854 <TIM_Base_SetConfig+0x138>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00f      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a2f      	ldr	r2, [pc, #188]	@ (8009858 <TIM_Base_SetConfig+0x13c>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d00b      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a2e      	ldr	r2, [pc, #184]	@ (800985c <TIM_Base_SetConfig+0x140>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d007      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a2d      	ldr	r2, [pc, #180]	@ (8009860 <TIM_Base_SetConfig+0x144>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d003      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a2c      	ldr	r2, [pc, #176]	@ (8009864 <TIM_Base_SetConfig+0x148>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d108      	bne.n	80097c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a16      	ldr	r2, [pc, #88]	@ (8009848 <TIM_Base_SetConfig+0x12c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00f      	beq.n	8009814 <TIM_Base_SetConfig+0xf8>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a18      	ldr	r2, [pc, #96]	@ (8009858 <TIM_Base_SetConfig+0x13c>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d00b      	beq.n	8009814 <TIM_Base_SetConfig+0xf8>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a17      	ldr	r2, [pc, #92]	@ (800985c <TIM_Base_SetConfig+0x140>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d007      	beq.n	8009814 <TIM_Base_SetConfig+0xf8>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a16      	ldr	r2, [pc, #88]	@ (8009860 <TIM_Base_SetConfig+0x144>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d003      	beq.n	8009814 <TIM_Base_SetConfig+0xf8>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a15      	ldr	r2, [pc, #84]	@ (8009864 <TIM_Base_SetConfig+0x148>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d103      	bne.n	800981c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	691a      	ldr	r2, [r3, #16]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b01      	cmp	r3, #1
 800982c:	d105      	bne.n	800983a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	f023 0201 	bic.w	r2, r3, #1
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	611a      	str	r2, [r3, #16]
  }
}
 800983a:	bf00      	nop
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	40012c00 	.word	0x40012c00
 800984c:	40000400 	.word	0x40000400
 8009850:	40000800 	.word	0x40000800
 8009854:	40000c00 	.word	0x40000c00
 8009858:	40013400 	.word	0x40013400
 800985c:	40014000 	.word	0x40014000
 8009860:	40014400 	.word	0x40014400
 8009864:	40014800 	.word	0x40014800

08009868 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e08d      	b.n	80099d2 <HAL_UART_Init+0x12e>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d023      	beq.n	8009906 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a46      	ldr	r2, [pc, #280]	@ (80099dc <HAL_UART_Init+0x138>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d041      	beq.n	800994c <HAL_UART_Init+0xa8>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a44      	ldr	r2, [pc, #272]	@ (80099e0 <HAL_UART_Init+0x13c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d03c      	beq.n	800994c <HAL_UART_Init+0xa8>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a43      	ldr	r2, [pc, #268]	@ (80099e4 <HAL_UART_Init+0x140>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d037      	beq.n	800994c <HAL_UART_Init+0xa8>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a41      	ldr	r2, [pc, #260]	@ (80099e8 <HAL_UART_Init+0x144>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d032      	beq.n	800994c <HAL_UART_Init+0xa8>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a40      	ldr	r2, [pc, #256]	@ (80099ec <HAL_UART_Init+0x148>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d02d      	beq.n	800994c <HAL_UART_Init+0xa8>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a3e      	ldr	r2, [pc, #248]	@ (80099f0 <HAL_UART_Init+0x14c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d028      	beq.n	800994c <HAL_UART_Init+0xa8>
 80098fa:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80098fe:	483d      	ldr	r0, [pc, #244]	@ (80099f4 <HAL_UART_Init+0x150>)
 8009900:	f009 fe24 	bl	801354c <assert_failed>
 8009904:	e022      	b.n	800994c <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a34      	ldr	r2, [pc, #208]	@ (80099dc <HAL_UART_Init+0x138>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d01d      	beq.n	800994c <HAL_UART_Init+0xa8>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a32      	ldr	r2, [pc, #200]	@ (80099e0 <HAL_UART_Init+0x13c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d018      	beq.n	800994c <HAL_UART_Init+0xa8>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a31      	ldr	r2, [pc, #196]	@ (80099e4 <HAL_UART_Init+0x140>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d013      	beq.n	800994c <HAL_UART_Init+0xa8>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a2f      	ldr	r2, [pc, #188]	@ (80099e8 <HAL_UART_Init+0x144>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d00e      	beq.n	800994c <HAL_UART_Init+0xa8>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a2e      	ldr	r2, [pc, #184]	@ (80099ec <HAL_UART_Init+0x148>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d009      	beq.n	800994c <HAL_UART_Init+0xa8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a2c      	ldr	r2, [pc, #176]	@ (80099f0 <HAL_UART_Init+0x14c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d004      	beq.n	800994c <HAL_UART_Init+0xa8>
 8009942:	f240 1157 	movw	r1, #343	@ 0x157
 8009946:	482b      	ldr	r0, [pc, #172]	@ (80099f4 <HAL_UART_Init+0x150>)
 8009948:	f009 fe00 	bl	801354c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009952:	2b00      	cmp	r3, #0
 8009954:	d106      	bne.n	8009964 <HAL_UART_Init+0xc0>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f00a fc1e 	bl	80141a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2224      	movs	r2, #36	@ 0x24
 8009968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f022 0201 	bic.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <HAL_UART_Init+0xe6>
  {
    UART_AdvFeatureConfig(huart);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fca5 	bl	800a2d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f8c2 	bl	8009b14 <UART_SetConfig>
 8009990:	4603      	mov	r3, r0
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <HAL_UART_Init+0xf6>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e01b      	b.n	80099d2 <HAL_UART_Init+0x12e>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	689a      	ldr	r2, [r3, #8]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80099b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 0201 	orr.w	r2, r2, #1
 80099c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fde2 	bl	800a594 <UART_CheckIdleState>
 80099d0:	4603      	mov	r3, r0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	40013800 	.word	0x40013800
 80099e0:	40004400 	.word	0x40004400
 80099e4:	40004800 	.word	0x40004800
 80099e8:	40004c00 	.word	0x40004c00
 80099ec:	40005000 	.word	0x40005000
 80099f0:	40008000 	.word	0x40008000
 80099f4:	080159b4 	.word	0x080159b4

080099f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08a      	sub	sp, #40	@ 0x28
 80099fc:	af02      	add	r7, sp, #8
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	603b      	str	r3, [r7, #0]
 8009a04:	4613      	mov	r3, r2
 8009a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	d17b      	bne.n	8009b0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <HAL_UART_Transmit+0x26>
 8009a18:	88fb      	ldrh	r3, [r7, #6]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e074      	b.n	8009b0c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2221      	movs	r2, #33	@ 0x21
 8009a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a32:	f7f6 fde1 	bl	80005f8 <HAL_GetTick>
 8009a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	88fa      	ldrh	r2, [r7, #6]
 8009a3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	88fa      	ldrh	r2, [r7, #6]
 8009a44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a50:	d108      	bne.n	8009a64 <HAL_UART_Transmit+0x6c>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d104      	bne.n	8009a64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	61bb      	str	r3, [r7, #24]
 8009a62:	e003      	b.n	8009a6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a6c:	e030      	b.n	8009ad0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	2200      	movs	r2, #0
 8009a76:	2180      	movs	r1, #128	@ 0x80
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 fe35 	bl	800a6e8 <UART_WaitOnFlagUntilTimeout>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d005      	beq.n	8009a90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e03d      	b.n	8009b0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10b      	bne.n	8009aae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	881a      	ldrh	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009aa2:	b292      	uxth	r2, r2
 8009aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	3302      	adds	r3, #2
 8009aaa:	61bb      	str	r3, [r7, #24]
 8009aac:	e007      	b.n	8009abe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	781a      	ldrb	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	3301      	adds	r3, #1
 8009abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1c8      	bne.n	8009a6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2140      	movs	r1, #64	@ 0x40
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 fdfe 	bl	800a6e8 <UART_WaitOnFlagUntilTimeout>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d005      	beq.n	8009afe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e006      	b.n	8009b0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2220      	movs	r2, #32
 8009b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	e000      	b.n	8009b0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009b0a:	2302      	movs	r3, #2
  }
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3720      	adds	r7, #32
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b18:	b08c      	sub	sp, #48	@ 0x30
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	4a17      	ldr	r2, [pc, #92]	@ (8009b88 <UART_SetConfig+0x74>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d904      	bls.n	8009b38 <UART_SetConfig+0x24>
 8009b2e:	f640 4158 	movw	r1, #3160	@ 0xc58
 8009b32:	4816      	ldr	r0, [pc, #88]	@ (8009b8c <UART_SetConfig+0x78>)
 8009b34:	f009 fd0a 	bl	801354c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b40:	d00d      	beq.n	8009b5e <UART_SetConfig+0x4a>
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d009      	beq.n	8009b5e <UART_SetConfig+0x4a>
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b52:	d004      	beq.n	8009b5e <UART_SetConfig+0x4a>
 8009b54:	f640 4159 	movw	r1, #3161	@ 0xc59
 8009b58:	480c      	ldr	r0, [pc, #48]	@ (8009b8c <UART_SetConfig+0x78>)
 8009b5a:	f009 fcf7 	bl	801354c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a0b      	ldr	r2, [pc, #44]	@ (8009b90 <UART_SetConfig+0x7c>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d115      	bne.n	8009b94 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d037      	beq.n	8009be0 <UART_SetConfig+0xcc>
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b78:	d032      	beq.n	8009be0 <UART_SetConfig+0xcc>
 8009b7a:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8009b7e:	4803      	ldr	r0, [pc, #12]	@ (8009b8c <UART_SetConfig+0x78>)
 8009b80:	f009 fce4 	bl	801354c <assert_failed>
 8009b84:	e02c      	b.n	8009be0 <UART_SetConfig+0xcc>
 8009b86:	bf00      	nop
 8009b88:	00e4e1c0 	.word	0x00e4e1c0
 8009b8c:	080159b4 	.word	0x080159b4
 8009b90:	40008000 	.word	0x40008000
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b9c:	d012      	beq.n	8009bc4 <UART_SetConfig+0xb0>
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00e      	beq.n	8009bc4 <UART_SetConfig+0xb0>
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009bae:	d009      	beq.n	8009bc4 <UART_SetConfig+0xb0>
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bb8:	d004      	beq.n	8009bc4 <UART_SetConfig+0xb0>
 8009bba:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8009bbe:	489e      	ldr	r0, [pc, #632]	@ (8009e38 <UART_SetConfig+0x324>)
 8009bc0:	f009 fcc4 	bl	801354c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d009      	beq.n	8009be0 <UART_SetConfig+0xcc>
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
 8009bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bd4:	d004      	beq.n	8009be0 <UART_SetConfig+0xcc>
 8009bd6:	f640 4161 	movw	r1, #3169	@ 0xc61
 8009bda:	4897      	ldr	r0, [pc, #604]	@ (8009e38 <UART_SetConfig+0x324>)
 8009bdc:	f009 fcb6 	bl	801354c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00e      	beq.n	8009c06 <UART_SetConfig+0xf2>
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bf0:	d009      	beq.n	8009c06 <UART_SetConfig+0xf2>
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009bfa:	d004      	beq.n	8009c06 <UART_SetConfig+0xf2>
 8009bfc:	f640 4164 	movw	r1, #3172	@ 0xc64
 8009c00:	488d      	ldr	r0, [pc, #564]	@ (8009e38 <UART_SetConfig+0x324>)
 8009c02:	f009 fca3 	bl	801354c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	f023 030c 	bic.w	r3, r3, #12
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <UART_SetConfig+0x106>
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d104      	bne.n	8009c24 <UART_SetConfig+0x110>
 8009c1a:	f640 4165 	movw	r1, #3173	@ 0xc65
 8009c1e:	4886      	ldr	r0, [pc, #536]	@ (8009e38 <UART_SetConfig+0x324>)
 8009c20:	f009 fc94 	bl	801354c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d013      	beq.n	8009c54 <UART_SetConfig+0x140>
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c34:	d00e      	beq.n	8009c54 <UART_SetConfig+0x140>
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c3e:	d009      	beq.n	8009c54 <UART_SetConfig+0x140>
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c48:	d004      	beq.n	8009c54 <UART_SetConfig+0x140>
 8009c4a:	f640 4166 	movw	r1, #3174	@ 0xc66
 8009c4e:	487a      	ldr	r0, [pc, #488]	@ (8009e38 <UART_SetConfig+0x324>)
 8009c50:	f009 fc7c 	bl	801354c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d009      	beq.n	8009c70 <UART_SetConfig+0x15c>
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c64:	d004      	beq.n	8009c70 <UART_SetConfig+0x15c>
 8009c66:	f640 4167 	movw	r1, #3175	@ 0xc67
 8009c6a:	4873      	ldr	r0, [pc, #460]	@ (8009e38 <UART_SetConfig+0x324>)
 8009c6c:	f009 fc6e 	bl	801354c <assert_failed>
#if defined(USART_PRESC_PRESCALER)
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d030      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d02c      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d028      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d024      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c94:	2b04      	cmp	r3, #4
 8009c96:	d020      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9c:	2b05      	cmp	r3, #5
 8009c9e:	d01c      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca4:	2b06      	cmp	r3, #6
 8009ca6:	d018      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cac:	2b07      	cmp	r3, #7
 8009cae:	d014      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb4:	2b08      	cmp	r3, #8
 8009cb6:	d010      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cbc:	2b09      	cmp	r3, #9
 8009cbe:	d00c      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc4:	2b0a      	cmp	r3, #10
 8009cc6:	d008      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ccc:	2b0b      	cmp	r3, #11
 8009cce:	d004      	beq.n	8009cda <UART_SetConfig+0x1c6>
 8009cd0:	f640 4169 	movw	r1, #3177	@ 0xc69
 8009cd4:	4858      	ldr	r0, [pc, #352]	@ (8009e38 <UART_SetConfig+0x324>)
 8009cd6:	f009 fc39 	bl	801354c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	689a      	ldr	r2, [r3, #8]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	431a      	orrs	r2, r3
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	431a      	orrs	r2, r3
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	69db      	ldr	r3, [r3, #28]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	4b50      	ldr	r3, [pc, #320]	@ (8009e3c <UART_SetConfig+0x328>)
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	6812      	ldr	r2, [r2, #0]
 8009d00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d02:	430b      	orrs	r3, r1
 8009d04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a46      	ldr	r2, [pc, #280]	@ (8009e40 <UART_SetConfig+0x32c>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d004      	beq.n	8009d36 <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	6a1b      	ldr	r3, [r3, #32]
 8009d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d32:	4313      	orrs	r3, r2
 8009d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009d40:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	6812      	ldr	r2, [r2, #0]
 8009d48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d4a:	430b      	orrs	r3, r1
 8009d4c:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d54:	f023 010f 	bic.w	r1, r3, #15
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a36      	ldr	r2, [pc, #216]	@ (8009e44 <UART_SetConfig+0x330>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d126      	bne.n	8009dbc <UART_SetConfig+0x2a8>
 8009d6e:	4b36      	ldr	r3, [pc, #216]	@ (8009e48 <UART_SetConfig+0x334>)
 8009d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d74:	f003 0303 	and.w	r3, r3, #3
 8009d78:	2b03      	cmp	r3, #3
 8009d7a:	d81b      	bhi.n	8009db4 <UART_SetConfig+0x2a0>
 8009d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d84 <UART_SetConfig+0x270>)
 8009d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d82:	bf00      	nop
 8009d84:	08009d95 	.word	0x08009d95
 8009d88:	08009da5 	.word	0x08009da5
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009dad 	.word	0x08009dad
 8009d94:	2301      	movs	r3, #1
 8009d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d9a:	e112      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009da2:	e10e      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009da4:	2304      	movs	r3, #4
 8009da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009daa:	e10a      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009dac:	2308      	movs	r3, #8
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009db2:	e106      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009db4:	2310      	movs	r3, #16
 8009db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dba:	e102      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a22      	ldr	r2, [pc, #136]	@ (8009e4c <UART_SetConfig+0x338>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d144      	bne.n	8009e50 <UART_SetConfig+0x33c>
 8009dc6:	4b20      	ldr	r3, [pc, #128]	@ (8009e48 <UART_SetConfig+0x334>)
 8009dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dcc:	f003 030c 	and.w	r3, r3, #12
 8009dd0:	2b0c      	cmp	r3, #12
 8009dd2:	d82d      	bhi.n	8009e30 <UART_SetConfig+0x31c>
 8009dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ddc <UART_SetConfig+0x2c8>)
 8009dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dda:	bf00      	nop
 8009ddc:	08009e11 	.word	0x08009e11
 8009de0:	08009e31 	.word	0x08009e31
 8009de4:	08009e31 	.word	0x08009e31
 8009de8:	08009e31 	.word	0x08009e31
 8009dec:	08009e21 	.word	0x08009e21
 8009df0:	08009e31 	.word	0x08009e31
 8009df4:	08009e31 	.word	0x08009e31
 8009df8:	08009e31 	.word	0x08009e31
 8009dfc:	08009e19 	.word	0x08009e19
 8009e00:	08009e31 	.word	0x08009e31
 8009e04:	08009e31 	.word	0x08009e31
 8009e08:	08009e31 	.word	0x08009e31
 8009e0c:	08009e29 	.word	0x08009e29
 8009e10:	2300      	movs	r3, #0
 8009e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e16:	e0d4      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e1e:	e0d0      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009e20:	2304      	movs	r3, #4
 8009e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e26:	e0cc      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009e28:	2308      	movs	r3, #8
 8009e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e2e:	e0c8      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009e30:	2310      	movs	r3, #16
 8009e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e36:	e0c4      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009e38:	080159b4 	.word	0x080159b4
 8009e3c:	cfff69f3 	.word	0xcfff69f3
 8009e40:	40008000 	.word	0x40008000
 8009e44:	40013800 	.word	0x40013800
 8009e48:	40021000 	.word	0x40021000
 8009e4c:	40004400 	.word	0x40004400
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4aa9      	ldr	r2, [pc, #676]	@ (800a0fc <UART_SetConfig+0x5e8>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d125      	bne.n	8009ea6 <UART_SetConfig+0x392>
 8009e5a:	4ba9      	ldr	r3, [pc, #676]	@ (800a100 <UART_SetConfig+0x5ec>)
 8009e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e64:	2b30      	cmp	r3, #48	@ 0x30
 8009e66:	d016      	beq.n	8009e96 <UART_SetConfig+0x382>
 8009e68:	2b30      	cmp	r3, #48	@ 0x30
 8009e6a:	d818      	bhi.n	8009e9e <UART_SetConfig+0x38a>
 8009e6c:	2b20      	cmp	r3, #32
 8009e6e:	d00a      	beq.n	8009e86 <UART_SetConfig+0x372>
 8009e70:	2b20      	cmp	r3, #32
 8009e72:	d814      	bhi.n	8009e9e <UART_SetConfig+0x38a>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <UART_SetConfig+0x36a>
 8009e78:	2b10      	cmp	r3, #16
 8009e7a:	d008      	beq.n	8009e8e <UART_SetConfig+0x37a>
 8009e7c:	e00f      	b.n	8009e9e <UART_SetConfig+0x38a>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e84:	e09d      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009e86:	2302      	movs	r3, #2
 8009e88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e8c:	e099      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009e8e:	2304      	movs	r3, #4
 8009e90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e94:	e095      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009e96:	2308      	movs	r3, #8
 8009e98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e9c:	e091      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009e9e:	2310      	movs	r3, #16
 8009ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea4:	e08d      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a96      	ldr	r2, [pc, #600]	@ (800a104 <UART_SetConfig+0x5f0>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d125      	bne.n	8009efc <UART_SetConfig+0x3e8>
 8009eb0:	4b93      	ldr	r3, [pc, #588]	@ (800a100 <UART_SetConfig+0x5ec>)
 8009eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009eba:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ebc:	d016      	beq.n	8009eec <UART_SetConfig+0x3d8>
 8009ebe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ec0:	d818      	bhi.n	8009ef4 <UART_SetConfig+0x3e0>
 8009ec2:	2b80      	cmp	r3, #128	@ 0x80
 8009ec4:	d00a      	beq.n	8009edc <UART_SetConfig+0x3c8>
 8009ec6:	2b80      	cmp	r3, #128	@ 0x80
 8009ec8:	d814      	bhi.n	8009ef4 <UART_SetConfig+0x3e0>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <UART_SetConfig+0x3c0>
 8009ece:	2b40      	cmp	r3, #64	@ 0x40
 8009ed0:	d008      	beq.n	8009ee4 <UART_SetConfig+0x3d0>
 8009ed2:	e00f      	b.n	8009ef4 <UART_SetConfig+0x3e0>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eda:	e072      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009edc:	2302      	movs	r3, #2
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee2:	e06e      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009ee4:	2304      	movs	r3, #4
 8009ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eea:	e06a      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009eec:	2308      	movs	r3, #8
 8009eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef2:	e066      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009efa:	e062      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a81      	ldr	r2, [pc, #516]	@ (800a108 <UART_SetConfig+0x5f4>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d12a      	bne.n	8009f5c <UART_SetConfig+0x448>
 8009f06:	4b7e      	ldr	r3, [pc, #504]	@ (800a100 <UART_SetConfig+0x5ec>)
 8009f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f14:	d01a      	beq.n	8009f4c <UART_SetConfig+0x438>
 8009f16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f1a:	d81b      	bhi.n	8009f54 <UART_SetConfig+0x440>
 8009f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f20:	d00c      	beq.n	8009f3c <UART_SetConfig+0x428>
 8009f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f26:	d815      	bhi.n	8009f54 <UART_SetConfig+0x440>
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <UART_SetConfig+0x420>
 8009f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f30:	d008      	beq.n	8009f44 <UART_SetConfig+0x430>
 8009f32:	e00f      	b.n	8009f54 <UART_SetConfig+0x440>
 8009f34:	2300      	movs	r3, #0
 8009f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f3a:	e042      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f42:	e03e      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009f44:	2304      	movs	r3, #4
 8009f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f4a:	e03a      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009f4c:	2308      	movs	r3, #8
 8009f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f52:	e036      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009f54:	2310      	movs	r3, #16
 8009f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f5a:	e032      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a6a      	ldr	r2, [pc, #424]	@ (800a10c <UART_SetConfig+0x5f8>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d12a      	bne.n	8009fbc <UART_SetConfig+0x4a8>
 8009f66:	4b66      	ldr	r3, [pc, #408]	@ (800a100 <UART_SetConfig+0x5ec>)
 8009f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f74:	d01a      	beq.n	8009fac <UART_SetConfig+0x498>
 8009f76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f7a:	d81b      	bhi.n	8009fb4 <UART_SetConfig+0x4a0>
 8009f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f80:	d00c      	beq.n	8009f9c <UART_SetConfig+0x488>
 8009f82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f86:	d815      	bhi.n	8009fb4 <UART_SetConfig+0x4a0>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <UART_SetConfig+0x480>
 8009f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f90:	d008      	beq.n	8009fa4 <UART_SetConfig+0x490>
 8009f92:	e00f      	b.n	8009fb4 <UART_SetConfig+0x4a0>
 8009f94:	2300      	movs	r3, #0
 8009f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f9a:	e012      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fa2:	e00e      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009fa4:	2304      	movs	r3, #4
 8009fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009faa:	e00a      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009fac:	2308      	movs	r3, #8
 8009fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fb2:	e006      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009fb4:	2310      	movs	r3, #16
 8009fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fba:	e002      	b.n	8009fc2 <UART_SetConfig+0x4ae>
 8009fbc:	2310      	movs	r3, #16
 8009fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a51      	ldr	r2, [pc, #324]	@ (800a10c <UART_SetConfig+0x5f8>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	f040 80a5 	bne.w	800a118 <UART_SetConfig+0x604>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fd2:	2b08      	cmp	r3, #8
 8009fd4:	d823      	bhi.n	800a01e <UART_SetConfig+0x50a>
 8009fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009fdc <UART_SetConfig+0x4c8>)
 8009fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fdc:	0800a001 	.word	0x0800a001
 8009fe0:	0800a01f 	.word	0x0800a01f
 8009fe4:	0800a009 	.word	0x0800a009
 8009fe8:	0800a01f 	.word	0x0800a01f
 8009fec:	0800a00f 	.word	0x0800a00f
 8009ff0:	0800a01f 	.word	0x0800a01f
 8009ff4:	0800a01f 	.word	0x0800a01f
 8009ff8:	0800a01f 	.word	0x0800a01f
 8009ffc:	0800a017 	.word	0x0800a017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a000:	f7fa f93a 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 800a004:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a006:	e010      	b.n	800a02a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a008:	4b41      	ldr	r3, [pc, #260]	@ (800a110 <UART_SetConfig+0x5fc>)
 800a00a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a00c:	e00d      	b.n	800a02a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a00e:	f7fa f89b 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 800a012:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a014:	e009      	b.n	800a02a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a01a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a01c:	e005      	b.n	800a02a <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 800a01e:	2300      	movs	r3, #0
 800a020:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a028:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 8137 	beq.w	800a2a0 <UART_SetConfig+0x78c>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a036:	4a37      	ldr	r2, [pc, #220]	@ (800a114 <UART_SetConfig+0x600>)
 800a038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a03c:	461a      	mov	r2, r3
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	fbb3 f3f2 	udiv	r3, r3, r2
 800a044:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	4613      	mov	r3, r2
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	4413      	add	r3, r2
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	429a      	cmp	r2, r3
 800a054:	d305      	bcc.n	800a062 <UART_SetConfig+0x54e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d903      	bls.n	800a06a <UART_SetConfig+0x556>
      {
        ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a068:	e11a      	b.n	800a2a0 <UART_SetConfig+0x78c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06c:	2200      	movs	r2, #0
 800a06e:	60bb      	str	r3, [r7, #8]
 800a070:	60fa      	str	r2, [r7, #12]
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a076:	4a27      	ldr	r2, [pc, #156]	@ (800a114 <UART_SetConfig+0x600>)
 800a078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	2200      	movs	r2, #0
 800a080:	603b      	str	r3, [r7, #0]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a08c:	f7f6 f910 	bl	80002b0 <__aeabi_uldivmod>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4610      	mov	r0, r2
 800a096:	4619      	mov	r1, r3
 800a098:	f04f 0200 	mov.w	r2, #0
 800a09c:	f04f 0300 	mov.w	r3, #0
 800a0a0:	020b      	lsls	r3, r1, #8
 800a0a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0a6:	0202      	lsls	r2, r0, #8
 800a0a8:	6979      	ldr	r1, [r7, #20]
 800a0aa:	6849      	ldr	r1, [r1, #4]
 800a0ac:	0849      	lsrs	r1, r1, #1
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	eb12 0804 	adds.w	r8, r2, r4
 800a0b8:	eb43 0905 	adc.w	r9, r3, r5
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	469a      	mov	sl, r3
 800a0c4:	4693      	mov	fp, r2
 800a0c6:	4652      	mov	r2, sl
 800a0c8:	465b      	mov	r3, fp
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	f7f6 f8ef 	bl	80002b0 <__aeabi_uldivmod>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0e0:	d308      	bcc.n	800a0f4 <UART_SetConfig+0x5e0>
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0e8:	d204      	bcs.n	800a0f4 <UART_SetConfig+0x5e0>
        {
          huart->Instance->BRR = usartdiv;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6a3a      	ldr	r2, [r7, #32]
 800a0f0:	60da      	str	r2, [r3, #12]
 800a0f2:	e0d5      	b.n	800a2a0 <UART_SetConfig+0x78c>
        }
        else
        {
          ret = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a0fa:	e0d1      	b.n	800a2a0 <UART_SetConfig+0x78c>
 800a0fc:	40004800 	.word	0x40004800
 800a100:	40021000 	.word	0x40021000
 800a104:	40004c00 	.word	0x40004c00
 800a108:	40005000 	.word	0x40005000
 800a10c:	40008000 	.word	0x40008000
 800a110:	00f42400 	.word	0x00f42400
 800a114:	08015be8 	.word	0x08015be8
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a120:	d166      	bne.n	800a1f0 <UART_SetConfig+0x6dc>
  {
    switch (clocksource)
 800a122:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a126:	2b08      	cmp	r3, #8
 800a128:	d827      	bhi.n	800a17a <UART_SetConfig+0x666>
 800a12a:	a201      	add	r2, pc, #4	@ (adr r2, 800a130 <UART_SetConfig+0x61c>)
 800a12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a130:	0800a155 	.word	0x0800a155
 800a134:	0800a15d 	.word	0x0800a15d
 800a138:	0800a165 	.word	0x0800a165
 800a13c:	0800a17b 	.word	0x0800a17b
 800a140:	0800a16b 	.word	0x0800a16b
 800a144:	0800a17b 	.word	0x0800a17b
 800a148:	0800a17b 	.word	0x0800a17b
 800a14c:	0800a17b 	.word	0x0800a17b
 800a150:	0800a173 	.word	0x0800a173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a154:	f7fa f890 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 800a158:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a15a:	e014      	b.n	800a186 <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a15c:	f7fa f8a2 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 800a160:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a162:	e010      	b.n	800a186 <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a164:	4b59      	ldr	r3, [pc, #356]	@ (800a2cc <UART_SetConfig+0x7b8>)
 800a166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a168:	e00d      	b.n	800a186 <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a16a:	f7f9 ffed 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 800a16e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a170:	e009      	b.n	800a186 <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a178:	e005      	b.n	800a186 <UART_SetConfig+0x672>
      default:
        pclk = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 8089 	beq.w	800a2a0 <UART_SetConfig+0x78c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a192:	4a4f      	ldr	r2, [pc, #316]	@ (800a2d0 <UART_SetConfig+0x7bc>)
 800a194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a198:	461a      	mov	r2, r3
 800a19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1a0:	005a      	lsls	r2, r3, #1
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	085b      	lsrs	r3, r3, #1
 800a1a8:	441a      	add	r2, r3
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d916      	bls.n	800a1e8 <UART_SetConfig+0x6d4>
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1c0:	d212      	bcs.n	800a1e8 <UART_SetConfig+0x6d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	f023 030f 	bic.w	r3, r3, #15
 800a1ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	085b      	lsrs	r3, r3, #1
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	f003 0307 	and.w	r3, r3, #7
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	8bfb      	ldrh	r3, [r7, #30]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	8bfa      	ldrh	r2, [r7, #30]
 800a1e4:	60da      	str	r2, [r3, #12]
 800a1e6:	e05b      	b.n	800a2a0 <UART_SetConfig+0x78c>
      }
      else
      {
        ret = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1ee:	e057      	b.n	800a2a0 <UART_SetConfig+0x78c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1f4:	2b08      	cmp	r3, #8
 800a1f6:	d828      	bhi.n	800a24a <UART_SetConfig+0x736>
 800a1f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a200 <UART_SetConfig+0x6ec>)
 800a1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fe:	bf00      	nop
 800a200:	0800a225 	.word	0x0800a225
 800a204:	0800a22d 	.word	0x0800a22d
 800a208:	0800a235 	.word	0x0800a235
 800a20c:	0800a24b 	.word	0x0800a24b
 800a210:	0800a23b 	.word	0x0800a23b
 800a214:	0800a24b 	.word	0x0800a24b
 800a218:	0800a24b 	.word	0x0800a24b
 800a21c:	0800a24b 	.word	0x0800a24b
 800a220:	0800a243 	.word	0x0800a243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a224:	f7fa f828 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 800a228:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a22a:	e014      	b.n	800a256 <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a22c:	f7fa f83a 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 800a230:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a232:	e010      	b.n	800a256 <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a234:	4b25      	ldr	r3, [pc, #148]	@ (800a2cc <UART_SetConfig+0x7b8>)
 800a236:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a238:	e00d      	b.n	800a256 <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a23a:	f7f9 ff85 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 800a23e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a240:	e009      	b.n	800a256 <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a248:	e005      	b.n	800a256 <UART_SetConfig+0x742>
      default:
        pclk = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a254:	bf00      	nop
    }

    if (pclk != 0U)
 800a256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d021      	beq.n	800a2a0 <UART_SetConfig+0x78c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a260:	4a1b      	ldr	r2, [pc, #108]	@ (800a2d0 <UART_SetConfig+0x7bc>)
 800a262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a266:	461a      	mov	r2, r3
 800a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	085b      	lsrs	r3, r3, #1
 800a274:	441a      	add	r2, r3
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	2b0f      	cmp	r3, #15
 800a284:	d909      	bls.n	800a29a <UART_SetConfig+0x786>
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a28c:	d205      	bcs.n	800a29a <UART_SetConfig+0x786>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	b29a      	uxth	r2, r3
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	60da      	str	r2, [r3, #12]
 800a298:	e002      	b.n	800a2a0 <UART_SetConfig+0x78c>
      }
      else
      {
        ret = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a2bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3730      	adds	r7, #48	@ 0x30
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2ca:	bf00      	nop
 800a2cc:	00f42400 	.word	0x00f42400
 800a2d0:	08015be8 	.word	0x08015be8

0800a2d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e0:	2bff      	cmp	r3, #255	@ 0xff
 800a2e2:	d904      	bls.n	800a2ee <UART_AdvFeatureConfig+0x1a>
 800a2e4:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800a2e8:	4891      	ldr	r0, [pc, #580]	@ (800a530 <UART_AdvFeatureConfig+0x25c>)
 800a2ea:	f009 f92f 	bl	801354c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f2:	f003 0308 	and.w	r3, r3, #8
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d018      	beq.n	800a32c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d009      	beq.n	800a316 <UART_AdvFeatureConfig+0x42>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a30a:	d004      	beq.n	800a316 <UART_AdvFeatureConfig+0x42>
 800a30c:	f640 5152 	movw	r1, #3410	@ 0xd52
 800a310:	4887      	ldr	r0, [pc, #540]	@ (800a530 <UART_AdvFeatureConfig+0x25c>)
 800a312:	f009 f91b 	bl	801354c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	430a      	orrs	r2, r1
 800a32a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	d018      	beq.n	800a36a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d009      	beq.n	800a354 <UART_AdvFeatureConfig+0x80>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a348:	d004      	beq.n	800a354 <UART_AdvFeatureConfig+0x80>
 800a34a:	f640 5159 	movw	r1, #3417	@ 0xd59
 800a34e:	4878      	ldr	r0, [pc, #480]	@ (800a530 <UART_AdvFeatureConfig+0x25c>)
 800a350:	f009 f8fc 	bl	801354c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d018      	beq.n	800a3a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d009      	beq.n	800a392 <UART_AdvFeatureConfig+0xbe>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a386:	d004      	beq.n	800a392 <UART_AdvFeatureConfig+0xbe>
 800a388:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800a38c:	4868      	ldr	r0, [pc, #416]	@ (800a530 <UART_AdvFeatureConfig+0x25c>)
 800a38e:	f009 f8dd 	bl	801354c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	430a      	orrs	r2, r1
 800a3a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d018      	beq.n	800a3e6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d009      	beq.n	800a3d0 <UART_AdvFeatureConfig+0xfc>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a3c4:	d004      	beq.n	800a3d0 <UART_AdvFeatureConfig+0xfc>
 800a3c6:	f640 5167 	movw	r1, #3431	@ 0xd67
 800a3ca:	4859      	ldr	r0, [pc, #356]	@ (800a530 <UART_AdvFeatureConfig+0x25c>)
 800a3cc:	f009 f8be 	bl	801354c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ea:	f003 0310 	and.w	r3, r3, #16
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d018      	beq.n	800a424 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d009      	beq.n	800a40e <UART_AdvFeatureConfig+0x13a>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a402:	d004      	beq.n	800a40e <UART_AdvFeatureConfig+0x13a>
 800a404:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800a408:	4849      	ldr	r0, [pc, #292]	@ (800a530 <UART_AdvFeatureConfig+0x25c>)
 800a40a:	f009 f89f 	bl	801354c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	430a      	orrs	r2, r1
 800a422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a428:	f003 0320 	and.w	r3, r3, #32
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d018      	beq.n	800a462 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a434:	2b00      	cmp	r3, #0
 800a436:	d009      	beq.n	800a44c <UART_AdvFeatureConfig+0x178>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a43c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a440:	d004      	beq.n	800a44c <UART_AdvFeatureConfig+0x178>
 800a442:	f640 5175 	movw	r1, #3445	@ 0xd75
 800a446:	483a      	ldr	r0, [pc, #232]	@ (800a530 <UART_AdvFeatureConfig+0x25c>)
 800a448:	f009 f880 	bl	801354c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d06c      	beq.n	800a548 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a30      	ldr	r2, [pc, #192]	@ (800a534 <UART_AdvFeatureConfig+0x260>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d018      	beq.n	800a4aa <UART_AdvFeatureConfig+0x1d6>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a2e      	ldr	r2, [pc, #184]	@ (800a538 <UART_AdvFeatureConfig+0x264>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d013      	beq.n	800a4aa <UART_AdvFeatureConfig+0x1d6>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a2d      	ldr	r2, [pc, #180]	@ (800a53c <UART_AdvFeatureConfig+0x268>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d00e      	beq.n	800a4aa <UART_AdvFeatureConfig+0x1d6>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a2b      	ldr	r2, [pc, #172]	@ (800a540 <UART_AdvFeatureConfig+0x26c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d009      	beq.n	800a4aa <UART_AdvFeatureConfig+0x1d6>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a2a      	ldr	r2, [pc, #168]	@ (800a544 <UART_AdvFeatureConfig+0x270>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d004      	beq.n	800a4aa <UART_AdvFeatureConfig+0x1d6>
 800a4a0:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800a4a4:	4822      	ldr	r0, [pc, #136]	@ (800a530 <UART_AdvFeatureConfig+0x25c>)
 800a4a6:	f009 f851 	bl	801354c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d009      	beq.n	800a4c6 <UART_AdvFeatureConfig+0x1f2>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4ba:	d004      	beq.n	800a4c6 <UART_AdvFeatureConfig+0x1f2>
 800a4bc:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800a4c0:	481b      	ldr	r0, [pc, #108]	@ (800a530 <UART_AdvFeatureConfig+0x25c>)
 800a4c2:	f009 f843 	bl	801354c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4e4:	d130      	bne.n	800a548 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d013      	beq.n	800a516 <UART_AdvFeatureConfig+0x242>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4f6:	d00e      	beq.n	800a516 <UART_AdvFeatureConfig+0x242>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a500:	d009      	beq.n	800a516 <UART_AdvFeatureConfig+0x242>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a506:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a50a:	d004      	beq.n	800a516 <UART_AdvFeatureConfig+0x242>
 800a50c:	f640 5182 	movw	r1, #3458	@ 0xd82
 800a510:	4807      	ldr	r0, [pc, #28]	@ (800a530 <UART_AdvFeatureConfig+0x25c>)
 800a512:	f009 f81b 	bl	801354c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	430a      	orrs	r2, r1
 800a52a:	605a      	str	r2, [r3, #4]
 800a52c:	e00c      	b.n	800a548 <UART_AdvFeatureConfig+0x274>
 800a52e:	bf00      	nop
 800a530:	080159b4 	.word	0x080159b4
 800a534:	40013800 	.word	0x40013800
 800a538:	40004400 	.word	0x40004400
 800a53c:	40004800 	.word	0x40004800
 800a540:	40004c00 	.word	0x40004c00
 800a544:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a550:	2b00      	cmp	r3, #0
 800a552:	d018      	beq.n	800a586 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d009      	beq.n	800a570 <UART_AdvFeatureConfig+0x29c>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a560:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a564:	d004      	beq.n	800a570 <UART_AdvFeatureConfig+0x29c>
 800a566:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800a56a:	4809      	ldr	r0, [pc, #36]	@ (800a590 <UART_AdvFeatureConfig+0x2bc>)
 800a56c:	f008 ffee 	bl	801354c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	605a      	str	r2, [r3, #4]
  }
}
 800a586:	bf00      	nop
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	080159b4 	.word	0x080159b4

0800a594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b098      	sub	sp, #96	@ 0x60
 800a598:	af02      	add	r7, sp, #8
 800a59a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5a4:	f7f6 f828 	bl	80005f8 <HAL_GetTick>
 800a5a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0308 	and.w	r3, r3, #8
 800a5b4:	2b08      	cmp	r3, #8
 800a5b6:	d12f      	bne.n	800a618 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f88e 	bl	800a6e8 <UART_WaitOnFlagUntilTimeout>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d022      	beq.n	800a618 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5da:	e853 3f00 	ldrex	r3, [r3]
 800a5de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5f8:	e841 2300 	strex	r3, r2, [r1]
 800a5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1e6      	bne.n	800a5d2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2220      	movs	r2, #32
 800a608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a614:	2303      	movs	r3, #3
 800a616:	e063      	b.n	800a6e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b04      	cmp	r3, #4
 800a624:	d149      	bne.n	800a6ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a626:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a62e:	2200      	movs	r2, #0
 800a630:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f857 	bl	800a6e8 <UART_WaitOnFlagUntilTimeout>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d03c      	beq.n	800a6ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a648:	e853 3f00 	ldrex	r3, [r3]
 800a64c:	623b      	str	r3, [r7, #32]
   return(result);
 800a64e:	6a3b      	ldr	r3, [r7, #32]
 800a650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a654:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a65e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a660:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a666:	e841 2300 	strex	r3, r2, [r1]
 800a66a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1e6      	bne.n	800a640 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3308      	adds	r3, #8
 800a678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	60fb      	str	r3, [r7, #12]
   return(result);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f023 0301 	bic.w	r3, r3, #1
 800a688:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3308      	adds	r3, #8
 800a690:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a692:	61fa      	str	r2, [r7, #28]
 800a694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	69b9      	ldr	r1, [r7, #24]
 800a698:	69fa      	ldr	r2, [r7, #28]
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	617b      	str	r3, [r7, #20]
   return(result);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e5      	bne.n	800a672 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e012      	b.n	800a6e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3758      	adds	r7, #88	@ 0x58
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f8:	e04f      	b.n	800a79a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a700:	d04b      	beq.n	800a79a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a702:	f7f5 ff79 	bl	80005f8 <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	69ba      	ldr	r2, [r7, #24]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d302      	bcc.n	800a718 <UART_WaitOnFlagUntilTimeout+0x30>
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e04e      	b.n	800a7ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0304 	and.w	r3, r3, #4
 800a726:	2b00      	cmp	r3, #0
 800a728:	d037      	beq.n	800a79a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	2b80      	cmp	r3, #128	@ 0x80
 800a72e:	d034      	beq.n	800a79a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b40      	cmp	r3, #64	@ 0x40
 800a734:	d031      	beq.n	800a79a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	69db      	ldr	r3, [r3, #28]
 800a73c:	f003 0308 	and.w	r3, r3, #8
 800a740:	2b08      	cmp	r3, #8
 800a742:	d110      	bne.n	800a766 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2208      	movs	r2, #8
 800a74a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 f838 	bl	800a7c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2208      	movs	r2, #8
 800a756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e029      	b.n	800a7ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a774:	d111      	bne.n	800a79a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a77e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 f81e 	bl	800a7c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e00f      	b.n	800a7ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	69da      	ldr	r2, [r3, #28]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	bf0c      	ite	eq
 800a7aa:	2301      	moveq	r3, #1
 800a7ac:	2300      	movne	r3, #0
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d0a0      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b095      	sub	sp, #84	@ 0x54
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d2:	e853 3f00 	ldrex	r3, [r3]
 800a7d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7f0:	e841 2300 	strex	r3, r2, [r1]
 800a7f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1e6      	bne.n	800a7ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3308      	adds	r3, #8
 800a802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	e853 3f00 	ldrex	r3, [r3]
 800a80a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a812:	f023 0301 	bic.w	r3, r3, #1
 800a816:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3308      	adds	r3, #8
 800a81e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a820:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a828:	e841 2300 	strex	r3, r2, [r1]
 800a82c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e3      	bne.n	800a7fc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d118      	bne.n	800a86e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	e853 3f00 	ldrex	r3, [r3]
 800a848:	60bb      	str	r3, [r7, #8]
   return(result);
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	f023 0310 	bic.w	r3, r3, #16
 800a850:	647b      	str	r3, [r7, #68]	@ 0x44
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a85a:	61bb      	str	r3, [r7, #24]
 800a85c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85e:	6979      	ldr	r1, [r7, #20]
 800a860:	69ba      	ldr	r2, [r7, #24]
 800a862:	e841 2300 	strex	r3, r2, [r1]
 800a866:	613b      	str	r3, [r7, #16]
   return(result);
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1e6      	bne.n	800a83c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2220      	movs	r2, #32
 800a872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a882:	bf00      	nop
 800a884:	3754      	adds	r7, #84	@ 0x54
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
	...

0800a890 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a29      	ldr	r2, [pc, #164]	@ (800a944 <HAL_UARTEx_DisableFifoMode+0xb4>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d01d      	beq.n	800a8de <HAL_UARTEx_DisableFifoMode+0x4e>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a28      	ldr	r2, [pc, #160]	@ (800a948 <HAL_UARTEx_DisableFifoMode+0xb8>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d018      	beq.n	800a8de <HAL_UARTEx_DisableFifoMode+0x4e>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a26      	ldr	r2, [pc, #152]	@ (800a94c <HAL_UARTEx_DisableFifoMode+0xbc>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d013      	beq.n	800a8de <HAL_UARTEx_DisableFifoMode+0x4e>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a25      	ldr	r2, [pc, #148]	@ (800a950 <HAL_UARTEx_DisableFifoMode+0xc0>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d00e      	beq.n	800a8de <HAL_UARTEx_DisableFifoMode+0x4e>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a23      	ldr	r2, [pc, #140]	@ (800a954 <HAL_UARTEx_DisableFifoMode+0xc4>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d009      	beq.n	800a8de <HAL_UARTEx_DisableFifoMode+0x4e>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a22      	ldr	r2, [pc, #136]	@ (800a958 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d004      	beq.n	800a8de <HAL_UARTEx_DisableFifoMode+0x4e>
 800a8d4:	f240 216b 	movw	r1, #619	@ 0x26b
 800a8d8:	4820      	ldr	r0, [pc, #128]	@ (800a95c <HAL_UARTEx_DisableFifoMode+0xcc>)
 800a8da:	f008 fe37 	bl	801354c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d101      	bne.n	800a8ec <HAL_UARTEx_DisableFifoMode+0x5c>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e027      	b.n	800a93c <HAL_UARTEx_DisableFifoMode+0xac>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2224      	movs	r2, #36	@ 0x24
 800a8f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a91a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2220      	movs	r2, #32
 800a92e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	40013800 	.word	0x40013800
 800a948:	40004400 	.word	0x40004400
 800a94c:	40004800 	.word	0x40004800
 800a950:	40004c00 	.word	0x40004c00
 800a954:	40005000 	.word	0x40005000
 800a958:	40008000 	.word	0x40008000
 800a95c:	080159f0 	.word	0x080159f0

0800a960 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a3b      	ldr	r2, [pc, #236]	@ (800aa5c <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d01d      	beq.n	800a9b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a39      	ldr	r2, [pc, #228]	@ (800aa60 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d018      	beq.n	800a9b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a38      	ldr	r2, [pc, #224]	@ (800aa64 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d013      	beq.n	800a9b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a36      	ldr	r2, [pc, #216]	@ (800aa68 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d00e      	beq.n	800a9b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a35      	ldr	r2, [pc, #212]	@ (800aa6c <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d009      	beq.n	800a9b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a33      	ldr	r2, [pc, #204]	@ (800aa70 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d004      	beq.n	800a9b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a9a6:	f240 2199 	movw	r1, #665	@ 0x299
 800a9aa:	4832      	ldr	r0, [pc, #200]	@ (800aa74 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800a9ac:	f008 fdce 	bl	801354c <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d018      	beq.n	800a9e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9bc:	d014      	beq.n	800a9e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9c4:	d010      	beq.n	800a9e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a9cc:	d00c      	beq.n	800a9e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9d4:	d008      	beq.n	800a9e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 800a9dc:	d004      	beq.n	800a9e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a9de:	f240 219a 	movw	r1, #666	@ 0x29a
 800a9e2:	4824      	ldr	r0, [pc, #144]	@ (800aa74 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800a9e4:	f008 fdb2 	bl	801354c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d101      	bne.n	800a9f6 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	e02d      	b.n	800aa52 <HAL_UARTEx_SetTxFifoThreshold+0xf2>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2224      	movs	r2, #36	@ 0x24
 800aa02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 0201 	bic.w	r2, r2, #1
 800aa1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f8ac 	bl	800ab90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	40013800 	.word	0x40013800
 800aa60:	40004400 	.word	0x40004400
 800aa64:	40004800 	.word	0x40004800
 800aa68:	40004c00 	.word	0x40004c00
 800aa6c:	40005000 	.word	0x40005000
 800aa70:	40008000 	.word	0x40008000
 800aa74:	080159f0 	.word	0x080159f0

0800aa78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a3b      	ldr	r2, [pc, #236]	@ (800ab74 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d01d      	beq.n	800aac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a39      	ldr	r2, [pc, #228]	@ (800ab78 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d018      	beq.n	800aac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a38      	ldr	r2, [pc, #224]	@ (800ab7c <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d013      	beq.n	800aac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a36      	ldr	r2, [pc, #216]	@ (800ab80 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00e      	beq.n	800aac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a35      	ldr	r2, [pc, #212]	@ (800ab84 <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d009      	beq.n	800aac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a33      	ldr	r2, [pc, #204]	@ (800ab88 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d004      	beq.n	800aac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800aabe:	f240 21ca 	movw	r1, #714	@ 0x2ca
 800aac2:	4832      	ldr	r0, [pc, #200]	@ (800ab8c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800aac4:	f008 fd42 	bl	801354c <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d018      	beq.n	800ab00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aad4:	d014      	beq.n	800ab00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aadc:	d010      	beq.n	800ab00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800aae4:	d00c      	beq.n	800ab00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaec:	d008      	beq.n	800ab00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 800aaf4:	d004      	beq.n	800ab00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800aaf6:	f240 21cb 	movw	r1, #715	@ 0x2cb
 800aafa:	4824      	ldr	r0, [pc, #144]	@ (800ab8c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800aafc:	f008 fd26 	bl	801354c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d101      	bne.n	800ab0e <HAL_UARTEx_SetRxFifoThreshold+0x96>
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	e02d      	b.n	800ab6a <HAL_UARTEx_SetRxFifoThreshold+0xf2>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2224      	movs	r2, #36	@ 0x24
 800ab1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f022 0201 	bic.w	r2, r2, #1
 800ab34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	430a      	orrs	r2, r1
 800ab48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f820 	bl	800ab90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	40013800 	.word	0x40013800
 800ab78:	40004400 	.word	0x40004400
 800ab7c:	40004800 	.word	0x40004800
 800ab80:	40004c00 	.word	0x40004c00
 800ab84:	40005000 	.word	0x40005000
 800ab88:	40008000 	.word	0x40008000
 800ab8c:	080159f0 	.word	0x080159f0

0800ab90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d108      	bne.n	800abb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abb0:	e031      	b.n	800ac16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abb2:	2308      	movs	r3, #8
 800abb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abb6:	2308      	movs	r3, #8
 800abb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	0e5b      	lsrs	r3, r3, #25
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	f003 0307 	and.w	r3, r3, #7
 800abc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	0f5b      	lsrs	r3, r3, #29
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	f003 0307 	and.w	r3, r3, #7
 800abd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	7b3a      	ldrb	r2, [r7, #12]
 800abde:	4911      	ldr	r1, [pc, #68]	@ (800ac24 <UARTEx_SetNbDataToProcess+0x94>)
 800abe0:	5c8a      	ldrb	r2, [r1, r2]
 800abe2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abe6:	7b3a      	ldrb	r2, [r7, #12]
 800abe8:	490f      	ldr	r1, [pc, #60]	@ (800ac28 <UARTEx_SetNbDataToProcess+0x98>)
 800abea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abec:	fb93 f3f2 	sdiv	r3, r3, r2
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	7b7a      	ldrb	r2, [r7, #13]
 800abfc:	4909      	ldr	r1, [pc, #36]	@ (800ac24 <UARTEx_SetNbDataToProcess+0x94>)
 800abfe:	5c8a      	ldrb	r2, [r1, r2]
 800ac00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac04:	7b7a      	ldrb	r2, [r7, #13]
 800ac06:	4908      	ldr	r1, [pc, #32]	@ (800ac28 <UARTEx_SetNbDataToProcess+0x98>)
 800ac08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	08015c00 	.word	0x08015c00
 800ac28:	08015c08 	.word	0x08015c08

0800ac2c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	f107 001c 	add.w	r0, r7, #28
 800ac3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a2d      	ldr	r2, [pc, #180]	@ (800acfc <SDMMC_Init+0xd0>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d003      	beq.n	800ac52 <SDMMC_Init+0x26>
 800ac4a:	21dc      	movs	r1, #220	@ 0xdc
 800ac4c:	482c      	ldr	r0, [pc, #176]	@ (800ad00 <SDMMC_Init+0xd4>)
 800ac4e:	f008 fc7d 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d007      	beq.n	800ac68 <SDMMC_Init+0x3c>
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac5e:	d003      	beq.n	800ac68 <SDMMC_Init+0x3c>
 800ac60:	21dd      	movs	r1, #221	@ 0xdd
 800ac62:	4827      	ldr	r0, [pc, #156]	@ (800ad00 <SDMMC_Init+0xd4>)
 800ac64:	f008 fc72 	bl	801354c <assert_failed>
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <SDMMC_Init+0x52>
 800ac6e:	6a3b      	ldr	r3, [r7, #32]
 800ac70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac74:	d003      	beq.n	800ac7e <SDMMC_Init+0x52>
 800ac76:	21e1      	movs	r1, #225	@ 0xe1
 800ac78:	4821      	ldr	r0, [pc, #132]	@ (800ad00 <SDMMC_Init+0xd4>)
 800ac7a:	f008 fc67 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00b      	beq.n	800ac9c <SDMMC_Init+0x70>
 800ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac8a:	d007      	beq.n	800ac9c <SDMMC_Init+0x70>
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac92:	d003      	beq.n	800ac9c <SDMMC_Init+0x70>
 800ac94:	21e2      	movs	r1, #226	@ 0xe2
 800ac96:	481a      	ldr	r0, [pc, #104]	@ (800ad00 <SDMMC_Init+0xd4>)
 800ac98:	f008 fc58 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800ac9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d007      	beq.n	800acb2 <SDMMC_Init+0x86>
 800aca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aca8:	d003      	beq.n	800acb2 <SDMMC_Init+0x86>
 800acaa:	21e3      	movs	r1, #227	@ 0xe3
 800acac:	4814      	ldr	r0, [pc, #80]	@ (800ad00 <SDMMC_Init+0xd4>)
 800acae:	f008 fc4d 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800acb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acb8:	d303      	bcc.n	800acc2 <SDMMC_Init+0x96>
 800acba:	21e4      	movs	r1, #228	@ 0xe4
 800acbc:	4810      	ldr	r0, [pc, #64]	@ (800ad00 <SDMMC_Init+0xd4>)
 800acbe:	f008 fc45 	bl	801354c <assert_failed>

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800acc2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800acc4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800acc6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800acc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      |\
 800acca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800accc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             |\
 800acce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800acd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl |\
 800acd2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	4b09      	ldr	r3, [pc, #36]	@ (800ad04 <SDMMC_Init+0xd8>)
 800ace0:	4013      	ands	r3, r2
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	431a      	orrs	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acf6:	b004      	add	sp, #16
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	50062400 	.word	0x50062400
 800ad00:	08015a2c 	.word	0x08015a2c
 800ad04:	ffc02c00 	.word	0xffc02c00

0800ad08 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ad22:	b480      	push	{r7}
 800ad24:	b083      	sub	sp, #12
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f043 0203 	orr.w	r2, r3, #3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ad58:	2002      	movs	r0, #2
 800ad5a:	f7f5 fc59 	bl	8000610 <HAL_Delay>

  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 0303 	and.w	r3, r3, #3
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	2b3f      	cmp	r3, #63	@ 0x3f
 800ad98:	d904      	bls.n	800ada4 <SDMMC_SendCommand+0x20>
 800ad9a:	f240 1187 	movw	r1, #391	@ 0x187
 800ad9e:	482b      	ldr	r0, [pc, #172]	@ (800ae4c <SDMMC_SendCommand+0xc8>)
 800ada0:	f008 fbd4 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00e      	beq.n	800adca <SDMMC_SendCommand+0x46>
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adb4:	d009      	beq.n	800adca <SDMMC_SendCommand+0x46>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adbe:	d004      	beq.n	800adca <SDMMC_SendCommand+0x46>
 800adc0:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800adc4:	4821      	ldr	r0, [pc, #132]	@ (800ae4c <SDMMC_SendCommand+0xc8>)
 800adc6:	f008 fbc1 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00e      	beq.n	800adf0 <SDMMC_SendCommand+0x6c>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adda:	d009      	beq.n	800adf0 <SDMMC_SendCommand+0x6c>
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ade4:	d004      	beq.n	800adf0 <SDMMC_SendCommand+0x6c>
 800ade6:	f240 1189 	movw	r1, #393	@ 0x189
 800adea:	4818      	ldr	r0, [pc, #96]	@ (800ae4c <SDMMC_SendCommand+0xc8>)
 800adec:	f008 fbae 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d009      	beq.n	800ae0c <SDMMC_SendCommand+0x88>
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae00:	d004      	beq.n	800ae0c <SDMMC_SendCommand+0x88>
 800ae02:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 800ae06:	4811      	ldr	r0, [pc, #68]	@ (800ae4c <SDMMC_SendCommand+0xc8>)
 800ae08:	f008 fba0 	bl	801354c <assert_failed>

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae1c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ae22:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ae28:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	68da      	ldr	r2, [r3, #12]
 800ae34:	4b06      	ldr	r3, [pc, #24]	@ (800ae50 <SDMMC_SendCommand+0xcc>)
 800ae36:	4013      	ands	r3, r2
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	08015a2c 	.word	0x08015a2c
 800ae50:	fffee0c0 	.word	0xfffee0c0

0800ae54 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	b2db      	uxtb	r3, r3
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
	...

0800ae70 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00d      	beq.n	800ae9c <SDMMC_GetResponse+0x2c>
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	d00a      	beq.n	800ae9c <SDMMC_GetResponse+0x2c>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b08      	cmp	r3, #8
 800ae8a:	d007      	beq.n	800ae9c <SDMMC_GetResponse+0x2c>
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2b0c      	cmp	r3, #12
 800ae90:	d004      	beq.n	800ae9c <SDMMC_GetResponse+0x2c>
 800ae92:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 800ae96:	4807      	ldr	r0, [pc, #28]	@ (800aeb4 <SDMMC_GetResponse+0x44>)
 800ae98:	f008 fb58 	bl	801354c <assert_failed>

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3314      	adds	r3, #20
 800aea0:	461a      	mov	r2, r3
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	4413      	add	r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	08015a2c 	.word	0x08015a2c

0800aeb8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aece:	d304      	bcc.n	800aeda <SDMMC_ConfigData+0x22>
 800aed0:	f240 11cb 	movw	r1, #459	@ 0x1cb
 800aed4:	4846      	ldr	r0, [pc, #280]	@ (800aff0 <SDMMC_ConfigData+0x138>)
 800aed6:	f008 fb39 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d03c      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	2b10      	cmp	r3, #16
 800aee8:	d038      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	2b20      	cmp	r3, #32
 800aef0:	d034      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	2b30      	cmp	r3, #48	@ 0x30
 800aef8:	d030      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	2b40      	cmp	r3, #64	@ 0x40
 800af00:	d02c      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	2b50      	cmp	r3, #80	@ 0x50
 800af08:	d028      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	2b60      	cmp	r3, #96	@ 0x60
 800af10:	d024      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	2b70      	cmp	r3, #112	@ 0x70
 800af18:	d020      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	2b80      	cmp	r3, #128	@ 0x80
 800af20:	d01c      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	2b90      	cmp	r3, #144	@ 0x90
 800af28:	d018      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	2ba0      	cmp	r3, #160	@ 0xa0
 800af30:	d014      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	2bb0      	cmp	r3, #176	@ 0xb0
 800af38:	d010      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	2bc0      	cmp	r3, #192	@ 0xc0
 800af40:	d00c      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	2bd0      	cmp	r3, #208	@ 0xd0
 800af48:	d008      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	2be0      	cmp	r3, #224	@ 0xe0
 800af50:	d004      	beq.n	800af5c <SDMMC_ConfigData+0xa4>
 800af52:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 800af56:	4826      	ldr	r0, [pc, #152]	@ (800aff0 <SDMMC_ConfigData+0x138>)
 800af58:	f008 faf8 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d008      	beq.n	800af76 <SDMMC_ConfigData+0xbe>
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d004      	beq.n	800af76 <SDMMC_ConfigData+0xbe>
 800af6c:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800af70:	481f      	ldr	r0, [pc, #124]	@ (800aff0 <SDMMC_ConfigData+0x138>)
 800af72:	f008 faeb 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d008      	beq.n	800af90 <SDMMC_ConfigData+0xd8>
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	2b08      	cmp	r3, #8
 800af84:	d004      	beq.n	800af90 <SDMMC_ConfigData+0xd8>
 800af86:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 800af8a:	4819      	ldr	r0, [pc, #100]	@ (800aff0 <SDMMC_ConfigData+0x138>)
 800af8c:	f008 fade 	bl	801354c <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d008      	beq.n	800afaa <SDMMC_ConfigData+0xf2>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d004      	beq.n	800afaa <SDMMC_ConfigData+0xf2>
 800afa0:	f240 11cf 	movw	r1, #463	@ 0x1cf
 800afa4:	4812      	ldr	r0, [pc, #72]	@ (800aff0 <SDMMC_ConfigData+0x138>)
 800afa6:	f008 fad1 	bl	801354c <assert_failed>

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afc2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800afc8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800afce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	431a      	orrs	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800afe6:	2300      	movs	r3, #0

}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	08015a2c 	.word	0x08015a2c

0800aff4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b088      	sub	sp, #32
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b002:	2310      	movs	r3, #16
 800b004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b00c:	2300      	movs	r3, #0
 800b00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b014:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b016:	f107 0308 	add.w	r3, r7, #8
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff feb1 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b022:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b026:	2110      	movs	r1, #16
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fa7b 	bl	800b524 <SDMMC_GetCmdResp1>
 800b02e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b030:	69fb      	ldr	r3, [r7, #28]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3720      	adds	r7, #32
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b088      	sub	sp, #32
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b048:	2311      	movs	r3, #17
 800b04a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b04c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b052:	2300      	movs	r3, #0
 800b054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b05a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b05c:	f107 0308 	add.w	r3, r7, #8
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7ff fe8e 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b06c:	2111      	movs	r1, #17
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fa58 	bl	800b524 <SDMMC_GetCmdResp1>
 800b074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b076:	69fb      	ldr	r3, [r7, #28]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b088      	sub	sp, #32
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b08e:	2312      	movs	r3, #18
 800b090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b092:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b098:	2300      	movs	r3, #0
 800b09a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b09c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0a2:	f107 0308 	add.w	r3, r7, #8
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff fe6b 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b0ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0b2:	2112      	movs	r1, #18
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fa35 	bl	800b524 <SDMMC_GetCmdResp1>
 800b0ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3720      	adds	r7, #32
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b088      	sub	sp, #32
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b0d4:	2318      	movs	r3, #24
 800b0d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0e8:	f107 0308 	add.w	r3, r7, #8
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7ff fe48 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b0f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0f8:	2118      	movs	r1, #24
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fa12 	bl	800b524 <SDMMC_GetCmdResp1>
 800b100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b102:	69fb      	ldr	r3, [r7, #28]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3720      	adds	r7, #32
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b088      	sub	sp, #32
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b11a:	2319      	movs	r3, #25
 800b11c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b11e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b124:	2300      	movs	r3, #0
 800b126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b12c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b12e:	f107 0308 	add.w	r3, r7, #8
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff fe25 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b13a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b13e:	2119      	movs	r1, #25
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f9ef 	bl	800b524 <SDMMC_GetCmdResp1>
 800b146:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b148:	69fb      	ldr	r3, [r7, #28]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3720      	adds	r7, #32
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
	...

0800b154 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b088      	sub	sp, #32
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b15c:	2300      	movs	r3, #0
 800b15e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b160:	230c      	movs	r3, #12
 800b162:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b164:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b16a:	2300      	movs	r3, #0
 800b16c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b16e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b172:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b18c:	f107 0308 	add.w	r3, r7, #8
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7ff fdf6 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b198:	4a08      	ldr	r2, [pc, #32]	@ (800b1bc <SDMMC_CmdStopTransfer+0x68>)
 800b19a:	210c      	movs	r1, #12
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 f9c1 	bl	800b524 <SDMMC_GetCmdResp1>
 800b1a2:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800b1b0:	69fb      	ldr	r3, [r7, #28]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3720      	adds	r7, #32
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	05f5e100 	.word	0x05f5e100

0800b1c0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08a      	sub	sp, #40	@ 0x28
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b1d0:	2307      	movs	r3, #7
 800b1d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b1d8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b1e2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1e4:	f107 0310 	add.w	r3, r7, #16
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f7ff fdca 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b1f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1f4:	2107      	movs	r1, #7
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f000 f994 	bl	800b524 <SDMMC_GetCmdResp1>
 800b1fc:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b200:	4618      	mov	r0, r3
 800b202:	3728      	adds	r7, #40	@ 0x28
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b088      	sub	sp, #32
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b210:	2300      	movs	r3, #0
 800b212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b214:	2300      	movs	r3, #0
 800b216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b218:	2300      	movs	r3, #0
 800b21a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b21c:	2300      	movs	r3, #0
 800b21e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b224:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b226:	f107 0308 	add.w	r3, r7, #8
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff fda9 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fbb8 	bl	800b9a8 <SDMMC_GetCmdError>
 800b238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b23a:	69fb      	ldr	r3, [r7, #28]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3720      	adds	r7, #32
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b088      	sub	sp, #32
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b24c:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b252:	2308      	movs	r3, #8
 800b254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b25a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b25c:	2300      	movs	r3, #0
 800b25e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b264:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b266:	f107 0308 	add.w	r3, r7, #8
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff fd89 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fb4a 	bl	800b90c <SDMMC_GetCmdResp7>
 800b278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b27a:	69fb      	ldr	r3, [r7, #28]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3720      	adds	r7, #32
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b088      	sub	sp, #32
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b292:	2337      	movs	r3, #55	@ 0x37
 800b294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b296:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b29a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2a6:	f107 0308 	add.w	r3, r7, #8
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7ff fd69 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b2b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2b6:	2137      	movs	r1, #55	@ 0x37
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f933 	bl	800b524 <SDMMC_GetCmdResp1>
 800b2be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2c0:	69fb      	ldr	r3, [r7, #28]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3720      	adds	r7, #32
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b088      	sub	sp, #32
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b2d8:	2329      	movs	r3, #41	@ 0x29
 800b2da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2ec:	f107 0308 	add.w	r3, r7, #8
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7ff fd46 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fa4f 	bl	800b79c <SDMMC_GetCmdResp3>
 800b2fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b300:	69fb      	ldr	r3, [r7, #28]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3720      	adds	r7, #32
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b088      	sub	sp, #32
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b318:	2306      	movs	r3, #6
 800b31a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b31c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b322:	2300      	movs	r3, #0
 800b324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b326:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b32a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b32c:	f107 0308 	add.w	r3, r7, #8
 800b330:	4619      	mov	r1, r3
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7ff fd26 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b33c:	2106      	movs	r1, #6
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f8f0 	bl	800b524 <SDMMC_GetCmdResp1>
 800b344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b346:	69fb      	ldr	r3, [r7, #28]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3720      	adds	r7, #32
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b358:	2300      	movs	r3, #0
 800b35a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b35c:	2333      	movs	r3, #51	@ 0x33
 800b35e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b366:	2300      	movs	r3, #0
 800b368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b36a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b36e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b370:	f107 0308 	add.w	r3, r7, #8
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7ff fd04 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b37c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b380:	2133      	movs	r1, #51	@ 0x33
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f8ce 	bl	800b524 <SDMMC_GetCmdResp1>
 800b388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b38a:	69fb      	ldr	r3, [r7, #28]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3720      	adds	r7, #32
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b088      	sub	sp, #32
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b3a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3b4:	f107 0308 	add.w	r3, r7, #8
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f7ff fce2 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f9a1 	bl	800b708 <SDMMC_GetCmdResp2>
 800b3c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c8:	69fb      	ldr	r3, [r7, #28]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3720      	adds	r7, #32
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b088      	sub	sp, #32
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b3e0:	2309      	movs	r3, #9
 800b3e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3f4:	f107 0308 	add.w	r3, r7, #8
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fcc2 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f981 	bl	800b708 <SDMMC_GetCmdResp2>
 800b406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b408:	69fb      	ldr	r3, [r7, #28]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3720      	adds	r7, #32
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b088      	sub	sp, #32
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b41c:	2300      	movs	r3, #0
 800b41e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b420:	2303      	movs	r3, #3
 800b422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b424:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b42a:	2300      	movs	r3, #0
 800b42c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b42e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b432:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b434:	f107 0308 	add.w	r3, r7, #8
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff fca2 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	2103      	movs	r1, #3
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f9e9 	bl	800b81c <SDMMC_GetCmdResp6>
 800b44a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b44c:	69fb      	ldr	r3, [r7, #28]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3720      	adds	r7, #32
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b088      	sub	sp, #32
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b464:	230d      	movs	r3, #13
 800b466:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b468:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b46c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b472:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b476:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b478:	f107 0308 	add.w	r3, r7, #8
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff fc80 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b484:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b488:	210d      	movs	r1, #13
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f84a 	bl	800b524 <SDMMC_GetCmdResp1>
 800b490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b492:	69fb      	ldr	r3, [r7, #28]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3720      	adds	r7, #32
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b088      	sub	sp, #32
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b4a8:	230d      	movs	r3, #13
 800b4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4bc:	f107 0308 	add.w	r3, r7, #8
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff fc5e 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b4c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4cc:	210d      	movs	r1, #13
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f828 	bl	800b524 <SDMMC_GetCmdResp1>
 800b4d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4d6:	69fb      	ldr	r3, [r7, #28]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3720      	adds	r7, #32
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b4ec:	230b      	movs	r3, #11
 800b4ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b500:	f107 0308 	add.w	r3, r7, #8
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff fc3c 	bl	800ad84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b50c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b510:	210b      	movs	r1, #11
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f806 	bl	800b524 <SDMMC_GetCmdResp1>
 800b518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b51a:	69fb      	ldr	r3, [r7, #28]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3720      	adds	r7, #32
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b088      	sub	sp, #32
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	460b      	mov	r3, r1
 800b52e:	607a      	str	r2, [r7, #4]
 800b530:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b532:	4b70      	ldr	r3, [pc, #448]	@ (800b6f4 <SDMMC_GetCmdResp1+0x1d0>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a70      	ldr	r2, [pc, #448]	@ (800b6f8 <SDMMC_GetCmdResp1+0x1d4>)
 800b538:	fba2 2303 	umull	r2, r3, r2, r3
 800b53c:	0a5a      	lsrs	r2, r3, #9
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	fb02 f303 	mul.w	r3, r2, r3
 800b544:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	1e5a      	subs	r2, r3, #1
 800b54a:	61fa      	str	r2, [r7, #28]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d102      	bne.n	800b556 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b550:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b554:	e0c9      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b55a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	4b67      	ldr	r3, [pc, #412]	@ (800b6fc <SDMMC_GetCmdResp1+0x1d8>)
 800b560:	4013      	ands	r3, r2
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0ef      	beq.n	800b546 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1ea      	bne.n	800b546 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d004      	beq.n	800b586 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2204      	movs	r2, #4
 800b580:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b582:	2304      	movs	r3, #4
 800b584:	e0b1      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d004      	beq.n	800b59c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2201      	movs	r2, #1
 800b596:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b598:	2301      	movs	r3, #1
 800b59a:	e0a6      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4a58      	ldr	r2, [pc, #352]	@ (800b700 <SDMMC_GetCmdResp1+0x1dc>)
 800b5a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7ff fc56 	bl	800ae54 <SDMMC_GetCommandResponse>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	7afb      	ldrb	r3, [r7, #11]
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d001      	beq.n	800b5b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e099      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fc59 	bl	800ae70 <SDMMC_GetResponse>
 800b5be:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	4b50      	ldr	r3, [pc, #320]	@ (800b704 <SDMMC_GetCmdResp1+0x1e0>)
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e08d      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	da02      	bge.n	800b5da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b5d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b5d8:	e087      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b5e4:	2340      	movs	r3, #64	@ 0x40
 800b5e6:	e080      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b5f2:	2380      	movs	r3, #128	@ 0x80
 800b5f4:	e079      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b604:	e071      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b610:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b614:	e069      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b624:	e061      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b630:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b634:	e059      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b644:	e051      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b650:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b654:	e049      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b660:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b664:	e041      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b670:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b674:	e039      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b680:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b684:	e031      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b690:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b694:	e029      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b6a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b6a4:	e021      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b6b4:	e019      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b6c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b6c4:	e011      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b6d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b6d4:	e009      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f003 0308 	and.w	r3, r3, #8
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b6e0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b6e4:	e001      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3720      	adds	r7, #32
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20000010 	.word	0x20000010
 800b6f8:	10624dd3 	.word	0x10624dd3
 800b6fc:	00200045 	.word	0x00200045
 800b700:	002000c5 	.word	0x002000c5
 800b704:	fdffe008 	.word	0xfdffe008

0800b708 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b710:	4b1f      	ldr	r3, [pc, #124]	@ (800b790 <SDMMC_GetCmdResp2+0x88>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a1f      	ldr	r2, [pc, #124]	@ (800b794 <SDMMC_GetCmdResp2+0x8c>)
 800b716:	fba2 2303 	umull	r2, r3, r2, r3
 800b71a:	0a5b      	lsrs	r3, r3, #9
 800b71c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b720:	fb02 f303 	mul.w	r3, r2, r3
 800b724:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	1e5a      	subs	r2, r3, #1
 800b72a:	60fa      	str	r2, [r7, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d102      	bne.n	800b736 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b730:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b734:	e026      	b.n	800b784 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b73a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b742:	2b00      	cmp	r3, #0
 800b744:	d0ef      	beq.n	800b726 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1ea      	bne.n	800b726 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b754:	f003 0304 	and.w	r3, r3, #4
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d004      	beq.n	800b766 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2204      	movs	r2, #4
 800b760:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b762:	2304      	movs	r3, #4
 800b764:	e00e      	b.n	800b784 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b76a:	f003 0301 	and.w	r3, r3, #1
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d004      	beq.n	800b77c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b778:	2301      	movs	r3, #1
 800b77a:	e003      	b.n	800b784 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a06      	ldr	r2, [pc, #24]	@ (800b798 <SDMMC_GetCmdResp2+0x90>)
 800b780:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr
 800b790:	20000010 	.word	0x20000010
 800b794:	10624dd3 	.word	0x10624dd3
 800b798:	002000c5 	.word	0x002000c5

0800b79c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b810 <SDMMC_GetCmdResp3+0x74>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a1a      	ldr	r2, [pc, #104]	@ (800b814 <SDMMC_GetCmdResp3+0x78>)
 800b7aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ae:	0a5b      	lsrs	r3, r3, #9
 800b7b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7b4:	fb02 f303 	mul.w	r3, r2, r3
 800b7b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	1e5a      	subs	r2, r3, #1
 800b7be:	60fa      	str	r2, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d102      	bne.n	800b7ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b7c8:	e01b      	b.n	800b802 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d0ef      	beq.n	800b7ba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1ea      	bne.n	800b7ba <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7e8:	f003 0304 	and.w	r3, r3, #4
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d004      	beq.n	800b7fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2204      	movs	r2, #4
 800b7f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7f6:	2304      	movs	r3, #4
 800b7f8:	e003      	b.n	800b802 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a06      	ldr	r2, [pc, #24]	@ (800b818 <SDMMC_GetCmdResp3+0x7c>)
 800b7fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	20000010 	.word	0x20000010
 800b814:	10624dd3 	.word	0x10624dd3
 800b818:	002000c5 	.word	0x002000c5

0800b81c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b088      	sub	sp, #32
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	460b      	mov	r3, r1
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b82a:	4b35      	ldr	r3, [pc, #212]	@ (800b900 <SDMMC_GetCmdResp6+0xe4>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a35      	ldr	r2, [pc, #212]	@ (800b904 <SDMMC_GetCmdResp6+0xe8>)
 800b830:	fba2 2303 	umull	r2, r3, r2, r3
 800b834:	0a5b      	lsrs	r3, r3, #9
 800b836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b83a:	fb02 f303 	mul.w	r3, r2, r3
 800b83e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	1e5a      	subs	r2, r3, #1
 800b844:	61fa      	str	r2, [r7, #28]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b84a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b84e:	e052      	b.n	800b8f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b854:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d0ef      	beq.n	800b840 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1ea      	bne.n	800b840 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b86e:	f003 0304 	and.w	r3, r3, #4
 800b872:	2b00      	cmp	r3, #0
 800b874:	d004      	beq.n	800b880 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2204      	movs	r2, #4
 800b87a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b87c:	2304      	movs	r3, #4
 800b87e:	e03a      	b.n	800b8f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d004      	beq.n	800b896 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2201      	movs	r2, #1
 800b890:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b892:	2301      	movs	r3, #1
 800b894:	e02f      	b.n	800b8f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff fadc 	bl	800ae54 <SDMMC_GetCommandResponse>
 800b89c:	4603      	mov	r3, r0
 800b89e:	461a      	mov	r2, r3
 800b8a0:	7afb      	ldrb	r3, [r7, #11]
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d001      	beq.n	800b8aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e025      	b.n	800b8f6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4a16      	ldr	r2, [pc, #88]	@ (800b908 <SDMMC_GetCmdResp6+0xec>)
 800b8ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f7ff fadc 	bl	800ae70 <SDMMC_GetResponse>
 800b8b8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d106      	bne.n	800b8d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	0c1b      	lsrs	r3, r3, #16
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e011      	b.n	800b8f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8e0:	e009      	b.n	800b8f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8f0:	e001      	b.n	800b8f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b8f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3720      	adds	r7, #32
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20000010 	.word	0x20000010
 800b904:	10624dd3 	.word	0x10624dd3
 800b908:	002000c5 	.word	0x002000c5

0800b90c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b914:	4b22      	ldr	r3, [pc, #136]	@ (800b9a0 <SDMMC_GetCmdResp7+0x94>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a22      	ldr	r2, [pc, #136]	@ (800b9a4 <SDMMC_GetCmdResp7+0x98>)
 800b91a:	fba2 2303 	umull	r2, r3, r2, r3
 800b91e:	0a5b      	lsrs	r3, r3, #9
 800b920:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b924:	fb02 f303 	mul.w	r3, r2, r3
 800b928:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	1e5a      	subs	r2, r3, #1
 800b92e:	60fa      	str	r2, [r7, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b934:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b938:	e02c      	b.n	800b994 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b93e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0ef      	beq.n	800b92a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1ea      	bne.n	800b92a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b958:	f003 0304 	and.w	r3, r3, #4
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d004      	beq.n	800b96a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2204      	movs	r2, #4
 800b964:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b966:	2304      	movs	r3, #4
 800b968:	e014      	b.n	800b994 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b96e:	f003 0301 	and.w	r3, r3, #1
 800b972:	2b00      	cmp	r3, #0
 800b974:	d004      	beq.n	800b980 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2201      	movs	r2, #1
 800b97a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e009      	b.n	800b994 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2240      	movs	r2, #64	@ 0x40
 800b990:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b992:	2300      	movs	r3, #0

}
 800b994:	4618      	mov	r0, r3
 800b996:	3714      	adds	r7, #20
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr
 800b9a0:	20000010 	.word	0x20000010
 800b9a4:	10624dd3 	.word	0x10624dd3

0800b9a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9b0:	4b11      	ldr	r3, [pc, #68]	@ (800b9f8 <SDMMC_GetCmdError+0x50>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a11      	ldr	r2, [pc, #68]	@ (800b9fc <SDMMC_GetCmdError+0x54>)
 800b9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ba:	0a5b      	lsrs	r3, r3, #9
 800b9bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9c0:	fb02 f303 	mul.w	r3, r2, r3
 800b9c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	1e5a      	subs	r2, r3, #1
 800b9ca:	60fa      	str	r2, [r7, #12]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d102      	bne.n	800b9d6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b9d4:	e009      	b.n	800b9ea <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0f1      	beq.n	800b9c6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a06      	ldr	r2, [pc, #24]	@ (800ba00 <SDMMC_GetCmdError+0x58>)
 800b9e6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3714      	adds	r7, #20
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	20000010 	.word	0x20000010
 800b9fc:	10624dd3 	.word	0x10624dd3
 800ba00:	002000c5 	.word	0x002000c5

0800ba04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ba0e:	79fb      	ldrb	r3, [r7, #7]
 800ba10:	4a08      	ldr	r2, [pc, #32]	@ (800ba34 <disk_status+0x30>)
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	79fa      	ldrb	r2, [r7, #7]
 800ba1c:	4905      	ldr	r1, [pc, #20]	@ (800ba34 <disk_status+0x30>)
 800ba1e:	440a      	add	r2, r1
 800ba20:	7a12      	ldrb	r2, [r2, #8]
 800ba22:	4610      	mov	r0, r2
 800ba24:	4798      	blx	r3
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	200000dc 	.word	0x200000dc

0800ba38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	4a0d      	ldr	r2, [pc, #52]	@ (800ba80 <disk_initialize+0x48>)
 800ba4a:	5cd3      	ldrb	r3, [r2, r3]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d111      	bne.n	800ba74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ba50:	79fb      	ldrb	r3, [r7, #7]
 800ba52:	4a0b      	ldr	r2, [pc, #44]	@ (800ba80 <disk_initialize+0x48>)
 800ba54:	2101      	movs	r1, #1
 800ba56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	4a09      	ldr	r2, [pc, #36]	@ (800ba80 <disk_initialize+0x48>)
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	79fa      	ldrb	r2, [r7, #7]
 800ba66:	4906      	ldr	r1, [pc, #24]	@ (800ba80 <disk_initialize+0x48>)
 800ba68:	440a      	add	r2, r1
 800ba6a:	7a12      	ldrb	r2, [r2, #8]
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	4798      	blx	r3
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	200000dc 	.word	0x200000dc

0800ba84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ba84:	b590      	push	{r4, r7, lr}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60b9      	str	r1, [r7, #8]
 800ba8c:	607a      	str	r2, [r7, #4]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	4603      	mov	r3, r0
 800ba92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
 800ba96:	4a0a      	ldr	r2, [pc, #40]	@ (800bac0 <disk_read+0x3c>)
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	689c      	ldr	r4, [r3, #8]
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
 800baa2:	4a07      	ldr	r2, [pc, #28]	@ (800bac0 <disk_read+0x3c>)
 800baa4:	4413      	add	r3, r2
 800baa6:	7a18      	ldrb	r0, [r3, #8]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	68b9      	ldr	r1, [r7, #8]
 800baae:	47a0      	blx	r4
 800bab0:	4603      	mov	r3, r0
 800bab2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	371c      	adds	r7, #28
 800baba:	46bd      	mov	sp, r7
 800babc:	bd90      	pop	{r4, r7, pc}
 800babe:	bf00      	nop
 800bac0:	200000dc 	.word	0x200000dc

0800bac4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bac4:	b590      	push	{r4, r7, lr}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60b9      	str	r1, [r7, #8]
 800bacc:	607a      	str	r2, [r7, #4]
 800bace:	603b      	str	r3, [r7, #0]
 800bad0:	4603      	mov	r3, r0
 800bad2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
 800bad6:	4a0a      	ldr	r2, [pc, #40]	@ (800bb00 <disk_write+0x3c>)
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	68dc      	ldr	r4, [r3, #12]
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
 800bae2:	4a07      	ldr	r2, [pc, #28]	@ (800bb00 <disk_write+0x3c>)
 800bae4:	4413      	add	r3, r2
 800bae6:	7a18      	ldrb	r0, [r3, #8]
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	68b9      	ldr	r1, [r7, #8]
 800baee:	47a0      	blx	r4
 800baf0:	4603      	mov	r3, r0
 800baf2:	75fb      	strb	r3, [r7, #23]
  return res;
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	371c      	adds	r7, #28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd90      	pop	{r4, r7, pc}
 800bafe:	bf00      	nop
 800bb00:	200000dc 	.word	0x200000dc

0800bb04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	603a      	str	r2, [r7, #0]
 800bb0e:	71fb      	strb	r3, [r7, #7]
 800bb10:	460b      	mov	r3, r1
 800bb12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	4a09      	ldr	r2, [pc, #36]	@ (800bb3c <disk_ioctl+0x38>)
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	79fa      	ldrb	r2, [r7, #7]
 800bb22:	4906      	ldr	r1, [pc, #24]	@ (800bb3c <disk_ioctl+0x38>)
 800bb24:	440a      	add	r2, r1
 800bb26:	7a10      	ldrb	r0, [r2, #8]
 800bb28:	79b9      	ldrb	r1, [r7, #6]
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	4798      	blx	r3
 800bb2e:	4603      	mov	r3, r0
 800bb30:	73fb      	strb	r3, [r7, #15]
  return res;
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	200000dc 	.word	0x200000dc

0800bb40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bb50:	89fb      	ldrh	r3, [r7, #14]
 800bb52:	021b      	lsls	r3, r3, #8
 800bb54:	b21a      	sxth	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	b21b      	sxth	r3, r3
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	b21b      	sxth	r3, r3
 800bb60:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bb62:	89fb      	ldrh	r3, [r7, #14]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3303      	adds	r3, #3
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	021b      	lsls	r3, r3, #8
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	3202      	adds	r2, #2
 800bb88:	7812      	ldrb	r2, [r2, #0]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	021b      	lsls	r3, r3, #8
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	3201      	adds	r2, #1
 800bb96:	7812      	ldrb	r2, [r2, #0]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	021b      	lsls	r3, r3, #8
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	7812      	ldrb	r2, [r2, #0]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
	return rv;
 800bba8:	68fb      	ldr	r3, [r7, #12]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b083      	sub	sp, #12
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	1c5a      	adds	r2, r3, #1
 800bbc6:	607a      	str	r2, [r7, #4]
 800bbc8:	887a      	ldrh	r2, [r7, #2]
 800bbca:	b2d2      	uxtb	r2, r2
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	887b      	ldrh	r3, [r7, #2]
 800bbd0:	0a1b      	lsrs	r3, r3, #8
 800bbd2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	1c5a      	adds	r2, r3, #1
 800bbd8:	607a      	str	r2, [r7, #4]
 800bbda:	887a      	ldrh	r2, [r7, #2]
 800bbdc:	b2d2      	uxtb	r2, r2
 800bbde:	701a      	strb	r2, [r3, #0]
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	b2d2      	uxtb	r2, r2
 800bc00:	701a      	strb	r2, [r3, #0]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	0a1b      	lsrs	r3, r3, #8
 800bc06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	607a      	str	r2, [r7, #4]
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	b2d2      	uxtb	r2, r2
 800bc12:	701a      	strb	r2, [r3, #0]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	0a1b      	lsrs	r3, r3, #8
 800bc18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	683a      	ldr	r2, [r7, #0]
 800bc22:	b2d2      	uxtb	r2, r2
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	0a1b      	lsrs	r3, r3, #8
 800bc2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	1c5a      	adds	r2, r3, #1
 800bc30:	607a      	str	r2, [r7, #4]
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	b2d2      	uxtb	r2, r2
 800bc36:	701a      	strb	r2, [r3, #0]
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bc44:	b480      	push	{r7}
 800bc46:	b087      	sub	sp, #28
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00d      	beq.n	800bc7a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	1c53      	adds	r3, r2, #1
 800bc62:	613b      	str	r3, [r7, #16]
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	1c59      	adds	r1, r3, #1
 800bc68:	6179      	str	r1, [r7, #20]
 800bc6a:	7812      	ldrb	r2, [r2, #0]
 800bc6c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3b01      	subs	r3, #1
 800bc72:	607b      	str	r3, [r7, #4]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1f1      	bne.n	800bc5e <mem_cpy+0x1a>
	}
}
 800bc7a:	bf00      	nop
 800bc7c:	371c      	adds	r7, #28
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bc86:	b480      	push	{r7}
 800bc88:	b087      	sub	sp, #28
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	1c5a      	adds	r2, r3, #1
 800bc9a:	617a      	str	r2, [r7, #20]
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	b2d2      	uxtb	r2, r2
 800bca0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	3b01      	subs	r3, #1
 800bca6:	607b      	str	r3, [r7, #4]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1f3      	bne.n	800bc96 <mem_set+0x10>
}
 800bcae:	bf00      	nop
 800bcb0:	bf00      	nop
 800bcb2:	371c      	adds	r7, #28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bcbc:	b480      	push	{r7}
 800bcbe:	b089      	sub	sp, #36	@ 0x24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	61fb      	str	r3, [r7, #28]
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	1c5a      	adds	r2, r3, #1
 800bcd8:	61fa      	str	r2, [r7, #28]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	1c5a      	adds	r2, r3, #1
 800bce2:	61ba      	str	r2, [r7, #24]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	1acb      	subs	r3, r1, r3
 800bce8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	607b      	str	r3, [r7, #4]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <mem_cmp+0x40>
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d0eb      	beq.n	800bcd4 <mem_cmp+0x18>

	return r;
 800bcfc:	697b      	ldr	r3, [r7, #20]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3724      	adds	r7, #36	@ 0x24
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bd0a:	b480      	push	{r7}
 800bd0c:	b083      	sub	sp, #12
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bd14:	e002      	b.n	800bd1c <chk_chr+0x12>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	607b      	str	r3, [r7, #4]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d005      	beq.n	800bd30 <chk_chr+0x26>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d1f2      	bne.n	800bd16 <chk_chr+0xc>
	return *str;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	781b      	ldrb	r3, [r3, #0]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d009      	beq.n	800bd62 <lock_fs+0x22>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f002 fe7f 	bl	800ea56 <ff_req_grant>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <lock_fs+0x22>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e000      	b.n	800bd64 <lock_fs+0x24>
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	460b      	mov	r3, r1
 800bd76:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00d      	beq.n	800bd9a <unlock_fs+0x2e>
 800bd7e:	78fb      	ldrb	r3, [r7, #3]
 800bd80:	2b0c      	cmp	r3, #12
 800bd82:	d00a      	beq.n	800bd9a <unlock_fs+0x2e>
 800bd84:	78fb      	ldrb	r3, [r7, #3]
 800bd86:	2b0b      	cmp	r3, #11
 800bd88:	d007      	beq.n	800bd9a <unlock_fs+0x2e>
 800bd8a:	78fb      	ldrb	r3, [r7, #3]
 800bd8c:	2b0f      	cmp	r3, #15
 800bd8e:	d004      	beq.n	800bd9a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f002 fe73 	bl	800ea80 <ff_rel_grant>
	}
}
 800bd9a:	bf00      	nop
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
	...

0800bda4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bdae:	2300      	movs	r3, #0
 800bdb0:	60bb      	str	r3, [r7, #8]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	60fb      	str	r3, [r7, #12]
 800bdb6:	e029      	b.n	800be0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bdb8:	4a27      	ldr	r2, [pc, #156]	@ (800be58 <chk_lock+0xb4>)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	011b      	lsls	r3, r3, #4
 800bdbe:	4413      	add	r3, r2
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d01d      	beq.n	800be02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bdc6:	4a24      	ldr	r2, [pc, #144]	@ (800be58 <chk_lock+0xb4>)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	011b      	lsls	r3, r3, #4
 800bdcc:	4413      	add	r3, r2
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d116      	bne.n	800be06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bdd8:	4a1f      	ldr	r2, [pc, #124]	@ (800be58 <chk_lock+0xb4>)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	011b      	lsls	r3, r3, #4
 800bdde:	4413      	add	r3, r2
 800bde0:	3304      	adds	r3, #4
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d10c      	bne.n	800be06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bdec:	4a1a      	ldr	r2, [pc, #104]	@ (800be58 <chk_lock+0xb4>)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	011b      	lsls	r3, r3, #4
 800bdf2:	4413      	add	r3, r2
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d102      	bne.n	800be06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be00:	e007      	b.n	800be12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800be02:	2301      	movs	r3, #1
 800be04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d9d2      	bls.n	800bdb8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b02      	cmp	r3, #2
 800be16:	d109      	bne.n	800be2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d102      	bne.n	800be24 <chk_lock+0x80>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2b02      	cmp	r3, #2
 800be22:	d101      	bne.n	800be28 <chk_lock+0x84>
 800be24:	2300      	movs	r3, #0
 800be26:	e010      	b.n	800be4a <chk_lock+0xa6>
 800be28:	2312      	movs	r3, #18
 800be2a:	e00e      	b.n	800be4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d108      	bne.n	800be44 <chk_lock+0xa0>
 800be32:	4a09      	ldr	r2, [pc, #36]	@ (800be58 <chk_lock+0xb4>)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	4413      	add	r3, r2
 800be3a:	330c      	adds	r3, #12
 800be3c:	881b      	ldrh	r3, [r3, #0]
 800be3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be42:	d101      	bne.n	800be48 <chk_lock+0xa4>
 800be44:	2310      	movs	r3, #16
 800be46:	e000      	b.n	800be4a <chk_lock+0xa6>
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	200000bc 	.word	0x200000bc

0800be5c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800be62:	2300      	movs	r3, #0
 800be64:	607b      	str	r3, [r7, #4]
 800be66:	e002      	b.n	800be6e <enq_lock+0x12>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3301      	adds	r3, #1
 800be6c:	607b      	str	r3, [r7, #4]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d806      	bhi.n	800be82 <enq_lock+0x26>
 800be74:	4a09      	ldr	r2, [pc, #36]	@ (800be9c <enq_lock+0x40>)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	011b      	lsls	r3, r3, #4
 800be7a:	4413      	add	r3, r2
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1f2      	bne.n	800be68 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b02      	cmp	r3, #2
 800be86:	bf14      	ite	ne
 800be88:	2301      	movne	r3, #1
 800be8a:	2300      	moveq	r3, #0
 800be8c:	b2db      	uxtb	r3, r3
}
 800be8e:	4618      	mov	r0, r3
 800be90:	370c      	adds	r7, #12
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	200000bc 	.word	0x200000bc

0800bea0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800beaa:	2300      	movs	r3, #0
 800beac:	60fb      	str	r3, [r7, #12]
 800beae:	e01f      	b.n	800bef0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800beb0:	4a41      	ldr	r2, [pc, #260]	@ (800bfb8 <inc_lock+0x118>)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	011b      	lsls	r3, r3, #4
 800beb6:	4413      	add	r3, r2
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d113      	bne.n	800beea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bec2:	4a3d      	ldr	r2, [pc, #244]	@ (800bfb8 <inc_lock+0x118>)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	011b      	lsls	r3, r3, #4
 800bec8:	4413      	add	r3, r2
 800beca:	3304      	adds	r3, #4
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d109      	bne.n	800beea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bed6:	4a38      	ldr	r2, [pc, #224]	@ (800bfb8 <inc_lock+0x118>)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	011b      	lsls	r3, r3, #4
 800bedc:	4413      	add	r3, r2
 800bede:	3308      	adds	r3, #8
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d006      	beq.n	800bef8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3301      	adds	r3, #1
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d9dc      	bls.n	800beb0 <inc_lock+0x10>
 800bef6:	e000      	b.n	800befa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bef8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2b02      	cmp	r3, #2
 800befe:	d132      	bne.n	800bf66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf00:	2300      	movs	r3, #0
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	e002      	b.n	800bf0c <inc_lock+0x6c>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d806      	bhi.n	800bf20 <inc_lock+0x80>
 800bf12:	4a29      	ldr	r2, [pc, #164]	@ (800bfb8 <inc_lock+0x118>)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	011b      	lsls	r3, r3, #4
 800bf18:	4413      	add	r3, r2
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1f2      	bne.n	800bf06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d101      	bne.n	800bf2a <inc_lock+0x8a>
 800bf26:	2300      	movs	r3, #0
 800bf28:	e040      	b.n	800bfac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	4922      	ldr	r1, [pc, #136]	@ (800bfb8 <inc_lock+0x118>)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	011b      	lsls	r3, r3, #4
 800bf34:	440b      	add	r3, r1
 800bf36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	689a      	ldr	r2, [r3, #8]
 800bf3c:	491e      	ldr	r1, [pc, #120]	@ (800bfb8 <inc_lock+0x118>)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	011b      	lsls	r3, r3, #4
 800bf42:	440b      	add	r3, r1
 800bf44:	3304      	adds	r3, #4
 800bf46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	695a      	ldr	r2, [r3, #20]
 800bf4c:	491a      	ldr	r1, [pc, #104]	@ (800bfb8 <inc_lock+0x118>)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	011b      	lsls	r3, r3, #4
 800bf52:	440b      	add	r3, r1
 800bf54:	3308      	adds	r3, #8
 800bf56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bf58:	4a17      	ldr	r2, [pc, #92]	@ (800bfb8 <inc_lock+0x118>)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	011b      	lsls	r3, r3, #4
 800bf5e:	4413      	add	r3, r2
 800bf60:	330c      	adds	r3, #12
 800bf62:	2200      	movs	r2, #0
 800bf64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d009      	beq.n	800bf80 <inc_lock+0xe0>
 800bf6c:	4a12      	ldr	r2, [pc, #72]	@ (800bfb8 <inc_lock+0x118>)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	011b      	lsls	r3, r3, #4
 800bf72:	4413      	add	r3, r2
 800bf74:	330c      	adds	r3, #12
 800bf76:	881b      	ldrh	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d001      	beq.n	800bf80 <inc_lock+0xe0>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e015      	b.n	800bfac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d108      	bne.n	800bf98 <inc_lock+0xf8>
 800bf86:	4a0c      	ldr	r2, [pc, #48]	@ (800bfb8 <inc_lock+0x118>)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	4413      	add	r3, r2
 800bf8e:	330c      	adds	r3, #12
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	3301      	adds	r3, #1
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	e001      	b.n	800bf9c <inc_lock+0xfc>
 800bf98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf9c:	4906      	ldr	r1, [pc, #24]	@ (800bfb8 <inc_lock+0x118>)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	011b      	lsls	r3, r3, #4
 800bfa2:	440b      	add	r3, r1
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3301      	adds	r3, #1
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	200000bc 	.word	0x200000bc

0800bfbc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	607b      	str	r3, [r7, #4]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d825      	bhi.n	800c01c <dec_lock+0x60>
		n = Files[i].ctr;
 800bfd0:	4a17      	ldr	r2, [pc, #92]	@ (800c030 <dec_lock+0x74>)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	011b      	lsls	r3, r3, #4
 800bfd6:	4413      	add	r3, r2
 800bfd8:	330c      	adds	r3, #12
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bfde:	89fb      	ldrh	r3, [r7, #14]
 800bfe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfe4:	d101      	bne.n	800bfea <dec_lock+0x2e>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bfea:	89fb      	ldrh	r3, [r7, #14]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <dec_lock+0x3a>
 800bff0:	89fb      	ldrh	r3, [r7, #14]
 800bff2:	3b01      	subs	r3, #1
 800bff4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bff6:	4a0e      	ldr	r2, [pc, #56]	@ (800c030 <dec_lock+0x74>)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	011b      	lsls	r3, r3, #4
 800bffc:	4413      	add	r3, r2
 800bffe:	330c      	adds	r3, #12
 800c000:	89fa      	ldrh	r2, [r7, #14]
 800c002:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c004:	89fb      	ldrh	r3, [r7, #14]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d105      	bne.n	800c016 <dec_lock+0x5a>
 800c00a:	4a09      	ldr	r2, [pc, #36]	@ (800c030 <dec_lock+0x74>)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	011b      	lsls	r3, r3, #4
 800c010:	4413      	add	r3, r2
 800c012:	2200      	movs	r2, #0
 800c014:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	737b      	strb	r3, [r7, #13]
 800c01a:	e001      	b.n	800c020 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c01c:	2302      	movs	r3, #2
 800c01e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c020:	7b7b      	ldrb	r3, [r7, #13]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	200000bc 	.word	0x200000bc

0800c034 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c03c:	2300      	movs	r3, #0
 800c03e:	60fb      	str	r3, [r7, #12]
 800c040:	e010      	b.n	800c064 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c042:	4a0d      	ldr	r2, [pc, #52]	@ (800c078 <clear_lock+0x44>)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	011b      	lsls	r3, r3, #4
 800c048:	4413      	add	r3, r2
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d105      	bne.n	800c05e <clear_lock+0x2a>
 800c052:	4a09      	ldr	r2, [pc, #36]	@ (800c078 <clear_lock+0x44>)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	011b      	lsls	r3, r3, #4
 800c058:	4413      	add	r3, r2
 800c05a:	2200      	movs	r2, #0
 800c05c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	3301      	adds	r3, #1
 800c062:	60fb      	str	r3, [r7, #12]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d9eb      	bls.n	800c042 <clear_lock+0xe>
	}
}
 800c06a:	bf00      	nop
 800c06c:	bf00      	nop
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr
 800c078:	200000bc 	.word	0x200000bc

0800c07c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	78db      	ldrb	r3, [r3, #3]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d034      	beq.n	800c0fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c094:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	7858      	ldrb	r0, [r3, #1]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	f7ff fd0e 	bl	800bac4 <disk_write>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	73fb      	strb	r3, [r7, #15]
 800c0b2:	e022      	b.n	800c0fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0be:	697a      	ldr	r2, [r7, #20]
 800c0c0:	1ad2      	subs	r2, r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d217      	bcs.n	800c0fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	789b      	ldrb	r3, [r3, #2]
 800c0ce:	613b      	str	r3, [r7, #16]
 800c0d0:	e010      	b.n	800c0f4 <sync_window+0x78>
					wsect += fs->fsize;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	4413      	add	r3, r2
 800c0da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	7858      	ldrb	r0, [r3, #1]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	f7ff fceb 	bl	800bac4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	613b      	str	r3, [r7, #16]
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d8eb      	bhi.n	800c0d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c116:	683a      	ldr	r2, [r7, #0]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d01b      	beq.n	800c154 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7ff ffad 	bl	800c07c <sync_window>
 800c122:	4603      	mov	r3, r0
 800c124:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d113      	bne.n	800c154 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	7858      	ldrb	r0, [r3, #1]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c136:	2301      	movs	r3, #1
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	f7ff fca3 	bl	800ba84 <disk_read>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d004      	beq.n	800c14e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c144:	f04f 33ff 	mov.w	r3, #4294967295
 800c148:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800c154:	7bfb      	ldrb	r3, [r7, #15]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff ff87 	bl	800c07c <sync_window>
 800c16e:	4603      	mov	r3, r0
 800c170:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c172:	7bfb      	ldrb	r3, [r7, #15]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d158      	bne.n	800c22a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b03      	cmp	r3, #3
 800c17e:	d148      	bne.n	800c212 <sync_fs+0xb2>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	791b      	ldrb	r3, [r3, #4]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d144      	bne.n	800c212 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3338      	adds	r3, #56	@ 0x38
 800c18c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c190:	2100      	movs	r1, #0
 800c192:	4618      	mov	r0, r3
 800c194:	f7ff fd77 	bl	800bc86 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3338      	adds	r3, #56	@ 0x38
 800c19c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c1a0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7ff fd06 	bl	800bbb6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3338      	adds	r3, #56	@ 0x38
 800c1ae:	4921      	ldr	r1, [pc, #132]	@ (800c234 <sync_fs+0xd4>)
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7ff fd1b 	bl	800bbec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	3338      	adds	r3, #56	@ 0x38
 800c1ba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c1be:	491e      	ldr	r1, [pc, #120]	@ (800c238 <sync_fs+0xd8>)
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7ff fd13 	bl	800bbec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	3338      	adds	r3, #56	@ 0x38
 800c1ca:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	699b      	ldr	r3, [r3, #24]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	f7ff fd09 	bl	800bbec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	3338      	adds	r3, #56	@ 0x38
 800c1de:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	f7ff fcff 	bl	800bbec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f2:	1c5a      	adds	r2, r3, #1
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	7858      	ldrb	r0, [r3, #1]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c206:	2301      	movs	r3, #1
 800c208:	f7ff fc5c 	bl	800bac4 <disk_write>
			fs->fsi_flag = 0;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	785b      	ldrb	r3, [r3, #1]
 800c216:	2200      	movs	r2, #0
 800c218:	2100      	movs	r1, #0
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7ff fc72 	bl	800bb04 <disk_ioctl>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d001      	beq.n	800c22a <sync_fs+0xca>
 800c226:	2301      	movs	r3, #1
 800c228:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	41615252 	.word	0x41615252
 800c238:	61417272 	.word	0x61417272

0800c23c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	3b02      	subs	r3, #2
 800c24a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	69db      	ldr	r3, [r3, #28]
 800c250:	3b02      	subs	r3, #2
 800c252:	683a      	ldr	r2, [r7, #0]
 800c254:	429a      	cmp	r2, r3
 800c256:	d301      	bcc.n	800c25c <clust2sect+0x20>
 800c258:	2300      	movs	r3, #0
 800c25a:	e008      	b.n	800c26e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	895b      	ldrh	r3, [r3, #10]
 800c260:	461a      	mov	r2, r3
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	fb03 f202 	mul.w	r2, r3, r2
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c26c:	4413      	add	r3, r2
}
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b086      	sub	sp, #24
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d904      	bls.n	800c29a <get_fat+0x20>
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	69db      	ldr	r3, [r3, #28]
 800c294:	683a      	ldr	r2, [r7, #0]
 800c296:	429a      	cmp	r2, r3
 800c298:	d302      	bcc.n	800c2a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c29a:	2301      	movs	r3, #1
 800c29c:	617b      	str	r3, [r7, #20]
 800c29e:	e08e      	b.n	800c3be <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	d061      	beq.n	800c372 <get_fat+0xf8>
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	dc7b      	bgt.n	800c3aa <get_fat+0x130>
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d002      	beq.n	800c2bc <get_fat+0x42>
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d041      	beq.n	800c33e <get_fat+0xc4>
 800c2ba:	e076      	b.n	800c3aa <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	085b      	lsrs	r3, r3, #1
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	0a5b      	lsrs	r3, r3, #9
 800c2d2:	4413      	add	r3, r2
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6938      	ldr	r0, [r7, #16]
 800c2d8:	f7ff ff14 	bl	800c104 <move_window>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d166      	bne.n	800c3b0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	60fa      	str	r2, [r7, #12]
 800c2e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c2f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	0a5b      	lsrs	r3, r3, #9
 800c2fe:	4413      	add	r3, r2
 800c300:	4619      	mov	r1, r3
 800c302:	6938      	ldr	r0, [r7, #16]
 800c304:	f7ff fefe 	bl	800c104 <move_window>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d152      	bne.n	800c3b4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	4413      	add	r3, r2
 800c318:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c31c:	021b      	lsls	r3, r3, #8
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	4313      	orrs	r3, r2
 800c322:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d002      	beq.n	800c334 <get_fat+0xba>
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	091b      	lsrs	r3, r3, #4
 800c332:	e002      	b.n	800c33a <get_fat+0xc0>
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c33a:	617b      	str	r3, [r7, #20]
			break;
 800c33c:	e03f      	b.n	800c3be <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	0a1b      	lsrs	r3, r3, #8
 800c346:	4413      	add	r3, r2
 800c348:	4619      	mov	r1, r3
 800c34a:	6938      	ldr	r0, [r7, #16]
 800c34c:	f7ff feda 	bl	800c104 <move_window>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d130      	bne.n	800c3b8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	005b      	lsls	r3, r3, #1
 800c360:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c364:	4413      	add	r3, r2
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fbea 	bl	800bb40 <ld_word>
 800c36c:	4603      	mov	r3, r0
 800c36e:	617b      	str	r3, [r7, #20]
			break;
 800c370:	e025      	b.n	800c3be <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	09db      	lsrs	r3, r3, #7
 800c37a:	4413      	add	r3, r2
 800c37c:	4619      	mov	r1, r3
 800c37e:	6938      	ldr	r0, [r7, #16]
 800c380:	f7ff fec0 	bl	800c104 <move_window>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d118      	bne.n	800c3bc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c398:	4413      	add	r3, r2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7ff fbe8 	bl	800bb70 <ld_dword>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c3a6:	617b      	str	r3, [r7, #20]
			break;
 800c3a8:	e009      	b.n	800c3be <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	617b      	str	r3, [r7, #20]
 800c3ae:	e006      	b.n	800c3be <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c3b0:	bf00      	nop
 800c3b2:	e004      	b.n	800c3be <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c3b4:	bf00      	nop
 800c3b6:	e002      	b.n	800c3be <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c3b8:	bf00      	nop
 800c3ba:	e000      	b.n	800c3be <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c3bc:	bf00      	nop
		}
	}

	return val;
 800c3be:	697b      	ldr	r3, [r7, #20]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c3c8:	b590      	push	{r4, r7, lr}
 800c3ca:	b089      	sub	sp, #36	@ 0x24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	f240 80d9 	bls.w	800c592 <put_fat+0x1ca>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	69db      	ldr	r3, [r3, #28]
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	f080 80d3 	bcs.w	800c592 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	f000 8096 	beq.w	800c522 <put_fat+0x15a>
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	f300 80cb 	bgt.w	800c592 <put_fat+0x1ca>
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d002      	beq.n	800c406 <put_fat+0x3e>
 800c400:	2b02      	cmp	r3, #2
 800c402:	d06e      	beq.n	800c4e2 <put_fat+0x11a>
 800c404:	e0c5      	b.n	800c592 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	61bb      	str	r3, [r7, #24]
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	085b      	lsrs	r3, r3, #1
 800c40e:	69ba      	ldr	r2, [r7, #24]
 800c410:	4413      	add	r3, r2
 800c412:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	0a5b      	lsrs	r3, r3, #9
 800c41c:	4413      	add	r3, r2
 800c41e:	4619      	mov	r1, r3
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f7ff fe6f 	bl	800c104 <move_window>
 800c426:	4603      	mov	r3, r0
 800c428:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c42a:	7ffb      	ldrb	r3, [r7, #31]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f040 80a9 	bne.w	800c584 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	1c59      	adds	r1, r3, #1
 800c43c:	61b9      	str	r1, [r7, #24]
 800c43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c442:	4413      	add	r3, r2
 800c444:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	f003 0301 	and.w	r3, r3, #1
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00d      	beq.n	800c46c <put_fat+0xa4>
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	b25b      	sxtb	r3, r3
 800c456:	f003 030f 	and.w	r3, r3, #15
 800c45a:	b25a      	sxtb	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	011b      	lsls	r3, r3, #4
 800c462:	b25b      	sxtb	r3, r3
 800c464:	4313      	orrs	r3, r2
 800c466:	b25b      	sxtb	r3, r3
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	e001      	b.n	800c470 <put_fat+0xa8>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2201      	movs	r2, #1
 800c478:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	0a5b      	lsrs	r3, r3, #9
 800c482:	4413      	add	r3, r2
 800c484:	4619      	mov	r1, r3
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f7ff fe3c 	bl	800c104 <move_window>
 800c48c:	4603      	mov	r3, r0
 800c48e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c490:	7ffb      	ldrb	r3, [r7, #31]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d178      	bne.n	800c588 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a2:	4413      	add	r3, r2
 800c4a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	f003 0301 	and.w	r3, r3, #1
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d003      	beq.n	800c4b8 <put_fat+0xf0>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	091b      	lsrs	r3, r3, #4
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	e00e      	b.n	800c4d6 <put_fat+0x10e>
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	b25b      	sxtb	r3, r3
 800c4be:	f023 030f 	bic.w	r3, r3, #15
 800c4c2:	b25a      	sxtb	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	0a1b      	lsrs	r3, r3, #8
 800c4c8:	b25b      	sxtb	r3, r3
 800c4ca:	f003 030f 	and.w	r3, r3, #15
 800c4ce:	b25b      	sxtb	r3, r3
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	b25b      	sxtb	r3, r3
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	697a      	ldr	r2, [r7, #20]
 800c4d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	70da      	strb	r2, [r3, #3]
			break;
 800c4e0:	e057      	b.n	800c592 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	0a1b      	lsrs	r3, r3, #8
 800c4ea:	4413      	add	r3, r2
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f7ff fe08 	bl	800c104 <move_window>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c4f8:	7ffb      	ldrb	r3, [r7, #31]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d146      	bne.n	800c58c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	005b      	lsls	r3, r3, #1
 800c508:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c50c:	4413      	add	r3, r2
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	b292      	uxth	r2, r2
 800c512:	4611      	mov	r1, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f7ff fb4e 	bl	800bbb6 <st_word>
			fs->wflag = 1;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2201      	movs	r2, #1
 800c51e:	70da      	strb	r2, [r3, #3]
			break;
 800c520:	e037      	b.n	800c592 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	09db      	lsrs	r3, r3, #7
 800c52a:	4413      	add	r3, r2
 800c52c:	4619      	mov	r1, r3
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f7ff fde8 	bl	800c104 <move_window>
 800c534:	4603      	mov	r3, r0
 800c536:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c538:	7ffb      	ldrb	r3, [r7, #31]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d128      	bne.n	800c590 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c552:	4413      	add	r3, r2
 800c554:	4618      	mov	r0, r3
 800c556:	f7ff fb0b 	bl	800bb70 <ld_dword>
 800c55a:	4603      	mov	r3, r0
 800c55c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c560:	4323      	orrs	r3, r4
 800c562:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c572:	4413      	add	r3, r2
 800c574:	6879      	ldr	r1, [r7, #4]
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff fb38 	bl	800bbec <st_dword>
			fs->wflag = 1;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2201      	movs	r2, #1
 800c580:	70da      	strb	r2, [r3, #3]
			break;
 800c582:	e006      	b.n	800c592 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c584:	bf00      	nop
 800c586:	e004      	b.n	800c592 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c588:	bf00      	nop
 800c58a:	e002      	b.n	800c592 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c58c:	bf00      	nop
 800c58e:	e000      	b.n	800c592 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c590:	bf00      	nop
		}
	}
	return res;
 800c592:	7ffb      	ldrb	r3, [r7, #31]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3724      	adds	r7, #36	@ 0x24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd90      	pop	{r4, r7, pc}

0800c59c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b088      	sub	sp, #32
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d904      	bls.n	800c5c2 <remove_chain+0x26>
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	69db      	ldr	r3, [r3, #28]
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d301      	bcc.n	800c5c6 <remove_chain+0x2a>
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	e04b      	b.n	800c65e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00c      	beq.n	800c5e6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	69b8      	ldr	r0, [r7, #24]
 800c5d4:	f7ff fef8 	bl	800c3c8 <put_fat>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c5dc:	7ffb      	ldrb	r3, [r7, #31]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d001      	beq.n	800c5e6 <remove_chain+0x4a>
 800c5e2:	7ffb      	ldrb	r3, [r7, #31]
 800c5e4:	e03b      	b.n	800c65e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c5e6:	68b9      	ldr	r1, [r7, #8]
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f7ff fe46 	bl	800c27a <get_fat>
 800c5ee:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d031      	beq.n	800c65a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d101      	bne.n	800c600 <remove_chain+0x64>
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	e02e      	b.n	800c65e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c606:	d101      	bne.n	800c60c <remove_chain+0x70>
 800c608:	2301      	movs	r3, #1
 800c60a:	e028      	b.n	800c65e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c60c:	2200      	movs	r2, #0
 800c60e:	68b9      	ldr	r1, [r7, #8]
 800c610:	69b8      	ldr	r0, [r7, #24]
 800c612:	f7ff fed9 	bl	800c3c8 <put_fat>
 800c616:	4603      	mov	r3, r0
 800c618:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c61a:	7ffb      	ldrb	r3, [r7, #31]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d001      	beq.n	800c624 <remove_chain+0x88>
 800c620:	7ffb      	ldrb	r3, [r7, #31]
 800c622:	e01c      	b.n	800c65e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	699a      	ldr	r2, [r3, #24]
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	69db      	ldr	r3, [r3, #28]
 800c62c:	3b02      	subs	r3, #2
 800c62e:	429a      	cmp	r2, r3
 800c630:	d20b      	bcs.n	800c64a <remove_chain+0xae>
			fs->free_clst++;
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	1c5a      	adds	r2, r3, #1
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c63c:	69bb      	ldr	r3, [r7, #24]
 800c63e:	791b      	ldrb	r3, [r3, #4]
 800c640:	f043 0301 	orr.w	r3, r3, #1
 800c644:	b2da      	uxtb	r2, r3
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	429a      	cmp	r2, r3
 800c656:	d3c6      	bcc.n	800c5e6 <remove_chain+0x4a>
 800c658:	e000      	b.n	800c65c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c65a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3720      	adds	r7, #32
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b088      	sub	sp, #32
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10d      	bne.n	800c698 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	695b      	ldr	r3, [r3, #20]
 800c680:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d004      	beq.n	800c692 <create_chain+0x2c>
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	69ba      	ldr	r2, [r7, #24]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d31b      	bcc.n	800c6ca <create_chain+0x64>
 800c692:	2301      	movs	r3, #1
 800c694:	61bb      	str	r3, [r7, #24]
 800c696:	e018      	b.n	800c6ca <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff fded 	bl	800c27a <get_fat>
 800c6a0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d801      	bhi.n	800c6ac <create_chain+0x46>
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e070      	b.n	800c78e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b2:	d101      	bne.n	800c6b8 <create_chain+0x52>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	e06a      	b.n	800c78e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	69db      	ldr	r3, [r3, #28]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d201      	bcs.n	800c6c6 <create_chain+0x60>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	e063      	b.n	800c78e <create_chain+0x128>
		scl = clst;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	69db      	ldr	r3, [r3, #28]
 800c6d8:	69fa      	ldr	r2, [r7, #28]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d307      	bcc.n	800c6ee <create_chain+0x88>
				ncl = 2;
 800c6de:	2302      	movs	r3, #2
 800c6e0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c6e2:	69fa      	ldr	r2, [r7, #28]
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d901      	bls.n	800c6ee <create_chain+0x88>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e04f      	b.n	800c78e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c6ee:	69f9      	ldr	r1, [r7, #28]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff fdc2 	bl	800c27a <get_fat>
 800c6f6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00e      	beq.n	800c71c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d003      	beq.n	800c70c <create_chain+0xa6>
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70a:	d101      	bne.n	800c710 <create_chain+0xaa>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	e03e      	b.n	800c78e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c710:	69fa      	ldr	r2, [r7, #28]
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	429a      	cmp	r2, r3
 800c716:	d1da      	bne.n	800c6ce <create_chain+0x68>
 800c718:	2300      	movs	r3, #0
 800c71a:	e038      	b.n	800c78e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c71c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c71e:	f04f 32ff 	mov.w	r2, #4294967295
 800c722:	69f9      	ldr	r1, [r7, #28]
 800c724:	6938      	ldr	r0, [r7, #16]
 800c726:	f7ff fe4f 	bl	800c3c8 <put_fat>
 800c72a:	4603      	mov	r3, r0
 800c72c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c72e:	7dfb      	ldrb	r3, [r7, #23]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d109      	bne.n	800c748 <create_chain+0xe2>
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d006      	beq.n	800c748 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c73a:	69fa      	ldr	r2, [r7, #28]
 800c73c:	6839      	ldr	r1, [r7, #0]
 800c73e:	6938      	ldr	r0, [r7, #16]
 800c740:	f7ff fe42 	bl	800c3c8 <put_fat>
 800c744:	4603      	mov	r3, r0
 800c746:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c748:	7dfb      	ldrb	r3, [r7, #23]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d116      	bne.n	800c77c <create_chain+0x116>
		fs->last_clst = ncl;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	69fa      	ldr	r2, [r7, #28]
 800c752:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	699a      	ldr	r2, [r3, #24]
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	3b02      	subs	r3, #2
 800c75e:	429a      	cmp	r2, r3
 800c760:	d804      	bhi.n	800c76c <create_chain+0x106>
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	699b      	ldr	r3, [r3, #24]
 800c766:	1e5a      	subs	r2, r3, #1
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	791b      	ldrb	r3, [r3, #4]
 800c770:	f043 0301 	orr.w	r3, r3, #1
 800c774:	b2da      	uxtb	r2, r3
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	711a      	strb	r2, [r3, #4]
 800c77a:	e007      	b.n	800c78c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c77c:	7dfb      	ldrb	r3, [r7, #23]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d102      	bne.n	800c788 <create_chain+0x122>
 800c782:	f04f 33ff 	mov.w	r3, #4294967295
 800c786:	e000      	b.n	800c78a <create_chain+0x124>
 800c788:	2301      	movs	r3, #1
 800c78a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c78c:	69fb      	ldr	r3, [r7, #28]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3720      	adds	r7, #32
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c796:	b480      	push	{r7}
 800c798:	b087      	sub	sp, #28
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
 800c79e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7aa:	3304      	adds	r3, #4
 800c7ac:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	0a5b      	lsrs	r3, r3, #9
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	8952      	ldrh	r2, [r2, #10]
 800c7b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	1d1a      	adds	r2, r3, #4
 800c7c0:	613a      	str	r2, [r7, #16]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <clmt_clust+0x3a>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	e010      	b.n	800c7f2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d307      	bcc.n	800c7e8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	617b      	str	r3, [r7, #20]
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c7e6:	e7e9      	b.n	800c7bc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c7e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	4413      	add	r3, r2
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	371c      	adds	r7, #28
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b086      	sub	sp, #24
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c814:	d204      	bcs.n	800c820 <dir_sdi+0x22>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	f003 031f 	and.w	r3, r3, #31
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d001      	beq.n	800c824 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c820:	2302      	movs	r3, #2
 800c822:	e063      	b.n	800c8ec <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d106      	bne.n	800c844 <dir_sdi+0x46>
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	d902      	bls.n	800c844 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c842:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d10c      	bne.n	800c864 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	095b      	lsrs	r3, r3, #5
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	8912      	ldrh	r2, [r2, #8]
 800c852:	4293      	cmp	r3, r2
 800c854:	d301      	bcc.n	800c85a <dir_sdi+0x5c>
 800c856:	2302      	movs	r3, #2
 800c858:	e048      	b.n	800c8ec <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	61da      	str	r2, [r3, #28]
 800c862:	e029      	b.n	800c8b8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	895b      	ldrh	r3, [r3, #10]
 800c868:	025b      	lsls	r3, r3, #9
 800c86a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c86c:	e019      	b.n	800c8a2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6979      	ldr	r1, [r7, #20]
 800c872:	4618      	mov	r0, r3
 800c874:	f7ff fd01 	bl	800c27a <get_fat>
 800c878:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c880:	d101      	bne.n	800c886 <dir_sdi+0x88>
 800c882:	2301      	movs	r3, #1
 800c884:	e032      	b.n	800c8ec <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d904      	bls.n	800c896 <dir_sdi+0x98>
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	69db      	ldr	r3, [r3, #28]
 800c890:	697a      	ldr	r2, [r7, #20]
 800c892:	429a      	cmp	r2, r3
 800c894:	d301      	bcc.n	800c89a <dir_sdi+0x9c>
 800c896:	2302      	movs	r3, #2
 800c898:	e028      	b.n	800c8ec <dir_sdi+0xee>
			ofs -= csz;
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d2e1      	bcs.n	800c86e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c8aa:	6979      	ldr	r1, [r7, #20]
 800c8ac:	6938      	ldr	r0, [r7, #16]
 800c8ae:	f7ff fcc5 	bl	800c23c <clust2sect>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	697a      	ldr	r2, [r7, #20]
 800c8bc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	69db      	ldr	r3, [r3, #28]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d101      	bne.n	800c8ca <dir_sdi+0xcc>
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	e010      	b.n	800c8ec <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	69da      	ldr	r2, [r3, #28]
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	0a5b      	lsrs	r3, r3, #9
 800c8d2:	441a      	add	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8e4:	441a      	add	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3718      	adds	r7, #24
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b086      	sub	sp, #24
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	3320      	adds	r3, #32
 800c90a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	69db      	ldr	r3, [r3, #28]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <dir_next+0x28>
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c91a:	d301      	bcc.n	800c920 <dir_next+0x2c>
 800c91c:	2304      	movs	r3, #4
 800c91e:	e0aa      	b.n	800ca76 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c926:	2b00      	cmp	r3, #0
 800c928:	f040 8098 	bne.w	800ca5c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	69db      	ldr	r3, [r3, #28]
 800c930:	1c5a      	adds	r2, r3, #1
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	699b      	ldr	r3, [r3, #24]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10b      	bne.n	800c956 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	095b      	lsrs	r3, r3, #5
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	8912      	ldrh	r2, [r2, #8]
 800c946:	4293      	cmp	r3, r2
 800c948:	f0c0 8088 	bcc.w	800ca5c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	61da      	str	r2, [r3, #28]
 800c952:	2304      	movs	r3, #4
 800c954:	e08f      	b.n	800ca76 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	0a5b      	lsrs	r3, r3, #9
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	8952      	ldrh	r2, [r2, #10]
 800c95e:	3a01      	subs	r2, #1
 800c960:	4013      	ands	r3, r2
 800c962:	2b00      	cmp	r3, #0
 800c964:	d17a      	bne.n	800ca5c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	699b      	ldr	r3, [r3, #24]
 800c96c:	4619      	mov	r1, r3
 800c96e:	4610      	mov	r0, r2
 800c970:	f7ff fc83 	bl	800c27a <get_fat>
 800c974:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d801      	bhi.n	800c980 <dir_next+0x8c>
 800c97c:	2302      	movs	r3, #2
 800c97e:	e07a      	b.n	800ca76 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c986:	d101      	bne.n	800c98c <dir_next+0x98>
 800c988:	2301      	movs	r3, #1
 800c98a:	e074      	b.n	800ca76 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	69db      	ldr	r3, [r3, #28]
 800c990:	697a      	ldr	r2, [r7, #20]
 800c992:	429a      	cmp	r2, r3
 800c994:	d358      	bcc.n	800ca48 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d104      	bne.n	800c9a6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	61da      	str	r2, [r3, #28]
 800c9a2:	2304      	movs	r3, #4
 800c9a4:	e067      	b.n	800ca76 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	f7ff fe59 	bl	800c666 <create_chain>
 800c9b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d101      	bne.n	800c9c0 <dir_next+0xcc>
 800c9bc:	2307      	movs	r3, #7
 800c9be:	e05a      	b.n	800ca76 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d101      	bne.n	800c9ca <dir_next+0xd6>
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	e055      	b.n	800ca76 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d0:	d101      	bne.n	800c9d6 <dir_next+0xe2>
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e04f      	b.n	800ca76 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f7ff fb50 	bl	800c07c <sync_window>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <dir_next+0xf2>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e047      	b.n	800ca76 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3338      	adds	r3, #56	@ 0x38
 800c9ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff f948 	bl	800bc86 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	613b      	str	r3, [r7, #16]
 800c9fa:	6979      	ldr	r1, [r7, #20]
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f7ff fc1d 	bl	800c23c <clust2sect>
 800ca02:	4602      	mov	r2, r0
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	635a      	str	r2, [r3, #52]	@ 0x34
 800ca08:	e012      	b.n	800ca30 <dir_next+0x13c>
						fs->wflag = 1;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f7ff fb33 	bl	800c07c <sync_window>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <dir_next+0x12c>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e02a      	b.n	800ca76 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	3301      	adds	r3, #1
 800ca24:	613b      	str	r3, [r7, #16]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	635a      	str	r2, [r3, #52]	@ 0x34
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	895b      	ldrh	r3, [r3, #10]
 800ca34:	461a      	mov	r2, r3
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d3e6      	bcc.n	800ca0a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	1ad2      	subs	r2, r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ca4e:	6979      	ldr	r1, [r7, #20]
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f7ff fbf3 	bl	800c23c <clust2sect>
 800ca56:	4602      	mov	r2, r0
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	68ba      	ldr	r2, [r7, #8]
 800ca60:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca6e:	441a      	add	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3718      	adds	r7, #24
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b086      	sub	sp, #24
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ca8e:	2100      	movs	r1, #0
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7ff feb4 	bl	800c7fe <dir_sdi>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d12b      	bne.n	800caf8 <dir_alloc+0x7a>
		n = 0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	69db      	ldr	r3, [r3, #28]
 800caa8:	4619      	mov	r1, r3
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f7ff fb2a 	bl	800c104 <move_window>
 800cab0:	4603      	mov	r3, r0
 800cab2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cab4:	7dfb      	ldrb	r3, [r7, #23]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d11d      	bne.n	800caf6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2be5      	cmp	r3, #229	@ 0xe5
 800cac2:	d004      	beq.n	800cace <dir_alloc+0x50>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6a1b      	ldr	r3, [r3, #32]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d107      	bne.n	800cade <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	3301      	adds	r3, #1
 800cad2:	613b      	str	r3, [r7, #16]
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d102      	bne.n	800cae2 <dir_alloc+0x64>
 800cadc:	e00c      	b.n	800caf8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cade:	2300      	movs	r3, #0
 800cae0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cae2:	2101      	movs	r1, #1
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7ff ff05 	bl	800c8f4 <dir_next>
 800caea:	4603      	mov	r3, r0
 800caec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800caee:	7dfb      	ldrb	r3, [r7, #23]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d0d7      	beq.n	800caa4 <dir_alloc+0x26>
 800caf4:	e000      	b.n	800caf8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800caf6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
 800cafa:	2b04      	cmp	r3, #4
 800cafc:	d101      	bne.n	800cb02 <dir_alloc+0x84>
 800cafe:	2307      	movs	r3, #7
 800cb00:	75fb      	strb	r3, [r7, #23]
	return res;
 800cb02:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3718      	adds	r7, #24
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	331a      	adds	r3, #26
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7ff f810 	bl	800bb40 <ld_word>
 800cb20:	4603      	mov	r3, r0
 800cb22:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2b03      	cmp	r3, #3
 800cb2a:	d109      	bne.n	800cb40 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	3314      	adds	r3, #20
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7ff f805 	bl	800bb40 <ld_word>
 800cb36:	4603      	mov	r3, r0
 800cb38:	041b      	lsls	r3, r3, #16
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cb40:	68fb      	ldr	r3, [r7, #12]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	60f8      	str	r0, [r7, #12]
 800cb52:	60b9      	str	r1, [r7, #8]
 800cb54:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	331a      	adds	r3, #26
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	b292      	uxth	r2, r2
 800cb5e:	4611      	mov	r1, r2
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff f828 	bl	800bbb6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	2b03      	cmp	r3, #3
 800cb6c:	d109      	bne.n	800cb82 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	f103 0214 	add.w	r2, r3, #20
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	0c1b      	lsrs	r3, r3, #16
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	f7ff f81a 	bl	800bbb6 <st_word>
	}
}
 800cb82:	bf00      	nop
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
	...

0800cb8c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cb8c:	b590      	push	{r4, r7, lr}
 800cb8e:	b087      	sub	sp, #28
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	331a      	adds	r3, #26
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fe ffd0 	bl	800bb40 <ld_word>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <cmp_lfn+0x1e>
 800cba6:	2300      	movs	r3, #0
 800cba8:	e059      	b.n	800cc5e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cbb2:	1e5a      	subs	r2, r3, #1
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	4413      	add	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	81fb      	strh	r3, [r7, #14]
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	613b      	str	r3, [r7, #16]
 800cbc8:	e033      	b.n	800cc32 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cbca:	4a27      	ldr	r2, [pc, #156]	@ (800cc68 <cmp_lfn+0xdc>)
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	4413      	add	r3, r2
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fe ffb1 	bl	800bb40 <ld_word>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cbe2:	89fb      	ldrh	r3, [r7, #14]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d01a      	beq.n	800cc1e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	2bfe      	cmp	r3, #254	@ 0xfe
 800cbec:	d812      	bhi.n	800cc14 <cmp_lfn+0x88>
 800cbee:	89bb      	ldrh	r3, [r7, #12]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f001 fe7f 	bl	800e8f4 <ff_wtoupper>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	461c      	mov	r4, r3
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	1c5a      	adds	r2, r3, #1
 800cbfe:	617a      	str	r2, [r7, #20]
 800cc00:	005b      	lsls	r3, r3, #1
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	4413      	add	r3, r2
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f001 fe73 	bl	800e8f4 <ff_wtoupper>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	429c      	cmp	r4, r3
 800cc12:	d001      	beq.n	800cc18 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cc14:	2300      	movs	r3, #0
 800cc16:	e022      	b.n	800cc5e <cmp_lfn+0xd2>
			}
			wc = uc;
 800cc18:	89bb      	ldrh	r3, [r7, #12]
 800cc1a:	81fb      	strh	r3, [r7, #14]
 800cc1c:	e006      	b.n	800cc2c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cc1e:	89bb      	ldrh	r3, [r7, #12]
 800cc20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d001      	beq.n	800cc2c <cmp_lfn+0xa0>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	e018      	b.n	800cc5e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	613b      	str	r3, [r7, #16]
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	2b0c      	cmp	r3, #12
 800cc36:	d9c8      	bls.n	800cbca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00b      	beq.n	800cc5c <cmp_lfn+0xd0>
 800cc44:	89fb      	ldrh	r3, [r7, #14]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d008      	beq.n	800cc5c <cmp_lfn+0xd0>
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	4413      	add	r3, r2
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d001      	beq.n	800cc5c <cmp_lfn+0xd0>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	e000      	b.n	800cc5e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cc5c:	2301      	movs	r3, #1
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	371c      	adds	r7, #28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd90      	pop	{r4, r7, pc}
 800cc66:	bf00      	nop
 800cc68:	08015c90 	.word	0x08015c90

0800cc6c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b088      	sub	sp, #32
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	4611      	mov	r1, r2
 800cc78:	461a      	mov	r2, r3
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	71fb      	strb	r3, [r7, #7]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	330d      	adds	r3, #13
 800cc86:	79ba      	ldrb	r2, [r7, #6]
 800cc88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	330b      	adds	r3, #11
 800cc8e:	220f      	movs	r2, #15
 800cc90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	330c      	adds	r3, #12
 800cc96:	2200      	movs	r2, #0
 800cc98:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	331a      	adds	r3, #26
 800cc9e:	2100      	movs	r1, #0
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7fe ff88 	bl	800bbb6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cca6:	79fb      	ldrb	r3, [r7, #7]
 800cca8:	1e5a      	subs	r2, r3, #1
 800ccaa:	4613      	mov	r3, r2
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	4413      	add	r3, r2
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	4413      	add	r3, r2
 800ccb4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	82fb      	strh	r3, [r7, #22]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ccbe:	8afb      	ldrh	r3, [r7, #22]
 800ccc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d007      	beq.n	800ccd8 <put_lfn+0x6c>
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	61fa      	str	r2, [r7, #28]
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	881b      	ldrh	r3, [r3, #0]
 800ccd6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ccd8:	4a17      	ldr	r2, [pc, #92]	@ (800cd38 <put_lfn+0xcc>)
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	4413      	add	r3, r2
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	461a      	mov	r2, r3
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	4413      	add	r3, r2
 800cce6:	8afa      	ldrh	r2, [r7, #22]
 800cce8:	4611      	mov	r1, r2
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe ff63 	bl	800bbb6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ccf0:	8afb      	ldrh	r3, [r7, #22]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d102      	bne.n	800ccfc <put_lfn+0x90>
 800ccf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ccfa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	61bb      	str	r3, [r7, #24]
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	2b0c      	cmp	r3, #12
 800cd06:	d9da      	bls.n	800ccbe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cd08:	8afb      	ldrh	r3, [r7, #22]
 800cd0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d006      	beq.n	800cd20 <put_lfn+0xb4>
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	4413      	add	r3, r2
 800cd1a:	881b      	ldrh	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d103      	bne.n	800cd28 <put_lfn+0xbc>
 800cd20:	79fb      	ldrb	r3, [r7, #7]
 800cd22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd26:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	79fa      	ldrb	r2, [r7, #7]
 800cd2c:	701a      	strb	r2, [r3, #0]
}
 800cd2e:	bf00      	nop
 800cd30:	3720      	adds	r7, #32
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	08015c90 	.word	0x08015c90

0800cd3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08c      	sub	sp, #48	@ 0x30
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cd4a:	220b      	movs	r2, #11
 800cd4c:	68b9      	ldr	r1, [r7, #8]
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f7fe ff78 	bl	800bc44 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	2b05      	cmp	r3, #5
 800cd58:	d92b      	bls.n	800cdb2 <gen_numname+0x76>
		sr = seq;
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cd5e:	e022      	b.n	800cda6 <gen_numname+0x6a>
			wc = *lfn++;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	1c9a      	adds	r2, r3, #2
 800cd64:	607a      	str	r2, [r7, #4]
 800cd66:	881b      	ldrh	r3, [r3, #0]
 800cd68:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd6e:	e017      	b.n	800cda0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	005a      	lsls	r2, r3, #1
 800cd74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd76:	f003 0301 	and.w	r3, r3, #1
 800cd7a:	4413      	add	r3, r2
 800cd7c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cd7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd80:	085b      	lsrs	r3, r3, #1
 800cd82:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d005      	beq.n	800cd9a <gen_numname+0x5e>
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800cd94:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800cd98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda2:	2b0f      	cmp	r3, #15
 800cda4:	d9e4      	bls.n	800cd70 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1d8      	bne.n	800cd60 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cdb2:	2307      	movs	r3, #7
 800cdb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	f003 030f 	and.w	r3, r3, #15
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	3330      	adds	r3, #48	@ 0x30
 800cdc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800cdc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cdca:	2b39      	cmp	r3, #57	@ 0x39
 800cdcc:	d904      	bls.n	800cdd8 <gen_numname+0x9c>
 800cdce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cdd2:	3307      	adds	r3, #7
 800cdd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800cdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdda:	1e5a      	subs	r2, r3, #1
 800cddc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cdde:	3330      	adds	r3, #48	@ 0x30
 800cde0:	443b      	add	r3, r7
 800cde2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800cde6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	091b      	lsrs	r3, r3, #4
 800cdee:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1df      	bne.n	800cdb6 <gen_numname+0x7a>
	ns[i] = '~';
 800cdf6:	f107 0214 	add.w	r2, r7, #20
 800cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfc:	4413      	add	r3, r2
 800cdfe:	227e      	movs	r2, #126	@ 0x7e
 800ce00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ce02:	2300      	movs	r3, #0
 800ce04:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce06:	e002      	b.n	800ce0e <gen_numname+0xd2>
 800ce08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d205      	bcs.n	800ce22 <gen_numname+0xe6>
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1a:	4413      	add	r3, r2
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b20      	cmp	r3, #32
 800ce20:	d1f2      	bne.n	800ce08 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ce22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce24:	2b07      	cmp	r3, #7
 800ce26:	d807      	bhi.n	800ce38 <gen_numname+0xfc>
 800ce28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2a:	1c5a      	adds	r2, r3, #1
 800ce2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ce2e:	3330      	adds	r3, #48	@ 0x30
 800ce30:	443b      	add	r3, r7
 800ce32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ce36:	e000      	b.n	800ce3a <gen_numname+0xfe>
 800ce38:	2120      	movs	r1, #32
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3c:	1c5a      	adds	r2, r3, #1
 800ce3e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	4413      	add	r3, r2
 800ce44:	460a      	mov	r2, r1
 800ce46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ce48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4a:	2b07      	cmp	r3, #7
 800ce4c:	d9e9      	bls.n	800ce22 <gen_numname+0xe6>
}
 800ce4e:	bf00      	nop
 800ce50:	bf00      	nop
 800ce52:	3730      	adds	r7, #48	@ 0x30
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ce64:	230b      	movs	r3, #11
 800ce66:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	0852      	lsrs	r2, r2, #1
 800ce6e:	01db      	lsls	r3, r3, #7
 800ce70:	4313      	orrs	r3, r2
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	1c59      	adds	r1, r3, #1
 800ce78:	6079      	str	r1, [r7, #4]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	3b01      	subs	r3, #1
 800ce84:	60bb      	str	r3, [r7, #8]
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1ed      	bne.n	800ce68 <sum_sfn+0x10>
	return sum;
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3714      	adds	r7, #20
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b086      	sub	sp, #24
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cea8:	2100      	movs	r1, #0
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff fca7 	bl	800c7fe <dir_sdi>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ceb4:	7dfb      	ldrb	r3, [r7, #23]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d001      	beq.n	800cebe <dir_find+0x24>
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	e0a9      	b.n	800d012 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cebe:	23ff      	movs	r3, #255	@ 0xff
 800cec0:	753b      	strb	r3, [r7, #20]
 800cec2:	7d3b      	ldrb	r3, [r7, #20]
 800cec4:	757b      	strb	r3, [r7, #21]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f04f 32ff 	mov.w	r2, #4294967295
 800cecc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	69db      	ldr	r3, [r3, #28]
 800ced2:	4619      	mov	r1, r3
 800ced4:	6938      	ldr	r0, [r7, #16]
 800ced6:	f7ff f915 	bl	800c104 <move_window>
 800ceda:	4603      	mov	r3, r0
 800cedc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f040 8090 	bne.w	800d006 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ceee:	7dbb      	ldrb	r3, [r7, #22]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d102      	bne.n	800cefa <dir_find+0x60>
 800cef4:	2304      	movs	r3, #4
 800cef6:	75fb      	strb	r3, [r7, #23]
 800cef8:	e08a      	b.n	800d010 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a1b      	ldr	r3, [r3, #32]
 800cefe:	330b      	adds	r3, #11
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf06:	73fb      	strb	r3, [r7, #15]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	7bfa      	ldrb	r2, [r7, #15]
 800cf0c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cf0e:	7dbb      	ldrb	r3, [r7, #22]
 800cf10:	2be5      	cmp	r3, #229	@ 0xe5
 800cf12:	d007      	beq.n	800cf24 <dir_find+0x8a>
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	f003 0308 	and.w	r3, r3, #8
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d009      	beq.n	800cf32 <dir_find+0x98>
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
 800cf20:	2b0f      	cmp	r3, #15
 800cf22:	d006      	beq.n	800cf32 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cf24:	23ff      	movs	r3, #255	@ 0xff
 800cf26:	757b      	strb	r3, [r7, #21]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf2e:	631a      	str	r2, [r3, #48]	@ 0x30
 800cf30:	e05e      	b.n	800cff0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cf32:	7bfb      	ldrb	r3, [r7, #15]
 800cf34:	2b0f      	cmp	r3, #15
 800cf36:	d136      	bne.n	800cfa6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cf3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d154      	bne.n	800cff0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cf46:	7dbb      	ldrb	r3, [r7, #22]
 800cf48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00d      	beq.n	800cf6c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a1b      	ldr	r3, [r3, #32]
 800cf54:	7b5b      	ldrb	r3, [r3, #13]
 800cf56:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cf58:	7dbb      	ldrb	r3, [r7, #22]
 800cf5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf5e:	75bb      	strb	r3, [r7, #22]
 800cf60:	7dbb      	ldrb	r3, [r7, #22]
 800cf62:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	695a      	ldr	r2, [r3, #20]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cf6c:	7dba      	ldrb	r2, [r7, #22]
 800cf6e:	7d7b      	ldrb	r3, [r7, #21]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d115      	bne.n	800cfa0 <dir_find+0x106>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a1b      	ldr	r3, [r3, #32]
 800cf78:	330d      	adds	r3, #13
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	7d3a      	ldrb	r2, [r7, #20]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d10e      	bne.n	800cfa0 <dir_find+0x106>
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	68da      	ldr	r2, [r3, #12]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a1b      	ldr	r3, [r3, #32]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	f7ff fdfd 	bl	800cb8c <cmp_lfn>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <dir_find+0x106>
 800cf98:	7d7b      	ldrb	r3, [r7, #21]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	e000      	b.n	800cfa2 <dir_find+0x108>
 800cfa0:	23ff      	movs	r3, #255	@ 0xff
 800cfa2:	757b      	strb	r3, [r7, #21]
 800cfa4:	e024      	b.n	800cff0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cfa6:	7d7b      	ldrb	r3, [r7, #21]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d109      	bne.n	800cfc0 <dir_find+0x126>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a1b      	ldr	r3, [r3, #32]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff ff51 	bl	800ce58 <sum_sfn>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	461a      	mov	r2, r3
 800cfba:	7d3b      	ldrb	r3, [r7, #20]
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d024      	beq.n	800d00a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cfc6:	f003 0301 	and.w	r3, r3, #1
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10a      	bne.n	800cfe4 <dir_find+0x14a>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6a18      	ldr	r0, [r3, #32]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	3324      	adds	r3, #36	@ 0x24
 800cfd6:	220b      	movs	r2, #11
 800cfd8:	4619      	mov	r1, r3
 800cfda:	f7fe fe6f 	bl	800bcbc <mem_cmp>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d014      	beq.n	800d00e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cfe4:	23ff      	movs	r3, #255	@ 0xff
 800cfe6:	757b      	strb	r3, [r7, #21]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f04f 32ff 	mov.w	r2, #4294967295
 800cfee:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cff0:	2100      	movs	r1, #0
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff fc7e 	bl	800c8f4 <dir_next>
 800cff8:	4603      	mov	r3, r0
 800cffa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cffc:	7dfb      	ldrb	r3, [r7, #23]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f43f af65 	beq.w	800cece <dir_find+0x34>
 800d004:	e004      	b.n	800d010 <dir_find+0x176>
		if (res != FR_OK) break;
 800d006:	bf00      	nop
 800d008:	e002      	b.n	800d010 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d00a:	bf00      	nop
 800d00c:	e000      	b.n	800d010 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d00e:	bf00      	nop

	return res;
 800d010:	7dfb      	ldrb	r3, [r7, #23]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3718      	adds	r7, #24
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
	...

0800d01c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b08c      	sub	sp, #48	@ 0x30
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d030:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d001      	beq.n	800d03c <dir_register+0x20>
 800d038:	2306      	movs	r3, #6
 800d03a:	e0e0      	b.n	800d1fe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d03c:	2300      	movs	r3, #0
 800d03e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d040:	e002      	b.n	800d048 <dir_register+0x2c>
 800d042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d044:	3301      	adds	r3, #1
 800d046:	627b      	str	r3, [r7, #36]	@ 0x24
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	68da      	ldr	r2, [r3, #12]
 800d04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d04e:	005b      	lsls	r3, r3, #1
 800d050:	4413      	add	r3, r2
 800d052:	881b      	ldrh	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1f4      	bne.n	800d042 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d05e:	f107 030c 	add.w	r3, r7, #12
 800d062:	220c      	movs	r2, #12
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe fded 	bl	800bc44 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d06a:	7dfb      	ldrb	r3, [r7, #23]
 800d06c:	f003 0301 	and.w	r3, r3, #1
 800d070:	2b00      	cmp	r3, #0
 800d072:	d032      	beq.n	800d0da <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2240      	movs	r2, #64	@ 0x40
 800d078:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800d07c:	2301      	movs	r3, #1
 800d07e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d080:	e016      	b.n	800d0b0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	68da      	ldr	r2, [r3, #12]
 800d08c:	f107 010c 	add.w	r1, r7, #12
 800d090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d092:	f7ff fe53 	bl	800cd3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f7ff feff 	bl	800ce9a <dir_find>
 800d09c:	4603      	mov	r3, r0
 800d09e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800d0a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d106      	bne.n	800d0b8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b2:	2b63      	cmp	r3, #99	@ 0x63
 800d0b4:	d9e5      	bls.n	800d082 <dir_register+0x66>
 800d0b6:	e000      	b.n	800d0ba <dir_register+0x9e>
			if (res != FR_OK) break;
 800d0b8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0bc:	2b64      	cmp	r3, #100	@ 0x64
 800d0be:	d101      	bne.n	800d0c4 <dir_register+0xa8>
 800d0c0:	2307      	movs	r3, #7
 800d0c2:	e09c      	b.n	800d1fe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d0c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d0c8:	2b04      	cmp	r3, #4
 800d0ca:	d002      	beq.n	800d0d2 <dir_register+0xb6>
 800d0cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d0d0:	e095      	b.n	800d1fe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d0d2:	7dfa      	ldrb	r2, [r7, #23]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d0da:	7dfb      	ldrb	r3, [r7, #23]
 800d0dc:	f003 0302 	and.w	r3, r3, #2
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d007      	beq.n	800d0f4 <dir_register+0xd8>
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e6:	330c      	adds	r3, #12
 800d0e8:	4a47      	ldr	r2, [pc, #284]	@ (800d208 <dir_register+0x1ec>)
 800d0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ee:	089b      	lsrs	r3, r3, #2
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	e000      	b.n	800d0f6 <dir_register+0xda>
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d0f8:	6a39      	ldr	r1, [r7, #32]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff fcbf 	bl	800ca7e <dir_alloc>
 800d100:	4603      	mov	r3, r0
 800d102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d148      	bne.n	800d1a0 <dir_register+0x184>
 800d10e:	6a3b      	ldr	r3, [r7, #32]
 800d110:	3b01      	subs	r3, #1
 800d112:	623b      	str	r3, [r7, #32]
 800d114:	6a3b      	ldr	r3, [r7, #32]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d042      	beq.n	800d1a0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	695a      	ldr	r2, [r3, #20]
 800d11e:	6a3b      	ldr	r3, [r7, #32]
 800d120:	015b      	lsls	r3, r3, #5
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	4619      	mov	r1, r3
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7ff fb69 	bl	800c7fe <dir_sdi>
 800d12c:	4603      	mov	r3, r0
 800d12e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d132:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d136:	2b00      	cmp	r3, #0
 800d138:	d132      	bne.n	800d1a0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	3324      	adds	r3, #36	@ 0x24
 800d13e:	4618      	mov	r0, r3
 800d140:	f7ff fe8a 	bl	800ce58 <sum_sfn>
 800d144:	4603      	mov	r3, r0
 800d146:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	69db      	ldr	r3, [r3, #28]
 800d14c:	4619      	mov	r1, r3
 800d14e:	69f8      	ldr	r0, [r7, #28]
 800d150:	f7fe ffd8 	bl	800c104 <move_window>
 800d154:	4603      	mov	r3, r0
 800d156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800d15a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d11d      	bne.n	800d19e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	68d8      	ldr	r0, [r3, #12]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a19      	ldr	r1, [r3, #32]
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	7efb      	ldrb	r3, [r7, #27]
 800d170:	f7ff fd7c 	bl	800cc6c <put_lfn>
				fs->wflag = 1;
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	2201      	movs	r2, #1
 800d178:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d17a:	2100      	movs	r1, #0
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff fbb9 	bl	800c8f4 <dir_next>
 800d182:	4603      	mov	r3, r0
 800d184:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800d188:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d107      	bne.n	800d1a0 <dir_register+0x184>
 800d190:	6a3b      	ldr	r3, [r7, #32]
 800d192:	3b01      	subs	r3, #1
 800d194:	623b      	str	r3, [r7, #32]
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1d5      	bne.n	800d148 <dir_register+0x12c>
 800d19c:	e000      	b.n	800d1a0 <dir_register+0x184>
				if (res != FR_OK) break;
 800d19e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d1a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d128      	bne.n	800d1fa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	69db      	ldr	r3, [r3, #28]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	69f8      	ldr	r0, [r7, #28]
 800d1b0:	f7fe ffa8 	bl	800c104 <move_window>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d1ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d11b      	bne.n	800d1fa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	2220      	movs	r2, #32
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fd5b 	bl	800bc86 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6a18      	ldr	r0, [r3, #32]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	3324      	adds	r3, #36	@ 0x24
 800d1d8:	220b      	movs	r2, #11
 800d1da:	4619      	mov	r1, r3
 800d1dc:	f7fe fd32 	bl	800bc44 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	330c      	adds	r3, #12
 800d1ec:	f002 0218 	and.w	r2, r2, #24
 800d1f0:	b2d2      	uxtb	r2, r2
 800d1f2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d1fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3730      	adds	r7, #48	@ 0x30
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	4ec4ec4f 	.word	0x4ec4ec4f

0800d20c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b08a      	sub	sp, #40	@ 0x28
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	613b      	str	r3, [r7, #16]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	60fb      	str	r3, [r7, #12]
 800d224:	2300      	movs	r3, #0
 800d226:	617b      	str	r3, [r7, #20]
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	1c5a      	adds	r2, r3, #1
 800d230:	61ba      	str	r2, [r7, #24]
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	4413      	add	r3, r2
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d23a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d23c:	2b1f      	cmp	r3, #31
 800d23e:	d940      	bls.n	800d2c2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d240:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d242:	2b2f      	cmp	r3, #47	@ 0x2f
 800d244:	d006      	beq.n	800d254 <create_name+0x48>
 800d246:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d248:	2b5c      	cmp	r3, #92	@ 0x5c
 800d24a:	d110      	bne.n	800d26e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d24c:	e002      	b.n	800d254 <create_name+0x48>
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	3301      	adds	r3, #1
 800d252:	61bb      	str	r3, [r7, #24]
 800d254:	693a      	ldr	r2, [r7, #16]
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	4413      	add	r3, r2
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d25e:	d0f6      	beq.n	800d24e <create_name+0x42>
 800d260:	693a      	ldr	r2, [r7, #16]
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	4413      	add	r3, r2
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2b5c      	cmp	r3, #92	@ 0x5c
 800d26a:	d0f0      	beq.n	800d24e <create_name+0x42>
			break;
 800d26c:	e02a      	b.n	800d2c4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	2bfe      	cmp	r3, #254	@ 0xfe
 800d272:	d901      	bls.n	800d278 <create_name+0x6c>
 800d274:	2306      	movs	r3, #6
 800d276:	e17d      	b.n	800d574 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d278:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d27e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d280:	2101      	movs	r1, #1
 800d282:	4618      	mov	r0, r3
 800d284:	f001 fafa 	bl	800e87c <ff_convert>
 800d288:	4603      	mov	r3, r0
 800d28a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d28c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d101      	bne.n	800d296 <create_name+0x8a>
 800d292:	2306      	movs	r3, #6
 800d294:	e16e      	b.n	800d574 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d296:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d298:	2b7f      	cmp	r3, #127	@ 0x7f
 800d29a:	d809      	bhi.n	800d2b0 <create_name+0xa4>
 800d29c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d29e:	4619      	mov	r1, r3
 800d2a0:	488d      	ldr	r0, [pc, #564]	@ (800d4d8 <create_name+0x2cc>)
 800d2a2:	f7fe fd32 	bl	800bd0a <chk_chr>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <create_name+0xa4>
 800d2ac:	2306      	movs	r3, #6
 800d2ae:	e161      	b.n	800d574 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	1c5a      	adds	r2, r3, #1
 800d2b4:	617a      	str	r2, [r7, #20]
 800d2b6:	005b      	lsls	r3, r3, #1
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d2be:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d2c0:	e7b4      	b.n	800d22c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d2c2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	441a      	add	r2, r3
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d2ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2d0:	2b1f      	cmp	r3, #31
 800d2d2:	d801      	bhi.n	800d2d8 <create_name+0xcc>
 800d2d4:	2304      	movs	r3, #4
 800d2d6:	e000      	b.n	800d2da <create_name+0xce>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d2de:	e011      	b.n	800d304 <create_name+0xf8>
		w = lfn[di - 1];
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	68fa      	ldr	r2, [r7, #12]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	881b      	ldrh	r3, [r3, #0]
 800d2f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d2f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2f4:	2b20      	cmp	r3, #32
 800d2f6:	d002      	beq.n	800d2fe <create_name+0xf2>
 800d2f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2fc:	d106      	bne.n	800d30c <create_name+0x100>
		di--;
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	3b01      	subs	r3, #1
 800d302:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1ea      	bne.n	800d2e0 <create_name+0xd4>
 800d30a:	e000      	b.n	800d30e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d30c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	005b      	lsls	r3, r3, #1
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	4413      	add	r3, r2
 800d316:	2200      	movs	r2, #0
 800d318:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d101      	bne.n	800d324 <create_name+0x118>
 800d320:	2306      	movs	r3, #6
 800d322:	e127      	b.n	800d574 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	3324      	adds	r3, #36	@ 0x24
 800d328:	220b      	movs	r2, #11
 800d32a:	2120      	movs	r1, #32
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fe fcaa 	bl	800bc86 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d332:	2300      	movs	r3, #0
 800d334:	61bb      	str	r3, [r7, #24]
 800d336:	e002      	b.n	800d33e <create_name+0x132>
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	3301      	adds	r3, #1
 800d33c:	61bb      	str	r3, [r7, #24]
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	005b      	lsls	r3, r3, #1
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	4413      	add	r3, r2
 800d346:	881b      	ldrh	r3, [r3, #0]
 800d348:	2b20      	cmp	r3, #32
 800d34a:	d0f5      	beq.n	800d338 <create_name+0x12c>
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	4413      	add	r3, r2
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	2b2e      	cmp	r3, #46	@ 0x2e
 800d358:	d0ee      	beq.n	800d338 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d009      	beq.n	800d374 <create_name+0x168>
 800d360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d364:	f043 0303 	orr.w	r3, r3, #3
 800d368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d36c:	e002      	b.n	800d374 <create_name+0x168>
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	3b01      	subs	r3, #1
 800d372:	617b      	str	r3, [r7, #20]
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d009      	beq.n	800d38e <create_name+0x182>
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d380:	3b01      	subs	r3, #1
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	4413      	add	r3, r2
 800d388:	881b      	ldrh	r3, [r3, #0]
 800d38a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d38c:	d1ef      	bne.n	800d36e <create_name+0x162>

	i = b = 0; ni = 8;
 800d38e:	2300      	movs	r3, #0
 800d390:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d394:	2300      	movs	r3, #0
 800d396:	623b      	str	r3, [r7, #32]
 800d398:	2308      	movs	r3, #8
 800d39a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	61ba      	str	r2, [r7, #24]
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	881b      	ldrh	r3, [r3, #0]
 800d3aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d3ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f000 8090 	beq.w	800d4d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d3b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3b6:	2b20      	cmp	r3, #32
 800d3b8:	d006      	beq.n	800d3c8 <create_name+0x1bc>
 800d3ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3be:	d10a      	bne.n	800d3d6 <create_name+0x1ca>
 800d3c0:	69ba      	ldr	r2, [r7, #24]
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d006      	beq.n	800d3d6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3cc:	f043 0303 	orr.w	r3, r3, #3
 800d3d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d3d4:	e07d      	b.n	800d4d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d3d6:	6a3a      	ldr	r2, [r7, #32]
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d203      	bcs.n	800d3e6 <create_name+0x1da>
 800d3de:	69ba      	ldr	r2, [r7, #24]
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d123      	bne.n	800d42e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	2b0b      	cmp	r3, #11
 800d3ea:	d106      	bne.n	800d3fa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3f0:	f043 0303 	orr.w	r3, r3, #3
 800d3f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d3f8:	e075      	b.n	800d4e6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d3fa:	69ba      	ldr	r2, [r7, #24]
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d005      	beq.n	800d40e <create_name+0x202>
 800d402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d406:	f043 0303 	orr.w	r3, r3, #3
 800d40a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d40e:	69ba      	ldr	r2, [r7, #24]
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	429a      	cmp	r2, r3
 800d414:	d866      	bhi.n	800d4e4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	61bb      	str	r3, [r7, #24]
 800d41a:	2308      	movs	r3, #8
 800d41c:	623b      	str	r3, [r7, #32]
 800d41e:	230b      	movs	r3, #11
 800d420:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d422:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d42c:	e051      	b.n	800d4d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d42e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d430:	2b7f      	cmp	r3, #127	@ 0x7f
 800d432:	d914      	bls.n	800d45e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d434:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d436:	2100      	movs	r1, #0
 800d438:	4618      	mov	r0, r3
 800d43a:	f001 fa1f 	bl	800e87c <ff_convert>
 800d43e:	4603      	mov	r3, r0
 800d440:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d444:	2b00      	cmp	r3, #0
 800d446:	d004      	beq.n	800d452 <create_name+0x246>
 800d448:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d44a:	3b80      	subs	r3, #128	@ 0x80
 800d44c:	4a23      	ldr	r2, [pc, #140]	@ (800d4dc <create_name+0x2d0>)
 800d44e:	5cd3      	ldrb	r3, [r2, r3]
 800d450:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d456:	f043 0302 	orr.w	r3, r3, #2
 800d45a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d45e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d460:	2b00      	cmp	r3, #0
 800d462:	d007      	beq.n	800d474 <create_name+0x268>
 800d464:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d466:	4619      	mov	r1, r3
 800d468:	481d      	ldr	r0, [pc, #116]	@ (800d4e0 <create_name+0x2d4>)
 800d46a:	f7fe fc4e 	bl	800bd0a <chk_chr>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d008      	beq.n	800d486 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d474:	235f      	movs	r3, #95	@ 0x5f
 800d476:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d47c:	f043 0303 	orr.w	r3, r3, #3
 800d480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d484:	e01b      	b.n	800d4be <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d486:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d488:	2b40      	cmp	r3, #64	@ 0x40
 800d48a:	d909      	bls.n	800d4a0 <create_name+0x294>
 800d48c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d48e:	2b5a      	cmp	r3, #90	@ 0x5a
 800d490:	d806      	bhi.n	800d4a0 <create_name+0x294>
					b |= 2;
 800d492:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d496:	f043 0302 	orr.w	r3, r3, #2
 800d49a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d49e:	e00e      	b.n	800d4be <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d4a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d4a2:	2b60      	cmp	r3, #96	@ 0x60
 800d4a4:	d90b      	bls.n	800d4be <create_name+0x2b2>
 800d4a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d4a8:	2b7a      	cmp	r3, #122	@ 0x7a
 800d4aa:	d808      	bhi.n	800d4be <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d4ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d4b0:	f043 0301 	orr.w	r3, r3, #1
 800d4b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d4b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d4ba:	3b20      	subs	r3, #32
 800d4bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d4be:	6a3b      	ldr	r3, [r7, #32]
 800d4c0:	1c5a      	adds	r2, r3, #1
 800d4c2:	623a      	str	r2, [r7, #32]
 800d4c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d4c6:	b2d1      	uxtb	r1, r2
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	460a      	mov	r2, r1
 800d4ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d4d2:	e763      	b.n	800d39c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d4d4:	bf00      	nop
 800d4d6:	e006      	b.n	800d4e6 <create_name+0x2da>
 800d4d8:	08015a68 	.word	0x08015a68
 800d4dc:	08015c10 	.word	0x08015c10
 800d4e0:	08015a74 	.word	0x08015a74
			if (si > di) break;			/* No extension */
 800d4e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d4ec:	2be5      	cmp	r3, #229	@ 0xe5
 800d4ee:	d103      	bne.n	800d4f8 <create_name+0x2ec>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2205      	movs	r2, #5
 800d4f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	2b08      	cmp	r3, #8
 800d4fc:	d104      	bne.n	800d508 <create_name+0x2fc>
 800d4fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d508:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d50c:	f003 030c 	and.w	r3, r3, #12
 800d510:	2b0c      	cmp	r3, #12
 800d512:	d005      	beq.n	800d520 <create_name+0x314>
 800d514:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d518:	f003 0303 	and.w	r3, r3, #3
 800d51c:	2b03      	cmp	r3, #3
 800d51e:	d105      	bne.n	800d52c <create_name+0x320>
 800d520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d524:	f043 0302 	orr.w	r3, r3, #2
 800d528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d52c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d530:	f003 0302 	and.w	r3, r3, #2
 800d534:	2b00      	cmp	r3, #0
 800d536:	d117      	bne.n	800d568 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d538:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d53c:	f003 0303 	and.w	r3, r3, #3
 800d540:	2b01      	cmp	r3, #1
 800d542:	d105      	bne.n	800d550 <create_name+0x344>
 800d544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d548:	f043 0310 	orr.w	r3, r3, #16
 800d54c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d550:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d554:	f003 030c 	and.w	r3, r3, #12
 800d558:	2b04      	cmp	r3, #4
 800d55a:	d105      	bne.n	800d568 <create_name+0x35c>
 800d55c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d560:	f043 0308 	orr.w	r3, r3, #8
 800d564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d56e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800d572:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d574:	4618      	mov	r0, r3
 800d576:	3728      	adds	r7, #40	@ 0x28
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d590:	e002      	b.n	800d598 <follow_path+0x1c>
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	3301      	adds	r3, #1
 800d596:	603b      	str	r3, [r7, #0]
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d59e:	d0f8      	beq.n	800d592 <follow_path+0x16>
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d5a6:	d0f4      	beq.n	800d592 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	2b1f      	cmp	r3, #31
 800d5b4:	d80a      	bhi.n	800d5cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2280      	movs	r2, #128	@ 0x80
 800d5ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d5be:	2100      	movs	r1, #0
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff f91c 	bl	800c7fe <dir_sdi>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	75fb      	strb	r3, [r7, #23]
 800d5ca:	e043      	b.n	800d654 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d5cc:	463b      	mov	r3, r7
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7ff fe1b 	bl	800d20c <create_name>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d5da:	7dfb      	ldrb	r3, [r7, #23]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d134      	bne.n	800d64a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff fc5a 	bl	800ce9a <dir_find>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d5f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d5f2:	7dfb      	ldrb	r3, [r7, #23]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00a      	beq.n	800d60e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
 800d5fa:	2b04      	cmp	r3, #4
 800d5fc:	d127      	bne.n	800d64e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d5fe:	7afb      	ldrb	r3, [r7, #11]
 800d600:	f003 0304 	and.w	r3, r3, #4
 800d604:	2b00      	cmp	r3, #0
 800d606:	d122      	bne.n	800d64e <follow_path+0xd2>
 800d608:	2305      	movs	r3, #5
 800d60a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d60c:	e01f      	b.n	800d64e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d60e:	7afb      	ldrb	r3, [r7, #11]
 800d610:	f003 0304 	and.w	r3, r3, #4
 800d614:	2b00      	cmp	r3, #0
 800d616:	d11c      	bne.n	800d652 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	799b      	ldrb	r3, [r3, #6]
 800d61c:	f003 0310 	and.w	r3, r3, #16
 800d620:	2b00      	cmp	r3, #0
 800d622:	d102      	bne.n	800d62a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d624:	2305      	movs	r3, #5
 800d626:	75fb      	strb	r3, [r7, #23]
 800d628:	e014      	b.n	800d654 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	695b      	ldr	r3, [r3, #20]
 800d634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d638:	4413      	add	r3, r2
 800d63a:	4619      	mov	r1, r3
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f7ff fa65 	bl	800cb0c <ld_clust>
 800d642:	4602      	mov	r2, r0
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d648:	e7c0      	b.n	800d5cc <follow_path+0x50>
			if (res != FR_OK) break;
 800d64a:	bf00      	nop
 800d64c:	e002      	b.n	800d654 <follow_path+0xd8>
				break;
 800d64e:	bf00      	nop
 800d650:	e000      	b.n	800d654 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d652:	bf00      	nop
			}
		}
	}

	return res;
 800d654:	7dfb      	ldrb	r3, [r7, #23]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3718      	adds	r7, #24
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d65e:	b480      	push	{r7}
 800d660:	b087      	sub	sp, #28
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d666:	f04f 33ff 	mov.w	r3, #4294967295
 800d66a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d031      	beq.n	800d6d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	617b      	str	r3, [r7, #20]
 800d67a:	e002      	b.n	800d682 <get_ldnumber+0x24>
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	3301      	adds	r3, #1
 800d680:	617b      	str	r3, [r7, #20]
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	2b1f      	cmp	r3, #31
 800d688:	d903      	bls.n	800d692 <get_ldnumber+0x34>
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	2b3a      	cmp	r3, #58	@ 0x3a
 800d690:	d1f4      	bne.n	800d67c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	2b3a      	cmp	r3, #58	@ 0x3a
 800d698:	d11c      	bne.n	800d6d4 <get_ldnumber+0x76>
			tp = *path;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	1c5a      	adds	r2, r3, #1
 800d6a4:	60fa      	str	r2, [r7, #12]
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	3b30      	subs	r3, #48	@ 0x30
 800d6aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	2b09      	cmp	r3, #9
 800d6b0:	d80e      	bhi.n	800d6d0 <get_ldnumber+0x72>
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d10a      	bne.n	800d6d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d107      	bne.n	800d6d0 <get_ldnumber+0x72>
					vol = (int)i;
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	617b      	str	r3, [r7, #20]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	697a      	ldr	r2, [r7, #20]
 800d6ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	e002      	b.n	800d6da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d6d8:	693b      	ldr	r3, [r7, #16]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	371c      	adds	r7, #28
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
	...

0800d6e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	70da      	strb	r2, [r3, #3]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d6fe:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d700:	6839      	ldr	r1, [r7, #0]
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7fe fcfe 	bl	800c104 <move_window>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <check_fs+0x2a>
 800d70e:	2304      	movs	r3, #4
 800d710:	e038      	b.n	800d784 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	3338      	adds	r3, #56	@ 0x38
 800d716:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fe fa10 	bl	800bb40 <ld_word>
 800d720:	4603      	mov	r3, r0
 800d722:	461a      	mov	r2, r3
 800d724:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d728:	429a      	cmp	r2, r3
 800d72a:	d001      	beq.n	800d730 <check_fs+0x48>
 800d72c:	2303      	movs	r3, #3
 800d72e:	e029      	b.n	800d784 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d736:	2be9      	cmp	r3, #233	@ 0xe9
 800d738:	d009      	beq.n	800d74e <check_fs+0x66>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d740:	2beb      	cmp	r3, #235	@ 0xeb
 800d742:	d11e      	bne.n	800d782 <check_fs+0x9a>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d74a:	2b90      	cmp	r3, #144	@ 0x90
 800d74c:	d119      	bne.n	800d782 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	3338      	adds	r3, #56	@ 0x38
 800d752:	3336      	adds	r3, #54	@ 0x36
 800d754:	4618      	mov	r0, r3
 800d756:	f7fe fa0b 	bl	800bb70 <ld_dword>
 800d75a:	4603      	mov	r3, r0
 800d75c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d760:	4a0a      	ldr	r2, [pc, #40]	@ (800d78c <check_fs+0xa4>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d101      	bne.n	800d76a <check_fs+0x82>
 800d766:	2300      	movs	r3, #0
 800d768:	e00c      	b.n	800d784 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	3338      	adds	r3, #56	@ 0x38
 800d76e:	3352      	adds	r3, #82	@ 0x52
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe f9fd 	bl	800bb70 <ld_dword>
 800d776:	4603      	mov	r3, r0
 800d778:	4a05      	ldr	r2, [pc, #20]	@ (800d790 <check_fs+0xa8>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d101      	bne.n	800d782 <check_fs+0x9a>
 800d77e:	2300      	movs	r3, #0
 800d780:	e000      	b.n	800d784 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d782:	2302      	movs	r3, #2
}
 800d784:	4618      	mov	r0, r3
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	00544146 	.word	0x00544146
 800d790:	33544146 	.word	0x33544146

0800d794 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b096      	sub	sp, #88	@ 0x58
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f7ff ff58 	bl	800d65e <get_ldnumber>
 800d7ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	da01      	bge.n	800d7ba <find_volume+0x26>
 800d7b6:	230b      	movs	r3, #11
 800d7b8:	e235      	b.n	800dc26 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d7ba:	4aa5      	ldr	r2, [pc, #660]	@ (800da50 <find_volume+0x2bc>)
 800d7bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d101      	bne.n	800d7ce <find_volume+0x3a>
 800d7ca:	230c      	movs	r3, #12
 800d7cc:	e22b      	b.n	800dc26 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800d7ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7d0:	f7fe fab6 	bl	800bd40 <lock_fs>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d101      	bne.n	800d7de <find_volume+0x4a>
 800d7da:	230f      	movs	r3, #15
 800d7dc:	e223      	b.n	800dc26 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d7e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d7e4:	79fb      	ldrb	r3, [r7, #7]
 800d7e6:	f023 0301 	bic.w	r3, r3, #1
 800d7ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d01a      	beq.n	800d82a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f6:	785b      	ldrb	r3, [r3, #1]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fe f903 	bl	800ba04 <disk_status>
 800d7fe:	4603      	mov	r3, r0
 800d800:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d804:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d808:	f003 0301 	and.w	r3, r3, #1
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d10c      	bne.n	800d82a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d810:	79fb      	ldrb	r3, [r7, #7]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d007      	beq.n	800d826 <find_volume+0x92>
 800d816:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d81a:	f003 0304 	and.w	r3, r3, #4
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d822:	230a      	movs	r3, #10
 800d824:	e1ff      	b.n	800dc26 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800d826:	2300      	movs	r3, #0
 800d828:	e1fd      	b.n	800dc26 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82c:	2200      	movs	r2, #0
 800d82e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d832:	b2da      	uxtb	r2, r3
 800d834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d836:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83a:	785b      	ldrb	r3, [r3, #1]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fe f8fb 	bl	800ba38 <disk_initialize>
 800d842:	4603      	mov	r3, r0
 800d844:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d848:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d84c:	f003 0301 	and.w	r3, r3, #1
 800d850:	2b00      	cmp	r3, #0
 800d852:	d001      	beq.n	800d858 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d854:	2303      	movs	r3, #3
 800d856:	e1e6      	b.n	800dc26 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d858:	79fb      	ldrb	r3, [r7, #7]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d007      	beq.n	800d86e <find_volume+0xda>
 800d85e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d862:	f003 0304 	and.w	r3, r3, #4
 800d866:	2b00      	cmp	r3, #0
 800d868:	d001      	beq.n	800d86e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d86a:	230a      	movs	r3, #10
 800d86c:	e1db      	b.n	800dc26 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d872:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d874:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d876:	f7ff ff37 	bl	800d6e8 <check_fs>
 800d87a:	4603      	mov	r3, r0
 800d87c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d880:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d884:	2b02      	cmp	r3, #2
 800d886:	d149      	bne.n	800d91c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d888:	2300      	movs	r3, #0
 800d88a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d88c:	e01e      	b.n	800d8cc <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d890:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d896:	011b      	lsls	r3, r3, #4
 800d898:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d89c:	4413      	add	r3, r2
 800d89e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a2:	3304      	adds	r3, #4
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d006      	beq.n	800d8b8 <find_volume+0x124>
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	3308      	adds	r3, #8
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fe f95e 	bl	800bb70 <ld_dword>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	e000      	b.n	800d8ba <find_volume+0x126>
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	3358      	adds	r3, #88	@ 0x58
 800d8c0:	443b      	add	r3, r7
 800d8c2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d8c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8ce:	2b03      	cmp	r3, #3
 800d8d0:	d9dd      	bls.n	800d88e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <find_volume+0x14e>
 800d8dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d8e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	3358      	adds	r3, #88	@ 0x58
 800d8e8:	443b      	add	r3, r7
 800d8ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d8ee:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d8f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d005      	beq.n	800d902 <find_volume+0x16e>
 800d8f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d8f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d8fa:	f7ff fef5 	bl	800d6e8 <check_fs>
 800d8fe:	4603      	mov	r3, r0
 800d900:	e000      	b.n	800d904 <find_volume+0x170>
 800d902:	2303      	movs	r3, #3
 800d904:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d908:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d905      	bls.n	800d91c <find_volume+0x188>
 800d910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d912:	3301      	adds	r3, #1
 800d914:	643b      	str	r3, [r7, #64]	@ 0x40
 800d916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d918:	2b03      	cmp	r3, #3
 800d91a:	d9e2      	bls.n	800d8e2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d91c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d920:	2b04      	cmp	r3, #4
 800d922:	d101      	bne.n	800d928 <find_volume+0x194>
 800d924:	2301      	movs	r3, #1
 800d926:	e17e      	b.n	800dc26 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d928:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d901      	bls.n	800d934 <find_volume+0x1a0>
 800d930:	230d      	movs	r3, #13
 800d932:	e178      	b.n	800dc26 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d936:	3338      	adds	r3, #56	@ 0x38
 800d938:	330b      	adds	r3, #11
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe f900 	bl	800bb40 <ld_word>
 800d940:	4603      	mov	r3, r0
 800d942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d946:	d001      	beq.n	800d94c <find_volume+0x1b8>
 800d948:	230d      	movs	r3, #13
 800d94a:	e16c      	b.n	800dc26 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d94e:	3338      	adds	r3, #56	@ 0x38
 800d950:	3316      	adds	r3, #22
 800d952:	4618      	mov	r0, r3
 800d954:	f7fe f8f4 	bl	800bb40 <ld_word>
 800d958:	4603      	mov	r3, r0
 800d95a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d95c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d106      	bne.n	800d970 <find_volume+0x1dc>
 800d962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d964:	3338      	adds	r3, #56	@ 0x38
 800d966:	3324      	adds	r3, #36	@ 0x24
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fe f901 	bl	800bb70 <ld_dword>
 800d96e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d974:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d978:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800d97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d97e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d982:	789b      	ldrb	r3, [r3, #2]
 800d984:	2b01      	cmp	r3, #1
 800d986:	d005      	beq.n	800d994 <find_volume+0x200>
 800d988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d98a:	789b      	ldrb	r3, [r3, #2]
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d001      	beq.n	800d994 <find_volume+0x200>
 800d990:	230d      	movs	r3, #13
 800d992:	e148      	b.n	800dc26 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d996:	789b      	ldrb	r3, [r3, #2]
 800d998:	461a      	mov	r2, r3
 800d99a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d99c:	fb02 f303 	mul.w	r3, r2, r3
 800d9a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b0:	895b      	ldrh	r3, [r3, #10]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d008      	beq.n	800d9c8 <find_volume+0x234>
 800d9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b8:	895b      	ldrh	r3, [r3, #10]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9be:	895b      	ldrh	r3, [r3, #10]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	4013      	ands	r3, r2
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <find_volume+0x238>
 800d9c8:	230d      	movs	r3, #13
 800d9ca:	e12c      	b.n	800dc26 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ce:	3338      	adds	r3, #56	@ 0x38
 800d9d0:	3311      	adds	r3, #17
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe f8b4 	bl	800bb40 <ld_word>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	461a      	mov	r2, r3
 800d9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e2:	891b      	ldrh	r3, [r3, #8]
 800d9e4:	f003 030f 	and.w	r3, r3, #15
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <find_volume+0x25e>
 800d9ee:	230d      	movs	r3, #13
 800d9f0:	e119      	b.n	800dc26 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f4:	3338      	adds	r3, #56	@ 0x38
 800d9f6:	3313      	adds	r3, #19
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fe f8a1 	bl	800bb40 <ld_word>
 800d9fe:	4603      	mov	r3, r0
 800da00:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800da02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da04:	2b00      	cmp	r3, #0
 800da06:	d106      	bne.n	800da16 <find_volume+0x282>
 800da08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da0a:	3338      	adds	r3, #56	@ 0x38
 800da0c:	3320      	adds	r3, #32
 800da0e:	4618      	mov	r0, r3
 800da10:	f7fe f8ae 	bl	800bb70 <ld_dword>
 800da14:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800da16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da18:	3338      	adds	r3, #56	@ 0x38
 800da1a:	330e      	adds	r3, #14
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe f88f 	bl	800bb40 <ld_word>
 800da22:	4603      	mov	r3, r0
 800da24:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800da26:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d101      	bne.n	800da30 <find_volume+0x29c>
 800da2c:	230d      	movs	r3, #13
 800da2e:	e0fa      	b.n	800dc26 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800da30:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800da32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da34:	4413      	add	r3, r2
 800da36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da38:	8912      	ldrh	r2, [r2, #8]
 800da3a:	0912      	lsrs	r2, r2, #4
 800da3c:	b292      	uxth	r2, r2
 800da3e:	4413      	add	r3, r2
 800da40:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800da42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da46:	429a      	cmp	r2, r3
 800da48:	d204      	bcs.n	800da54 <find_volume+0x2c0>
 800da4a:	230d      	movs	r3, #13
 800da4c:	e0eb      	b.n	800dc26 <find_volume+0x492>
 800da4e:	bf00      	nop
 800da50:	200000b4 	.word	0x200000b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800da54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da5c:	8952      	ldrh	r2, [r2, #10]
 800da5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800da62:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800da64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da66:	2b00      	cmp	r3, #0
 800da68:	d101      	bne.n	800da6e <find_volume+0x2da>
 800da6a:	230d      	movs	r3, #13
 800da6c:	e0db      	b.n	800dc26 <find_volume+0x492>
		fmt = FS_FAT32;
 800da6e:	2303      	movs	r3, #3
 800da70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800da74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da76:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d802      	bhi.n	800da84 <find_volume+0x2f0>
 800da7e:	2302      	movs	r3, #2
 800da80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800da84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da86:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d802      	bhi.n	800da94 <find_volume+0x300>
 800da8e:	2301      	movs	r3, #1
 800da90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800da94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da96:	1c9a      	adds	r2, r3, #2
 800da98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da9a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800da9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800daa0:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800daa2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800daa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daa6:	441a      	add	r2, r3
 800daa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daaa:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800daac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800daae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab0:	441a      	add	r2, r3
 800dab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab4:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800dab6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800daba:	2b03      	cmp	r3, #3
 800dabc:	d11e      	bne.n	800dafc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac0:	3338      	adds	r3, #56	@ 0x38
 800dac2:	332a      	adds	r3, #42	@ 0x2a
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe f83b 	bl	800bb40 <ld_word>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <find_volume+0x340>
 800dad0:	230d      	movs	r3, #13
 800dad2:	e0a8      	b.n	800dc26 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad6:	891b      	ldrh	r3, [r3, #8]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <find_volume+0x34c>
 800dadc:	230d      	movs	r3, #13
 800dade:	e0a2      	b.n	800dc26 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae2:	3338      	adds	r3, #56	@ 0x38
 800dae4:	332c      	adds	r3, #44	@ 0x2c
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe f842 	bl	800bb70 <ld_dword>
 800daec:	4602      	mov	r2, r0
 800daee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800daf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf4:	69db      	ldr	r3, [r3, #28]
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800dafa:	e01f      	b.n	800db3c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dafe:	891b      	ldrh	r3, [r3, #8]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d101      	bne.n	800db08 <find_volume+0x374>
 800db04:	230d      	movs	r3, #13
 800db06:	e08e      	b.n	800dc26 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800db08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db0e:	441a      	add	r2, r3
 800db10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db12:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800db14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800db18:	2b02      	cmp	r3, #2
 800db1a:	d103      	bne.n	800db24 <find_volume+0x390>
 800db1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1e:	69db      	ldr	r3, [r3, #28]
 800db20:	005b      	lsls	r3, r3, #1
 800db22:	e00a      	b.n	800db3a <find_volume+0x3a6>
 800db24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db26:	69da      	ldr	r2, [r3, #28]
 800db28:	4613      	mov	r3, r2
 800db2a:	005b      	lsls	r3, r3, #1
 800db2c:	4413      	add	r3, r2
 800db2e:	085a      	lsrs	r2, r3, #1
 800db30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db32:	69db      	ldr	r3, [r3, #28]
 800db34:	f003 0301 	and.w	r3, r3, #1
 800db38:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800db3a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800db3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3e:	6a1a      	ldr	r2, [r3, #32]
 800db40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db42:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800db46:	0a5b      	lsrs	r3, r3, #9
 800db48:	429a      	cmp	r2, r3
 800db4a:	d201      	bcs.n	800db50 <find_volume+0x3bc>
 800db4c:	230d      	movs	r3, #13
 800db4e:	e06a      	b.n	800dc26 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800db50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db52:	f04f 32ff 	mov.w	r2, #4294967295
 800db56:	619a      	str	r2, [r3, #24]
 800db58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db5a:	699a      	ldr	r2, [r3, #24]
 800db5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db5e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800db60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db62:	2280      	movs	r2, #128	@ 0x80
 800db64:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800db66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800db6a:	2b03      	cmp	r3, #3
 800db6c:	d149      	bne.n	800dc02 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800db6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db70:	3338      	adds	r3, #56	@ 0x38
 800db72:	3330      	adds	r3, #48	@ 0x30
 800db74:	4618      	mov	r0, r3
 800db76:	f7fd ffe3 	bl	800bb40 <ld_word>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d140      	bne.n	800dc02 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800db80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db82:	3301      	adds	r3, #1
 800db84:	4619      	mov	r1, r3
 800db86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db88:	f7fe fabc 	bl	800c104 <move_window>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d137      	bne.n	800dc02 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800db92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db94:	2200      	movs	r2, #0
 800db96:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800db98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9a:	3338      	adds	r3, #56	@ 0x38
 800db9c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fd ffcd 	bl	800bb40 <ld_word>
 800dba6:	4603      	mov	r3, r0
 800dba8:	461a      	mov	r2, r3
 800dbaa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d127      	bne.n	800dc02 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb4:	3338      	adds	r3, #56	@ 0x38
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fd ffda 	bl	800bb70 <ld_dword>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	4a1c      	ldr	r2, [pc, #112]	@ (800dc30 <find_volume+0x49c>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d11e      	bne.n	800dc02 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc6:	3338      	adds	r3, #56	@ 0x38
 800dbc8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7fd ffcf 	bl	800bb70 <ld_dword>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	4a17      	ldr	r2, [pc, #92]	@ (800dc34 <find_volume+0x4a0>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d113      	bne.n	800dc02 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbdc:	3338      	adds	r3, #56	@ 0x38
 800dbde:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fd ffc4 	bl	800bb70 <ld_dword>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbec:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dbee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf0:	3338      	adds	r3, #56	@ 0x38
 800dbf2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fd ffba 	bl	800bb70 <ld_dword>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc00:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc04:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800dc08:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dc0a:	4b0b      	ldr	r3, [pc, #44]	@ (800dc38 <find_volume+0x4a4>)
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	b29a      	uxth	r2, r3
 800dc12:	4b09      	ldr	r3, [pc, #36]	@ (800dc38 <find_volume+0x4a4>)
 800dc14:	801a      	strh	r2, [r3, #0]
 800dc16:	4b08      	ldr	r3, [pc, #32]	@ (800dc38 <find_volume+0x4a4>)
 800dc18:	881a      	ldrh	r2, [r3, #0]
 800dc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc1c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dc1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dc20:	f7fe fa08 	bl	800c034 <clear_lock>
#endif
	return FR_OK;
 800dc24:	2300      	movs	r3, #0
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3758      	adds	r7, #88	@ 0x58
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	41615252 	.word	0x41615252
 800dc34:	61417272 	.word	0x61417272
 800dc38:	200000b8 	.word	0x200000b8

0800dc3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dc46:	2309      	movs	r3, #9
 800dc48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d02e      	beq.n	800dcae <validate+0x72>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d02a      	beq.n	800dcae <validate+0x72>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d025      	beq.n	800dcae <validate+0x72>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	889a      	ldrh	r2, [r3, #4]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	88db      	ldrh	r3, [r3, #6]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d11e      	bne.n	800dcae <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe f863 	bl	800bd40 <lock_fs>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d014      	beq.n	800dcaa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	785b      	ldrb	r3, [r3, #1]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fd febc 	bl	800ba04 <disk_status>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	f003 0301 	and.w	r3, r3, #1
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d102      	bne.n	800dc9c <validate+0x60>
				res = FR_OK;
 800dc96:	2300      	movs	r3, #0
 800dc98:	73fb      	strb	r3, [r7, #15]
 800dc9a:	e008      	b.n	800dcae <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2100      	movs	r1, #0
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fe f862 	bl	800bd6c <unlock_fs>
 800dca8:	e001      	b.n	800dcae <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800dcaa:	230f      	movs	r3, #15
 800dcac:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dcae:	7bfb      	ldrb	r3, [r7, #15]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d102      	bne.n	800dcba <validate+0x7e>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	e000      	b.n	800dcbc <validate+0x80>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	6013      	str	r3, [r2, #0]
	return res;
 800dcc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
	...

0800dccc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b088      	sub	sp, #32
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dcde:	f107 0310 	add.w	r3, r7, #16
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7ff fcbb 	bl	800d65e <get_ldnumber>
 800dce8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	da01      	bge.n	800dcf4 <f_mount+0x28>
 800dcf0:	230b      	movs	r3, #11
 800dcf2:	e048      	b.n	800dd86 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dcf4:	4a26      	ldr	r2, [pc, #152]	@ (800dd90 <f_mount+0xc4>)
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcfc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00f      	beq.n	800dd24 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dd04:	69b8      	ldr	r0, [r7, #24]
 800dd06:	f7fe f995 	bl	800c034 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 fe95 	bl	800ea3e <ff_del_syncobj>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d101      	bne.n	800dd1e <f_mount+0x52>
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	e033      	b.n	800dd86 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	2200      	movs	r2, #0
 800dd22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d00f      	beq.n	800dd4a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	3310      	adds	r3, #16
 800dd38:	4619      	mov	r1, r3
 800dd3a:	4610      	mov	r0, r2
 800dd3c:	f000 fe64 	bl	800ea08 <ff_cre_syncobj>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d101      	bne.n	800dd4a <f_mount+0x7e>
 800dd46:	2302      	movs	r3, #2
 800dd48:	e01d      	b.n	800dd86 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	4910      	ldr	r1, [pc, #64]	@ (800dd90 <f_mount+0xc4>)
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d002      	beq.n	800dd60 <f_mount+0x94>
 800dd5a:	79fb      	ldrb	r3, [r7, #7]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d001      	beq.n	800dd64 <f_mount+0x98>
 800dd60:	2300      	movs	r3, #0
 800dd62:	e010      	b.n	800dd86 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dd64:	f107 010c 	add.w	r1, r7, #12
 800dd68:	f107 0308 	add.w	r3, r7, #8
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7ff fd10 	bl	800d794 <find_volume>
 800dd74:	4603      	mov	r3, r0
 800dd76:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	7dfa      	ldrb	r2, [r7, #23]
 800dd7c:	4611      	mov	r1, r2
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fd fff4 	bl	800bd6c <unlock_fs>
 800dd84:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3720      	adds	r7, #32
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	200000b4 	.word	0x200000b4

0800dd94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800dd9a:	af00      	add	r7, sp, #0
 800dd9c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dda0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dda4:	6018      	str	r0, [r3, #0]
 800dda6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ddaa:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800ddae:	6019      	str	r1, [r3, #0]
 800ddb0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ddb4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800ddb8:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ddba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ddbe:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d101      	bne.n	800ddcc <f_open+0x38>
 800ddc8:	2309      	movs	r3, #9
 800ddca:	e299      	b.n	800e300 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ddcc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ddd0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800ddd4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800ddd8:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800dddc:	7812      	ldrb	r2, [r2, #0]
 800ddde:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800dde2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800dde4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dde8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800ddec:	781a      	ldrb	r2, [r3, #0]
 800ddee:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 800ddf2:	f107 0308 	add.w	r3, r7, #8
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7ff fccc 	bl	800d794 <find_volume>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 800de02:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800de06:	2b00      	cmp	r3, #0
 800de08:	f040 8265 	bne.w	800e2d6 <f_open+0x542>
		dj.obj.fs = fs;
 800de0c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800de10:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 800de14:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800de18:	f107 0214 	add.w	r2, r7, #20
 800de1c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800de1e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800de22:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800de2c:	4611      	mov	r1, r2
 800de2e:	4618      	mov	r0, r3
 800de30:	f7ff fba4 	bl	800d57c <follow_path>
 800de34:	4603      	mov	r3, r0
 800de36:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800de3a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d11c      	bne.n	800de7c <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800de42:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800de46:	b25b      	sxtb	r3, r3
 800de48:	2b00      	cmp	r3, #0
 800de4a:	da03      	bge.n	800de54 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800de4c:	2306      	movs	r3, #6
 800de4e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800de52:	e013      	b.n	800de7c <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de54:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800de58:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b01      	cmp	r3, #1
 800de60:	bf8c      	ite	hi
 800de62:	2301      	movhi	r3, #1
 800de64:	2300      	movls	r3, #0
 800de66:	b2db      	uxtb	r3, r3
 800de68:	461a      	mov	r2, r3
 800de6a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800de6e:	4611      	mov	r1, r2
 800de70:	4618      	mov	r0, r3
 800de72:	f7fd ff97 	bl	800bda4 <chk_lock>
 800de76:	4603      	mov	r3, r0
 800de78:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800de7c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800de80:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	f003 031c 	and.w	r3, r3, #28
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f000 80a7 	beq.w	800dfde <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 800de90:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800de94:	2b00      	cmp	r3, #0
 800de96:	d01f      	beq.n	800ded8 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800de98:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800de9c:	2b04      	cmp	r3, #4
 800de9e:	d10e      	bne.n	800debe <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dea0:	f7fd ffdc 	bl	800be5c <enq_lock>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d006      	beq.n	800deb8 <f_open+0x124>
 800deaa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800deae:	4618      	mov	r0, r3
 800deb0:	f7ff f8b4 	bl	800d01c <dir_register>
 800deb4:	4603      	mov	r3, r0
 800deb6:	e000      	b.n	800deba <f_open+0x126>
 800deb8:	2312      	movs	r3, #18
 800deba:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800debe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dec2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800dec6:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800deca:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800dece:	7812      	ldrb	r2, [r2, #0]
 800ded0:	f042 0208 	orr.w	r2, r2, #8
 800ded4:	701a      	strb	r2, [r3, #0]
 800ded6:	e015      	b.n	800df04 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ded8:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800dedc:	f003 0311 	and.w	r3, r3, #17
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d003      	beq.n	800deec <f_open+0x158>
					res = FR_DENIED;
 800dee4:	2307      	movs	r3, #7
 800dee6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800deea:	e00b      	b.n	800df04 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800deec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800def0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	f003 0304 	and.w	r3, r3, #4
 800defa:	2b00      	cmp	r3, #0
 800defc:	d002      	beq.n	800df04 <f_open+0x170>
 800defe:	2308      	movs	r3, #8
 800df00:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800df04:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f040 8088 	bne.w	800e01e <f_open+0x28a>
 800df0e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800df12:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	f003 0308 	and.w	r3, r3, #8
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d07e      	beq.n	800e01e <f_open+0x28a>
				dw = GET_FATTIME();
 800df20:	f004 fd9a 	bl	8012a58 <get_fattime>
 800df24:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800df28:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800df2c:	330e      	adds	r3, #14
 800df2e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800df32:	4618      	mov	r0, r3
 800df34:	f7fd fe5a 	bl	800bbec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800df38:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800df3c:	3316      	adds	r3, #22
 800df3e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800df42:	4618      	mov	r0, r3
 800df44:	f7fd fe52 	bl	800bbec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df48:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800df4c:	330b      	adds	r3, #11
 800df4e:	2220      	movs	r2, #32
 800df50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800df52:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800df56:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800df5a:	4611      	mov	r1, r2
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7fe fdd5 	bl	800cb0c <ld_clust>
 800df62:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800df66:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800df6a:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800df6e:	2200      	movs	r2, #0
 800df70:	4618      	mov	r0, r3
 800df72:	f7fe fdea 	bl	800cb4a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800df76:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800df7a:	331c      	adds	r3, #28
 800df7c:	2100      	movs	r1, #0
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fd fe34 	bl	800bbec <st_dword>
					fs->wflag = 1;
 800df84:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800df88:	2201      	movs	r2, #1
 800df8a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800df8c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800df90:	2b00      	cmp	r3, #0
 800df92:	d044      	beq.n	800e01e <f_open+0x28a>
						dw = fs->winsect;
 800df94:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800df98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df9a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800df9e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fe faf7 	bl	800c59c <remove_chain>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 800dfb4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d130      	bne.n	800e01e <f_open+0x28a>
							res = move_window(fs, dw);
 800dfbc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800dfc0:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fe f89d 	bl	800c104 <move_window>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dfd0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800dfd4:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800dfd8:	3a01      	subs	r2, #1
 800dfda:	615a      	str	r2, [r3, #20]
 800dfdc:	e01f      	b.n	800e01e <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dfde:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d11b      	bne.n	800e01e <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dfe6:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800dfea:	f003 0310 	and.w	r3, r3, #16
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d003      	beq.n	800dffa <f_open+0x266>
					res = FR_NO_FILE;
 800dff2:	2304      	movs	r3, #4
 800dff4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800dff8:	e011      	b.n	800e01e <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dffa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dffe:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	f003 0302 	and.w	r3, r3, #2
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d008      	beq.n	800e01e <f_open+0x28a>
 800e00c:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800e010:	f003 0301 	and.w	r3, r3, #1
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <f_open+0x28a>
						res = FR_DENIED;
 800e018:	2307      	movs	r3, #7
 800e01a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800e01e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800e022:	2b00      	cmp	r3, #0
 800e024:	d148      	bne.n	800e0b8 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e026:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e02a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	f003 0308 	and.w	r3, r3, #8
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00b      	beq.n	800e050 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 800e038:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e03c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800e040:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800e044:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800e048:	7812      	ldrb	r2, [r2, #0]
 800e04a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e04e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e050:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800e054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e056:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e05a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e062:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800e066:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e06a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e072:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e076:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	bf8c      	ite	hi
 800e080:	2301      	movhi	r3, #1
 800e082:	2300      	movls	r3, #0
 800e084:	b2db      	uxtb	r3, r3
 800e086:	461a      	mov	r2, r3
 800e088:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800e08c:	4611      	mov	r1, r2
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fd ff06 	bl	800bea0 <inc_lock>
 800e094:	4602      	mov	r2, r0
 800e096:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e09a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e0a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e0a6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d102      	bne.n	800e0b8 <f_open+0x324>
 800e0b2:	2302      	movs	r3, #2
 800e0b4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e0b8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f040 810a 	bne.w	800e2d6 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e0c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800e0c6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe fd1d 	bl	800cb0c <ld_clust>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e0d8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e0e0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800e0e4:	331c      	adds	r3, #28
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fd fd42 	bl	800bb70 <ld_dword>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e0f2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e0fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e0fe:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2200      	movs	r2, #0
 800e106:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e108:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800e10c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e110:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e118:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800e11c:	88da      	ldrh	r2, [r3, #6]
 800e11e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e122:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e12a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e12e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800e138:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800e13c:	7812      	ldrb	r2, [r2, #0]
 800e13e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e140:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e144:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2200      	movs	r2, #0
 800e14c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e14e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e152:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2200      	movs	r2, #0
 800e15a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e15c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e160:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2200      	movs	r2, #0
 800e168:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e16a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e16e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	3330      	adds	r3, #48	@ 0x30
 800e176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e17a:	2100      	movs	r1, #0
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fd fd82 	bl	800bc86 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e182:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e186:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	f003 0320 	and.w	r3, r3, #32
 800e190:	2b00      	cmp	r3, #0
 800e192:	f000 80a0 	beq.w	800e2d6 <f_open+0x542>
 800e196:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e19a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f000 8097 	beq.w	800e2d6 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e1a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e1ac:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	68da      	ldr	r2, [r3, #12]
 800e1b4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e1b8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e1c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800e1c4:	895b      	ldrh	r3, [r3, #10]
 800e1c6:	025b      	lsls	r3, r3, #9
 800e1c8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e1cc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e1d0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e1dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e1e0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800e1ec:	e021      	b.n	800e232 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 800e1ee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e1f2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fe f83c 	bl	800c27a <get_fat>
 800e202:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800e206:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d802      	bhi.n	800e214 <f_open+0x480>
 800e20e:	2302      	movs	r3, #2
 800e210:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e214:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800e218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e21c:	d102      	bne.n	800e224 <f_open+0x490>
 800e21e:	2301      	movs	r3, #1
 800e220:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e224:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800e228:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800e22c:	1ad3      	subs	r3, r2, r3
 800e22e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800e232:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800e236:	2b00      	cmp	r3, #0
 800e238:	d105      	bne.n	800e246 <f_open+0x4b2>
 800e23a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800e23e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800e242:	429a      	cmp	r2, r3
 800e244:	d8d3      	bhi.n	800e1ee <f_open+0x45a>
				}
				fp->clust = clst;
 800e246:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e24a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800e254:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e256:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d13b      	bne.n	800e2d6 <f_open+0x542>
 800e25e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800e262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e266:	2b00      	cmp	r3, #0
 800e268:	d035      	beq.n	800e2d6 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e26a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800e26e:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800e272:	4618      	mov	r0, r3
 800e274:	f7fd ffe2 	bl	800c23c <clust2sect>
 800e278:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 800e27c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800e280:	2b00      	cmp	r3, #0
 800e282:	d103      	bne.n	800e28c <f_open+0x4f8>
						res = FR_INT_ERR;
 800e284:	2302      	movs	r3, #2
 800e286:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800e28a:	e024      	b.n	800e2d6 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e28c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800e290:	0a5a      	lsrs	r2, r3, #9
 800e292:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800e296:	441a      	add	r2, r3
 800e298:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e29c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e2a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800e2a8:	7858      	ldrb	r0, [r3, #1]
 800e2aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e2ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e2b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e2bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	6a1a      	ldr	r2, [r3, #32]
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	f7fd fbdd 	bl	800ba84 <disk_read>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d002      	beq.n	800e2d6 <f_open+0x542>
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e2d6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d006      	beq.n	800e2ec <f_open+0x558>
 800e2de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e2e2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e2ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800e2f0:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 800e2f4:	4611      	mov	r1, r2
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fd fd38 	bl	800bd6c <unlock_fs>
 800e2fc:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 800e300:	4618      	mov	r0, r3
 800e302:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b08c      	sub	sp, #48	@ 0x30
 800e30e:	af00      	add	r7, sp, #0
 800e310:	60f8      	str	r0, [r7, #12]
 800e312:	60b9      	str	r1, [r7, #8]
 800e314:	607a      	str	r2, [r7, #4]
 800e316:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	2200      	movs	r2, #0
 800e320:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f107 0210 	add.w	r2, r7, #16
 800e328:	4611      	mov	r1, r2
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7ff fc86 	bl	800dc3c <validate>
 800e330:	4603      	mov	r3, r0
 800e332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e336:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d107      	bne.n	800e34e <f_write+0x44>
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	7d5b      	ldrb	r3, [r3, #21]
 800e342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d009      	beq.n	800e362 <f_write+0x58>
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e354:	4611      	mov	r1, r2
 800e356:	4618      	mov	r0, r3
 800e358:	f7fd fd08 	bl	800bd6c <unlock_fs>
 800e35c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e360:	e173      	b.n	800e64a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	7d1b      	ldrb	r3, [r3, #20]
 800e366:	f003 0302 	and.w	r3, r3, #2
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d106      	bne.n	800e37c <f_write+0x72>
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	2107      	movs	r1, #7
 800e372:	4618      	mov	r0, r3
 800e374:	f7fd fcfa 	bl	800bd6c <unlock_fs>
 800e378:	2307      	movs	r3, #7
 800e37a:	e166      	b.n	800e64a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	699a      	ldr	r2, [r3, #24]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	441a      	add	r2, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	429a      	cmp	r2, r3
 800e38a:	f080 814b 	bcs.w	800e624 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	699b      	ldr	r3, [r3, #24]
 800e392:	43db      	mvns	r3, r3
 800e394:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e396:	e145      	b.n	800e624 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	699b      	ldr	r3, [r3, #24]
 800e39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f040 8101 	bne.w	800e5a8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	699b      	ldr	r3, [r3, #24]
 800e3aa:	0a5b      	lsrs	r3, r3, #9
 800e3ac:	693a      	ldr	r2, [r7, #16]
 800e3ae:	8952      	ldrh	r2, [r2, #10]
 800e3b0:	3a01      	subs	r2, #1
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d14d      	bne.n	800e458 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	699b      	ldr	r3, [r3, #24]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10c      	bne.n	800e3de <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d11a      	bne.n	800e406 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2100      	movs	r1, #0
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7fe f946 	bl	800c666 <create_chain>
 800e3da:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e3dc:	e013      	b.n	800e406 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d007      	beq.n	800e3f6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	699b      	ldr	r3, [r3, #24]
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	f7fe f9d2 	bl	800c796 <clmt_clust>
 800e3f2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e3f4:	e007      	b.n	800e406 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e3f6:	68fa      	ldr	r2, [r7, #12]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	69db      	ldr	r3, [r3, #28]
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	4610      	mov	r0, r2
 800e400:	f7fe f931 	bl	800c666 <create_chain>
 800e404:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f000 8110 	beq.w	800e62e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e410:	2b01      	cmp	r3, #1
 800e412:	d109      	bne.n	800e428 <f_write+0x11e>
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2202      	movs	r2, #2
 800e418:	755a      	strb	r2, [r3, #21]
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	2102      	movs	r1, #2
 800e41e:	4618      	mov	r0, r3
 800e420:	f7fd fca4 	bl	800bd6c <unlock_fs>
 800e424:	2302      	movs	r3, #2
 800e426:	e110      	b.n	800e64a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42e:	d109      	bne.n	800e444 <f_write+0x13a>
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2201      	movs	r2, #1
 800e434:	755a      	strb	r2, [r3, #21]
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	2101      	movs	r1, #1
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fd fc96 	bl	800bd6c <unlock_fs>
 800e440:	2301      	movs	r3, #1
 800e442:	e102      	b.n	800e64a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e448:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d102      	bne.n	800e458 <f_write+0x14e>
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e456:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	7d1b      	ldrb	r3, [r3, #20]
 800e45c:	b25b      	sxtb	r3, r3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	da1d      	bge.n	800e49e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	7858      	ldrb	r0, [r3, #1]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6a1a      	ldr	r2, [r3, #32]
 800e470:	2301      	movs	r3, #1
 800e472:	f7fd fb27 	bl	800bac4 <disk_write>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d009      	beq.n	800e490 <f_write+0x186>
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2201      	movs	r2, #1
 800e480:	755a      	strb	r2, [r3, #21]
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	2101      	movs	r1, #1
 800e486:	4618      	mov	r0, r3
 800e488:	f7fd fc70 	bl	800bd6c <unlock_fs>
 800e48c:	2301      	movs	r3, #1
 800e48e:	e0dc      	b.n	800e64a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	7d1b      	ldrb	r3, [r3, #20]
 800e494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e498:	b2da      	uxtb	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e49e:	693a      	ldr	r2, [r7, #16]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	69db      	ldr	r3, [r3, #28]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4610      	mov	r0, r2
 800e4a8:	f7fd fec8 	bl	800c23c <clust2sect>
 800e4ac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d109      	bne.n	800e4c8 <f_write+0x1be>
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	755a      	strb	r2, [r3, #21]
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	2102      	movs	r1, #2
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fd fc54 	bl	800bd6c <unlock_fs>
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	e0c0      	b.n	800e64a <f_write+0x340>
			sect += csect;
 800e4c8:	697a      	ldr	r2, [r7, #20]
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	0a5b      	lsrs	r3, r3, #9
 800e4d4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e4d6:	6a3b      	ldr	r3, [r7, #32]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d041      	beq.n	800e560 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e4dc:	69ba      	ldr	r2, [r7, #24]
 800e4de:	6a3b      	ldr	r3, [r7, #32]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	693a      	ldr	r2, [r7, #16]
 800e4e4:	8952      	ldrh	r2, [r2, #10]
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d905      	bls.n	800e4f6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	895b      	ldrh	r3, [r3, #10]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	7858      	ldrb	r0, [r3, #1]
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	69f9      	ldr	r1, [r7, #28]
 800e500:	f7fd fae0 	bl	800bac4 <disk_write>
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	d009      	beq.n	800e51e <f_write+0x214>
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2201      	movs	r2, #1
 800e50e:	755a      	strb	r2, [r3, #21]
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	2101      	movs	r1, #1
 800e514:	4618      	mov	r0, r3
 800e516:	f7fd fc29 	bl	800bd6c <unlock_fs>
 800e51a:	2301      	movs	r3, #1
 800e51c:	e095      	b.n	800e64a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6a1a      	ldr	r2, [r3, #32]
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	1ad3      	subs	r3, r2, r3
 800e526:	6a3a      	ldr	r2, [r7, #32]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d915      	bls.n	800e558 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6a1a      	ldr	r2, [r3, #32]
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	025b      	lsls	r3, r3, #9
 800e53c:	69fa      	ldr	r2, [r7, #28]
 800e53e:	4413      	add	r3, r2
 800e540:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e544:	4619      	mov	r1, r3
 800e546:	f7fd fb7d 	bl	800bc44 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	7d1b      	ldrb	r3, [r3, #20]
 800e54e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e552:	b2da      	uxtb	r2, r3
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e558:	6a3b      	ldr	r3, [r7, #32]
 800e55a:	025b      	lsls	r3, r3, #9
 800e55c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e55e:	e044      	b.n	800e5ea <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	6a1b      	ldr	r3, [r3, #32]
 800e564:	697a      	ldr	r2, [r7, #20]
 800e566:	429a      	cmp	r2, r3
 800e568:	d01b      	beq.n	800e5a2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	699a      	ldr	r2, [r3, #24]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e572:	429a      	cmp	r2, r3
 800e574:	d215      	bcs.n	800e5a2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	7858      	ldrb	r0, [r3, #1]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e580:	2301      	movs	r3, #1
 800e582:	697a      	ldr	r2, [r7, #20]
 800e584:	f7fd fa7e 	bl	800ba84 <disk_read>
 800e588:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d009      	beq.n	800e5a2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2201      	movs	r2, #1
 800e592:	755a      	strb	r2, [r3, #21]
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	2101      	movs	r1, #1
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fd fbe7 	bl	800bd6c <unlock_fs>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e053      	b.n	800e64a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	699b      	ldr	r3, [r3, #24]
 800e5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5b0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e5b4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e5b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d901      	bls.n	800e5c2 <f_write+0x2b8>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	699b      	ldr	r3, [r3, #24]
 800e5cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5d0:	4413      	add	r3, r2
 800e5d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5d4:	69f9      	ldr	r1, [r7, #28]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fd fb34 	bl	800bc44 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	7d1b      	ldrb	r3, [r3, #20]
 800e5e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e5ea:	69fa      	ldr	r2, [r7, #28]
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ee:	4413      	add	r3, r2
 800e5f0:	61fb      	str	r3, [r7, #28]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	699a      	ldr	r2, [r3, #24]
 800e5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f8:	441a      	add	r2, r3
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	619a      	str	r2, [r3, #24]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	68da      	ldr	r2, [r3, #12]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	699b      	ldr	r3, [r3, #24]
 800e606:	429a      	cmp	r2, r3
 800e608:	bf38      	it	cc
 800e60a:	461a      	movcc	r2, r3
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	60da      	str	r2, [r3, #12]
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e616:	441a      	add	r2, r3
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	601a      	str	r2, [r3, #0]
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	f47f aeb6 	bne.w	800e398 <f_write+0x8e>
 800e62c:	e000      	b.n	800e630 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e62e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	7d1b      	ldrb	r3, [r3, #20]
 800e634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e638:	b2da      	uxtb	r2, r3
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	2100      	movs	r1, #0
 800e642:	4618      	mov	r0, r3
 800e644:	f7fd fb92 	bl	800bd6c <unlock_fs>
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3730      	adds	r7, #48	@ 0x30
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b086      	sub	sp, #24
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f107 0208 	add.w	r2, r7, #8
 800e660:	4611      	mov	r1, r2
 800e662:	4618      	mov	r0, r3
 800e664:	f7ff faea 	bl	800dc3c <validate>
 800e668:	4603      	mov	r3, r0
 800e66a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e66c:	7dfb      	ldrb	r3, [r7, #23]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d16d      	bne.n	800e74e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	7d1b      	ldrb	r3, [r3, #20]
 800e676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d067      	beq.n	800e74e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	7d1b      	ldrb	r3, [r3, #20]
 800e682:	b25b      	sxtb	r3, r3
 800e684:	2b00      	cmp	r3, #0
 800e686:	da1a      	bge.n	800e6be <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	7858      	ldrb	r0, [r3, #1]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a1a      	ldr	r2, [r3, #32]
 800e696:	2301      	movs	r3, #1
 800e698:	f7fd fa14 	bl	800bac4 <disk_write>
 800e69c:	4603      	mov	r3, r0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d006      	beq.n	800e6b0 <f_sync+0x5e>
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	2101      	movs	r1, #1
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fd fb60 	bl	800bd6c <unlock_fs>
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e055      	b.n	800e75c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	7d1b      	ldrb	r3, [r3, #20]
 800e6b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6b8:	b2da      	uxtb	r2, r3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e6be:	f004 f9cb 	bl	8012a58 <get_fattime>
 800e6c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e6c4:	68ba      	ldr	r2, [r7, #8]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	4610      	mov	r0, r2
 800e6ce:	f7fd fd19 	bl	800c104 <move_window>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e6d6:	7dfb      	ldrb	r3, [r7, #23]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d138      	bne.n	800e74e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	330b      	adds	r3, #11
 800e6e6:	781a      	ldrb	r2, [r3, #0]
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	330b      	adds	r3, #11
 800e6ec:	f042 0220 	orr.w	r2, r2, #32
 800e6f0:	b2d2      	uxtb	r2, r2
 800e6f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6818      	ldr	r0, [r3, #0]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	68f9      	ldr	r1, [r7, #12]
 800e700:	f7fe fa23 	bl	800cb4a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f103 021c 	add.w	r2, r3, #28
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	4619      	mov	r1, r3
 800e710:	4610      	mov	r0, r2
 800e712:	f7fd fa6b 	bl	800bbec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	3316      	adds	r3, #22
 800e71a:	6939      	ldr	r1, [r7, #16]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7fd fa65 	bl	800bbec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	3312      	adds	r3, #18
 800e726:	2100      	movs	r1, #0
 800e728:	4618      	mov	r0, r3
 800e72a:	f7fd fa44 	bl	800bbb6 <st_word>
					fs->wflag = 1;
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	2201      	movs	r2, #1
 800e732:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	4618      	mov	r0, r3
 800e738:	f7fd fd12 	bl	800c160 <sync_fs>
 800e73c:	4603      	mov	r3, r0
 800e73e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	7d1b      	ldrb	r3, [r3, #20]
 800e744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	7dfa      	ldrb	r2, [r7, #23]
 800e752:	4611      	mov	r1, r2
 800e754:	4618      	mov	r0, r3
 800e756:	f7fd fb09 	bl	800bd6c <unlock_fs>
 800e75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3718      	adds	r7, #24
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f7ff ff70 	bl	800e652 <f_sync>
 800e772:	4603      	mov	r3, r0
 800e774:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e776:	7bfb      	ldrb	r3, [r7, #15]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d11d      	bne.n	800e7b8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f107 0208 	add.w	r2, r7, #8
 800e782:	4611      	mov	r1, r2
 800e784:	4618      	mov	r0, r3
 800e786:	f7ff fa59 	bl	800dc3c <validate>
 800e78a:	4603      	mov	r3, r0
 800e78c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d111      	bne.n	800e7b8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fd fc0f 	bl	800bfbc <dec_lock>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e7a2:	7bfb      	ldrb	r3, [r7, #15]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d102      	bne.n	800e7ae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fd fada 	bl	800bd6c <unlock_fs>
#endif
		}
	}
	return res;
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
	...

0800e7c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b087      	sub	sp, #28
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e7da:	4b1f      	ldr	r3, [pc, #124]	@ (800e858 <FATFS_LinkDriverEx+0x94>)
 800e7dc:	7a5b      	ldrb	r3, [r3, #9]
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d131      	bne.n	800e848 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e7e4:	4b1c      	ldr	r3, [pc, #112]	@ (800e858 <FATFS_LinkDriverEx+0x94>)
 800e7e6:	7a5b      	ldrb	r3, [r3, #9]
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	4b1a      	ldr	r3, [pc, #104]	@ (800e858 <FATFS_LinkDriverEx+0x94>)
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e7f2:	4b19      	ldr	r3, [pc, #100]	@ (800e858 <FATFS_LinkDriverEx+0x94>)
 800e7f4:	7a5b      	ldrb	r3, [r3, #9]
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	4a17      	ldr	r2, [pc, #92]	@ (800e858 <FATFS_LinkDriverEx+0x94>)
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4413      	add	r3, r2
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e802:	4b15      	ldr	r3, [pc, #84]	@ (800e858 <FATFS_LinkDriverEx+0x94>)
 800e804:	7a5b      	ldrb	r3, [r3, #9]
 800e806:	b2db      	uxtb	r3, r3
 800e808:	461a      	mov	r2, r3
 800e80a:	4b13      	ldr	r3, [pc, #76]	@ (800e858 <FATFS_LinkDriverEx+0x94>)
 800e80c:	4413      	add	r3, r2
 800e80e:	79fa      	ldrb	r2, [r7, #7]
 800e810:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e812:	4b11      	ldr	r3, [pc, #68]	@ (800e858 <FATFS_LinkDriverEx+0x94>)
 800e814:	7a5b      	ldrb	r3, [r3, #9]
 800e816:	b2db      	uxtb	r3, r3
 800e818:	1c5a      	adds	r2, r3, #1
 800e81a:	b2d1      	uxtb	r1, r2
 800e81c:	4a0e      	ldr	r2, [pc, #56]	@ (800e858 <FATFS_LinkDriverEx+0x94>)
 800e81e:	7251      	strb	r1, [r2, #9]
 800e820:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e822:	7dbb      	ldrb	r3, [r7, #22]
 800e824:	3330      	adds	r3, #48	@ 0x30
 800e826:	b2da      	uxtb	r2, r3
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	3301      	adds	r3, #1
 800e830:	223a      	movs	r2, #58	@ 0x3a
 800e832:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	3302      	adds	r3, #2
 800e838:	222f      	movs	r2, #47	@ 0x2f
 800e83a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	3303      	adds	r3, #3
 800e840:	2200      	movs	r2, #0
 800e842:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e844:	2300      	movs	r3, #0
 800e846:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e848:	7dfb      	ldrb	r3, [r7, #23]
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	371c      	adds	r7, #28
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	200000dc 	.word	0x200000dc

0800e85c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e866:	2200      	movs	r2, #0
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7ff ffaa 	bl	800e7c4 <FATFS_LinkDriverEx>
 800e870:	4603      	mov	r3, r0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3708      	adds	r7, #8
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
	...

0800e87c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	4603      	mov	r3, r0
 800e884:	6039      	str	r1, [r7, #0]
 800e886:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e888:	88fb      	ldrh	r3, [r7, #6]
 800e88a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e88c:	d802      	bhi.n	800e894 <ff_convert+0x18>
		c = chr;
 800e88e:	88fb      	ldrh	r3, [r7, #6]
 800e890:	81fb      	strh	r3, [r7, #14]
 800e892:	e025      	b.n	800e8e0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00b      	beq.n	800e8b2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e89a:	88fb      	ldrh	r3, [r7, #6]
 800e89c:	2bff      	cmp	r3, #255	@ 0xff
 800e89e:	d805      	bhi.n	800e8ac <ff_convert+0x30>
 800e8a0:	88fb      	ldrh	r3, [r7, #6]
 800e8a2:	3b80      	subs	r3, #128	@ 0x80
 800e8a4:	4a12      	ldr	r2, [pc, #72]	@ (800e8f0 <ff_convert+0x74>)
 800e8a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8aa:	e000      	b.n	800e8ae <ff_convert+0x32>
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	81fb      	strh	r3, [r7, #14]
 800e8b0:	e016      	b.n	800e8e0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	81fb      	strh	r3, [r7, #14]
 800e8b6:	e009      	b.n	800e8cc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e8b8:	89fb      	ldrh	r3, [r7, #14]
 800e8ba:	4a0d      	ldr	r2, [pc, #52]	@ (800e8f0 <ff_convert+0x74>)
 800e8bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8c0:	88fa      	ldrh	r2, [r7, #6]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d006      	beq.n	800e8d4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e8c6:	89fb      	ldrh	r3, [r7, #14]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	81fb      	strh	r3, [r7, #14]
 800e8cc:	89fb      	ldrh	r3, [r7, #14]
 800e8ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800e8d0:	d9f2      	bls.n	800e8b8 <ff_convert+0x3c>
 800e8d2:	e000      	b.n	800e8d6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e8d4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e8d6:	89fb      	ldrh	r3, [r7, #14]
 800e8d8:	3380      	adds	r3, #128	@ 0x80
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e8e0:	89fb      	ldrh	r3, [r7, #14]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3714      	adds	r7, #20
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	08015ca0 	.word	0x08015ca0

0800e8f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b087      	sub	sp, #28
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e8fe:	88fb      	ldrh	r3, [r7, #6]
 800e900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e904:	d201      	bcs.n	800e90a <ff_wtoupper+0x16>
 800e906:	4b3e      	ldr	r3, [pc, #248]	@ (800ea00 <ff_wtoupper+0x10c>)
 800e908:	e000      	b.n	800e90c <ff_wtoupper+0x18>
 800e90a:	4b3e      	ldr	r3, [pc, #248]	@ (800ea04 <ff_wtoupper+0x110>)
 800e90c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	1c9a      	adds	r2, r3, #2
 800e912:	617a      	str	r2, [r7, #20]
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e918:	8a7b      	ldrh	r3, [r7, #18]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d068      	beq.n	800e9f0 <ff_wtoupper+0xfc>
 800e91e:	88fa      	ldrh	r2, [r7, #6]
 800e920:	8a7b      	ldrh	r3, [r7, #18]
 800e922:	429a      	cmp	r2, r3
 800e924:	d364      	bcc.n	800e9f0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	1c9a      	adds	r2, r3, #2
 800e92a:	617a      	str	r2, [r7, #20]
 800e92c:	881b      	ldrh	r3, [r3, #0]
 800e92e:	823b      	strh	r3, [r7, #16]
 800e930:	8a3b      	ldrh	r3, [r7, #16]
 800e932:	0a1b      	lsrs	r3, r3, #8
 800e934:	81fb      	strh	r3, [r7, #14]
 800e936:	8a3b      	ldrh	r3, [r7, #16]
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e93c:	88fa      	ldrh	r2, [r7, #6]
 800e93e:	8a79      	ldrh	r1, [r7, #18]
 800e940:	8a3b      	ldrh	r3, [r7, #16]
 800e942:	440b      	add	r3, r1
 800e944:	429a      	cmp	r2, r3
 800e946:	da49      	bge.n	800e9dc <ff_wtoupper+0xe8>
			switch (cmd) {
 800e948:	89fb      	ldrh	r3, [r7, #14]
 800e94a:	2b08      	cmp	r3, #8
 800e94c:	d84f      	bhi.n	800e9ee <ff_wtoupper+0xfa>
 800e94e:	a201      	add	r2, pc, #4	@ (adr r2, 800e954 <ff_wtoupper+0x60>)
 800e950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e954:	0800e979 	.word	0x0800e979
 800e958:	0800e98b 	.word	0x0800e98b
 800e95c:	0800e9a1 	.word	0x0800e9a1
 800e960:	0800e9a9 	.word	0x0800e9a9
 800e964:	0800e9b1 	.word	0x0800e9b1
 800e968:	0800e9b9 	.word	0x0800e9b9
 800e96c:	0800e9c1 	.word	0x0800e9c1
 800e970:	0800e9c9 	.word	0x0800e9c9
 800e974:	0800e9d1 	.word	0x0800e9d1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e978:	88fa      	ldrh	r2, [r7, #6]
 800e97a:	8a7b      	ldrh	r3, [r7, #18]
 800e97c:	1ad3      	subs	r3, r2, r3
 800e97e:	005b      	lsls	r3, r3, #1
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	4413      	add	r3, r2
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	80fb      	strh	r3, [r7, #6]
 800e988:	e027      	b.n	800e9da <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e98a:	88fa      	ldrh	r2, [r7, #6]
 800e98c:	8a7b      	ldrh	r3, [r7, #18]
 800e98e:	1ad3      	subs	r3, r2, r3
 800e990:	b29b      	uxth	r3, r3
 800e992:	f003 0301 	and.w	r3, r3, #1
 800e996:	b29b      	uxth	r3, r3
 800e998:	88fa      	ldrh	r2, [r7, #6]
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	80fb      	strh	r3, [r7, #6]
 800e99e:	e01c      	b.n	800e9da <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e9a0:	88fb      	ldrh	r3, [r7, #6]
 800e9a2:	3b10      	subs	r3, #16
 800e9a4:	80fb      	strh	r3, [r7, #6]
 800e9a6:	e018      	b.n	800e9da <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e9a8:	88fb      	ldrh	r3, [r7, #6]
 800e9aa:	3b20      	subs	r3, #32
 800e9ac:	80fb      	strh	r3, [r7, #6]
 800e9ae:	e014      	b.n	800e9da <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e9b0:	88fb      	ldrh	r3, [r7, #6]
 800e9b2:	3b30      	subs	r3, #48	@ 0x30
 800e9b4:	80fb      	strh	r3, [r7, #6]
 800e9b6:	e010      	b.n	800e9da <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e9b8:	88fb      	ldrh	r3, [r7, #6]
 800e9ba:	3b1a      	subs	r3, #26
 800e9bc:	80fb      	strh	r3, [r7, #6]
 800e9be:	e00c      	b.n	800e9da <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e9c0:	88fb      	ldrh	r3, [r7, #6]
 800e9c2:	3308      	adds	r3, #8
 800e9c4:	80fb      	strh	r3, [r7, #6]
 800e9c6:	e008      	b.n	800e9da <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e9c8:	88fb      	ldrh	r3, [r7, #6]
 800e9ca:	3b50      	subs	r3, #80	@ 0x50
 800e9cc:	80fb      	strh	r3, [r7, #6]
 800e9ce:	e004      	b.n	800e9da <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e9d0:	88fb      	ldrh	r3, [r7, #6]
 800e9d2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800e9d6:	80fb      	strh	r3, [r7, #6]
 800e9d8:	bf00      	nop
			}
			break;
 800e9da:	e008      	b.n	800e9ee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e9dc:	89fb      	ldrh	r3, [r7, #14]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d195      	bne.n	800e90e <ff_wtoupper+0x1a>
 800e9e2:	8a3b      	ldrh	r3, [r7, #16]
 800e9e4:	005b      	lsls	r3, r3, #1
 800e9e6:	697a      	ldr	r2, [r7, #20]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e9ec:	e78f      	b.n	800e90e <ff_wtoupper+0x1a>
			break;
 800e9ee:	bf00      	nop
	}

	return chr;
 800e9f0:	88fb      	ldrh	r3, [r7, #6]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	371c      	adds	r7, #28
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	08015da0 	.word	0x08015da0
 800ea04:	08015f94 	.word	0x08015f94

0800ea08 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	4603      	mov	r3, r0
 800ea10:	6039      	str	r1, [r7, #0]
 800ea12:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800ea14:	2200      	movs	r2, #0
 800ea16:	2101      	movs	r1, #1
 800ea18:	2001      	movs	r0, #1
 800ea1a:	f000 f9c1 	bl	800eda0 <osSemaphoreNew>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	bf14      	ite	ne
 800ea2c:	2301      	movne	r3, #1
 800ea2e:	2300      	moveq	r3, #0
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	60fb      	str	r3, [r7, #12]

    return ret;
 800ea34:	68fb      	ldr	r3, [r7, #12]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b082      	sub	sp, #8
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 faca 	bl	800efe0 <osSemaphoreDelete>
#endif
    return 1;
 800ea4c:	2301      	movs	r3, #1
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b084      	sub	sp, #16
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800ea62:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 fa24 	bl	800eeb4 <osSemaphoreAcquire>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d101      	bne.n	800ea76 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800ea72:	2301      	movs	r3, #1
 800ea74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ea76:	68fb      	ldr	r3, [r7, #12]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 fa65 	bl	800ef58 <osSemaphoreRelease>
#endif
}
 800ea8e:	bf00      	nop
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
	...

0800ea98 <__NVIC_SetPriority>:
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	6039      	str	r1, [r7, #0]
 800eaa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eaa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	db0a      	blt.n	800eac2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	b2da      	uxtb	r2, r3
 800eab0:	490c      	ldr	r1, [pc, #48]	@ (800eae4 <__NVIC_SetPriority+0x4c>)
 800eab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eab6:	0112      	lsls	r2, r2, #4
 800eab8:	b2d2      	uxtb	r2, r2
 800eaba:	440b      	add	r3, r1
 800eabc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800eac0:	e00a      	b.n	800ead8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	4908      	ldr	r1, [pc, #32]	@ (800eae8 <__NVIC_SetPriority+0x50>)
 800eac8:	79fb      	ldrb	r3, [r7, #7]
 800eaca:	f003 030f 	and.w	r3, r3, #15
 800eace:	3b04      	subs	r3, #4
 800ead0:	0112      	lsls	r2, r2, #4
 800ead2:	b2d2      	uxtb	r2, r2
 800ead4:	440b      	add	r3, r1
 800ead6:	761a      	strb	r2, [r3, #24]
}
 800ead8:	bf00      	nop
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr
 800eae4:	e000e100 	.word	0xe000e100
 800eae8:	e000ed00 	.word	0xe000ed00

0800eaec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800eaec:	b580      	push	{r7, lr}
 800eaee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800eaf0:	4b05      	ldr	r3, [pc, #20]	@ (800eb08 <SysTick_Handler+0x1c>)
 800eaf2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800eaf4:	f002 fb92 	bl	801121c <xTaskGetSchedulerState>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d001      	beq.n	800eb02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800eafe:	f003 fa8b 	bl	8012018 <xPortSysTickHandler>
  }
}
 800eb02:	bf00      	nop
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	e000e010 	.word	0xe000e010

0800eb0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800eb10:	2100      	movs	r1, #0
 800eb12:	f06f 0004 	mvn.w	r0, #4
 800eb16:	f7ff ffbf 	bl	800ea98 <__NVIC_SetPriority>
#endif
}
 800eb1a:	bf00      	nop
 800eb1c:	bd80      	pop	{r7, pc}
	...

0800eb20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb26:	f3ef 8305 	mrs	r3, IPSR
 800eb2a:	603b      	str	r3, [r7, #0]
  return(result);
 800eb2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d003      	beq.n	800eb3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800eb32:	f06f 0305 	mvn.w	r3, #5
 800eb36:	607b      	str	r3, [r7, #4]
 800eb38:	e00c      	b.n	800eb54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800eb3a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb64 <osKernelInitialize+0x44>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d105      	bne.n	800eb4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800eb42:	4b08      	ldr	r3, [pc, #32]	@ (800eb64 <osKernelInitialize+0x44>)
 800eb44:	2201      	movs	r2, #1
 800eb46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	607b      	str	r3, [r7, #4]
 800eb4c:	e002      	b.n	800eb54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800eb4e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eb54:	687b      	ldr	r3, [r7, #4]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	370c      	adds	r7, #12
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	200000e8 	.word	0x200000e8

0800eb68 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800eb6e:	f002 fb55 	bl	801121c <xTaskGetSchedulerState>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d004      	beq.n	800eb82 <osKernelGetState+0x1a>
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	d105      	bne.n	800eb88 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800eb7c:	2302      	movs	r3, #2
 800eb7e:	607b      	str	r3, [r7, #4]
      break;
 800eb80:	e00c      	b.n	800eb9c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800eb82:	2303      	movs	r3, #3
 800eb84:	607b      	str	r3, [r7, #4]
      break;
 800eb86:	e009      	b.n	800eb9c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800eb88:	4b07      	ldr	r3, [pc, #28]	@ (800eba8 <osKernelGetState+0x40>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d102      	bne.n	800eb96 <osKernelGetState+0x2e>
        state = osKernelReady;
 800eb90:	2301      	movs	r3, #1
 800eb92:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800eb94:	e001      	b.n	800eb9a <osKernelGetState+0x32>
        state = osKernelInactive;
 800eb96:	2300      	movs	r3, #0
 800eb98:	607b      	str	r3, [r7, #4]
      break;
 800eb9a:	bf00      	nop
  }

  return (state);
 800eb9c:	687b      	ldr	r3, [r7, #4]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	200000e8 	.word	0x200000e8

0800ebac <osKernelStart>:

osStatus_t osKernelStart (void) {
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebb2:	f3ef 8305 	mrs	r3, IPSR
 800ebb6:	603b      	str	r3, [r7, #0]
  return(result);
 800ebb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d003      	beq.n	800ebc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ebbe:	f06f 0305 	mvn.w	r3, #5
 800ebc2:	607b      	str	r3, [r7, #4]
 800ebc4:	e010      	b.n	800ebe8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ebc6:	4b0b      	ldr	r3, [pc, #44]	@ (800ebf4 <osKernelStart+0x48>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d109      	bne.n	800ebe2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ebce:	f7ff ff9d 	bl	800eb0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ebd2:	4b08      	ldr	r3, [pc, #32]	@ (800ebf4 <osKernelStart+0x48>)
 800ebd4:	2202      	movs	r2, #2
 800ebd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ebd8:	f001 feaa 	bl	8010930 <vTaskStartScheduler>
      stat = osOK;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	607b      	str	r3, [r7, #4]
 800ebe0:	e002      	b.n	800ebe8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ebe2:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ebe8:	687b      	ldr	r3, [r7, #4]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	200000e8 	.word	0x200000e8

0800ebf8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebfe:	f3ef 8305 	mrs	r3, IPSR
 800ec02:	603b      	str	r3, [r7, #0]
  return(result);
 800ec04:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d003      	beq.n	800ec12 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ec0a:	f001 ffbd 	bl	8010b88 <xTaskGetTickCountFromISR>
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	e002      	b.n	800ec18 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ec12:	f001 ffa9 	bl	8010b68 <xTaskGetTickCount>
 800ec16:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ec18:	687b      	ldr	r3, [r7, #4]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b08e      	sub	sp, #56	@ 0x38
 800ec26:	af04      	add	r7, sp, #16
 800ec28:	60f8      	str	r0, [r7, #12]
 800ec2a:	60b9      	str	r1, [r7, #8]
 800ec2c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec32:	f3ef 8305 	mrs	r3, IPSR
 800ec36:	617b      	str	r3, [r7, #20]
  return(result);
 800ec38:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d17e      	bne.n	800ed3c <osThreadNew+0x11a>
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d07b      	beq.n	800ed3c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ec44:	2380      	movs	r3, #128	@ 0x80
 800ec46:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ec48:	2318      	movs	r3, #24
 800ec4a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ec50:	f04f 33ff 	mov.w	r3, #4294967295
 800ec54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d045      	beq.n	800ece8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d002      	beq.n	800ec6a <osThreadNew+0x48>
        name = attr->name;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	699b      	ldr	r3, [r3, #24]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d002      	beq.n	800ec78 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	699b      	ldr	r3, [r3, #24]
 800ec76:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d008      	beq.n	800ec90 <osThreadNew+0x6e>
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	2b38      	cmp	r3, #56	@ 0x38
 800ec82:	d805      	bhi.n	800ec90 <osThreadNew+0x6e>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	f003 0301 	and.w	r3, r3, #1
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <osThreadNew+0x72>
        return (NULL);
 800ec90:	2300      	movs	r3, #0
 800ec92:	e054      	b.n	800ed3e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	695b      	ldr	r3, [r3, #20]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d003      	beq.n	800eca4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	695b      	ldr	r3, [r3, #20]
 800eca0:	089b      	lsrs	r3, r3, #2
 800eca2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00e      	beq.n	800ecca <osThreadNew+0xa8>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	2ba7      	cmp	r3, #167	@ 0xa7
 800ecb2:	d90a      	bls.n	800ecca <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d006      	beq.n	800ecca <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	695b      	ldr	r3, [r3, #20]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d002      	beq.n	800ecca <osThreadNew+0xa8>
        mem = 1;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	61bb      	str	r3, [r7, #24]
 800ecc8:	e010      	b.n	800ecec <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d10c      	bne.n	800ecec <osThreadNew+0xca>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d108      	bne.n	800ecec <osThreadNew+0xca>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	691b      	ldr	r3, [r3, #16]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d104      	bne.n	800ecec <osThreadNew+0xca>
          mem = 0;
 800ece2:	2300      	movs	r3, #0
 800ece4:	61bb      	str	r3, [r7, #24]
 800ece6:	e001      	b.n	800ecec <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ece8:	2300      	movs	r3, #0
 800ecea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d110      	bne.n	800ed14 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ecfa:	9202      	str	r2, [sp, #8]
 800ecfc:	9301      	str	r3, [sp, #4]
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	9300      	str	r3, [sp, #0]
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	6a3a      	ldr	r2, [r7, #32]
 800ed06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f001 fbd3 	bl	80104b4 <xTaskCreateStatic>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	613b      	str	r3, [r7, #16]
 800ed12:	e013      	b.n	800ed3c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d110      	bne.n	800ed3c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ed1a:	6a3b      	ldr	r3, [r7, #32]
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	f107 0310 	add.w	r3, r7, #16
 800ed22:	9301      	str	r3, [sp, #4]
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	9300      	str	r3, [sp, #0]
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ed2c:	68f8      	ldr	r0, [r7, #12]
 800ed2e:	f001 fc21 	bl	8010574 <xTaskCreate>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d001      	beq.n	800ed3c <osThreadNew+0x11a>
            hTask = NULL;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ed3c:	693b      	ldr	r3, [r7, #16]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3728      	adds	r7, #40	@ 0x28
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b086      	sub	sp, #24
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed4e:	f3ef 8305 	mrs	r3, IPSR
 800ed52:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed54:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d003      	beq.n	800ed62 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ed5a:	f06f 0305 	mvn.w	r3, #5
 800ed5e:	617b      	str	r3, [r7, #20]
 800ed60:	e019      	b.n	800ed96 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800ed62:	2300      	movs	r3, #0
 800ed64:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800ed66:	f001 feff 	bl	8010b68 <xTaskGetTickCount>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d009      	beq.n	800ed90 <osDelayUntil+0x4a>
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	db06      	blt.n	800ed90 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800ed82:	f107 0308 	add.w	r3, r7, #8
 800ed86:	6939      	ldr	r1, [r7, #16]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f001 fd51 	bl	8010830 <vTaskDelayUntil>
 800ed8e:	e002      	b.n	800ed96 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ed90:	f06f 0303 	mvn.w	r3, #3
 800ed94:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ed96:	697b      	ldr	r3, [r7, #20]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3718      	adds	r7, #24
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b08a      	sub	sp, #40	@ 0x28
 800eda4:	af02      	add	r7, sp, #8
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800edac:	2300      	movs	r3, #0
 800edae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edb0:	f3ef 8305 	mrs	r3, IPSR
 800edb4:	613b      	str	r3, [r7, #16]
  return(result);
 800edb6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d175      	bne.n	800eea8 <osSemaphoreNew+0x108>
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d072      	beq.n	800eea8 <osSemaphoreNew+0x108>
 800edc2:	68ba      	ldr	r2, [r7, #8]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d86e      	bhi.n	800eea8 <osSemaphoreNew+0x108>
    mem = -1;
 800edca:	f04f 33ff 	mov.w	r3, #4294967295
 800edce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d015      	beq.n	800ee02 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d006      	beq.n	800edec <osSemaphoreNew+0x4c>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	2b4f      	cmp	r3, #79	@ 0x4f
 800ede4:	d902      	bls.n	800edec <osSemaphoreNew+0x4c>
        mem = 1;
 800ede6:	2301      	movs	r3, #1
 800ede8:	61bb      	str	r3, [r7, #24]
 800edea:	e00c      	b.n	800ee06 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d108      	bne.n	800ee06 <osSemaphoreNew+0x66>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d104      	bne.n	800ee06 <osSemaphoreNew+0x66>
          mem = 0;
 800edfc:	2300      	movs	r3, #0
 800edfe:	61bb      	str	r3, [r7, #24]
 800ee00:	e001      	b.n	800ee06 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee0c:	d04c      	beq.n	800eea8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d128      	bne.n	800ee66 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d10a      	bne.n	800ee30 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	2203      	movs	r2, #3
 800ee20:	9200      	str	r2, [sp, #0]
 800ee22:	2200      	movs	r2, #0
 800ee24:	2100      	movs	r1, #0
 800ee26:	2001      	movs	r0, #1
 800ee28:	f000 fb82 	bl	800f530 <xQueueGenericCreateStatic>
 800ee2c:	61f8      	str	r0, [r7, #28]
 800ee2e:	e005      	b.n	800ee3c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ee30:	2203      	movs	r2, #3
 800ee32:	2100      	movs	r1, #0
 800ee34:	2001      	movs	r0, #1
 800ee36:	f000 fbf8 	bl	800f62a <xQueueGenericCreate>
 800ee3a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d022      	beq.n	800ee88 <osSemaphoreNew+0xe8>
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d01f      	beq.n	800ee88 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ee48:	2300      	movs	r3, #0
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	2100      	movs	r1, #0
 800ee4e:	69f8      	ldr	r0, [r7, #28]
 800ee50:	f000 fcb8 	bl	800f7c4 <xQueueGenericSend>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	d016      	beq.n	800ee88 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ee5a:	69f8      	ldr	r0, [r7, #28]
 800ee5c:	f001 f956 	bl	801010c <vQueueDelete>
            hSemaphore = NULL;
 800ee60:	2300      	movs	r3, #0
 800ee62:	61fb      	str	r3, [r7, #28]
 800ee64:	e010      	b.n	800ee88 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d108      	bne.n	800ee7e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	461a      	mov	r2, r3
 800ee72:	68b9      	ldr	r1, [r7, #8]
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f000 fc36 	bl	800f6e6 <xQueueCreateCountingSemaphoreStatic>
 800ee7a:	61f8      	str	r0, [r7, #28]
 800ee7c:	e004      	b.n	800ee88 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ee7e:	68b9      	ldr	r1, [r7, #8]
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f000 fc69 	bl	800f758 <xQueueCreateCountingSemaphore>
 800ee86:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00c      	beq.n	800eea8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d003      	beq.n	800ee9c <osSemaphoreNew+0xfc>
          name = attr->name;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	617b      	str	r3, [r7, #20]
 800ee9a:	e001      	b.n	800eea0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800eea0:	6979      	ldr	r1, [r7, #20]
 800eea2:	69f8      	ldr	r0, [r7, #28]
 800eea4:	f001 fa7e 	bl	80103a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800eea8:	69fb      	ldr	r3, [r7, #28]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3720      	adds	r7, #32
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
	...

0800eeb4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b086      	sub	sp, #24
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d103      	bne.n	800eed4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800eecc:	f06f 0303 	mvn.w	r3, #3
 800eed0:	617b      	str	r3, [r7, #20]
 800eed2:	e039      	b.n	800ef48 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eed4:	f3ef 8305 	mrs	r3, IPSR
 800eed8:	60fb      	str	r3, [r7, #12]
  return(result);
 800eeda:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d022      	beq.n	800ef26 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d003      	beq.n	800eeee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800eee6:	f06f 0303 	mvn.w	r3, #3
 800eeea:	617b      	str	r3, [r7, #20]
 800eeec:	e02c      	b.n	800ef48 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800eeee:	2300      	movs	r3, #0
 800eef0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800eef2:	f107 0308 	add.w	r3, r7, #8
 800eef6:	461a      	mov	r2, r3
 800eef8:	2100      	movs	r1, #0
 800eefa:	6938      	ldr	r0, [r7, #16]
 800eefc:	f001 f884 	bl	8010008 <xQueueReceiveFromISR>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	d003      	beq.n	800ef0e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ef06:	f06f 0302 	mvn.w	r3, #2
 800ef0a:	617b      	str	r3, [r7, #20]
 800ef0c:	e01c      	b.n	800ef48 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d019      	beq.n	800ef48 <osSemaphoreAcquire+0x94>
 800ef14:	4b0f      	ldr	r3, [pc, #60]	@ (800ef54 <osSemaphoreAcquire+0xa0>)
 800ef16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef1a:	601a      	str	r2, [r3, #0]
 800ef1c:	f3bf 8f4f 	dsb	sy
 800ef20:	f3bf 8f6f 	isb	sy
 800ef24:	e010      	b.n	800ef48 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ef26:	6839      	ldr	r1, [r7, #0]
 800ef28:	6938      	ldr	r0, [r7, #16]
 800ef2a:	f000 ff5d 	bl	800fde8 <xQueueSemaphoreTake>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d009      	beq.n	800ef48 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d003      	beq.n	800ef42 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ef3a:	f06f 0301 	mvn.w	r3, #1
 800ef3e:	617b      	str	r3, [r7, #20]
 800ef40:	e002      	b.n	800ef48 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ef42:	f06f 0302 	mvn.w	r3, #2
 800ef46:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ef48:	697b      	ldr	r3, [r7, #20]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	e000ed04 	.word	0xe000ed04

0800ef58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b086      	sub	sp, #24
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ef64:	2300      	movs	r3, #0
 800ef66:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d103      	bne.n	800ef76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ef6e:	f06f 0303 	mvn.w	r3, #3
 800ef72:	617b      	str	r3, [r7, #20]
 800ef74:	e02c      	b.n	800efd0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef76:	f3ef 8305 	mrs	r3, IPSR
 800ef7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d01a      	beq.n	800efb8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ef82:	2300      	movs	r3, #0
 800ef84:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ef86:	f107 0308 	add.w	r3, r7, #8
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	6938      	ldr	r0, [r7, #16]
 800ef8e:	f000 fdb9 	bl	800fb04 <xQueueGiveFromISR>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d003      	beq.n	800efa0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ef98:	f06f 0302 	mvn.w	r3, #2
 800ef9c:	617b      	str	r3, [r7, #20]
 800ef9e:	e017      	b.n	800efd0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d014      	beq.n	800efd0 <osSemaphoreRelease+0x78>
 800efa6:	4b0d      	ldr	r3, [pc, #52]	@ (800efdc <osSemaphoreRelease+0x84>)
 800efa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	f3bf 8f4f 	dsb	sy
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	e00b      	b.n	800efd0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800efb8:	2300      	movs	r3, #0
 800efba:	2200      	movs	r2, #0
 800efbc:	2100      	movs	r1, #0
 800efbe:	6938      	ldr	r0, [r7, #16]
 800efc0:	f000 fc00 	bl	800f7c4 <xQueueGenericSend>
 800efc4:	4603      	mov	r3, r0
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d002      	beq.n	800efd0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800efca:	f06f 0302 	mvn.w	r3, #2
 800efce:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800efd0:	697b      	ldr	r3, [r7, #20]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3718      	adds	r7, #24
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	e000ed04 	.word	0xe000ed04

0800efe0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b086      	sub	sp, #24
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efec:	f3ef 8305 	mrs	r3, IPSR
 800eff0:	60fb      	str	r3, [r7, #12]
  return(result);
 800eff2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d003      	beq.n	800f000 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800eff8:	f06f 0305 	mvn.w	r3, #5
 800effc:	617b      	str	r3, [r7, #20]
 800effe:	e00e      	b.n	800f01e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d103      	bne.n	800f00e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f006:	f06f 0303 	mvn.w	r3, #3
 800f00a:	617b      	str	r3, [r7, #20]
 800f00c:	e007      	b.n	800f01e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f00e:	6938      	ldr	r0, [r7, #16]
 800f010:	f001 f9f2 	bl	80103f8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f014:	2300      	movs	r3, #0
 800f016:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800f018:	6938      	ldr	r0, [r7, #16]
 800f01a:	f001 f877 	bl	801010c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f01e:	697b      	ldr	r3, [r7, #20]
}
 800f020:	4618      	mov	r0, r3
 800f022:	3718      	adds	r7, #24
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f028:	b580      	push	{r7, lr}
 800f02a:	b08a      	sub	sp, #40	@ 0x28
 800f02c:	af02      	add	r7, sp, #8
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f034:	2300      	movs	r3, #0
 800f036:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f038:	f3ef 8305 	mrs	r3, IPSR
 800f03c:	613b      	str	r3, [r7, #16]
  return(result);
 800f03e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f040:	2b00      	cmp	r3, #0
 800f042:	d15f      	bne.n	800f104 <osMessageQueueNew+0xdc>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d05c      	beq.n	800f104 <osMessageQueueNew+0xdc>
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d059      	beq.n	800f104 <osMessageQueueNew+0xdc>
    mem = -1;
 800f050:	f04f 33ff 	mov.w	r3, #4294967295
 800f054:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d029      	beq.n	800f0b0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d012      	beq.n	800f08a <osMessageQueueNew+0x62>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	2b4f      	cmp	r3, #79	@ 0x4f
 800f06a:	d90e      	bls.n	800f08a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f070:	2b00      	cmp	r3, #0
 800f072:	d00a      	beq.n	800f08a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	695a      	ldr	r2, [r3, #20]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	68b9      	ldr	r1, [r7, #8]
 800f07c:	fb01 f303 	mul.w	r3, r1, r3
 800f080:	429a      	cmp	r2, r3
 800f082:	d302      	bcc.n	800f08a <osMessageQueueNew+0x62>
        mem = 1;
 800f084:	2301      	movs	r3, #1
 800f086:	61bb      	str	r3, [r7, #24]
 800f088:	e014      	b.n	800f0b4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d110      	bne.n	800f0b4 <osMessageQueueNew+0x8c>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d10c      	bne.n	800f0b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d108      	bne.n	800f0b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d104      	bne.n	800f0b4 <osMessageQueueNew+0x8c>
          mem = 0;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	61bb      	str	r3, [r7, #24]
 800f0ae:	e001      	b.n	800f0b4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d10b      	bne.n	800f0d2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	691a      	ldr	r2, [r3, #16]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	689b      	ldr	r3, [r3, #8]
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	9100      	str	r1, [sp, #0]
 800f0c6:	68b9      	ldr	r1, [r7, #8]
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f000 fa31 	bl	800f530 <xQueueGenericCreateStatic>
 800f0ce:	61f8      	str	r0, [r7, #28]
 800f0d0:	e008      	b.n	800f0e4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d105      	bne.n	800f0e4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f0d8:	2200      	movs	r2, #0
 800f0da:	68b9      	ldr	r1, [r7, #8]
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f000 faa4 	bl	800f62a <xQueueGenericCreate>
 800f0e2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00c      	beq.n	800f104 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d003      	beq.n	800f0f8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	617b      	str	r3, [r7, #20]
 800f0f6:	e001      	b.n	800f0fc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f0fc:	6979      	ldr	r1, [r7, #20]
 800f0fe:	69f8      	ldr	r0, [r7, #28]
 800f100:	f001 f950 	bl	80103a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f104:	69fb      	ldr	r3, [r7, #28]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3720      	adds	r7, #32
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
	...

0800f110 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f110:	b580      	push	{r7, lr}
 800f112:	b088      	sub	sp, #32
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	603b      	str	r3, [r7, #0]
 800f11c:	4613      	mov	r3, r2
 800f11e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f124:	2300      	movs	r3, #0
 800f126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f128:	f3ef 8305 	mrs	r3, IPSR
 800f12c:	617b      	str	r3, [r7, #20]
  return(result);
 800f12e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f130:	2b00      	cmp	r3, #0
 800f132:	d028      	beq.n	800f186 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d005      	beq.n	800f146 <osMessageQueuePut+0x36>
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d002      	beq.n	800f146 <osMessageQueuePut+0x36>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d003      	beq.n	800f14e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f146:	f06f 0303 	mvn.w	r3, #3
 800f14a:	61fb      	str	r3, [r7, #28]
 800f14c:	e038      	b.n	800f1c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f14e:	2300      	movs	r3, #0
 800f150:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f152:	f107 0210 	add.w	r2, r7, #16
 800f156:	2300      	movs	r3, #0
 800f158:	68b9      	ldr	r1, [r7, #8]
 800f15a:	69b8      	ldr	r0, [r7, #24]
 800f15c:	f000 fc34 	bl	800f9c8 <xQueueGenericSendFromISR>
 800f160:	4603      	mov	r3, r0
 800f162:	2b01      	cmp	r3, #1
 800f164:	d003      	beq.n	800f16e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f166:	f06f 0302 	mvn.w	r3, #2
 800f16a:	61fb      	str	r3, [r7, #28]
 800f16c:	e028      	b.n	800f1c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d025      	beq.n	800f1c0 <osMessageQueuePut+0xb0>
 800f174:	4b15      	ldr	r3, [pc, #84]	@ (800f1cc <osMessageQueuePut+0xbc>)
 800f176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f17a:	601a      	str	r2, [r3, #0]
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	f3bf 8f6f 	isb	sy
 800f184:	e01c      	b.n	800f1c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f186:	69bb      	ldr	r3, [r7, #24]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d002      	beq.n	800f192 <osMessageQueuePut+0x82>
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d103      	bne.n	800f19a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f192:	f06f 0303 	mvn.w	r3, #3
 800f196:	61fb      	str	r3, [r7, #28]
 800f198:	e012      	b.n	800f1c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f19a:	2300      	movs	r3, #0
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	68b9      	ldr	r1, [r7, #8]
 800f1a0:	69b8      	ldr	r0, [r7, #24]
 800f1a2:	f000 fb0f 	bl	800f7c4 <xQueueGenericSend>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d009      	beq.n	800f1c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d003      	beq.n	800f1ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f1b2:	f06f 0301 	mvn.w	r3, #1
 800f1b6:	61fb      	str	r3, [r7, #28]
 800f1b8:	e002      	b.n	800f1c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f1ba:	f06f 0302 	mvn.w	r3, #2
 800f1be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f1c0:	69fb      	ldr	r3, [r7, #28]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3720      	adds	r7, #32
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	e000ed04 	.word	0xe000ed04

0800f1d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b088      	sub	sp, #32
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
 800f1dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1e6:	f3ef 8305 	mrs	r3, IPSR
 800f1ea:	617b      	str	r3, [r7, #20]
  return(result);
 800f1ec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d028      	beq.n	800f244 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d005      	beq.n	800f204 <osMessageQueueGet+0x34>
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d002      	beq.n	800f204 <osMessageQueueGet+0x34>
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d003      	beq.n	800f20c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f204:	f06f 0303 	mvn.w	r3, #3
 800f208:	61fb      	str	r3, [r7, #28]
 800f20a:	e037      	b.n	800f27c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f20c:	2300      	movs	r3, #0
 800f20e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f210:	f107 0310 	add.w	r3, r7, #16
 800f214:	461a      	mov	r2, r3
 800f216:	68b9      	ldr	r1, [r7, #8]
 800f218:	69b8      	ldr	r0, [r7, #24]
 800f21a:	f000 fef5 	bl	8010008 <xQueueReceiveFromISR>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b01      	cmp	r3, #1
 800f222:	d003      	beq.n	800f22c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f224:	f06f 0302 	mvn.w	r3, #2
 800f228:	61fb      	str	r3, [r7, #28]
 800f22a:	e027      	b.n	800f27c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d024      	beq.n	800f27c <osMessageQueueGet+0xac>
 800f232:	4b15      	ldr	r3, [pc, #84]	@ (800f288 <osMessageQueueGet+0xb8>)
 800f234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f238:	601a      	str	r2, [r3, #0]
 800f23a:	f3bf 8f4f 	dsb	sy
 800f23e:	f3bf 8f6f 	isb	sy
 800f242:	e01b      	b.n	800f27c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d002      	beq.n	800f250 <osMessageQueueGet+0x80>
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d103      	bne.n	800f258 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f250:	f06f 0303 	mvn.w	r3, #3
 800f254:	61fb      	str	r3, [r7, #28]
 800f256:	e011      	b.n	800f27c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f258:	683a      	ldr	r2, [r7, #0]
 800f25a:	68b9      	ldr	r1, [r7, #8]
 800f25c:	69b8      	ldr	r0, [r7, #24]
 800f25e:	f000 fce1 	bl	800fc24 <xQueueReceive>
 800f262:	4603      	mov	r3, r0
 800f264:	2b01      	cmp	r3, #1
 800f266:	d009      	beq.n	800f27c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d003      	beq.n	800f276 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f26e:	f06f 0301 	mvn.w	r3, #1
 800f272:	61fb      	str	r3, [r7, #28]
 800f274:	e002      	b.n	800f27c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f276:	f06f 0302 	mvn.w	r3, #2
 800f27a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f27c:	69fb      	ldr	r3, [r7, #28]
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3720      	adds	r7, #32
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	e000ed04 	.word	0xe000ed04

0800f28c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f28c:	b480      	push	{r7}
 800f28e:	b085      	sub	sp, #20
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	4a07      	ldr	r2, [pc, #28]	@ (800f2b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f29c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	4a06      	ldr	r2, [pc, #24]	@ (800f2bc <vApplicationGetIdleTaskMemory+0x30>)
 800f2a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2280      	movs	r2, #128	@ 0x80
 800f2a8:	601a      	str	r2, [r3, #0]
}
 800f2aa:	bf00      	nop
 800f2ac:	3714      	adds	r7, #20
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	200000ec 	.word	0x200000ec
 800f2bc:	20000194 	.word	0x20000194

0800f2c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	4a07      	ldr	r2, [pc, #28]	@ (800f2ec <vApplicationGetTimerTaskMemory+0x2c>)
 800f2d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	4a06      	ldr	r2, [pc, #24]	@ (800f2f0 <vApplicationGetTimerTaskMemory+0x30>)
 800f2d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f2de:	601a      	str	r2, [r3, #0]
}
 800f2e0:	bf00      	nop
 800f2e2:	3714      	adds	r7, #20
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr
 800f2ec:	20000394 	.word	0x20000394
 800f2f0:	2000043c 	.word	0x2000043c

0800f2f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f103 0208 	add.w	r2, r3, #8
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f04f 32ff 	mov.w	r2, #4294967295
 800f30c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f103 0208 	add.w	r2, r3, #8
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f103 0208 	add.w	r2, r3, #8
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2200      	movs	r2, #0
 800f326:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f328:	bf00      	nop
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr

0800f334 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f342:	bf00      	nop
 800f344:	370c      	adds	r7, #12
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr

0800f34e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f34e:	b480      	push	{r7}
 800f350:	b085      	sub	sp, #20
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
 800f356:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	689a      	ldr	r2, [r3, #8]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	683a      	ldr	r2, [r7, #0]
 800f372:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	1c5a      	adds	r2, r3, #1
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	601a      	str	r2, [r3, #0]
}
 800f38a:	bf00      	nop
 800f38c:	3714      	adds	r7, #20
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr

0800f396 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f396:	b480      	push	{r7}
 800f398:	b085      	sub	sp, #20
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
 800f39e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ac:	d103      	bne.n	800f3b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	691b      	ldr	r3, [r3, #16]
 800f3b2:	60fb      	str	r3, [r7, #12]
 800f3b4:	e00c      	b.n	800f3d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	3308      	adds	r3, #8
 800f3ba:	60fb      	str	r3, [r7, #12]
 800f3bc:	e002      	b.n	800f3c4 <vListInsert+0x2e>
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	60fb      	str	r3, [r7, #12]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d2f6      	bcs.n	800f3be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	685a      	ldr	r2, [r3, #4]
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	683a      	ldr	r2, [r7, #0]
 800f3ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	1c5a      	adds	r2, r3, #1
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	601a      	str	r2, [r3, #0]
}
 800f3fc:	bf00      	nop
 800f3fe:	3714      	adds	r7, #20
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f408:	b480      	push	{r7}
 800f40a:	b085      	sub	sp, #20
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	691b      	ldr	r3, [r3, #16]
 800f414:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	6892      	ldr	r2, [r2, #8]
 800f41e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	6852      	ldr	r2, [r2, #4]
 800f428:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	429a      	cmp	r2, r3
 800f432:	d103      	bne.n	800f43c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	689a      	ldr	r2, [r3, #8]
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2200      	movs	r2, #0
 800f440:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	1e5a      	subs	r2, r3, #1
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
}
 800f450:	4618      	mov	r0, r3
 800f452:	3714      	adds	r7, #20
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d10b      	bne.n	800f488 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f474:	f383 8811 	msr	BASEPRI, r3
 800f478:	f3bf 8f6f 	isb	sy
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f482:	bf00      	nop
 800f484:	bf00      	nop
 800f486:	e7fd      	b.n	800f484 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f488:	f002 fd36 	bl	8011ef8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f494:	68f9      	ldr	r1, [r7, #12]
 800f496:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f498:	fb01 f303 	mul.w	r3, r1, r3
 800f49c:	441a      	add	r2, r3
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	68f9      	ldr	r1, [r7, #12]
 800f4bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f4be:	fb01 f303 	mul.w	r3, r1, r3
 800f4c2:	441a      	add	r2, r3
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	22ff      	movs	r2, #255	@ 0xff
 800f4cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	22ff      	movs	r2, #255	@ 0xff
 800f4d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d114      	bne.n	800f508 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	691b      	ldr	r3, [r3, #16]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d01a      	beq.n	800f51c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	3310      	adds	r3, #16
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f001 fcd0 	bl	8010e90 <xTaskRemoveFromEventList>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d012      	beq.n	800f51c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f52c <xQueueGenericReset+0xd0>)
 800f4f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4fc:	601a      	str	r2, [r3, #0]
 800f4fe:	f3bf 8f4f 	dsb	sy
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	e009      	b.n	800f51c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	3310      	adds	r3, #16
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7ff fef1 	bl	800f2f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	3324      	adds	r3, #36	@ 0x24
 800f516:	4618      	mov	r0, r3
 800f518:	f7ff feec 	bl	800f2f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f51c:	f002 fd1e 	bl	8011f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f520:	2301      	movs	r3, #1
}
 800f522:	4618      	mov	r0, r3
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	e000ed04 	.word	0xe000ed04

0800f530 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f530:	b580      	push	{r7, lr}
 800f532:	b08e      	sub	sp, #56	@ 0x38
 800f534:	af02      	add	r7, sp, #8
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	607a      	str	r2, [r7, #4]
 800f53c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d10b      	bne.n	800f55c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f548:	f383 8811 	msr	BASEPRI, r3
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f556:	bf00      	nop
 800f558:	bf00      	nop
 800f55a:	e7fd      	b.n	800f558 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d10b      	bne.n	800f57a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f566:	f383 8811 	msr	BASEPRI, r3
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f574:	bf00      	nop
 800f576:	bf00      	nop
 800f578:	e7fd      	b.n	800f576 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d002      	beq.n	800f586 <xQueueGenericCreateStatic+0x56>
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <xQueueGenericCreateStatic+0x5a>
 800f586:	2301      	movs	r3, #1
 800f588:	e000      	b.n	800f58c <xQueueGenericCreateStatic+0x5c>
 800f58a:	2300      	movs	r3, #0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10b      	bne.n	800f5a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f594:	f383 8811 	msr	BASEPRI, r3
 800f598:	f3bf 8f6f 	isb	sy
 800f59c:	f3bf 8f4f 	dsb	sy
 800f5a0:	623b      	str	r3, [r7, #32]
}
 800f5a2:	bf00      	nop
 800f5a4:	bf00      	nop
 800f5a6:	e7fd      	b.n	800f5a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d102      	bne.n	800f5b4 <xQueueGenericCreateStatic+0x84>
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d101      	bne.n	800f5b8 <xQueueGenericCreateStatic+0x88>
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e000      	b.n	800f5ba <xQueueGenericCreateStatic+0x8a>
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d10b      	bne.n	800f5d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c2:	f383 8811 	msr	BASEPRI, r3
 800f5c6:	f3bf 8f6f 	isb	sy
 800f5ca:	f3bf 8f4f 	dsb	sy
 800f5ce:	61fb      	str	r3, [r7, #28]
}
 800f5d0:	bf00      	nop
 800f5d2:	bf00      	nop
 800f5d4:	e7fd      	b.n	800f5d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f5d6:	2350      	movs	r3, #80	@ 0x50
 800f5d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	2b50      	cmp	r3, #80	@ 0x50
 800f5de:	d00b      	beq.n	800f5f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e4:	f383 8811 	msr	BASEPRI, r3
 800f5e8:	f3bf 8f6f 	isb	sy
 800f5ec:	f3bf 8f4f 	dsb	sy
 800f5f0:	61bb      	str	r3, [r7, #24]
}
 800f5f2:	bf00      	nop
 800f5f4:	bf00      	nop
 800f5f6:	e7fd      	b.n	800f5f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f5f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00d      	beq.n	800f620 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f606:	2201      	movs	r2, #1
 800f608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f60c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f612:	9300      	str	r3, [sp, #0]
 800f614:	4613      	mov	r3, r2
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	68b9      	ldr	r1, [r7, #8]
 800f61a:	68f8      	ldr	r0, [r7, #12]
 800f61c:	f000 f840 	bl	800f6a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f622:	4618      	mov	r0, r3
 800f624:	3730      	adds	r7, #48	@ 0x30
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b08a      	sub	sp, #40	@ 0x28
 800f62e:	af02      	add	r7, sp, #8
 800f630:	60f8      	str	r0, [r7, #12]
 800f632:	60b9      	str	r1, [r7, #8]
 800f634:	4613      	mov	r3, r2
 800f636:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d10b      	bne.n	800f656 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f642:	f383 8811 	msr	BASEPRI, r3
 800f646:	f3bf 8f6f 	isb	sy
 800f64a:	f3bf 8f4f 	dsb	sy
 800f64e:	613b      	str	r3, [r7, #16]
}
 800f650:	bf00      	nop
 800f652:	bf00      	nop
 800f654:	e7fd      	b.n	800f652 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	fb02 f303 	mul.w	r3, r2, r3
 800f65e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	3350      	adds	r3, #80	@ 0x50
 800f664:	4618      	mov	r0, r3
 800f666:	f002 fd69 	bl	801213c <pvPortMalloc>
 800f66a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d011      	beq.n	800f696 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f672:	69bb      	ldr	r3, [r7, #24]
 800f674:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	3350      	adds	r3, #80	@ 0x50
 800f67a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f684:	79fa      	ldrb	r2, [r7, #7]
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	9300      	str	r3, [sp, #0]
 800f68a:	4613      	mov	r3, r2
 800f68c:	697a      	ldr	r2, [r7, #20]
 800f68e:	68b9      	ldr	r1, [r7, #8]
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f000 f805 	bl	800f6a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f696:	69bb      	ldr	r3, [r7, #24]
	}
 800f698:	4618      	mov	r0, r3
 800f69a:	3720      	adds	r7, #32
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	60f8      	str	r0, [r7, #12]
 800f6a8:	60b9      	str	r1, [r7, #8]
 800f6aa:	607a      	str	r2, [r7, #4]
 800f6ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d103      	bne.n	800f6bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	69ba      	ldr	r2, [r7, #24]
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	e002      	b.n	800f6c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f6c2:	69bb      	ldr	r3, [r7, #24]
 800f6c4:	68fa      	ldr	r2, [r7, #12]
 800f6c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	68ba      	ldr	r2, [r7, #8]
 800f6cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f6ce:	2101      	movs	r1, #1
 800f6d0:	69b8      	ldr	r0, [r7, #24]
 800f6d2:	f7ff fec3 	bl	800f45c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	78fa      	ldrb	r2, [r7, #3]
 800f6da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f6de:	bf00      	nop
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b08a      	sub	sp, #40	@ 0x28
 800f6ea:	af02      	add	r7, sp, #8
 800f6ec:	60f8      	str	r0, [r7, #12]
 800f6ee:	60b9      	str	r1, [r7, #8]
 800f6f0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d10b      	bne.n	800f710 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800f6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6fc:	f383 8811 	msr	BASEPRI, r3
 800f700:	f3bf 8f6f 	isb	sy
 800f704:	f3bf 8f4f 	dsb	sy
 800f708:	61bb      	str	r3, [r7, #24]
}
 800f70a:	bf00      	nop
 800f70c:	bf00      	nop
 800f70e:	e7fd      	b.n	800f70c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f710:	68ba      	ldr	r2, [r7, #8]
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	429a      	cmp	r2, r3
 800f716:	d90b      	bls.n	800f730 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800f718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f71c:	f383 8811 	msr	BASEPRI, r3
 800f720:	f3bf 8f6f 	isb	sy
 800f724:	f3bf 8f4f 	dsb	sy
 800f728:	617b      	str	r3, [r7, #20]
}
 800f72a:	bf00      	nop
 800f72c:	bf00      	nop
 800f72e:	e7fd      	b.n	800f72c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f730:	2302      	movs	r3, #2
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2200      	movs	r2, #0
 800f738:	2100      	movs	r1, #0
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f7ff fef8 	bl	800f530 <xQueueGenericCreateStatic>
 800f740:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d002      	beq.n	800f74e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	68ba      	ldr	r2, [r7, #8]
 800f74c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f74e:	69fb      	ldr	r3, [r7, #28]
	}
 800f750:	4618      	mov	r0, r3
 800f752:	3720      	adds	r7, #32
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b086      	sub	sp, #24
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d10b      	bne.n	800f780 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800f768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f76c:	f383 8811 	msr	BASEPRI, r3
 800f770:	f3bf 8f6f 	isb	sy
 800f774:	f3bf 8f4f 	dsb	sy
 800f778:	613b      	str	r3, [r7, #16]
}
 800f77a:	bf00      	nop
 800f77c:	bf00      	nop
 800f77e:	e7fd      	b.n	800f77c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	429a      	cmp	r2, r3
 800f786:	d90b      	bls.n	800f7a0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800f788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f78c:	f383 8811 	msr	BASEPRI, r3
 800f790:	f3bf 8f6f 	isb	sy
 800f794:	f3bf 8f4f 	dsb	sy
 800f798:	60fb      	str	r3, [r7, #12]
}
 800f79a:	bf00      	nop
 800f79c:	bf00      	nop
 800f79e:	e7fd      	b.n	800f79c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f7a0:	2202      	movs	r2, #2
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7ff ff40 	bl	800f62a <xQueueGenericCreate>
 800f7aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d002      	beq.n	800f7b8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	683a      	ldr	r2, [r7, #0]
 800f7b6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f7b8:	697b      	ldr	r3, [r7, #20]
	}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3718      	adds	r7, #24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
	...

0800f7c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b08e      	sub	sp, #56	@ 0x38
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
 800f7d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d10b      	bne.n	800f7f8 <xQueueGenericSend+0x34>
	__asm volatile
 800f7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7e4:	f383 8811 	msr	BASEPRI, r3
 800f7e8:	f3bf 8f6f 	isb	sy
 800f7ec:	f3bf 8f4f 	dsb	sy
 800f7f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f7f2:	bf00      	nop
 800f7f4:	bf00      	nop
 800f7f6:	e7fd      	b.n	800f7f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d103      	bne.n	800f806 <xQueueGenericSend+0x42>
 800f7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f802:	2b00      	cmp	r3, #0
 800f804:	d101      	bne.n	800f80a <xQueueGenericSend+0x46>
 800f806:	2301      	movs	r3, #1
 800f808:	e000      	b.n	800f80c <xQueueGenericSend+0x48>
 800f80a:	2300      	movs	r3, #0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d10b      	bne.n	800f828 <xQueueGenericSend+0x64>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f822:	bf00      	nop
 800f824:	bf00      	nop
 800f826:	e7fd      	b.n	800f824 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	2b02      	cmp	r3, #2
 800f82c:	d103      	bne.n	800f836 <xQueueGenericSend+0x72>
 800f82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f832:	2b01      	cmp	r3, #1
 800f834:	d101      	bne.n	800f83a <xQueueGenericSend+0x76>
 800f836:	2301      	movs	r3, #1
 800f838:	e000      	b.n	800f83c <xQueueGenericSend+0x78>
 800f83a:	2300      	movs	r3, #0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d10b      	bne.n	800f858 <xQueueGenericSend+0x94>
	__asm volatile
 800f840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f844:	f383 8811 	msr	BASEPRI, r3
 800f848:	f3bf 8f6f 	isb	sy
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	623b      	str	r3, [r7, #32]
}
 800f852:	bf00      	nop
 800f854:	bf00      	nop
 800f856:	e7fd      	b.n	800f854 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f858:	f001 fce0 	bl	801121c <xTaskGetSchedulerState>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d102      	bne.n	800f868 <xQueueGenericSend+0xa4>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d101      	bne.n	800f86c <xQueueGenericSend+0xa8>
 800f868:	2301      	movs	r3, #1
 800f86a:	e000      	b.n	800f86e <xQueueGenericSend+0xaa>
 800f86c:	2300      	movs	r3, #0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d10b      	bne.n	800f88a <xQueueGenericSend+0xc6>
	__asm volatile
 800f872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f876:	f383 8811 	msr	BASEPRI, r3
 800f87a:	f3bf 8f6f 	isb	sy
 800f87e:	f3bf 8f4f 	dsb	sy
 800f882:	61fb      	str	r3, [r7, #28]
}
 800f884:	bf00      	nop
 800f886:	bf00      	nop
 800f888:	e7fd      	b.n	800f886 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f88a:	f002 fb35 	bl	8011ef8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f896:	429a      	cmp	r2, r3
 800f898:	d302      	bcc.n	800f8a0 <xQueueGenericSend+0xdc>
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	2b02      	cmp	r3, #2
 800f89e:	d129      	bne.n	800f8f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8a0:	683a      	ldr	r2, [r7, #0]
 800f8a2:	68b9      	ldr	r1, [r7, #8]
 800f8a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f8a6:	f000 fc6d 	bl	8010184 <prvCopyDataToQueue>
 800f8aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d010      	beq.n	800f8d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b6:	3324      	adds	r3, #36	@ 0x24
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f001 fae9 	bl	8010e90 <xTaskRemoveFromEventList>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d013      	beq.n	800f8ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f8c4:	4b3f      	ldr	r3, [pc, #252]	@ (800f9c4 <xQueueGenericSend+0x200>)
 800f8c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8ca:	601a      	str	r2, [r3, #0]
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	f3bf 8f6f 	isb	sy
 800f8d4:	e00a      	b.n	800f8ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d007      	beq.n	800f8ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f8dc:	4b39      	ldr	r3, [pc, #228]	@ (800f9c4 <xQueueGenericSend+0x200>)
 800f8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8e2:	601a      	str	r2, [r3, #0]
 800f8e4:	f3bf 8f4f 	dsb	sy
 800f8e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f8ec:	f002 fb36 	bl	8011f5c <vPortExitCritical>
				return pdPASS;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	e063      	b.n	800f9bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d103      	bne.n	800f902 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f8fa:	f002 fb2f 	bl	8011f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f8fe:	2300      	movs	r3, #0
 800f900:	e05c      	b.n	800f9bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f904:	2b00      	cmp	r3, #0
 800f906:	d106      	bne.n	800f916 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f908:	f107 0314 	add.w	r3, r7, #20
 800f90c:	4618      	mov	r0, r3
 800f90e:	f001 fb23 	bl	8010f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f912:	2301      	movs	r3, #1
 800f914:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f916:	f002 fb21 	bl	8011f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f91a:	f001 f879 	bl	8010a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f91e:	f002 faeb 	bl	8011ef8 <vPortEnterCritical>
 800f922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f924:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f928:	b25b      	sxtb	r3, r3
 800f92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f92e:	d103      	bne.n	800f938 <xQueueGenericSend+0x174>
 800f930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f932:	2200      	movs	r2, #0
 800f934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f93a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f93e:	b25b      	sxtb	r3, r3
 800f940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f944:	d103      	bne.n	800f94e <xQueueGenericSend+0x18a>
 800f946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f948:	2200      	movs	r2, #0
 800f94a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f94e:	f002 fb05 	bl	8011f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f952:	1d3a      	adds	r2, r7, #4
 800f954:	f107 0314 	add.w	r3, r7, #20
 800f958:	4611      	mov	r1, r2
 800f95a:	4618      	mov	r0, r3
 800f95c:	f001 fb12 	bl	8010f84 <xTaskCheckForTimeOut>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d124      	bne.n	800f9b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f966:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f968:	f000 fd04 	bl	8010374 <prvIsQueueFull>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d018      	beq.n	800f9a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f974:	3310      	adds	r3, #16
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	4611      	mov	r1, r2
 800f97a:	4618      	mov	r0, r3
 800f97c:	f001 fa36 	bl	8010dec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f982:	f000 fc8f 	bl	80102a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f986:	f001 f851 	bl	8010a2c <xTaskResumeAll>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f47f af7c 	bne.w	800f88a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f992:	4b0c      	ldr	r3, [pc, #48]	@ (800f9c4 <xQueueGenericSend+0x200>)
 800f994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f998:	601a      	str	r2, [r3, #0]
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	f3bf 8f6f 	isb	sy
 800f9a2:	e772      	b.n	800f88a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f9a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9a6:	f000 fc7d 	bl	80102a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9aa:	f001 f83f 	bl	8010a2c <xTaskResumeAll>
 800f9ae:	e76c      	b.n	800f88a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f9b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9b2:	f000 fc77 	bl	80102a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9b6:	f001 f839 	bl	8010a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f9ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3738      	adds	r7, #56	@ 0x38
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	e000ed04 	.word	0xe000ed04

0800f9c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b090      	sub	sp, #64	@ 0x40
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
 800f9d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d10b      	bne.n	800f9f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f9f2:	bf00      	nop
 800f9f4:	bf00      	nop
 800f9f6:	e7fd      	b.n	800f9f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d103      	bne.n	800fa06 <xQueueGenericSendFromISR+0x3e>
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d101      	bne.n	800fa0a <xQueueGenericSendFromISR+0x42>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e000      	b.n	800fa0c <xQueueGenericSendFromISR+0x44>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10b      	bne.n	800fa28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800fa10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa14:	f383 8811 	msr	BASEPRI, r3
 800fa18:	f3bf 8f6f 	isb	sy
 800fa1c:	f3bf 8f4f 	dsb	sy
 800fa20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fa22:	bf00      	nop
 800fa24:	bf00      	nop
 800fa26:	e7fd      	b.n	800fa24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	2b02      	cmp	r3, #2
 800fa2c:	d103      	bne.n	800fa36 <xQueueGenericSendFromISR+0x6e>
 800fa2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d101      	bne.n	800fa3a <xQueueGenericSendFromISR+0x72>
 800fa36:	2301      	movs	r3, #1
 800fa38:	e000      	b.n	800fa3c <xQueueGenericSendFromISR+0x74>
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d10b      	bne.n	800fa58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800fa40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa44:	f383 8811 	msr	BASEPRI, r3
 800fa48:	f3bf 8f6f 	isb	sy
 800fa4c:	f3bf 8f4f 	dsb	sy
 800fa50:	623b      	str	r3, [r7, #32]
}
 800fa52:	bf00      	nop
 800fa54:	bf00      	nop
 800fa56:	e7fd      	b.n	800fa54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa58:	f002 fb2e 	bl	80120b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fa5c:	f3ef 8211 	mrs	r2, BASEPRI
 800fa60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa64:	f383 8811 	msr	BASEPRI, r3
 800fa68:	f3bf 8f6f 	isb	sy
 800fa6c:	f3bf 8f4f 	dsb	sy
 800fa70:	61fa      	str	r2, [r7, #28]
 800fa72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fa74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d302      	bcc.n	800fa8a <xQueueGenericSendFromISR+0xc2>
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	d12f      	bne.n	800faea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fa8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fa90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fa9a:	683a      	ldr	r2, [r7, #0]
 800fa9c:	68b9      	ldr	r1, [r7, #8]
 800fa9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800faa0:	f000 fb70 	bl	8010184 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800faa4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800faa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faac:	d112      	bne.n	800fad4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800faae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d016      	beq.n	800fae4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab8:	3324      	adds	r3, #36	@ 0x24
 800faba:	4618      	mov	r0, r3
 800fabc:	f001 f9e8 	bl	8010e90 <xTaskRemoveFromEventList>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00e      	beq.n	800fae4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d00b      	beq.n	800fae4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2201      	movs	r2, #1
 800fad0:	601a      	str	r2, [r3, #0]
 800fad2:	e007      	b.n	800fae4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fad8:	3301      	adds	r3, #1
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	b25a      	sxtb	r2, r3
 800fade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fae4:	2301      	movs	r3, #1
 800fae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800fae8:	e001      	b.n	800faee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800faea:	2300      	movs	r3, #0
 800faec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800faee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faf0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800faf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3740      	adds	r7, #64	@ 0x40
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b08e      	sub	sp, #56	@ 0x38
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d10b      	bne.n	800fb30 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800fb18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb1c:	f383 8811 	msr	BASEPRI, r3
 800fb20:	f3bf 8f6f 	isb	sy
 800fb24:	f3bf 8f4f 	dsb	sy
 800fb28:	623b      	str	r3, [r7, #32]
}
 800fb2a:	bf00      	nop
 800fb2c:	bf00      	nop
 800fb2e:	e7fd      	b.n	800fb2c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00b      	beq.n	800fb50 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800fb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb3c:	f383 8811 	msr	BASEPRI, r3
 800fb40:	f3bf 8f6f 	isb	sy
 800fb44:	f3bf 8f4f 	dsb	sy
 800fb48:	61fb      	str	r3, [r7, #28]
}
 800fb4a:	bf00      	nop
 800fb4c:	bf00      	nop
 800fb4e:	e7fd      	b.n	800fb4c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d103      	bne.n	800fb60 <xQueueGiveFromISR+0x5c>
 800fb58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb5a:	689b      	ldr	r3, [r3, #8]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d101      	bne.n	800fb64 <xQueueGiveFromISR+0x60>
 800fb60:	2301      	movs	r3, #1
 800fb62:	e000      	b.n	800fb66 <xQueueGiveFromISR+0x62>
 800fb64:	2300      	movs	r3, #0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d10b      	bne.n	800fb82 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800fb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb6e:	f383 8811 	msr	BASEPRI, r3
 800fb72:	f3bf 8f6f 	isb	sy
 800fb76:	f3bf 8f4f 	dsb	sy
 800fb7a:	61bb      	str	r3, [r7, #24]
}
 800fb7c:	bf00      	nop
 800fb7e:	bf00      	nop
 800fb80:	e7fd      	b.n	800fb7e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb82:	f002 fa99 	bl	80120b8 <vPortValidateInterruptPriority>
	__asm volatile
 800fb86:	f3ef 8211 	mrs	r2, BASEPRI
 800fb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	617a      	str	r2, [r7, #20]
 800fb9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fb9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fba6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d22b      	bcs.n	800fc0a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fbb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fbc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbcc:	d112      	bne.n	800fbf4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d016      	beq.n	800fc04 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd8:	3324      	adds	r3, #36	@ 0x24
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f001 f958 	bl	8010e90 <xTaskRemoveFromEventList>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00e      	beq.n	800fc04 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00b      	beq.n	800fc04 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	601a      	str	r2, [r3, #0]
 800fbf2:	e007      	b.n	800fc04 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	b25a      	sxtb	r2, r3
 800fbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fc04:	2301      	movs	r3, #1
 800fc06:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc08:	e001      	b.n	800fc0e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f383 8811 	msr	BASEPRI, r3
}
 800fc18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3738      	adds	r7, #56	@ 0x38
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b08c      	sub	sp, #48	@ 0x30
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc30:	2300      	movs	r3, #0
 800fc32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d10b      	bne.n	800fc56 <xQueueReceive+0x32>
	__asm volatile
 800fc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc42:	f383 8811 	msr	BASEPRI, r3
 800fc46:	f3bf 8f6f 	isb	sy
 800fc4a:	f3bf 8f4f 	dsb	sy
 800fc4e:	623b      	str	r3, [r7, #32]
}
 800fc50:	bf00      	nop
 800fc52:	bf00      	nop
 800fc54:	e7fd      	b.n	800fc52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d103      	bne.n	800fc64 <xQueueReceive+0x40>
 800fc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d101      	bne.n	800fc68 <xQueueReceive+0x44>
 800fc64:	2301      	movs	r3, #1
 800fc66:	e000      	b.n	800fc6a <xQueueReceive+0x46>
 800fc68:	2300      	movs	r3, #0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d10b      	bne.n	800fc86 <xQueueReceive+0x62>
	__asm volatile
 800fc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	61fb      	str	r3, [r7, #28]
}
 800fc80:	bf00      	nop
 800fc82:	bf00      	nop
 800fc84:	e7fd      	b.n	800fc82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc86:	f001 fac9 	bl	801121c <xTaskGetSchedulerState>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d102      	bne.n	800fc96 <xQueueReceive+0x72>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d101      	bne.n	800fc9a <xQueueReceive+0x76>
 800fc96:	2301      	movs	r3, #1
 800fc98:	e000      	b.n	800fc9c <xQueueReceive+0x78>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d10b      	bne.n	800fcb8 <xQueueReceive+0x94>
	__asm volatile
 800fca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca4:	f383 8811 	msr	BASEPRI, r3
 800fca8:	f3bf 8f6f 	isb	sy
 800fcac:	f3bf 8f4f 	dsb	sy
 800fcb0:	61bb      	str	r3, [r7, #24]
}
 800fcb2:	bf00      	nop
 800fcb4:	bf00      	nop
 800fcb6:	e7fd      	b.n	800fcb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fcb8:	f002 f91e 	bl	8011ef8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d01f      	beq.n	800fd08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fcc8:	68b9      	ldr	r1, [r7, #8]
 800fcca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fccc:	f000 fac4 	bl	8010258 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd2:	1e5a      	subs	r2, r3, #1
 800fcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d00f      	beq.n	800fd00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fce2:	3310      	adds	r3, #16
 800fce4:	4618      	mov	r0, r3
 800fce6:	f001 f8d3 	bl	8010e90 <xTaskRemoveFromEventList>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d007      	beq.n	800fd00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fcf0:	4b3c      	ldr	r3, [pc, #240]	@ (800fde4 <xQueueReceive+0x1c0>)
 800fcf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcf6:	601a      	str	r2, [r3, #0]
 800fcf8:	f3bf 8f4f 	dsb	sy
 800fcfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fd00:	f002 f92c 	bl	8011f5c <vPortExitCritical>
				return pdPASS;
 800fd04:	2301      	movs	r3, #1
 800fd06:	e069      	b.n	800fddc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d103      	bne.n	800fd16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd0e:	f002 f925 	bl	8011f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd12:	2300      	movs	r3, #0
 800fd14:	e062      	b.n	800fddc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d106      	bne.n	800fd2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd1c:	f107 0310 	add.w	r3, r7, #16
 800fd20:	4618      	mov	r0, r3
 800fd22:	f001 f919 	bl	8010f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd26:	2301      	movs	r3, #1
 800fd28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd2a:	f002 f917 	bl	8011f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd2e:	f000 fe6f 	bl	8010a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd32:	f002 f8e1 	bl	8011ef8 <vPortEnterCritical>
 800fd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd3c:	b25b      	sxtb	r3, r3
 800fd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd42:	d103      	bne.n	800fd4c <xQueueReceive+0x128>
 800fd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd46:	2200      	movs	r2, #0
 800fd48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd52:	b25b      	sxtb	r3, r3
 800fd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd58:	d103      	bne.n	800fd62 <xQueueReceive+0x13e>
 800fd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fd62:	f002 f8fb 	bl	8011f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd66:	1d3a      	adds	r2, r7, #4
 800fd68:	f107 0310 	add.w	r3, r7, #16
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f001 f908 	bl	8010f84 <xTaskCheckForTimeOut>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d123      	bne.n	800fdc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd7c:	f000 fae4 	bl	8010348 <prvIsQueueEmpty>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d017      	beq.n	800fdb6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd88:	3324      	adds	r3, #36	@ 0x24
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	4611      	mov	r1, r2
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f001 f82c 	bl	8010dec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fd94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd96:	f000 fa85 	bl	80102a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd9a:	f000 fe47 	bl	8010a2c <xTaskResumeAll>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d189      	bne.n	800fcb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800fda4:	4b0f      	ldr	r3, [pc, #60]	@ (800fde4 <xQueueReceive+0x1c0>)
 800fda6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fdaa:	601a      	str	r2, [r3, #0]
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	f3bf 8f6f 	isb	sy
 800fdb4:	e780      	b.n	800fcb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fdb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdb8:	f000 fa74 	bl	80102a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fdbc:	f000 fe36 	bl	8010a2c <xTaskResumeAll>
 800fdc0:	e77a      	b.n	800fcb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fdc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdc4:	f000 fa6e 	bl	80102a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdc8:	f000 fe30 	bl	8010a2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdce:	f000 fabb 	bl	8010348 <prvIsQueueEmpty>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	f43f af6f 	beq.w	800fcb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fdda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3730      	adds	r7, #48	@ 0x30
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	e000ed04 	.word	0xe000ed04

0800fde8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b08e      	sub	sp, #56	@ 0x38
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fdfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d10b      	bne.n	800fe1c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fe04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe08:	f383 8811 	msr	BASEPRI, r3
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	f3bf 8f4f 	dsb	sy
 800fe14:	623b      	str	r3, [r7, #32]
}
 800fe16:	bf00      	nop
 800fe18:	bf00      	nop
 800fe1a:	e7fd      	b.n	800fe18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00b      	beq.n	800fe3c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fe24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe28:	f383 8811 	msr	BASEPRI, r3
 800fe2c:	f3bf 8f6f 	isb	sy
 800fe30:	f3bf 8f4f 	dsb	sy
 800fe34:	61fb      	str	r3, [r7, #28]
}
 800fe36:	bf00      	nop
 800fe38:	bf00      	nop
 800fe3a:	e7fd      	b.n	800fe38 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe3c:	f001 f9ee 	bl	801121c <xTaskGetSchedulerState>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d102      	bne.n	800fe4c <xQueueSemaphoreTake+0x64>
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d101      	bne.n	800fe50 <xQueueSemaphoreTake+0x68>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e000      	b.n	800fe52 <xQueueSemaphoreTake+0x6a>
 800fe50:	2300      	movs	r3, #0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10b      	bne.n	800fe6e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fe56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe5a:	f383 8811 	msr	BASEPRI, r3
 800fe5e:	f3bf 8f6f 	isb	sy
 800fe62:	f3bf 8f4f 	dsb	sy
 800fe66:	61bb      	str	r3, [r7, #24]
}
 800fe68:	bf00      	nop
 800fe6a:	bf00      	nop
 800fe6c:	e7fd      	b.n	800fe6a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe6e:	f002 f843 	bl	8011ef8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fe72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fe78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d024      	beq.n	800fec8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fe7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe80:	1e5a      	subs	r2, r3, #1
 800fe82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d104      	bne.n	800fe98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fe8e:	f001 fb3f 	bl	8011510 <pvTaskIncrementMutexHeldCount>
 800fe92:	4602      	mov	r2, r0
 800fe94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe9a:	691b      	ldr	r3, [r3, #16]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00f      	beq.n	800fec0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea2:	3310      	adds	r3, #16
 800fea4:	4618      	mov	r0, r3
 800fea6:	f000 fff3 	bl	8010e90 <xTaskRemoveFromEventList>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d007      	beq.n	800fec0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800feb0:	4b54      	ldr	r3, [pc, #336]	@ (8010004 <xQueueSemaphoreTake+0x21c>)
 800feb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800feb6:	601a      	str	r2, [r3, #0]
 800feb8:	f3bf 8f4f 	dsb	sy
 800febc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fec0:	f002 f84c 	bl	8011f5c <vPortExitCritical>
				return pdPASS;
 800fec4:	2301      	movs	r3, #1
 800fec6:	e098      	b.n	800fffa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d112      	bne.n	800fef4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00b      	beq.n	800feec <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fed8:	f383 8811 	msr	BASEPRI, r3
 800fedc:	f3bf 8f6f 	isb	sy
 800fee0:	f3bf 8f4f 	dsb	sy
 800fee4:	617b      	str	r3, [r7, #20]
}
 800fee6:	bf00      	nop
 800fee8:	bf00      	nop
 800feea:	e7fd      	b.n	800fee8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800feec:	f002 f836 	bl	8011f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fef0:	2300      	movs	r3, #0
 800fef2:	e082      	b.n	800fffa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d106      	bne.n	800ff08 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fefa:	f107 030c 	add.w	r3, r7, #12
 800fefe:	4618      	mov	r0, r3
 800ff00:	f001 f82a 	bl	8010f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff04:	2301      	movs	r3, #1
 800ff06:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff08:	f002 f828 	bl	8011f5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff0c:	f000 fd80 	bl	8010a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff10:	f001 fff2 	bl	8011ef8 <vPortEnterCritical>
 800ff14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff1a:	b25b      	sxtb	r3, r3
 800ff1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff20:	d103      	bne.n	800ff2a <xQueueSemaphoreTake+0x142>
 800ff22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff24:	2200      	movs	r2, #0
 800ff26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ff2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff30:	b25b      	sxtb	r3, r3
 800ff32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff36:	d103      	bne.n	800ff40 <xQueueSemaphoreTake+0x158>
 800ff38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ff40:	f002 f80c 	bl	8011f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff44:	463a      	mov	r2, r7
 800ff46:	f107 030c 	add.w	r3, r7, #12
 800ff4a:	4611      	mov	r1, r2
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f001 f819 	bl	8010f84 <xTaskCheckForTimeOut>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d132      	bne.n	800ffbe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff5a:	f000 f9f5 	bl	8010348 <prvIsQueueEmpty>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d026      	beq.n	800ffb2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d109      	bne.n	800ff80 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ff6c:	f001 ffc4 	bl	8011ef8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	4618      	mov	r0, r3
 800ff76:	f001 f96f 	bl	8011258 <xTaskPriorityInherit>
 800ff7a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ff7c:	f001 ffee 	bl	8011f5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ff80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff82:	3324      	adds	r3, #36	@ 0x24
 800ff84:	683a      	ldr	r2, [r7, #0]
 800ff86:	4611      	mov	r1, r2
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f000 ff2f 	bl	8010dec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ff8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff90:	f000 f988 	bl	80102a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ff94:	f000 fd4a 	bl	8010a2c <xTaskResumeAll>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f47f af67 	bne.w	800fe6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ffa0:	4b18      	ldr	r3, [pc, #96]	@ (8010004 <xQueueSemaphoreTake+0x21c>)
 800ffa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffa6:	601a      	str	r2, [r3, #0]
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	f3bf 8f6f 	isb	sy
 800ffb0:	e75d      	b.n	800fe6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ffb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffb4:	f000 f976 	bl	80102a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ffb8:	f000 fd38 	bl	8010a2c <xTaskResumeAll>
 800ffbc:	e757      	b.n	800fe6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ffbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffc0:	f000 f970 	bl	80102a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ffc4:	f000 fd32 	bl	8010a2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffca:	f000 f9bd 	bl	8010348 <prvIsQueueEmpty>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	f43f af4c 	beq.w	800fe6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ffd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d00d      	beq.n	800fff8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ffdc:	f001 ff8c 	bl	8011ef8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ffe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffe2:	f000 f8b7 	bl	8010154 <prvGetDisinheritPriorityAfterTimeout>
 800ffe6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ffe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ffee:	4618      	mov	r0, r3
 800fff0:	f001 fa0a 	bl	8011408 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fff4:	f001 ffb2 	bl	8011f5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3738      	adds	r7, #56	@ 0x38
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	e000ed04 	.word	0xe000ed04

08010008 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b08e      	sub	sp, #56	@ 0x38
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801001a:	2b00      	cmp	r3, #0
 801001c:	d10b      	bne.n	8010036 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801001e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010022:	f383 8811 	msr	BASEPRI, r3
 8010026:	f3bf 8f6f 	isb	sy
 801002a:	f3bf 8f4f 	dsb	sy
 801002e:	623b      	str	r3, [r7, #32]
}
 8010030:	bf00      	nop
 8010032:	bf00      	nop
 8010034:	e7fd      	b.n	8010032 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d103      	bne.n	8010044 <xQueueReceiveFromISR+0x3c>
 801003c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801003e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010040:	2b00      	cmp	r3, #0
 8010042:	d101      	bne.n	8010048 <xQueueReceiveFromISR+0x40>
 8010044:	2301      	movs	r3, #1
 8010046:	e000      	b.n	801004a <xQueueReceiveFromISR+0x42>
 8010048:	2300      	movs	r3, #0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d10b      	bne.n	8010066 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801004e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010052:	f383 8811 	msr	BASEPRI, r3
 8010056:	f3bf 8f6f 	isb	sy
 801005a:	f3bf 8f4f 	dsb	sy
 801005e:	61fb      	str	r3, [r7, #28]
}
 8010060:	bf00      	nop
 8010062:	bf00      	nop
 8010064:	e7fd      	b.n	8010062 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010066:	f002 f827 	bl	80120b8 <vPortValidateInterruptPriority>
	__asm volatile
 801006a:	f3ef 8211 	mrs	r2, BASEPRI
 801006e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010072:	f383 8811 	msr	BASEPRI, r3
 8010076:	f3bf 8f6f 	isb	sy
 801007a:	f3bf 8f4f 	dsb	sy
 801007e:	61ba      	str	r2, [r7, #24]
 8010080:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010082:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010084:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801008a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801008c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801008e:	2b00      	cmp	r3, #0
 8010090:	d02f      	beq.n	80100f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801009c:	68b9      	ldr	r1, [r7, #8]
 801009e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100a0:	f000 f8da 	bl	8010258 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80100a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100a6:	1e5a      	subs	r2, r3, #1
 80100a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80100ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80100b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100b4:	d112      	bne.n	80100dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100b8:	691b      	ldr	r3, [r3, #16]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d016      	beq.n	80100ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100c0:	3310      	adds	r3, #16
 80100c2:	4618      	mov	r0, r3
 80100c4:	f000 fee4 	bl	8010e90 <xTaskRemoveFromEventList>
 80100c8:	4603      	mov	r3, r0
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00e      	beq.n	80100ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d00b      	beq.n	80100ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2201      	movs	r2, #1
 80100d8:	601a      	str	r2, [r3, #0]
 80100da:	e007      	b.n	80100ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80100dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100e0:	3301      	adds	r3, #1
 80100e2:	b2db      	uxtb	r3, r3
 80100e4:	b25a      	sxtb	r2, r3
 80100e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80100ec:	2301      	movs	r3, #1
 80100ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80100f0:	e001      	b.n	80100f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80100f2:	2300      	movs	r3, #0
 80100f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80100f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	f383 8811 	msr	BASEPRI, r3
}
 8010100:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010104:	4618      	mov	r0, r3
 8010106:	3738      	adds	r7, #56	@ 0x38
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d10b      	bne.n	8010136 <vQueueDelete+0x2a>
	__asm volatile
 801011e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010122:	f383 8811 	msr	BASEPRI, r3
 8010126:	f3bf 8f6f 	isb	sy
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	60bb      	str	r3, [r7, #8]
}
 8010130:	bf00      	nop
 8010132:	bf00      	nop
 8010134:	e7fd      	b.n	8010132 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010136:	68f8      	ldr	r0, [r7, #12]
 8010138:	f000 f95e 	bl	80103f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010142:	2b00      	cmp	r3, #0
 8010144:	d102      	bne.n	801014c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f002 f8c6 	bl	80122d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801014c:	bf00      	nop
 801014e:	3710      	adds	r7, #16
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010160:	2b00      	cmp	r3, #0
 8010162:	d006      	beq.n	8010172 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801016e:	60fb      	str	r3, [r7, #12]
 8010170:	e001      	b.n	8010176 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010172:	2300      	movs	r3, #0
 8010174:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010176:	68fb      	ldr	r3, [r7, #12]
	}
 8010178:	4618      	mov	r0, r3
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b086      	sub	sp, #24
 8010188:	af00      	add	r7, sp, #0
 801018a:	60f8      	str	r0, [r7, #12]
 801018c:	60b9      	str	r1, [r7, #8]
 801018e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010190:	2300      	movs	r3, #0
 8010192:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010198:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d10d      	bne.n	80101be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d14d      	bne.n	8010246 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	689b      	ldr	r3, [r3, #8]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f001 f8ba 	bl	8011328 <xTaskPriorityDisinherit>
 80101b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2200      	movs	r2, #0
 80101ba:	609a      	str	r2, [r3, #8]
 80101bc:	e043      	b.n	8010246 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d119      	bne.n	80101f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	6858      	ldr	r0, [r3, #4]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101cc:	461a      	mov	r2, r3
 80101ce:	68b9      	ldr	r1, [r7, #8]
 80101d0:	f004 fbad 	bl	801492e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	685a      	ldr	r2, [r3, #4]
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101dc:	441a      	add	r2, r3
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	689b      	ldr	r3, [r3, #8]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d32b      	bcc.n	8010246 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	605a      	str	r2, [r3, #4]
 80101f6:	e026      	b.n	8010246 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	68d8      	ldr	r0, [r3, #12]
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010200:	461a      	mov	r2, r3
 8010202:	68b9      	ldr	r1, [r7, #8]
 8010204:	f004 fb93 	bl	801492e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	68da      	ldr	r2, [r3, #12]
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010210:	425b      	negs	r3, r3
 8010212:	441a      	add	r2, r3
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	68da      	ldr	r2, [r3, #12]
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	429a      	cmp	r2, r3
 8010222:	d207      	bcs.n	8010234 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	689a      	ldr	r2, [r3, #8]
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801022c:	425b      	negs	r3, r3
 801022e:	441a      	add	r2, r3
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2b02      	cmp	r3, #2
 8010238:	d105      	bne.n	8010246 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d002      	beq.n	8010246 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	3b01      	subs	r3, #1
 8010244:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	1c5a      	adds	r2, r3, #1
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801024e:	697b      	ldr	r3, [r7, #20]
}
 8010250:	4618      	mov	r0, r3
 8010252:	3718      	adds	r7, #24
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010266:	2b00      	cmp	r3, #0
 8010268:	d018      	beq.n	801029c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	68da      	ldr	r2, [r3, #12]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010272:	441a      	add	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	68da      	ldr	r2, [r3, #12]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	429a      	cmp	r2, r3
 8010282:	d303      	bcc.n	801028c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681a      	ldr	r2, [r3, #0]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	68d9      	ldr	r1, [r3, #12]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010294:	461a      	mov	r2, r3
 8010296:	6838      	ldr	r0, [r7, #0]
 8010298:	f004 fb49 	bl	801492e <memcpy>
	}
}
 801029c:	bf00      	nop
 801029e:	3708      	adds	r7, #8
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80102ac:	f001 fe24 	bl	8011ef8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80102b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80102b8:	e011      	b.n	80102de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d012      	beq.n	80102e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	3324      	adds	r3, #36	@ 0x24
 80102c6:	4618      	mov	r0, r3
 80102c8:	f000 fde2 	bl	8010e90 <xTaskRemoveFromEventList>
 80102cc:	4603      	mov	r3, r0
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d001      	beq.n	80102d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80102d2:	f000 febb 	bl	801104c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80102d6:	7bfb      	ldrb	r3, [r7, #15]
 80102d8:	3b01      	subs	r3, #1
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80102de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	dce9      	bgt.n	80102ba <prvUnlockQueue+0x16>
 80102e6:	e000      	b.n	80102ea <prvUnlockQueue+0x46>
					break;
 80102e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	22ff      	movs	r2, #255	@ 0xff
 80102ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80102f2:	f001 fe33 	bl	8011f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80102f6:	f001 fdff 	bl	8011ef8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010300:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010302:	e011      	b.n	8010328 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	691b      	ldr	r3, [r3, #16]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d012      	beq.n	8010332 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	3310      	adds	r3, #16
 8010310:	4618      	mov	r0, r3
 8010312:	f000 fdbd 	bl	8010e90 <xTaskRemoveFromEventList>
 8010316:	4603      	mov	r3, r0
 8010318:	2b00      	cmp	r3, #0
 801031a:	d001      	beq.n	8010320 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801031c:	f000 fe96 	bl	801104c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010320:	7bbb      	ldrb	r3, [r7, #14]
 8010322:	3b01      	subs	r3, #1
 8010324:	b2db      	uxtb	r3, r3
 8010326:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801032c:	2b00      	cmp	r3, #0
 801032e:	dce9      	bgt.n	8010304 <prvUnlockQueue+0x60>
 8010330:	e000      	b.n	8010334 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010332:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	22ff      	movs	r2, #255	@ 0xff
 8010338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801033c:	f001 fe0e 	bl	8011f5c <vPortExitCritical>
}
 8010340:	bf00      	nop
 8010342:	3710      	adds	r7, #16
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010350:	f001 fdd2 	bl	8011ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010358:	2b00      	cmp	r3, #0
 801035a:	d102      	bne.n	8010362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801035c:	2301      	movs	r3, #1
 801035e:	60fb      	str	r3, [r7, #12]
 8010360:	e001      	b.n	8010366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010362:	2300      	movs	r3, #0
 8010364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010366:	f001 fdf9 	bl	8011f5c <vPortExitCritical>

	return xReturn;
 801036a:	68fb      	ldr	r3, [r7, #12]
}
 801036c:	4618      	mov	r0, r3
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801037c:	f001 fdbc 	bl	8011ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010388:	429a      	cmp	r2, r3
 801038a:	d102      	bne.n	8010392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801038c:	2301      	movs	r3, #1
 801038e:	60fb      	str	r3, [r7, #12]
 8010390:	e001      	b.n	8010396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010392:	2300      	movs	r3, #0
 8010394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010396:	f001 fde1 	bl	8011f5c <vPortExitCritical>

	return xReturn;
 801039a:	68fb      	ldr	r3, [r7, #12]
}
 801039c:	4618      	mov	r0, r3
 801039e:	3710      	adds	r7, #16
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80103ae:	2300      	movs	r3, #0
 80103b0:	60fb      	str	r3, [r7, #12]
 80103b2:	e014      	b.n	80103de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80103b4:	4a0f      	ldr	r2, [pc, #60]	@ (80103f4 <vQueueAddToRegistry+0x50>)
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d10b      	bne.n	80103d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80103c0:	490c      	ldr	r1, [pc, #48]	@ (80103f4 <vQueueAddToRegistry+0x50>)
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	683a      	ldr	r2, [r7, #0]
 80103c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80103ca:	4a0a      	ldr	r2, [pc, #40]	@ (80103f4 <vQueueAddToRegistry+0x50>)
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	00db      	lsls	r3, r3, #3
 80103d0:	4413      	add	r3, r2
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80103d6:	e006      	b.n	80103e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	3301      	adds	r3, #1
 80103dc:	60fb      	str	r3, [r7, #12]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b07      	cmp	r3, #7
 80103e2:	d9e7      	bls.n	80103b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80103e4:	bf00      	nop
 80103e6:	bf00      	nop
 80103e8:	3714      	adds	r7, #20
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	2000083c 	.word	0x2000083c

080103f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010400:	2300      	movs	r3, #0
 8010402:	60fb      	str	r3, [r7, #12]
 8010404:	e016      	b.n	8010434 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010406:	4a10      	ldr	r2, [pc, #64]	@ (8010448 <vQueueUnregisterQueue+0x50>)
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	00db      	lsls	r3, r3, #3
 801040c:	4413      	add	r3, r2
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	429a      	cmp	r2, r3
 8010414:	d10b      	bne.n	801042e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010416:	4a0c      	ldr	r2, [pc, #48]	@ (8010448 <vQueueUnregisterQueue+0x50>)
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2100      	movs	r1, #0
 801041c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010420:	4a09      	ldr	r2, [pc, #36]	@ (8010448 <vQueueUnregisterQueue+0x50>)
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	00db      	lsls	r3, r3, #3
 8010426:	4413      	add	r3, r2
 8010428:	2200      	movs	r2, #0
 801042a:	605a      	str	r2, [r3, #4]
				break;
 801042c:	e006      	b.n	801043c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	3301      	adds	r3, #1
 8010432:	60fb      	str	r3, [r7, #12]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	2b07      	cmp	r3, #7
 8010438:	d9e5      	bls.n	8010406 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801043a:	bf00      	nop
 801043c:	bf00      	nop
 801043e:	3714      	adds	r7, #20
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr
 8010448:	2000083c 	.word	0x2000083c

0801044c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801044c:	b580      	push	{r7, lr}
 801044e:	b086      	sub	sp, #24
 8010450:	af00      	add	r7, sp, #0
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801045c:	f001 fd4c 	bl	8011ef8 <vPortEnterCritical>
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010466:	b25b      	sxtb	r3, r3
 8010468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801046c:	d103      	bne.n	8010476 <vQueueWaitForMessageRestricted+0x2a>
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	2200      	movs	r2, #0
 8010472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801047c:	b25b      	sxtb	r3, r3
 801047e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010482:	d103      	bne.n	801048c <vQueueWaitForMessageRestricted+0x40>
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	2200      	movs	r2, #0
 8010488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801048c:	f001 fd66 	bl	8011f5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010494:	2b00      	cmp	r3, #0
 8010496:	d106      	bne.n	80104a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	3324      	adds	r3, #36	@ 0x24
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	68b9      	ldr	r1, [r7, #8]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f000 fcc9 	bl	8010e38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80104a6:	6978      	ldr	r0, [r7, #20]
 80104a8:	f7ff fefc 	bl	80102a4 <prvUnlockQueue>
	}
 80104ac:	bf00      	nop
 80104ae:	3718      	adds	r7, #24
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b08e      	sub	sp, #56	@ 0x38
 80104b8:	af04      	add	r7, sp, #16
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	60b9      	str	r1, [r7, #8]
 80104be:	607a      	str	r2, [r7, #4]
 80104c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80104c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d10b      	bne.n	80104e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80104c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104cc:	f383 8811 	msr	BASEPRI, r3
 80104d0:	f3bf 8f6f 	isb	sy
 80104d4:	f3bf 8f4f 	dsb	sy
 80104d8:	623b      	str	r3, [r7, #32]
}
 80104da:	bf00      	nop
 80104dc:	bf00      	nop
 80104de:	e7fd      	b.n	80104dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80104e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d10b      	bne.n	80104fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80104e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104ea:	f383 8811 	msr	BASEPRI, r3
 80104ee:	f3bf 8f6f 	isb	sy
 80104f2:	f3bf 8f4f 	dsb	sy
 80104f6:	61fb      	str	r3, [r7, #28]
}
 80104f8:	bf00      	nop
 80104fa:	bf00      	nop
 80104fc:	e7fd      	b.n	80104fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80104fe:	23a8      	movs	r3, #168	@ 0xa8
 8010500:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	2ba8      	cmp	r3, #168	@ 0xa8
 8010506:	d00b      	beq.n	8010520 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	61bb      	str	r3, [r7, #24]
}
 801051a:	bf00      	nop
 801051c:	bf00      	nop
 801051e:	e7fd      	b.n	801051c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010520:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010524:	2b00      	cmp	r3, #0
 8010526:	d01e      	beq.n	8010566 <xTaskCreateStatic+0xb2>
 8010528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801052a:	2b00      	cmp	r3, #0
 801052c:	d01b      	beq.n	8010566 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801052e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010530:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010536:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053a:	2202      	movs	r2, #2
 801053c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010540:	2300      	movs	r3, #0
 8010542:	9303      	str	r3, [sp, #12]
 8010544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010546:	9302      	str	r3, [sp, #8]
 8010548:	f107 0314 	add.w	r3, r7, #20
 801054c:	9301      	str	r3, [sp, #4]
 801054e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010550:	9300      	str	r3, [sp, #0]
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	68b9      	ldr	r1, [r7, #8]
 8010558:	68f8      	ldr	r0, [r7, #12]
 801055a:	f000 f851 	bl	8010600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801055e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010560:	f000 f8f6 	bl	8010750 <prvAddNewTaskToReadyList>
 8010564:	e001      	b.n	801056a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010566:	2300      	movs	r3, #0
 8010568:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801056a:	697b      	ldr	r3, [r7, #20]
	}
 801056c:	4618      	mov	r0, r3
 801056e:	3728      	adds	r7, #40	@ 0x28
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010574:	b580      	push	{r7, lr}
 8010576:	b08c      	sub	sp, #48	@ 0x30
 8010578:	af04      	add	r7, sp, #16
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	603b      	str	r3, [r7, #0]
 8010580:	4613      	mov	r3, r2
 8010582:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010584:	88fb      	ldrh	r3, [r7, #6]
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	4618      	mov	r0, r3
 801058a:	f001 fdd7 	bl	801213c <pvPortMalloc>
 801058e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00e      	beq.n	80105b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010596:	20a8      	movs	r0, #168	@ 0xa8
 8010598:	f001 fdd0 	bl	801213c <pvPortMalloc>
 801059c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d003      	beq.n	80105ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	697a      	ldr	r2, [r7, #20]
 80105a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80105aa:	e005      	b.n	80105b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80105ac:	6978      	ldr	r0, [r7, #20]
 80105ae:	f001 fe93 	bl	80122d8 <vPortFree>
 80105b2:	e001      	b.n	80105b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80105b4:	2300      	movs	r3, #0
 80105b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80105b8:	69fb      	ldr	r3, [r7, #28]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d017      	beq.n	80105ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80105be:	69fb      	ldr	r3, [r7, #28]
 80105c0:	2200      	movs	r2, #0
 80105c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80105c6:	88fa      	ldrh	r2, [r7, #6]
 80105c8:	2300      	movs	r3, #0
 80105ca:	9303      	str	r3, [sp, #12]
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	9302      	str	r3, [sp, #8]
 80105d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d2:	9301      	str	r3, [sp, #4]
 80105d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	68b9      	ldr	r1, [r7, #8]
 80105dc:	68f8      	ldr	r0, [r7, #12]
 80105de:	f000 f80f 	bl	8010600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80105e2:	69f8      	ldr	r0, [r7, #28]
 80105e4:	f000 f8b4 	bl	8010750 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80105e8:	2301      	movs	r3, #1
 80105ea:	61bb      	str	r3, [r7, #24]
 80105ec:	e002      	b.n	80105f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80105ee:	f04f 33ff 	mov.w	r3, #4294967295
 80105f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80105f4:	69bb      	ldr	r3, [r7, #24]
	}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3720      	adds	r7, #32
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
	...

08010600 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b088      	sub	sp, #32
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
 801060c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801060e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010610:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	009b      	lsls	r3, r3, #2
 8010616:	461a      	mov	r2, r3
 8010618:	21a5      	movs	r1, #165	@ 0xa5
 801061a:	f004 f8b7 	bl	801478c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801061e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010628:	3b01      	subs	r3, #1
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	4413      	add	r3, r2
 801062e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010630:	69bb      	ldr	r3, [r7, #24]
 8010632:	f023 0307 	bic.w	r3, r3, #7
 8010636:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010638:	69bb      	ldr	r3, [r7, #24]
 801063a:	f003 0307 	and.w	r3, r3, #7
 801063e:	2b00      	cmp	r3, #0
 8010640:	d00b      	beq.n	801065a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010646:	f383 8811 	msr	BASEPRI, r3
 801064a:	f3bf 8f6f 	isb	sy
 801064e:	f3bf 8f4f 	dsb	sy
 8010652:	617b      	str	r3, [r7, #20]
}
 8010654:	bf00      	nop
 8010656:	bf00      	nop
 8010658:	e7fd      	b.n	8010656 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d01f      	beq.n	80106a0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010660:	2300      	movs	r3, #0
 8010662:	61fb      	str	r3, [r7, #28]
 8010664:	e012      	b.n	801068c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010666:	68ba      	ldr	r2, [r7, #8]
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	4413      	add	r3, r2
 801066c:	7819      	ldrb	r1, [r3, #0]
 801066e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	4413      	add	r3, r2
 8010674:	3334      	adds	r3, #52	@ 0x34
 8010676:	460a      	mov	r2, r1
 8010678:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801067a:	68ba      	ldr	r2, [r7, #8]
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	4413      	add	r3, r2
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d006      	beq.n	8010694 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	3301      	adds	r3, #1
 801068a:	61fb      	str	r3, [r7, #28]
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	2b0f      	cmp	r3, #15
 8010690:	d9e9      	bls.n	8010666 <prvInitialiseNewTask+0x66>
 8010692:	e000      	b.n	8010696 <prvInitialiseNewTask+0x96>
			{
				break;
 8010694:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010698:	2200      	movs	r2, #0
 801069a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801069e:	e003      	b.n	80106a8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80106a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106a2:	2200      	movs	r2, #0
 80106a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80106a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106aa:	2b37      	cmp	r3, #55	@ 0x37
 80106ac:	d901      	bls.n	80106b2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80106ae:	2337      	movs	r3, #55	@ 0x37
 80106b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80106b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80106b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80106be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c0:	2200      	movs	r2, #0
 80106c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80106c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c6:	3304      	adds	r3, #4
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7fe fe33 	bl	800f334 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80106ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106d0:	3318      	adds	r3, #24
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fe fe2e 	bl	800f334 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80106d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80106e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80106e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80106ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f0:	2200      	movs	r2, #0
 80106f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80106f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f8:	2200      	movs	r2, #0
 80106fa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80106fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010700:	3354      	adds	r3, #84	@ 0x54
 8010702:	224c      	movs	r2, #76	@ 0x4c
 8010704:	2100      	movs	r1, #0
 8010706:	4618      	mov	r0, r3
 8010708:	f004 f840 	bl	801478c <memset>
 801070c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801070e:	4a0d      	ldr	r2, [pc, #52]	@ (8010744 <prvInitialiseNewTask+0x144>)
 8010710:	659a      	str	r2, [r3, #88]	@ 0x58
 8010712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010714:	4a0c      	ldr	r2, [pc, #48]	@ (8010748 <prvInitialiseNewTask+0x148>)
 8010716:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801071a:	4a0c      	ldr	r2, [pc, #48]	@ (801074c <prvInitialiseNewTask+0x14c>)
 801071c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801071e:	683a      	ldr	r2, [r7, #0]
 8010720:	68f9      	ldr	r1, [r7, #12]
 8010722:	69b8      	ldr	r0, [r7, #24]
 8010724:	f001 fab6 	bl	8011c94 <pxPortInitialiseStack>
 8010728:	4602      	mov	r2, r0
 801072a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801072c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801072e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010730:	2b00      	cmp	r3, #0
 8010732:	d002      	beq.n	801073a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801073a:	bf00      	nop
 801073c:	3720      	adds	r7, #32
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	20054bc4 	.word	0x20054bc4
 8010748:	20054c2c 	.word	0x20054c2c
 801074c:	20054c94 	.word	0x20054c94

08010750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010758:	f001 fbce 	bl	8011ef8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801075c:	4b2d      	ldr	r3, [pc, #180]	@ (8010814 <prvAddNewTaskToReadyList+0xc4>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	3301      	adds	r3, #1
 8010762:	4a2c      	ldr	r2, [pc, #176]	@ (8010814 <prvAddNewTaskToReadyList+0xc4>)
 8010764:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010766:	4b2c      	ldr	r3, [pc, #176]	@ (8010818 <prvAddNewTaskToReadyList+0xc8>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d109      	bne.n	8010782 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801076e:	4a2a      	ldr	r2, [pc, #168]	@ (8010818 <prvAddNewTaskToReadyList+0xc8>)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010774:	4b27      	ldr	r3, [pc, #156]	@ (8010814 <prvAddNewTaskToReadyList+0xc4>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	2b01      	cmp	r3, #1
 801077a:	d110      	bne.n	801079e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801077c:	f000 fc8a 	bl	8011094 <prvInitialiseTaskLists>
 8010780:	e00d      	b.n	801079e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010782:	4b26      	ldr	r3, [pc, #152]	@ (801081c <prvAddNewTaskToReadyList+0xcc>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d109      	bne.n	801079e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801078a:	4b23      	ldr	r3, [pc, #140]	@ (8010818 <prvAddNewTaskToReadyList+0xc8>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010794:	429a      	cmp	r2, r3
 8010796:	d802      	bhi.n	801079e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010798:	4a1f      	ldr	r2, [pc, #124]	@ (8010818 <prvAddNewTaskToReadyList+0xc8>)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801079e:	4b20      	ldr	r3, [pc, #128]	@ (8010820 <prvAddNewTaskToReadyList+0xd0>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	3301      	adds	r3, #1
 80107a4:	4a1e      	ldr	r2, [pc, #120]	@ (8010820 <prvAddNewTaskToReadyList+0xd0>)
 80107a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80107a8:	4b1d      	ldr	r3, [pc, #116]	@ (8010820 <prvAddNewTaskToReadyList+0xd0>)
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107b4:	4b1b      	ldr	r3, [pc, #108]	@ (8010824 <prvAddNewTaskToReadyList+0xd4>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d903      	bls.n	80107c4 <prvAddNewTaskToReadyList+0x74>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107c0:	4a18      	ldr	r2, [pc, #96]	@ (8010824 <prvAddNewTaskToReadyList+0xd4>)
 80107c2:	6013      	str	r3, [r2, #0]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107c8:	4613      	mov	r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	4413      	add	r3, r2
 80107ce:	009b      	lsls	r3, r3, #2
 80107d0:	4a15      	ldr	r2, [pc, #84]	@ (8010828 <prvAddNewTaskToReadyList+0xd8>)
 80107d2:	441a      	add	r2, r3
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	3304      	adds	r3, #4
 80107d8:	4619      	mov	r1, r3
 80107da:	4610      	mov	r0, r2
 80107dc:	f7fe fdb7 	bl	800f34e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80107e0:	f001 fbbc 	bl	8011f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80107e4:	4b0d      	ldr	r3, [pc, #52]	@ (801081c <prvAddNewTaskToReadyList+0xcc>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d00e      	beq.n	801080a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80107ec:	4b0a      	ldr	r3, [pc, #40]	@ (8010818 <prvAddNewTaskToReadyList+0xc8>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d207      	bcs.n	801080a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80107fa:	4b0c      	ldr	r3, [pc, #48]	@ (801082c <prvAddNewTaskToReadyList+0xdc>)
 80107fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010800:	601a      	str	r2, [r3, #0]
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801080a:	bf00      	nop
 801080c:	3708      	adds	r7, #8
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	20000d50 	.word	0x20000d50
 8010818:	2000087c 	.word	0x2000087c
 801081c:	20000d5c 	.word	0x20000d5c
 8010820:	20000d6c 	.word	0x20000d6c
 8010824:	20000d58 	.word	0x20000d58
 8010828:	20000880 	.word	0x20000880
 801082c:	e000ed04 	.word	0xe000ed04

08010830 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010830:	b580      	push	{r7, lr}
 8010832:	b08a      	sub	sp, #40	@ 0x28
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801083a:	2300      	movs	r3, #0
 801083c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d10b      	bne.n	801085c <vTaskDelayUntil+0x2c>
	__asm volatile
 8010844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	617b      	str	r3, [r7, #20]
}
 8010856:	bf00      	nop
 8010858:	bf00      	nop
 801085a:	e7fd      	b.n	8010858 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d10b      	bne.n	801087a <vTaskDelayUntil+0x4a>
	__asm volatile
 8010862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010866:	f383 8811 	msr	BASEPRI, r3
 801086a:	f3bf 8f6f 	isb	sy
 801086e:	f3bf 8f4f 	dsb	sy
 8010872:	613b      	str	r3, [r7, #16]
}
 8010874:	bf00      	nop
 8010876:	bf00      	nop
 8010878:	e7fd      	b.n	8010876 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 801087a:	4b2a      	ldr	r3, [pc, #168]	@ (8010924 <vTaskDelayUntil+0xf4>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d00b      	beq.n	801089a <vTaskDelayUntil+0x6a>
	__asm volatile
 8010882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	60fb      	str	r3, [r7, #12]
}
 8010894:	bf00      	nop
 8010896:	bf00      	nop
 8010898:	e7fd      	b.n	8010896 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 801089a:	f000 f8b9 	bl	8010a10 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801089e:	4b22      	ldr	r3, [pc, #136]	@ (8010928 <vTaskDelayUntil+0xf8>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	683a      	ldr	r2, [r7, #0]
 80108aa:	4413      	add	r3, r2
 80108ac:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	6a3a      	ldr	r2, [r7, #32]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d20b      	bcs.n	80108d0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	69fa      	ldr	r2, [r7, #28]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d211      	bcs.n	80108e6 <vTaskDelayUntil+0xb6>
 80108c2:	69fa      	ldr	r2, [r7, #28]
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d90d      	bls.n	80108e6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80108ca:	2301      	movs	r3, #1
 80108cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80108ce:	e00a      	b.n	80108e6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	69fa      	ldr	r2, [r7, #28]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d303      	bcc.n	80108e2 <vTaskDelayUntil+0xb2>
 80108da:	69fa      	ldr	r2, [r7, #28]
 80108dc:	6a3b      	ldr	r3, [r7, #32]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d901      	bls.n	80108e6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80108e2:	2301      	movs	r3, #1
 80108e4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	69fa      	ldr	r2, [r7, #28]
 80108ea:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80108ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d006      	beq.n	8010900 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80108f2:	69fa      	ldr	r2, [r7, #28]
 80108f4:	6a3b      	ldr	r3, [r7, #32]
 80108f6:	1ad3      	subs	r3, r2, r3
 80108f8:	2100      	movs	r1, #0
 80108fa:	4618      	mov	r0, r3
 80108fc:	f000 fe1c 	bl	8011538 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010900:	f000 f894 	bl	8010a2c <xTaskResumeAll>
 8010904:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d107      	bne.n	801091c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 801090c:	4b07      	ldr	r3, [pc, #28]	@ (801092c <vTaskDelayUntil+0xfc>)
 801090e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010912:	601a      	str	r2, [r3, #0]
 8010914:	f3bf 8f4f 	dsb	sy
 8010918:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801091c:	bf00      	nop
 801091e:	3728      	adds	r7, #40	@ 0x28
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	20000d78 	.word	0x20000d78
 8010928:	20000d54 	.word	0x20000d54
 801092c:	e000ed04 	.word	0xe000ed04

08010930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b08a      	sub	sp, #40	@ 0x28
 8010934:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010936:	2300      	movs	r3, #0
 8010938:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801093a:	2300      	movs	r3, #0
 801093c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801093e:	463a      	mov	r2, r7
 8010940:	1d39      	adds	r1, r7, #4
 8010942:	f107 0308 	add.w	r3, r7, #8
 8010946:	4618      	mov	r0, r3
 8010948:	f7fe fca0 	bl	800f28c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801094c:	6839      	ldr	r1, [r7, #0]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	9202      	str	r2, [sp, #8]
 8010954:	9301      	str	r3, [sp, #4]
 8010956:	2300      	movs	r3, #0
 8010958:	9300      	str	r3, [sp, #0]
 801095a:	2300      	movs	r3, #0
 801095c:	460a      	mov	r2, r1
 801095e:	4924      	ldr	r1, [pc, #144]	@ (80109f0 <vTaskStartScheduler+0xc0>)
 8010960:	4824      	ldr	r0, [pc, #144]	@ (80109f4 <vTaskStartScheduler+0xc4>)
 8010962:	f7ff fda7 	bl	80104b4 <xTaskCreateStatic>
 8010966:	4603      	mov	r3, r0
 8010968:	4a23      	ldr	r2, [pc, #140]	@ (80109f8 <vTaskStartScheduler+0xc8>)
 801096a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801096c:	4b22      	ldr	r3, [pc, #136]	@ (80109f8 <vTaskStartScheduler+0xc8>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d002      	beq.n	801097a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010974:	2301      	movs	r3, #1
 8010976:	617b      	str	r3, [r7, #20]
 8010978:	e001      	b.n	801097e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801097a:	2300      	movs	r3, #0
 801097c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	2b01      	cmp	r3, #1
 8010982:	d102      	bne.n	801098a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010984:	f000 fe2c 	bl	80115e0 <xTimerCreateTimerTask>
 8010988:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	2b01      	cmp	r3, #1
 801098e:	d11b      	bne.n	80109c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	613b      	str	r3, [r7, #16]
}
 80109a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80109a4:	4b15      	ldr	r3, [pc, #84]	@ (80109fc <vTaskStartScheduler+0xcc>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	3354      	adds	r3, #84	@ 0x54
 80109aa:	4a15      	ldr	r2, [pc, #84]	@ (8010a00 <vTaskStartScheduler+0xd0>)
 80109ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80109ae:	4b15      	ldr	r3, [pc, #84]	@ (8010a04 <vTaskStartScheduler+0xd4>)
 80109b0:	f04f 32ff 	mov.w	r2, #4294967295
 80109b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80109b6:	4b14      	ldr	r3, [pc, #80]	@ (8010a08 <vTaskStartScheduler+0xd8>)
 80109b8:	2201      	movs	r2, #1
 80109ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80109bc:	4b13      	ldr	r3, [pc, #76]	@ (8010a0c <vTaskStartScheduler+0xdc>)
 80109be:	2200      	movs	r2, #0
 80109c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80109c2:	f001 f9f5 	bl	8011db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80109c6:	e00f      	b.n	80109e8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ce:	d10b      	bne.n	80109e8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80109d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109d4:	f383 8811 	msr	BASEPRI, r3
 80109d8:	f3bf 8f6f 	isb	sy
 80109dc:	f3bf 8f4f 	dsb	sy
 80109e0:	60fb      	str	r3, [r7, #12]
}
 80109e2:	bf00      	nop
 80109e4:	bf00      	nop
 80109e6:	e7fd      	b.n	80109e4 <vTaskStartScheduler+0xb4>
}
 80109e8:	bf00      	nop
 80109ea:	3718      	adds	r7, #24
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	08015ab0 	.word	0x08015ab0
 80109f4:	08011065 	.word	0x08011065
 80109f8:	20000d74 	.word	0x20000d74
 80109fc:	2000087c 	.word	0x2000087c
 8010a00:	20000020 	.word	0x20000020
 8010a04:	20000d70 	.word	0x20000d70
 8010a08:	20000d5c 	.word	0x20000d5c
 8010a0c:	20000d54 	.word	0x20000d54

08010a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010a10:	b480      	push	{r7}
 8010a12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010a14:	4b04      	ldr	r3, [pc, #16]	@ (8010a28 <vTaskSuspendAll+0x18>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	3301      	adds	r3, #1
 8010a1a:	4a03      	ldr	r2, [pc, #12]	@ (8010a28 <vTaskSuspendAll+0x18>)
 8010a1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010a1e:	bf00      	nop
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr
 8010a28:	20000d78 	.word	0x20000d78

08010a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a32:	2300      	movs	r3, #0
 8010a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a36:	2300      	movs	r3, #0
 8010a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a3a:	4b42      	ldr	r3, [pc, #264]	@ (8010b44 <xTaskResumeAll+0x118>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d10b      	bne.n	8010a5a <xTaskResumeAll+0x2e>
	__asm volatile
 8010a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a46:	f383 8811 	msr	BASEPRI, r3
 8010a4a:	f3bf 8f6f 	isb	sy
 8010a4e:	f3bf 8f4f 	dsb	sy
 8010a52:	603b      	str	r3, [r7, #0]
}
 8010a54:	bf00      	nop
 8010a56:	bf00      	nop
 8010a58:	e7fd      	b.n	8010a56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010a5a:	f001 fa4d 	bl	8011ef8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010a5e:	4b39      	ldr	r3, [pc, #228]	@ (8010b44 <xTaskResumeAll+0x118>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	3b01      	subs	r3, #1
 8010a64:	4a37      	ldr	r2, [pc, #220]	@ (8010b44 <xTaskResumeAll+0x118>)
 8010a66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a68:	4b36      	ldr	r3, [pc, #216]	@ (8010b44 <xTaskResumeAll+0x118>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d162      	bne.n	8010b36 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010a70:	4b35      	ldr	r3, [pc, #212]	@ (8010b48 <xTaskResumeAll+0x11c>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d05e      	beq.n	8010b36 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a78:	e02f      	b.n	8010ada <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a7a:	4b34      	ldr	r3, [pc, #208]	@ (8010b4c <xTaskResumeAll+0x120>)
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	3318      	adds	r3, #24
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fe fcbe 	bl	800f408 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	3304      	adds	r3, #4
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7fe fcb9 	bl	800f408 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8010b50 <xTaskResumeAll+0x124>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d903      	bls.n	8010aaa <xTaskResumeAll+0x7e>
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8010b50 <xTaskResumeAll+0x124>)
 8010aa8:	6013      	str	r3, [r2, #0]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010aae:	4613      	mov	r3, r2
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	4413      	add	r3, r2
 8010ab4:	009b      	lsls	r3, r3, #2
 8010ab6:	4a27      	ldr	r2, [pc, #156]	@ (8010b54 <xTaskResumeAll+0x128>)
 8010ab8:	441a      	add	r2, r3
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	3304      	adds	r3, #4
 8010abe:	4619      	mov	r1, r3
 8010ac0:	4610      	mov	r0, r2
 8010ac2:	f7fe fc44 	bl	800f34e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010aca:	4b23      	ldr	r3, [pc, #140]	@ (8010b58 <xTaskResumeAll+0x12c>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d302      	bcc.n	8010ada <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010ad4:	4b21      	ldr	r3, [pc, #132]	@ (8010b5c <xTaskResumeAll+0x130>)
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010ada:	4b1c      	ldr	r3, [pc, #112]	@ (8010b4c <xTaskResumeAll+0x120>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1cb      	bne.n	8010a7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d001      	beq.n	8010aec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010ae8:	f000 fb78 	bl	80111dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010aec:	4b1c      	ldr	r3, [pc, #112]	@ (8010b60 <xTaskResumeAll+0x134>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d010      	beq.n	8010b1a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010af8:	f000 f858 	bl	8010bac <xTaskIncrementTick>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d002      	beq.n	8010b08 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010b02:	4b16      	ldr	r3, [pc, #88]	@ (8010b5c <xTaskResumeAll+0x130>)
 8010b04:	2201      	movs	r2, #1
 8010b06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d1f1      	bne.n	8010af8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8010b14:	4b12      	ldr	r3, [pc, #72]	@ (8010b60 <xTaskResumeAll+0x134>)
 8010b16:	2200      	movs	r2, #0
 8010b18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010b1a:	4b10      	ldr	r3, [pc, #64]	@ (8010b5c <xTaskResumeAll+0x130>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d009      	beq.n	8010b36 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010b22:	2301      	movs	r3, #1
 8010b24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010b26:	4b0f      	ldr	r3, [pc, #60]	@ (8010b64 <xTaskResumeAll+0x138>)
 8010b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	f3bf 8f4f 	dsb	sy
 8010b32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b36:	f001 fa11 	bl	8011f5c <vPortExitCritical>

	return xAlreadyYielded;
 8010b3a:	68bb      	ldr	r3, [r7, #8]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	20000d78 	.word	0x20000d78
 8010b48:	20000d50 	.word	0x20000d50
 8010b4c:	20000d10 	.word	0x20000d10
 8010b50:	20000d58 	.word	0x20000d58
 8010b54:	20000880 	.word	0x20000880
 8010b58:	2000087c 	.word	0x2000087c
 8010b5c:	20000d64 	.word	0x20000d64
 8010b60:	20000d60 	.word	0x20000d60
 8010b64:	e000ed04 	.word	0xe000ed04

08010b68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010b6e:	4b05      	ldr	r3, [pc, #20]	@ (8010b84 <xTaskGetTickCount+0x1c>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010b74:	687b      	ldr	r3, [r7, #4]
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	20000d54 	.word	0x20000d54

08010b88 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b8e:	f001 fa93 	bl	80120b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010b92:	2300      	movs	r3, #0
 8010b94:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010b96:	4b04      	ldr	r3, [pc, #16]	@ (8010ba8 <xTaskGetTickCountFromISR+0x20>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010b9c:	683b      	ldr	r3, [r7, #0]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3708      	adds	r7, #8
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	20000d54 	.word	0x20000d54

08010bac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b086      	sub	sp, #24
 8010bb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bb6:	4b4f      	ldr	r3, [pc, #316]	@ (8010cf4 <xTaskIncrementTick+0x148>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	f040 8090 	bne.w	8010ce0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8010cf8 <xTaskIncrementTick+0x14c>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010bc8:	4a4b      	ldr	r2, [pc, #300]	@ (8010cf8 <xTaskIncrementTick+0x14c>)
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d121      	bne.n	8010c18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010bd4:	4b49      	ldr	r3, [pc, #292]	@ (8010cfc <xTaskIncrementTick+0x150>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d00b      	beq.n	8010bf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8010bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010be2:	f383 8811 	msr	BASEPRI, r3
 8010be6:	f3bf 8f6f 	isb	sy
 8010bea:	f3bf 8f4f 	dsb	sy
 8010bee:	603b      	str	r3, [r7, #0]
}
 8010bf0:	bf00      	nop
 8010bf2:	bf00      	nop
 8010bf4:	e7fd      	b.n	8010bf2 <xTaskIncrementTick+0x46>
 8010bf6:	4b41      	ldr	r3, [pc, #260]	@ (8010cfc <xTaskIncrementTick+0x150>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	60fb      	str	r3, [r7, #12]
 8010bfc:	4b40      	ldr	r3, [pc, #256]	@ (8010d00 <xTaskIncrementTick+0x154>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a3e      	ldr	r2, [pc, #248]	@ (8010cfc <xTaskIncrementTick+0x150>)
 8010c02:	6013      	str	r3, [r2, #0]
 8010c04:	4a3e      	ldr	r2, [pc, #248]	@ (8010d00 <xTaskIncrementTick+0x154>)
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6013      	str	r3, [r2, #0]
 8010c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8010d04 <xTaskIncrementTick+0x158>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	4a3c      	ldr	r2, [pc, #240]	@ (8010d04 <xTaskIncrementTick+0x158>)
 8010c12:	6013      	str	r3, [r2, #0]
 8010c14:	f000 fae2 	bl	80111dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010c18:	4b3b      	ldr	r3, [pc, #236]	@ (8010d08 <xTaskIncrementTick+0x15c>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	693a      	ldr	r2, [r7, #16]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d349      	bcc.n	8010cb6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c22:	4b36      	ldr	r3, [pc, #216]	@ (8010cfc <xTaskIncrementTick+0x150>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d104      	bne.n	8010c36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c2c:	4b36      	ldr	r3, [pc, #216]	@ (8010d08 <xTaskIncrementTick+0x15c>)
 8010c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c32:	601a      	str	r2, [r3, #0]
					break;
 8010c34:	e03f      	b.n	8010cb6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c36:	4b31      	ldr	r3, [pc, #196]	@ (8010cfc <xTaskIncrementTick+0x150>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	68db      	ldr	r3, [r3, #12]
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	685b      	ldr	r3, [r3, #4]
 8010c44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010c46:	693a      	ldr	r2, [r7, #16]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d203      	bcs.n	8010c56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8010d08 <xTaskIncrementTick+0x15c>)
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010c54:	e02f      	b.n	8010cb6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	3304      	adds	r3, #4
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fe fbd4 	bl	800f408 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d004      	beq.n	8010c72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	3318      	adds	r3, #24
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fe fbcb 	bl	800f408 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c76:	4b25      	ldr	r3, [pc, #148]	@ (8010d0c <xTaskIncrementTick+0x160>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d903      	bls.n	8010c86 <xTaskIncrementTick+0xda>
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c82:	4a22      	ldr	r2, [pc, #136]	@ (8010d0c <xTaskIncrementTick+0x160>)
 8010c84:	6013      	str	r3, [r2, #0]
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c8a:	4613      	mov	r3, r2
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	4413      	add	r3, r2
 8010c90:	009b      	lsls	r3, r3, #2
 8010c92:	4a1f      	ldr	r2, [pc, #124]	@ (8010d10 <xTaskIncrementTick+0x164>)
 8010c94:	441a      	add	r2, r3
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	3304      	adds	r3, #4
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	4610      	mov	r0, r2
 8010c9e:	f7fe fb56 	bl	800f34e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8010d14 <xTaskIncrementTick+0x168>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d3b8      	bcc.n	8010c22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010cb4:	e7b5      	b.n	8010c22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010cb6:	4b17      	ldr	r3, [pc, #92]	@ (8010d14 <xTaskIncrementTick+0x168>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cbc:	4914      	ldr	r1, [pc, #80]	@ (8010d10 <xTaskIncrementTick+0x164>)
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	4413      	add	r3, r2
 8010cc4:	009b      	lsls	r3, r3, #2
 8010cc6:	440b      	add	r3, r1
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d901      	bls.n	8010cd2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010cce:	2301      	movs	r3, #1
 8010cd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010cd2:	4b11      	ldr	r3, [pc, #68]	@ (8010d18 <xTaskIncrementTick+0x16c>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d007      	beq.n	8010cea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	617b      	str	r3, [r7, #20]
 8010cde:	e004      	b.n	8010cea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8010d1c <xTaskIncrementTick+0x170>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8010d1c <xTaskIncrementTick+0x170>)
 8010ce8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010cea:	697b      	ldr	r3, [r7, #20]
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3718      	adds	r7, #24
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	20000d78 	.word	0x20000d78
 8010cf8:	20000d54 	.word	0x20000d54
 8010cfc:	20000d08 	.word	0x20000d08
 8010d00:	20000d0c 	.word	0x20000d0c
 8010d04:	20000d68 	.word	0x20000d68
 8010d08:	20000d70 	.word	0x20000d70
 8010d0c:	20000d58 	.word	0x20000d58
 8010d10:	20000880 	.word	0x20000880
 8010d14:	2000087c 	.word	0x2000087c
 8010d18:	20000d64 	.word	0x20000d64
 8010d1c:	20000d60 	.word	0x20000d60

08010d20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010d20:	b480      	push	{r7}
 8010d22:	b085      	sub	sp, #20
 8010d24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010d26:	4b2b      	ldr	r3, [pc, #172]	@ (8010dd4 <vTaskSwitchContext+0xb4>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d003      	beq.n	8010d36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8010dd8 <vTaskSwitchContext+0xb8>)
 8010d30:	2201      	movs	r2, #1
 8010d32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010d34:	e047      	b.n	8010dc6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8010d36:	4b28      	ldr	r3, [pc, #160]	@ (8010dd8 <vTaskSwitchContext+0xb8>)
 8010d38:	2200      	movs	r2, #0
 8010d3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d3c:	4b27      	ldr	r3, [pc, #156]	@ (8010ddc <vTaskSwitchContext+0xbc>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	60fb      	str	r3, [r7, #12]
 8010d42:	e011      	b.n	8010d68 <vTaskSwitchContext+0x48>
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10b      	bne.n	8010d62 <vTaskSwitchContext+0x42>
	__asm volatile
 8010d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d4e:	f383 8811 	msr	BASEPRI, r3
 8010d52:	f3bf 8f6f 	isb	sy
 8010d56:	f3bf 8f4f 	dsb	sy
 8010d5a:	607b      	str	r3, [r7, #4]
}
 8010d5c:	bf00      	nop
 8010d5e:	bf00      	nop
 8010d60:	e7fd      	b.n	8010d5e <vTaskSwitchContext+0x3e>
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	3b01      	subs	r3, #1
 8010d66:	60fb      	str	r3, [r7, #12]
 8010d68:	491d      	ldr	r1, [pc, #116]	@ (8010de0 <vTaskSwitchContext+0xc0>)
 8010d6a:	68fa      	ldr	r2, [r7, #12]
 8010d6c:	4613      	mov	r3, r2
 8010d6e:	009b      	lsls	r3, r3, #2
 8010d70:	4413      	add	r3, r2
 8010d72:	009b      	lsls	r3, r3, #2
 8010d74:	440b      	add	r3, r1
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d0e3      	beq.n	8010d44 <vTaskSwitchContext+0x24>
 8010d7c:	68fa      	ldr	r2, [r7, #12]
 8010d7e:	4613      	mov	r3, r2
 8010d80:	009b      	lsls	r3, r3, #2
 8010d82:	4413      	add	r3, r2
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	4a16      	ldr	r2, [pc, #88]	@ (8010de0 <vTaskSwitchContext+0xc0>)
 8010d88:	4413      	add	r3, r2
 8010d8a:	60bb      	str	r3, [r7, #8]
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	685a      	ldr	r2, [r3, #4]
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	605a      	str	r2, [r3, #4]
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	685a      	ldr	r2, [r3, #4]
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	3308      	adds	r3, #8
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d104      	bne.n	8010dac <vTaskSwitchContext+0x8c>
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	685a      	ldr	r2, [r3, #4]
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	605a      	str	r2, [r3, #4]
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	685b      	ldr	r3, [r3, #4]
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	4a0c      	ldr	r2, [pc, #48]	@ (8010de4 <vTaskSwitchContext+0xc4>)
 8010db4:	6013      	str	r3, [r2, #0]
 8010db6:	4a09      	ldr	r2, [pc, #36]	@ (8010ddc <vTaskSwitchContext+0xbc>)
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010dbc:	4b09      	ldr	r3, [pc, #36]	@ (8010de4 <vTaskSwitchContext+0xc4>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	3354      	adds	r3, #84	@ 0x54
 8010dc2:	4a09      	ldr	r2, [pc, #36]	@ (8010de8 <vTaskSwitchContext+0xc8>)
 8010dc4:	6013      	str	r3, [r2, #0]
}
 8010dc6:	bf00      	nop
 8010dc8:	3714      	adds	r7, #20
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr
 8010dd2:	bf00      	nop
 8010dd4:	20000d78 	.word	0x20000d78
 8010dd8:	20000d64 	.word	0x20000d64
 8010ddc:	20000d58 	.word	0x20000d58
 8010de0:	20000880 	.word	0x20000880
 8010de4:	2000087c 	.word	0x2000087c
 8010de8:	20000020 	.word	0x20000020

08010dec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b084      	sub	sp, #16
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d10b      	bne.n	8010e14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e00:	f383 8811 	msr	BASEPRI, r3
 8010e04:	f3bf 8f6f 	isb	sy
 8010e08:	f3bf 8f4f 	dsb	sy
 8010e0c:	60fb      	str	r3, [r7, #12]
}
 8010e0e:	bf00      	nop
 8010e10:	bf00      	nop
 8010e12:	e7fd      	b.n	8010e10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e14:	4b07      	ldr	r3, [pc, #28]	@ (8010e34 <vTaskPlaceOnEventList+0x48>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	3318      	adds	r3, #24
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7fe faba 	bl	800f396 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010e22:	2101      	movs	r1, #1
 8010e24:	6838      	ldr	r0, [r7, #0]
 8010e26:	f000 fb87 	bl	8011538 <prvAddCurrentTaskToDelayedList>
}
 8010e2a:	bf00      	nop
 8010e2c:	3710      	adds	r7, #16
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	bf00      	nop
 8010e34:	2000087c 	.word	0x2000087c

08010e38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b086      	sub	sp, #24
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	60f8      	str	r0, [r7, #12]
 8010e40:	60b9      	str	r1, [r7, #8]
 8010e42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d10b      	bne.n	8010e62 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8010e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e4e:	f383 8811 	msr	BASEPRI, r3
 8010e52:	f3bf 8f6f 	isb	sy
 8010e56:	f3bf 8f4f 	dsb	sy
 8010e5a:	617b      	str	r3, [r7, #20]
}
 8010e5c:	bf00      	nop
 8010e5e:	bf00      	nop
 8010e60:	e7fd      	b.n	8010e5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e62:	4b0a      	ldr	r3, [pc, #40]	@ (8010e8c <vTaskPlaceOnEventListRestricted+0x54>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	3318      	adds	r3, #24
 8010e68:	4619      	mov	r1, r3
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	f7fe fa6f 	bl	800f34e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d002      	beq.n	8010e7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010e76:	f04f 33ff 	mov.w	r3, #4294967295
 8010e7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010e7c:	6879      	ldr	r1, [r7, #4]
 8010e7e:	68b8      	ldr	r0, [r7, #8]
 8010e80:	f000 fb5a 	bl	8011538 <prvAddCurrentTaskToDelayedList>
	}
 8010e84:	bf00      	nop
 8010e86:	3718      	adds	r7, #24
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	2000087c 	.word	0x2000087c

08010e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b086      	sub	sp, #24
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	68db      	ldr	r3, [r3, #12]
 8010e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d10b      	bne.n	8010ebe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eaa:	f383 8811 	msr	BASEPRI, r3
 8010eae:	f3bf 8f6f 	isb	sy
 8010eb2:	f3bf 8f4f 	dsb	sy
 8010eb6:	60fb      	str	r3, [r7, #12]
}
 8010eb8:	bf00      	nop
 8010eba:	bf00      	nop
 8010ebc:	e7fd      	b.n	8010eba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	3318      	adds	r3, #24
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fe faa0 	bl	800f408 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8010f40 <xTaskRemoveFromEventList+0xb0>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d11d      	bne.n	8010f0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	3304      	adds	r3, #4
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7fe fa97 	bl	800f408 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ede:	4b19      	ldr	r3, [pc, #100]	@ (8010f44 <xTaskRemoveFromEventList+0xb4>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d903      	bls.n	8010eee <xTaskRemoveFromEventList+0x5e>
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eea:	4a16      	ldr	r2, [pc, #88]	@ (8010f44 <xTaskRemoveFromEventList+0xb4>)
 8010eec:	6013      	str	r3, [r2, #0]
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	009b      	lsls	r3, r3, #2
 8010ef6:	4413      	add	r3, r2
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	4a13      	ldr	r2, [pc, #76]	@ (8010f48 <xTaskRemoveFromEventList+0xb8>)
 8010efc:	441a      	add	r2, r3
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	3304      	adds	r3, #4
 8010f02:	4619      	mov	r1, r3
 8010f04:	4610      	mov	r0, r2
 8010f06:	f7fe fa22 	bl	800f34e <vListInsertEnd>
 8010f0a:	e005      	b.n	8010f18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	3318      	adds	r3, #24
 8010f10:	4619      	mov	r1, r3
 8010f12:	480e      	ldr	r0, [pc, #56]	@ (8010f4c <xTaskRemoveFromEventList+0xbc>)
 8010f14:	f7fe fa1b 	bl	800f34e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8010f50 <xTaskRemoveFromEventList+0xc0>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d905      	bls.n	8010f32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010f26:	2301      	movs	r3, #1
 8010f28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8010f54 <xTaskRemoveFromEventList+0xc4>)
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	601a      	str	r2, [r3, #0]
 8010f30:	e001      	b.n	8010f36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010f32:	2300      	movs	r3, #0
 8010f34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010f36:	697b      	ldr	r3, [r7, #20]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3718      	adds	r7, #24
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	20000d78 	.word	0x20000d78
 8010f44:	20000d58 	.word	0x20000d58
 8010f48:	20000880 	.word	0x20000880
 8010f4c:	20000d10 	.word	0x20000d10
 8010f50:	2000087c 	.word	0x2000087c
 8010f54:	20000d64 	.word	0x20000d64

08010f58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b083      	sub	sp, #12
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010f60:	4b06      	ldr	r3, [pc, #24]	@ (8010f7c <vTaskInternalSetTimeOutState+0x24>)
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010f68:	4b05      	ldr	r3, [pc, #20]	@ (8010f80 <vTaskInternalSetTimeOutState+0x28>)
 8010f6a:	681a      	ldr	r2, [r3, #0]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	605a      	str	r2, [r3, #4]
}
 8010f70:	bf00      	nop
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr
 8010f7c:	20000d68 	.word	0x20000d68
 8010f80:	20000d54 	.word	0x20000d54

08010f84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b088      	sub	sp, #32
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d10b      	bne.n	8010fac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f98:	f383 8811 	msr	BASEPRI, r3
 8010f9c:	f3bf 8f6f 	isb	sy
 8010fa0:	f3bf 8f4f 	dsb	sy
 8010fa4:	613b      	str	r3, [r7, #16]
}
 8010fa6:	bf00      	nop
 8010fa8:	bf00      	nop
 8010faa:	e7fd      	b.n	8010fa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d10b      	bne.n	8010fca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fb6:	f383 8811 	msr	BASEPRI, r3
 8010fba:	f3bf 8f6f 	isb	sy
 8010fbe:	f3bf 8f4f 	dsb	sy
 8010fc2:	60fb      	str	r3, [r7, #12]
}
 8010fc4:	bf00      	nop
 8010fc6:	bf00      	nop
 8010fc8:	e7fd      	b.n	8010fc6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010fca:	f000 ff95 	bl	8011ef8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010fce:	4b1d      	ldr	r3, [pc, #116]	@ (8011044 <xTaskCheckForTimeOut+0xc0>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	69ba      	ldr	r2, [r7, #24]
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fe6:	d102      	bne.n	8010fee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	61fb      	str	r3, [r7, #28]
 8010fec:	e023      	b.n	8011036 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681a      	ldr	r2, [r3, #0]
 8010ff2:	4b15      	ldr	r3, [pc, #84]	@ (8011048 <xTaskCheckForTimeOut+0xc4>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d007      	beq.n	801100a <xTaskCheckForTimeOut+0x86>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	69ba      	ldr	r2, [r7, #24]
 8011000:	429a      	cmp	r2, r3
 8011002:	d302      	bcc.n	801100a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011004:	2301      	movs	r3, #1
 8011006:	61fb      	str	r3, [r7, #28]
 8011008:	e015      	b.n	8011036 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	697a      	ldr	r2, [r7, #20]
 8011010:	429a      	cmp	r2, r3
 8011012:	d20b      	bcs.n	801102c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	681a      	ldr	r2, [r3, #0]
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	1ad2      	subs	r2, r2, r3
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f7ff ff99 	bl	8010f58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011026:	2300      	movs	r3, #0
 8011028:	61fb      	str	r3, [r7, #28]
 801102a:	e004      	b.n	8011036 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	2200      	movs	r2, #0
 8011030:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011032:	2301      	movs	r3, #1
 8011034:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011036:	f000 ff91 	bl	8011f5c <vPortExitCritical>

	return xReturn;
 801103a:	69fb      	ldr	r3, [r7, #28]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3720      	adds	r7, #32
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	20000d54 	.word	0x20000d54
 8011048:	20000d68 	.word	0x20000d68

0801104c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801104c:	b480      	push	{r7}
 801104e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011050:	4b03      	ldr	r3, [pc, #12]	@ (8011060 <vTaskMissedYield+0x14>)
 8011052:	2201      	movs	r2, #1
 8011054:	601a      	str	r2, [r3, #0]
}
 8011056:	bf00      	nop
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr
 8011060:	20000d64 	.word	0x20000d64

08011064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801106c:	f000 f852 	bl	8011114 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011070:	4b06      	ldr	r3, [pc, #24]	@ (801108c <prvIdleTask+0x28>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b01      	cmp	r3, #1
 8011076:	d9f9      	bls.n	801106c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011078:	4b05      	ldr	r3, [pc, #20]	@ (8011090 <prvIdleTask+0x2c>)
 801107a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801107e:	601a      	str	r2, [r3, #0]
 8011080:	f3bf 8f4f 	dsb	sy
 8011084:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011088:	e7f0      	b.n	801106c <prvIdleTask+0x8>
 801108a:	bf00      	nop
 801108c:	20000880 	.word	0x20000880
 8011090:	e000ed04 	.word	0xe000ed04

08011094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801109a:	2300      	movs	r3, #0
 801109c:	607b      	str	r3, [r7, #4]
 801109e:	e00c      	b.n	80110ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80110a0:	687a      	ldr	r2, [r7, #4]
 80110a2:	4613      	mov	r3, r2
 80110a4:	009b      	lsls	r3, r3, #2
 80110a6:	4413      	add	r3, r2
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	4a12      	ldr	r2, [pc, #72]	@ (80110f4 <prvInitialiseTaskLists+0x60>)
 80110ac:	4413      	add	r3, r2
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7fe f920 	bl	800f2f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	3301      	adds	r3, #1
 80110b8:	607b      	str	r3, [r7, #4]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2b37      	cmp	r3, #55	@ 0x37
 80110be:	d9ef      	bls.n	80110a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80110c0:	480d      	ldr	r0, [pc, #52]	@ (80110f8 <prvInitialiseTaskLists+0x64>)
 80110c2:	f7fe f917 	bl	800f2f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80110c6:	480d      	ldr	r0, [pc, #52]	@ (80110fc <prvInitialiseTaskLists+0x68>)
 80110c8:	f7fe f914 	bl	800f2f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80110cc:	480c      	ldr	r0, [pc, #48]	@ (8011100 <prvInitialiseTaskLists+0x6c>)
 80110ce:	f7fe f911 	bl	800f2f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80110d2:	480c      	ldr	r0, [pc, #48]	@ (8011104 <prvInitialiseTaskLists+0x70>)
 80110d4:	f7fe f90e 	bl	800f2f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80110d8:	480b      	ldr	r0, [pc, #44]	@ (8011108 <prvInitialiseTaskLists+0x74>)
 80110da:	f7fe f90b 	bl	800f2f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80110de:	4b0b      	ldr	r3, [pc, #44]	@ (801110c <prvInitialiseTaskLists+0x78>)
 80110e0:	4a05      	ldr	r2, [pc, #20]	@ (80110f8 <prvInitialiseTaskLists+0x64>)
 80110e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80110e4:	4b0a      	ldr	r3, [pc, #40]	@ (8011110 <prvInitialiseTaskLists+0x7c>)
 80110e6:	4a05      	ldr	r2, [pc, #20]	@ (80110fc <prvInitialiseTaskLists+0x68>)
 80110e8:	601a      	str	r2, [r3, #0]
}
 80110ea:	bf00      	nop
 80110ec:	3708      	adds	r7, #8
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	20000880 	.word	0x20000880
 80110f8:	20000ce0 	.word	0x20000ce0
 80110fc:	20000cf4 	.word	0x20000cf4
 8011100:	20000d10 	.word	0x20000d10
 8011104:	20000d24 	.word	0x20000d24
 8011108:	20000d3c 	.word	0x20000d3c
 801110c:	20000d08 	.word	0x20000d08
 8011110:	20000d0c 	.word	0x20000d0c

08011114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801111a:	e019      	b.n	8011150 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801111c:	f000 feec 	bl	8011ef8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011120:	4b10      	ldr	r3, [pc, #64]	@ (8011164 <prvCheckTasksWaitingTermination+0x50>)
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	68db      	ldr	r3, [r3, #12]
 8011126:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	3304      	adds	r3, #4
 801112c:	4618      	mov	r0, r3
 801112e:	f7fe f96b 	bl	800f408 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011132:	4b0d      	ldr	r3, [pc, #52]	@ (8011168 <prvCheckTasksWaitingTermination+0x54>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	3b01      	subs	r3, #1
 8011138:	4a0b      	ldr	r2, [pc, #44]	@ (8011168 <prvCheckTasksWaitingTermination+0x54>)
 801113a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801113c:	4b0b      	ldr	r3, [pc, #44]	@ (801116c <prvCheckTasksWaitingTermination+0x58>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	3b01      	subs	r3, #1
 8011142:	4a0a      	ldr	r2, [pc, #40]	@ (801116c <prvCheckTasksWaitingTermination+0x58>)
 8011144:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011146:	f000 ff09 	bl	8011f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f000 f810 	bl	8011170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011150:	4b06      	ldr	r3, [pc, #24]	@ (801116c <prvCheckTasksWaitingTermination+0x58>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d1e1      	bne.n	801111c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011158:	bf00      	nop
 801115a:	bf00      	nop
 801115c:	3708      	adds	r7, #8
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	20000d24 	.word	0x20000d24
 8011168:	20000d50 	.word	0x20000d50
 801116c:	20000d38 	.word	0x20000d38

08011170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	3354      	adds	r3, #84	@ 0x54
 801117c:	4618      	mov	r0, r3
 801117e:	f003 fb1d 	bl	80147bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011188:	2b00      	cmp	r3, #0
 801118a:	d108      	bne.n	801119e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011190:	4618      	mov	r0, r3
 8011192:	f001 f8a1 	bl	80122d8 <vPortFree>
				vPortFree( pxTCB );
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f001 f89e 	bl	80122d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801119c:	e019      	b.n	80111d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d103      	bne.n	80111b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f001 f895 	bl	80122d8 <vPortFree>
	}
 80111ae:	e010      	b.n	80111d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80111b6:	2b02      	cmp	r3, #2
 80111b8:	d00b      	beq.n	80111d2 <prvDeleteTCB+0x62>
	__asm volatile
 80111ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111be:	f383 8811 	msr	BASEPRI, r3
 80111c2:	f3bf 8f6f 	isb	sy
 80111c6:	f3bf 8f4f 	dsb	sy
 80111ca:	60fb      	str	r3, [r7, #12]
}
 80111cc:	bf00      	nop
 80111ce:	bf00      	nop
 80111d0:	e7fd      	b.n	80111ce <prvDeleteTCB+0x5e>
	}
 80111d2:	bf00      	nop
 80111d4:	3710      	adds	r7, #16
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
	...

080111dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111e2:	4b0c      	ldr	r3, [pc, #48]	@ (8011214 <prvResetNextTaskUnblockTime+0x38>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d104      	bne.n	80111f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80111ec:	4b0a      	ldr	r3, [pc, #40]	@ (8011218 <prvResetNextTaskUnblockTime+0x3c>)
 80111ee:	f04f 32ff 	mov.w	r2, #4294967295
 80111f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80111f4:	e008      	b.n	8011208 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111f6:	4b07      	ldr	r3, [pc, #28]	@ (8011214 <prvResetNextTaskUnblockTime+0x38>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	68db      	ldr	r3, [r3, #12]
 80111fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	4a04      	ldr	r2, [pc, #16]	@ (8011218 <prvResetNextTaskUnblockTime+0x3c>)
 8011206:	6013      	str	r3, [r2, #0]
}
 8011208:	bf00      	nop
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr
 8011214:	20000d08 	.word	0x20000d08
 8011218:	20000d70 	.word	0x20000d70

0801121c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801121c:	b480      	push	{r7}
 801121e:	b083      	sub	sp, #12
 8011220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011222:	4b0b      	ldr	r3, [pc, #44]	@ (8011250 <xTaskGetSchedulerState+0x34>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d102      	bne.n	8011230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801122a:	2301      	movs	r3, #1
 801122c:	607b      	str	r3, [r7, #4]
 801122e:	e008      	b.n	8011242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011230:	4b08      	ldr	r3, [pc, #32]	@ (8011254 <xTaskGetSchedulerState+0x38>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d102      	bne.n	801123e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011238:	2302      	movs	r3, #2
 801123a:	607b      	str	r3, [r7, #4]
 801123c:	e001      	b.n	8011242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801123e:	2300      	movs	r3, #0
 8011240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011242:	687b      	ldr	r3, [r7, #4]
	}
 8011244:	4618      	mov	r0, r3
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	20000d5c 	.word	0x20000d5c
 8011254:	20000d78 	.word	0x20000d78

08011258 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011264:	2300      	movs	r3, #0
 8011266:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d051      	beq.n	8011312 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011272:	4b2a      	ldr	r3, [pc, #168]	@ (801131c <xTaskPriorityInherit+0xc4>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011278:	429a      	cmp	r2, r3
 801127a:	d241      	bcs.n	8011300 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	699b      	ldr	r3, [r3, #24]
 8011280:	2b00      	cmp	r3, #0
 8011282:	db06      	blt.n	8011292 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011284:	4b25      	ldr	r3, [pc, #148]	@ (801131c <xTaskPriorityInherit+0xc4>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801128a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	6959      	ldr	r1, [r3, #20]
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801129a:	4613      	mov	r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4413      	add	r3, r2
 80112a0:	009b      	lsls	r3, r3, #2
 80112a2:	4a1f      	ldr	r2, [pc, #124]	@ (8011320 <xTaskPriorityInherit+0xc8>)
 80112a4:	4413      	add	r3, r2
 80112a6:	4299      	cmp	r1, r3
 80112a8:	d122      	bne.n	80112f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	3304      	adds	r3, #4
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7fe f8aa 	bl	800f408 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112b4:	4b19      	ldr	r3, [pc, #100]	@ (801131c <xTaskPriorityInherit+0xc4>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112c2:	4b18      	ldr	r3, [pc, #96]	@ (8011324 <xTaskPriorityInherit+0xcc>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d903      	bls.n	80112d2 <xTaskPriorityInherit+0x7a>
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112ce:	4a15      	ldr	r2, [pc, #84]	@ (8011324 <xTaskPriorityInherit+0xcc>)
 80112d0:	6013      	str	r3, [r2, #0]
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112d6:	4613      	mov	r3, r2
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	4413      	add	r3, r2
 80112dc:	009b      	lsls	r3, r3, #2
 80112de:	4a10      	ldr	r2, [pc, #64]	@ (8011320 <xTaskPriorityInherit+0xc8>)
 80112e0:	441a      	add	r2, r3
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	3304      	adds	r3, #4
 80112e6:	4619      	mov	r1, r3
 80112e8:	4610      	mov	r0, r2
 80112ea:	f7fe f830 	bl	800f34e <vListInsertEnd>
 80112ee:	e004      	b.n	80112fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112f0:	4b0a      	ldr	r3, [pc, #40]	@ (801131c <xTaskPriorityInherit+0xc4>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80112fa:	2301      	movs	r3, #1
 80112fc:	60fb      	str	r3, [r7, #12]
 80112fe:	e008      	b.n	8011312 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011304:	4b05      	ldr	r3, [pc, #20]	@ (801131c <xTaskPriorityInherit+0xc4>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801130a:	429a      	cmp	r2, r3
 801130c:	d201      	bcs.n	8011312 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801130e:	2301      	movs	r3, #1
 8011310:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011312:	68fb      	ldr	r3, [r7, #12]
	}
 8011314:	4618      	mov	r0, r3
 8011316:	3710      	adds	r7, #16
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	2000087c 	.word	0x2000087c
 8011320:	20000880 	.word	0x20000880
 8011324:	20000d58 	.word	0x20000d58

08011328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011328:	b580      	push	{r7, lr}
 801132a:	b086      	sub	sp, #24
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011334:	2300      	movs	r3, #0
 8011336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d058      	beq.n	80113f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801133e:	4b2f      	ldr	r3, [pc, #188]	@ (80113fc <xTaskPriorityDisinherit+0xd4>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	693a      	ldr	r2, [r7, #16]
 8011344:	429a      	cmp	r2, r3
 8011346:	d00b      	beq.n	8011360 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801134c:	f383 8811 	msr	BASEPRI, r3
 8011350:	f3bf 8f6f 	isb	sy
 8011354:	f3bf 8f4f 	dsb	sy
 8011358:	60fb      	str	r3, [r7, #12]
}
 801135a:	bf00      	nop
 801135c:	bf00      	nop
 801135e:	e7fd      	b.n	801135c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011364:	2b00      	cmp	r3, #0
 8011366:	d10b      	bne.n	8011380 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801136c:	f383 8811 	msr	BASEPRI, r3
 8011370:	f3bf 8f6f 	isb	sy
 8011374:	f3bf 8f4f 	dsb	sy
 8011378:	60bb      	str	r3, [r7, #8]
}
 801137a:	bf00      	nop
 801137c:	bf00      	nop
 801137e:	e7fd      	b.n	801137c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011384:	1e5a      	subs	r2, r3, #1
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011392:	429a      	cmp	r2, r3
 8011394:	d02c      	beq.n	80113f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801139a:	2b00      	cmp	r3, #0
 801139c:	d128      	bne.n	80113f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	3304      	adds	r3, #4
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fe f830 	bl	800f408 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80113b8:	693b      	ldr	r3, [r7, #16]
 80113ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113c0:	4b0f      	ldr	r3, [pc, #60]	@ (8011400 <xTaskPriorityDisinherit+0xd8>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d903      	bls.n	80113d0 <xTaskPriorityDisinherit+0xa8>
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113cc:	4a0c      	ldr	r2, [pc, #48]	@ (8011400 <xTaskPriorityDisinherit+0xd8>)
 80113ce:	6013      	str	r3, [r2, #0]
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113d4:	4613      	mov	r3, r2
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	4413      	add	r3, r2
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	4a09      	ldr	r2, [pc, #36]	@ (8011404 <xTaskPriorityDisinherit+0xdc>)
 80113de:	441a      	add	r2, r3
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	3304      	adds	r3, #4
 80113e4:	4619      	mov	r1, r3
 80113e6:	4610      	mov	r0, r2
 80113e8:	f7fd ffb1 	bl	800f34e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80113ec:	2301      	movs	r3, #1
 80113ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80113f0:	697b      	ldr	r3, [r7, #20]
	}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3718      	adds	r7, #24
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	2000087c 	.word	0x2000087c
 8011400:	20000d58 	.word	0x20000d58
 8011404:	20000880 	.word	0x20000880

08011408 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011408:	b580      	push	{r7, lr}
 801140a:	b088      	sub	sp, #32
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011416:	2301      	movs	r3, #1
 8011418:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d06c      	beq.n	80114fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011420:	69bb      	ldr	r3, [r7, #24]
 8011422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011424:	2b00      	cmp	r3, #0
 8011426:	d10b      	bne.n	8011440 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801142c:	f383 8811 	msr	BASEPRI, r3
 8011430:	f3bf 8f6f 	isb	sy
 8011434:	f3bf 8f4f 	dsb	sy
 8011438:	60fb      	str	r3, [r7, #12]
}
 801143a:	bf00      	nop
 801143c:	bf00      	nop
 801143e:	e7fd      	b.n	801143c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011440:	69bb      	ldr	r3, [r7, #24]
 8011442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011444:	683a      	ldr	r2, [r7, #0]
 8011446:	429a      	cmp	r2, r3
 8011448:	d902      	bls.n	8011450 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	61fb      	str	r3, [r7, #28]
 801144e:	e002      	b.n	8011456 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011454:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011456:	69bb      	ldr	r3, [r7, #24]
 8011458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801145a:	69fa      	ldr	r2, [r7, #28]
 801145c:	429a      	cmp	r2, r3
 801145e:	d04c      	beq.n	80114fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011464:	697a      	ldr	r2, [r7, #20]
 8011466:	429a      	cmp	r2, r3
 8011468:	d147      	bne.n	80114fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801146a:	4b26      	ldr	r3, [pc, #152]	@ (8011504 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	69ba      	ldr	r2, [r7, #24]
 8011470:	429a      	cmp	r2, r3
 8011472:	d10b      	bne.n	801148c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011478:	f383 8811 	msr	BASEPRI, r3
 801147c:	f3bf 8f6f 	isb	sy
 8011480:	f3bf 8f4f 	dsb	sy
 8011484:	60bb      	str	r3, [r7, #8]
}
 8011486:	bf00      	nop
 8011488:	bf00      	nop
 801148a:	e7fd      	b.n	8011488 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801148c:	69bb      	ldr	r3, [r7, #24]
 801148e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011490:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011492:	69bb      	ldr	r3, [r7, #24]
 8011494:	69fa      	ldr	r2, [r7, #28]
 8011496:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011498:	69bb      	ldr	r3, [r7, #24]
 801149a:	699b      	ldr	r3, [r3, #24]
 801149c:	2b00      	cmp	r3, #0
 801149e:	db04      	blt.n	80114aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80114aa:	69bb      	ldr	r3, [r7, #24]
 80114ac:	6959      	ldr	r1, [r3, #20]
 80114ae:	693a      	ldr	r2, [r7, #16]
 80114b0:	4613      	mov	r3, r2
 80114b2:	009b      	lsls	r3, r3, #2
 80114b4:	4413      	add	r3, r2
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	4a13      	ldr	r2, [pc, #76]	@ (8011508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80114ba:	4413      	add	r3, r2
 80114bc:	4299      	cmp	r1, r3
 80114be:	d11c      	bne.n	80114fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114c0:	69bb      	ldr	r3, [r7, #24]
 80114c2:	3304      	adds	r3, #4
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7fd ff9f 	bl	800f408 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114ce:	4b0f      	ldr	r3, [pc, #60]	@ (801150c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d903      	bls.n	80114de <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114da:	4a0c      	ldr	r2, [pc, #48]	@ (801150c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80114dc:	6013      	str	r3, [r2, #0]
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114e2:	4613      	mov	r3, r2
 80114e4:	009b      	lsls	r3, r3, #2
 80114e6:	4413      	add	r3, r2
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	4a07      	ldr	r2, [pc, #28]	@ (8011508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80114ec:	441a      	add	r2, r3
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	3304      	adds	r3, #4
 80114f2:	4619      	mov	r1, r3
 80114f4:	4610      	mov	r0, r2
 80114f6:	f7fd ff2a 	bl	800f34e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80114fa:	bf00      	nop
 80114fc:	3720      	adds	r7, #32
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	2000087c 	.word	0x2000087c
 8011508:	20000880 	.word	0x20000880
 801150c:	20000d58 	.word	0x20000d58

08011510 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011510:	b480      	push	{r7}
 8011512:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011514:	4b07      	ldr	r3, [pc, #28]	@ (8011534 <pvTaskIncrementMutexHeldCount+0x24>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d004      	beq.n	8011526 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801151c:	4b05      	ldr	r3, [pc, #20]	@ (8011534 <pvTaskIncrementMutexHeldCount+0x24>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011522:	3201      	adds	r2, #1
 8011524:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8011526:	4b03      	ldr	r3, [pc, #12]	@ (8011534 <pvTaskIncrementMutexHeldCount+0x24>)
 8011528:	681b      	ldr	r3, [r3, #0]
	}
 801152a:	4618      	mov	r0, r3
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr
 8011534:	2000087c 	.word	0x2000087c

08011538 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011542:	4b21      	ldr	r3, [pc, #132]	@ (80115c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011548:	4b20      	ldr	r3, [pc, #128]	@ (80115cc <prvAddCurrentTaskToDelayedList+0x94>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	3304      	adds	r3, #4
 801154e:	4618      	mov	r0, r3
 8011550:	f7fd ff5a 	bl	800f408 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801155a:	d10a      	bne.n	8011572 <prvAddCurrentTaskToDelayedList+0x3a>
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d007      	beq.n	8011572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011562:	4b1a      	ldr	r3, [pc, #104]	@ (80115cc <prvAddCurrentTaskToDelayedList+0x94>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	3304      	adds	r3, #4
 8011568:	4619      	mov	r1, r3
 801156a:	4819      	ldr	r0, [pc, #100]	@ (80115d0 <prvAddCurrentTaskToDelayedList+0x98>)
 801156c:	f7fd feef 	bl	800f34e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011570:	e026      	b.n	80115c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011572:	68fa      	ldr	r2, [r7, #12]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	4413      	add	r3, r2
 8011578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801157a:	4b14      	ldr	r3, [pc, #80]	@ (80115cc <prvAddCurrentTaskToDelayedList+0x94>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	68ba      	ldr	r2, [r7, #8]
 8011580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011582:	68ba      	ldr	r2, [r7, #8]
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	429a      	cmp	r2, r3
 8011588:	d209      	bcs.n	801159e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801158a:	4b12      	ldr	r3, [pc, #72]	@ (80115d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801158c:	681a      	ldr	r2, [r3, #0]
 801158e:	4b0f      	ldr	r3, [pc, #60]	@ (80115cc <prvAddCurrentTaskToDelayedList+0x94>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	3304      	adds	r3, #4
 8011594:	4619      	mov	r1, r3
 8011596:	4610      	mov	r0, r2
 8011598:	f7fd fefd 	bl	800f396 <vListInsert>
}
 801159c:	e010      	b.n	80115c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801159e:	4b0e      	ldr	r3, [pc, #56]	@ (80115d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	4b0a      	ldr	r3, [pc, #40]	@ (80115cc <prvAddCurrentTaskToDelayedList+0x94>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	3304      	adds	r3, #4
 80115a8:	4619      	mov	r1, r3
 80115aa:	4610      	mov	r0, r2
 80115ac:	f7fd fef3 	bl	800f396 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80115b0:	4b0a      	ldr	r3, [pc, #40]	@ (80115dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	68ba      	ldr	r2, [r7, #8]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d202      	bcs.n	80115c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80115ba:	4a08      	ldr	r2, [pc, #32]	@ (80115dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	6013      	str	r3, [r2, #0]
}
 80115c0:	bf00      	nop
 80115c2:	3710      	adds	r7, #16
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}
 80115c8:	20000d54 	.word	0x20000d54
 80115cc:	2000087c 	.word	0x2000087c
 80115d0:	20000d3c 	.word	0x20000d3c
 80115d4:	20000d0c 	.word	0x20000d0c
 80115d8:	20000d08 	.word	0x20000d08
 80115dc:	20000d70 	.word	0x20000d70

080115e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b08a      	sub	sp, #40	@ 0x28
 80115e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80115e6:	2300      	movs	r3, #0
 80115e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80115ea:	f000 fb13 	bl	8011c14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80115ee:	4b1d      	ldr	r3, [pc, #116]	@ (8011664 <xTimerCreateTimerTask+0x84>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d021      	beq.n	801163a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80115f6:	2300      	movs	r3, #0
 80115f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80115fa:	2300      	movs	r3, #0
 80115fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80115fe:	1d3a      	adds	r2, r7, #4
 8011600:	f107 0108 	add.w	r1, r7, #8
 8011604:	f107 030c 	add.w	r3, r7, #12
 8011608:	4618      	mov	r0, r3
 801160a:	f7fd fe59 	bl	800f2c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801160e:	6879      	ldr	r1, [r7, #4]
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	68fa      	ldr	r2, [r7, #12]
 8011614:	9202      	str	r2, [sp, #8]
 8011616:	9301      	str	r3, [sp, #4]
 8011618:	2302      	movs	r3, #2
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	2300      	movs	r3, #0
 801161e:	460a      	mov	r2, r1
 8011620:	4911      	ldr	r1, [pc, #68]	@ (8011668 <xTimerCreateTimerTask+0x88>)
 8011622:	4812      	ldr	r0, [pc, #72]	@ (801166c <xTimerCreateTimerTask+0x8c>)
 8011624:	f7fe ff46 	bl	80104b4 <xTaskCreateStatic>
 8011628:	4603      	mov	r3, r0
 801162a:	4a11      	ldr	r2, [pc, #68]	@ (8011670 <xTimerCreateTimerTask+0x90>)
 801162c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801162e:	4b10      	ldr	r3, [pc, #64]	@ (8011670 <xTimerCreateTimerTask+0x90>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d001      	beq.n	801163a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011636:	2301      	movs	r3, #1
 8011638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d10b      	bne.n	8011658 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011644:	f383 8811 	msr	BASEPRI, r3
 8011648:	f3bf 8f6f 	isb	sy
 801164c:	f3bf 8f4f 	dsb	sy
 8011650:	613b      	str	r3, [r7, #16]
}
 8011652:	bf00      	nop
 8011654:	bf00      	nop
 8011656:	e7fd      	b.n	8011654 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011658:	697b      	ldr	r3, [r7, #20]
}
 801165a:	4618      	mov	r0, r3
 801165c:	3718      	adds	r7, #24
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	20000dac 	.word	0x20000dac
 8011668:	08015ab8 	.word	0x08015ab8
 801166c:	080117ad 	.word	0x080117ad
 8011670:	20000db0 	.word	0x20000db0

08011674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b08a      	sub	sp, #40	@ 0x28
 8011678:	af00      	add	r7, sp, #0
 801167a:	60f8      	str	r0, [r7, #12]
 801167c:	60b9      	str	r1, [r7, #8]
 801167e:	607a      	str	r2, [r7, #4]
 8011680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011682:	2300      	movs	r3, #0
 8011684:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d10b      	bne.n	80116a4 <xTimerGenericCommand+0x30>
	__asm volatile
 801168c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011690:	f383 8811 	msr	BASEPRI, r3
 8011694:	f3bf 8f6f 	isb	sy
 8011698:	f3bf 8f4f 	dsb	sy
 801169c:	623b      	str	r3, [r7, #32]
}
 801169e:	bf00      	nop
 80116a0:	bf00      	nop
 80116a2:	e7fd      	b.n	80116a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80116a4:	4b19      	ldr	r3, [pc, #100]	@ (801170c <xTimerGenericCommand+0x98>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d02a      	beq.n	8011702 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	2b05      	cmp	r3, #5
 80116bc:	dc18      	bgt.n	80116f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80116be:	f7ff fdad 	bl	801121c <xTaskGetSchedulerState>
 80116c2:	4603      	mov	r3, r0
 80116c4:	2b02      	cmp	r3, #2
 80116c6:	d109      	bne.n	80116dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80116c8:	4b10      	ldr	r3, [pc, #64]	@ (801170c <xTimerGenericCommand+0x98>)
 80116ca:	6818      	ldr	r0, [r3, #0]
 80116cc:	f107 0110 	add.w	r1, r7, #16
 80116d0:	2300      	movs	r3, #0
 80116d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116d4:	f7fe f876 	bl	800f7c4 <xQueueGenericSend>
 80116d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80116da:	e012      	b.n	8011702 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80116dc:	4b0b      	ldr	r3, [pc, #44]	@ (801170c <xTimerGenericCommand+0x98>)
 80116de:	6818      	ldr	r0, [r3, #0]
 80116e0:	f107 0110 	add.w	r1, r7, #16
 80116e4:	2300      	movs	r3, #0
 80116e6:	2200      	movs	r2, #0
 80116e8:	f7fe f86c 	bl	800f7c4 <xQueueGenericSend>
 80116ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80116ee:	e008      	b.n	8011702 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80116f0:	4b06      	ldr	r3, [pc, #24]	@ (801170c <xTimerGenericCommand+0x98>)
 80116f2:	6818      	ldr	r0, [r3, #0]
 80116f4:	f107 0110 	add.w	r1, r7, #16
 80116f8:	2300      	movs	r3, #0
 80116fa:	683a      	ldr	r2, [r7, #0]
 80116fc:	f7fe f964 	bl	800f9c8 <xQueueGenericSendFromISR>
 8011700:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011704:	4618      	mov	r0, r3
 8011706:	3728      	adds	r7, #40	@ 0x28
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}
 801170c:	20000dac 	.word	0x20000dac

08011710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b088      	sub	sp, #32
 8011714:	af02      	add	r7, sp, #8
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801171a:	4b23      	ldr	r3, [pc, #140]	@ (80117a8 <prvProcessExpiredTimer+0x98>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	3304      	adds	r3, #4
 8011728:	4618      	mov	r0, r3
 801172a:	f7fd fe6d 	bl	800f408 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011734:	f003 0304 	and.w	r3, r3, #4
 8011738:	2b00      	cmp	r3, #0
 801173a:	d023      	beq.n	8011784 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	699a      	ldr	r2, [r3, #24]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	18d1      	adds	r1, r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	683a      	ldr	r2, [r7, #0]
 8011748:	6978      	ldr	r0, [r7, #20]
 801174a:	f000 f8d5 	bl	80118f8 <prvInsertTimerInActiveList>
 801174e:	4603      	mov	r3, r0
 8011750:	2b00      	cmp	r3, #0
 8011752:	d020      	beq.n	8011796 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011754:	2300      	movs	r3, #0
 8011756:	9300      	str	r3, [sp, #0]
 8011758:	2300      	movs	r3, #0
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	2100      	movs	r1, #0
 801175e:	6978      	ldr	r0, [r7, #20]
 8011760:	f7ff ff88 	bl	8011674 <xTimerGenericCommand>
 8011764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d114      	bne.n	8011796 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801176c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011770:	f383 8811 	msr	BASEPRI, r3
 8011774:	f3bf 8f6f 	isb	sy
 8011778:	f3bf 8f4f 	dsb	sy
 801177c:	60fb      	str	r3, [r7, #12]
}
 801177e:	bf00      	nop
 8011780:	bf00      	nop
 8011782:	e7fd      	b.n	8011780 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801178a:	f023 0301 	bic.w	r3, r3, #1
 801178e:	b2da      	uxtb	r2, r3
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	6a1b      	ldr	r3, [r3, #32]
 801179a:	6978      	ldr	r0, [r7, #20]
 801179c:	4798      	blx	r3
}
 801179e:	bf00      	nop
 80117a0:	3718      	adds	r7, #24
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	20000da4 	.word	0x20000da4

080117ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80117b4:	f107 0308 	add.w	r3, r7, #8
 80117b8:	4618      	mov	r0, r3
 80117ba:	f000 f859 	bl	8011870 <prvGetNextExpireTime>
 80117be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	4619      	mov	r1, r3
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f000 f805 	bl	80117d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80117ca:	f000 f8d7 	bl	801197c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80117ce:	bf00      	nop
 80117d0:	e7f0      	b.n	80117b4 <prvTimerTask+0x8>
	...

080117d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b084      	sub	sp, #16
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
 80117dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80117de:	f7ff f917 	bl	8010a10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80117e2:	f107 0308 	add.w	r3, r7, #8
 80117e6:	4618      	mov	r0, r3
 80117e8:	f000 f866 	bl	80118b8 <prvSampleTimeNow>
 80117ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d130      	bne.n	8011856 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d10a      	bne.n	8011810 <prvProcessTimerOrBlockTask+0x3c>
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d806      	bhi.n	8011810 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011802:	f7ff f913 	bl	8010a2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011806:	68f9      	ldr	r1, [r7, #12]
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f7ff ff81 	bl	8011710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801180e:	e024      	b.n	801185a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d008      	beq.n	8011828 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011816:	4b13      	ldr	r3, [pc, #76]	@ (8011864 <prvProcessTimerOrBlockTask+0x90>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d101      	bne.n	8011824 <prvProcessTimerOrBlockTask+0x50>
 8011820:	2301      	movs	r3, #1
 8011822:	e000      	b.n	8011826 <prvProcessTimerOrBlockTask+0x52>
 8011824:	2300      	movs	r3, #0
 8011826:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011828:	4b0f      	ldr	r3, [pc, #60]	@ (8011868 <prvProcessTimerOrBlockTask+0x94>)
 801182a:	6818      	ldr	r0, [r3, #0]
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	1ad3      	subs	r3, r2, r3
 8011832:	683a      	ldr	r2, [r7, #0]
 8011834:	4619      	mov	r1, r3
 8011836:	f7fe fe09 	bl	801044c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801183a:	f7ff f8f7 	bl	8010a2c <xTaskResumeAll>
 801183e:	4603      	mov	r3, r0
 8011840:	2b00      	cmp	r3, #0
 8011842:	d10a      	bne.n	801185a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011844:	4b09      	ldr	r3, [pc, #36]	@ (801186c <prvProcessTimerOrBlockTask+0x98>)
 8011846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801184a:	601a      	str	r2, [r3, #0]
 801184c:	f3bf 8f4f 	dsb	sy
 8011850:	f3bf 8f6f 	isb	sy
}
 8011854:	e001      	b.n	801185a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011856:	f7ff f8e9 	bl	8010a2c <xTaskResumeAll>
}
 801185a:	bf00      	nop
 801185c:	3710      	adds	r7, #16
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	20000da8 	.word	0x20000da8
 8011868:	20000dac 	.word	0x20000dac
 801186c:	e000ed04 	.word	0xe000ed04

08011870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011870:	b480      	push	{r7}
 8011872:	b085      	sub	sp, #20
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011878:	4b0e      	ldr	r3, [pc, #56]	@ (80118b4 <prvGetNextExpireTime+0x44>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d101      	bne.n	8011886 <prvGetNextExpireTime+0x16>
 8011882:	2201      	movs	r2, #1
 8011884:	e000      	b.n	8011888 <prvGetNextExpireTime+0x18>
 8011886:	2200      	movs	r2, #0
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d105      	bne.n	80118a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011894:	4b07      	ldr	r3, [pc, #28]	@ (80118b4 <prvGetNextExpireTime+0x44>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	60fb      	str	r3, [r7, #12]
 801189e:	e001      	b.n	80118a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80118a0:	2300      	movs	r3, #0
 80118a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80118a4:	68fb      	ldr	r3, [r7, #12]
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3714      	adds	r7, #20
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr
 80118b2:	bf00      	nop
 80118b4:	20000da4 	.word	0x20000da4

080118b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80118c0:	f7ff f952 	bl	8010b68 <xTaskGetTickCount>
 80118c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80118c6:	4b0b      	ldr	r3, [pc, #44]	@ (80118f4 <prvSampleTimeNow+0x3c>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	68fa      	ldr	r2, [r7, #12]
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d205      	bcs.n	80118dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80118d0:	f000 f93a 	bl	8011b48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2201      	movs	r2, #1
 80118d8:	601a      	str	r2, [r3, #0]
 80118da:	e002      	b.n	80118e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2200      	movs	r2, #0
 80118e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80118e2:	4a04      	ldr	r2, [pc, #16]	@ (80118f4 <prvSampleTimeNow+0x3c>)
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80118e8:	68fb      	ldr	r3, [r7, #12]
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3710      	adds	r7, #16
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	20000db4 	.word	0x20000db4

080118f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b086      	sub	sp, #24
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	607a      	str	r2, [r7, #4]
 8011904:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011906:	2300      	movs	r3, #0
 8011908:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	68fa      	ldr	r2, [r7, #12]
 8011914:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011916:	68ba      	ldr	r2, [r7, #8]
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	429a      	cmp	r2, r3
 801191c:	d812      	bhi.n	8011944 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	1ad2      	subs	r2, r2, r3
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	699b      	ldr	r3, [r3, #24]
 8011928:	429a      	cmp	r2, r3
 801192a:	d302      	bcc.n	8011932 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801192c:	2301      	movs	r3, #1
 801192e:	617b      	str	r3, [r7, #20]
 8011930:	e01b      	b.n	801196a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011932:	4b10      	ldr	r3, [pc, #64]	@ (8011974 <prvInsertTimerInActiveList+0x7c>)
 8011934:	681a      	ldr	r2, [r3, #0]
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	3304      	adds	r3, #4
 801193a:	4619      	mov	r1, r3
 801193c:	4610      	mov	r0, r2
 801193e:	f7fd fd2a 	bl	800f396 <vListInsert>
 8011942:	e012      	b.n	801196a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011944:	687a      	ldr	r2, [r7, #4]
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	429a      	cmp	r2, r3
 801194a:	d206      	bcs.n	801195a <prvInsertTimerInActiveList+0x62>
 801194c:	68ba      	ldr	r2, [r7, #8]
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	429a      	cmp	r2, r3
 8011952:	d302      	bcc.n	801195a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011954:	2301      	movs	r3, #1
 8011956:	617b      	str	r3, [r7, #20]
 8011958:	e007      	b.n	801196a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801195a:	4b07      	ldr	r3, [pc, #28]	@ (8011978 <prvInsertTimerInActiveList+0x80>)
 801195c:	681a      	ldr	r2, [r3, #0]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	3304      	adds	r3, #4
 8011962:	4619      	mov	r1, r3
 8011964:	4610      	mov	r0, r2
 8011966:	f7fd fd16 	bl	800f396 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801196a:	697b      	ldr	r3, [r7, #20]
}
 801196c:	4618      	mov	r0, r3
 801196e:	3718      	adds	r7, #24
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}
 8011974:	20000da8 	.word	0x20000da8
 8011978:	20000da4 	.word	0x20000da4

0801197c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b08e      	sub	sp, #56	@ 0x38
 8011980:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011982:	e0ce      	b.n	8011b22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2b00      	cmp	r3, #0
 8011988:	da19      	bge.n	80119be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801198a:	1d3b      	adds	r3, r7, #4
 801198c:	3304      	adds	r3, #4
 801198e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011992:	2b00      	cmp	r3, #0
 8011994:	d10b      	bne.n	80119ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801199a:	f383 8811 	msr	BASEPRI, r3
 801199e:	f3bf 8f6f 	isb	sy
 80119a2:	f3bf 8f4f 	dsb	sy
 80119a6:	61fb      	str	r3, [r7, #28]
}
 80119a8:	bf00      	nop
 80119aa:	bf00      	nop
 80119ac:	e7fd      	b.n	80119aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80119ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119b4:	6850      	ldr	r0, [r2, #4]
 80119b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119b8:	6892      	ldr	r2, [r2, #8]
 80119ba:	4611      	mov	r1, r2
 80119bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	f2c0 80ae 	blt.w	8011b22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80119ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119cc:	695b      	ldr	r3, [r3, #20]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d004      	beq.n	80119dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80119d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119d4:	3304      	adds	r3, #4
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fd fd16 	bl	800f408 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80119dc:	463b      	mov	r3, r7
 80119de:	4618      	mov	r0, r3
 80119e0:	f7ff ff6a 	bl	80118b8 <prvSampleTimeNow>
 80119e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2b09      	cmp	r3, #9
 80119ea:	f200 8097 	bhi.w	8011b1c <prvProcessReceivedCommands+0x1a0>
 80119ee:	a201      	add	r2, pc, #4	@ (adr r2, 80119f4 <prvProcessReceivedCommands+0x78>)
 80119f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119f4:	08011a1d 	.word	0x08011a1d
 80119f8:	08011a1d 	.word	0x08011a1d
 80119fc:	08011a1d 	.word	0x08011a1d
 8011a00:	08011a93 	.word	0x08011a93
 8011a04:	08011aa7 	.word	0x08011aa7
 8011a08:	08011af3 	.word	0x08011af3
 8011a0c:	08011a1d 	.word	0x08011a1d
 8011a10:	08011a1d 	.word	0x08011a1d
 8011a14:	08011a93 	.word	0x08011a93
 8011a18:	08011aa7 	.word	0x08011aa7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a22:	f043 0301 	orr.w	r3, r3, #1
 8011a26:	b2da      	uxtb	r2, r3
 8011a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011a2e:	68ba      	ldr	r2, [r7, #8]
 8011a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a32:	699b      	ldr	r3, [r3, #24]
 8011a34:	18d1      	adds	r1, r2, r3
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a3c:	f7ff ff5c 	bl	80118f8 <prvInsertTimerInActiveList>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d06c      	beq.n	8011b20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a48:	6a1b      	ldr	r3, [r3, #32]
 8011a4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a54:	f003 0304 	and.w	r3, r3, #4
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d061      	beq.n	8011b20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011a5c:	68ba      	ldr	r2, [r7, #8]
 8011a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a60:	699b      	ldr	r3, [r3, #24]
 8011a62:	441a      	add	r2, r3
 8011a64:	2300      	movs	r3, #0
 8011a66:	9300      	str	r3, [sp, #0]
 8011a68:	2300      	movs	r3, #0
 8011a6a:	2100      	movs	r1, #0
 8011a6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a6e:	f7ff fe01 	bl	8011674 <xTimerGenericCommand>
 8011a72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011a74:	6a3b      	ldr	r3, [r7, #32]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d152      	bne.n	8011b20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a7e:	f383 8811 	msr	BASEPRI, r3
 8011a82:	f3bf 8f6f 	isb	sy
 8011a86:	f3bf 8f4f 	dsb	sy
 8011a8a:	61bb      	str	r3, [r7, #24]
}
 8011a8c:	bf00      	nop
 8011a8e:	bf00      	nop
 8011a90:	e7fd      	b.n	8011a8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a98:	f023 0301 	bic.w	r3, r3, #1
 8011a9c:	b2da      	uxtb	r2, r3
 8011a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011aa4:	e03d      	b.n	8011b22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011aac:	f043 0301 	orr.w	r3, r3, #1
 8011ab0:	b2da      	uxtb	r2, r3
 8011ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011ab8:	68ba      	ldr	r2, [r7, #8]
 8011aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011abc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac0:	699b      	ldr	r3, [r3, #24]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d10b      	bne.n	8011ade <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aca:	f383 8811 	msr	BASEPRI, r3
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	617b      	str	r3, [r7, #20]
}
 8011ad8:	bf00      	nop
 8011ada:	bf00      	nop
 8011adc:	e7fd      	b.n	8011ada <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae0:	699a      	ldr	r2, [r3, #24]
 8011ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ae4:	18d1      	adds	r1, r2, r3
 8011ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011aec:	f7ff ff04 	bl	80118f8 <prvInsertTimerInActiveList>
					break;
 8011af0:	e017      	b.n	8011b22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011af8:	f003 0302 	and.w	r3, r3, #2
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d103      	bne.n	8011b08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b02:	f000 fbe9 	bl	80122d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011b06:	e00c      	b.n	8011b22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b0e:	f023 0301 	bic.w	r3, r3, #1
 8011b12:	b2da      	uxtb	r2, r3
 8011b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011b1a:	e002      	b.n	8011b22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011b1c:	bf00      	nop
 8011b1e:	e000      	b.n	8011b22 <prvProcessReceivedCommands+0x1a6>
					break;
 8011b20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011b22:	4b08      	ldr	r3, [pc, #32]	@ (8011b44 <prvProcessReceivedCommands+0x1c8>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	1d39      	adds	r1, r7, #4
 8011b28:	2200      	movs	r2, #0
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fe f87a 	bl	800fc24 <xQueueReceive>
 8011b30:	4603      	mov	r3, r0
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	f47f af26 	bne.w	8011984 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011b38:	bf00      	nop
 8011b3a:	bf00      	nop
 8011b3c:	3730      	adds	r7, #48	@ 0x30
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	20000dac 	.word	0x20000dac

08011b48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b088      	sub	sp, #32
 8011b4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011b4e:	e049      	b.n	8011be4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b50:	4b2e      	ldr	r3, [pc, #184]	@ (8011c0c <prvSwitchTimerLists+0xc4>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	68db      	ldr	r3, [r3, #12]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8011c0c <prvSwitchTimerLists+0xc4>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	68db      	ldr	r3, [r3, #12]
 8011b62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	3304      	adds	r3, #4
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f7fd fc4d 	bl	800f408 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	6a1b      	ldr	r3, [r3, #32]
 8011b72:	68f8      	ldr	r0, [r7, #12]
 8011b74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b7c:	f003 0304 	and.w	r3, r3, #4
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d02f      	beq.n	8011be4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	699b      	ldr	r3, [r3, #24]
 8011b88:	693a      	ldr	r2, [r7, #16]
 8011b8a:	4413      	add	r3, r2
 8011b8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011b8e:	68ba      	ldr	r2, [r7, #8]
 8011b90:	693b      	ldr	r3, [r7, #16]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d90e      	bls.n	8011bb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	68ba      	ldr	r2, [r7, #8]
 8011b9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	68fa      	ldr	r2, [r7, #12]
 8011ba0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8011c0c <prvSwitchTimerLists+0xc4>)
 8011ba4:	681a      	ldr	r2, [r3, #0]
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	3304      	adds	r3, #4
 8011baa:	4619      	mov	r1, r3
 8011bac:	4610      	mov	r0, r2
 8011bae:	f7fd fbf2 	bl	800f396 <vListInsert>
 8011bb2:	e017      	b.n	8011be4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	2300      	movs	r3, #0
 8011bba:	693a      	ldr	r2, [r7, #16]
 8011bbc:	2100      	movs	r1, #0
 8011bbe:	68f8      	ldr	r0, [r7, #12]
 8011bc0:	f7ff fd58 	bl	8011674 <xTimerGenericCommand>
 8011bc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d10b      	bne.n	8011be4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bd0:	f383 8811 	msr	BASEPRI, r3
 8011bd4:	f3bf 8f6f 	isb	sy
 8011bd8:	f3bf 8f4f 	dsb	sy
 8011bdc:	603b      	str	r3, [r7, #0]
}
 8011bde:	bf00      	nop
 8011be0:	bf00      	nop
 8011be2:	e7fd      	b.n	8011be0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011be4:	4b09      	ldr	r3, [pc, #36]	@ (8011c0c <prvSwitchTimerLists+0xc4>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d1b0      	bne.n	8011b50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011bee:	4b07      	ldr	r3, [pc, #28]	@ (8011c0c <prvSwitchTimerLists+0xc4>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011bf4:	4b06      	ldr	r3, [pc, #24]	@ (8011c10 <prvSwitchTimerLists+0xc8>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	4a04      	ldr	r2, [pc, #16]	@ (8011c0c <prvSwitchTimerLists+0xc4>)
 8011bfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011bfc:	4a04      	ldr	r2, [pc, #16]	@ (8011c10 <prvSwitchTimerLists+0xc8>)
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	6013      	str	r3, [r2, #0]
}
 8011c02:	bf00      	nop
 8011c04:	3718      	adds	r7, #24
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	20000da4 	.word	0x20000da4
 8011c10:	20000da8 	.word	0x20000da8

08011c14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011c1a:	f000 f96d 	bl	8011ef8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011c1e:	4b15      	ldr	r3, [pc, #84]	@ (8011c74 <prvCheckForValidListAndQueue+0x60>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d120      	bne.n	8011c68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011c26:	4814      	ldr	r0, [pc, #80]	@ (8011c78 <prvCheckForValidListAndQueue+0x64>)
 8011c28:	f7fd fb64 	bl	800f2f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011c2c:	4813      	ldr	r0, [pc, #76]	@ (8011c7c <prvCheckForValidListAndQueue+0x68>)
 8011c2e:	f7fd fb61 	bl	800f2f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011c32:	4b13      	ldr	r3, [pc, #76]	@ (8011c80 <prvCheckForValidListAndQueue+0x6c>)
 8011c34:	4a10      	ldr	r2, [pc, #64]	@ (8011c78 <prvCheckForValidListAndQueue+0x64>)
 8011c36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011c38:	4b12      	ldr	r3, [pc, #72]	@ (8011c84 <prvCheckForValidListAndQueue+0x70>)
 8011c3a:	4a10      	ldr	r2, [pc, #64]	@ (8011c7c <prvCheckForValidListAndQueue+0x68>)
 8011c3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011c3e:	2300      	movs	r3, #0
 8011c40:	9300      	str	r3, [sp, #0]
 8011c42:	4b11      	ldr	r3, [pc, #68]	@ (8011c88 <prvCheckForValidListAndQueue+0x74>)
 8011c44:	4a11      	ldr	r2, [pc, #68]	@ (8011c8c <prvCheckForValidListAndQueue+0x78>)
 8011c46:	2110      	movs	r1, #16
 8011c48:	200a      	movs	r0, #10
 8011c4a:	f7fd fc71 	bl	800f530 <xQueueGenericCreateStatic>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	4a08      	ldr	r2, [pc, #32]	@ (8011c74 <prvCheckForValidListAndQueue+0x60>)
 8011c52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011c54:	4b07      	ldr	r3, [pc, #28]	@ (8011c74 <prvCheckForValidListAndQueue+0x60>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d005      	beq.n	8011c68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011c5c:	4b05      	ldr	r3, [pc, #20]	@ (8011c74 <prvCheckForValidListAndQueue+0x60>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	490b      	ldr	r1, [pc, #44]	@ (8011c90 <prvCheckForValidListAndQueue+0x7c>)
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fe fb9e 	bl	80103a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011c68:	f000 f978 	bl	8011f5c <vPortExitCritical>
}
 8011c6c:	bf00      	nop
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	20000dac 	.word	0x20000dac
 8011c78:	20000d7c 	.word	0x20000d7c
 8011c7c:	20000d90 	.word	0x20000d90
 8011c80:	20000da4 	.word	0x20000da4
 8011c84:	20000da8 	.word	0x20000da8
 8011c88:	20000e58 	.word	0x20000e58
 8011c8c:	20000db8 	.word	0x20000db8
 8011c90:	08015ac0 	.word	0x08015ac0

08011c94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011c94:	b480      	push	{r7}
 8011c96:	b085      	sub	sp, #20
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	3b04      	subs	r3, #4
 8011ca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	3b04      	subs	r3, #4
 8011cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	f023 0201 	bic.w	r2, r3, #1
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	3b04      	subs	r3, #4
 8011cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8011cf8 <pxPortInitialiseStack+0x64>)
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	3b14      	subs	r3, #20
 8011cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	3b04      	subs	r3, #4
 8011cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f06f 0202 	mvn.w	r2, #2
 8011ce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	3b20      	subs	r3, #32
 8011ce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011cea:	68fb      	ldr	r3, [r7, #12]
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3714      	adds	r7, #20
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf6:	4770      	bx	lr
 8011cf8:	08011cfd 	.word	0x08011cfd

08011cfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b085      	sub	sp, #20
 8011d00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011d02:	2300      	movs	r3, #0
 8011d04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011d06:	4b13      	ldr	r3, [pc, #76]	@ (8011d54 <prvTaskExitError+0x58>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d0e:	d00b      	beq.n	8011d28 <prvTaskExitError+0x2c>
	__asm volatile
 8011d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d14:	f383 8811 	msr	BASEPRI, r3
 8011d18:	f3bf 8f6f 	isb	sy
 8011d1c:	f3bf 8f4f 	dsb	sy
 8011d20:	60fb      	str	r3, [r7, #12]
}
 8011d22:	bf00      	nop
 8011d24:	bf00      	nop
 8011d26:	e7fd      	b.n	8011d24 <prvTaskExitError+0x28>
	__asm volatile
 8011d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d2c:	f383 8811 	msr	BASEPRI, r3
 8011d30:	f3bf 8f6f 	isb	sy
 8011d34:	f3bf 8f4f 	dsb	sy
 8011d38:	60bb      	str	r3, [r7, #8]
}
 8011d3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011d3c:	bf00      	nop
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d0fc      	beq.n	8011d3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011d44:	bf00      	nop
 8011d46:	bf00      	nop
 8011d48:	3714      	adds	r7, #20
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d50:	4770      	bx	lr
 8011d52:	bf00      	nop
 8011d54:	20000008 	.word	0x20000008
	...

08011d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011d60:	4b07      	ldr	r3, [pc, #28]	@ (8011d80 <pxCurrentTCBConst2>)
 8011d62:	6819      	ldr	r1, [r3, #0]
 8011d64:	6808      	ldr	r0, [r1, #0]
 8011d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6a:	f380 8809 	msr	PSP, r0
 8011d6e:	f3bf 8f6f 	isb	sy
 8011d72:	f04f 0000 	mov.w	r0, #0
 8011d76:	f380 8811 	msr	BASEPRI, r0
 8011d7a:	4770      	bx	lr
 8011d7c:	f3af 8000 	nop.w

08011d80 <pxCurrentTCBConst2>:
 8011d80:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011d84:	bf00      	nop
 8011d86:	bf00      	nop

08011d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011d88:	4808      	ldr	r0, [pc, #32]	@ (8011dac <prvPortStartFirstTask+0x24>)
 8011d8a:	6800      	ldr	r0, [r0, #0]
 8011d8c:	6800      	ldr	r0, [r0, #0]
 8011d8e:	f380 8808 	msr	MSP, r0
 8011d92:	f04f 0000 	mov.w	r0, #0
 8011d96:	f380 8814 	msr	CONTROL, r0
 8011d9a:	b662      	cpsie	i
 8011d9c:	b661      	cpsie	f
 8011d9e:	f3bf 8f4f 	dsb	sy
 8011da2:	f3bf 8f6f 	isb	sy
 8011da6:	df00      	svc	0
 8011da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011daa:	bf00      	nop
 8011dac:	e000ed08 	.word	0xe000ed08

08011db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b086      	sub	sp, #24
 8011db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011db6:	4b47      	ldr	r3, [pc, #284]	@ (8011ed4 <xPortStartScheduler+0x124>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	4a47      	ldr	r2, [pc, #284]	@ (8011ed8 <xPortStartScheduler+0x128>)
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	d10b      	bne.n	8011dd8 <xPortStartScheduler+0x28>
	__asm volatile
 8011dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dc4:	f383 8811 	msr	BASEPRI, r3
 8011dc8:	f3bf 8f6f 	isb	sy
 8011dcc:	f3bf 8f4f 	dsb	sy
 8011dd0:	613b      	str	r3, [r7, #16]
}
 8011dd2:	bf00      	nop
 8011dd4:	bf00      	nop
 8011dd6:	e7fd      	b.n	8011dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8011ed4 <xPortStartScheduler+0x124>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8011edc <xPortStartScheduler+0x12c>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	d10b      	bne.n	8011dfa <xPortStartScheduler+0x4a>
	__asm volatile
 8011de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011de6:	f383 8811 	msr	BASEPRI, r3
 8011dea:	f3bf 8f6f 	isb	sy
 8011dee:	f3bf 8f4f 	dsb	sy
 8011df2:	60fb      	str	r3, [r7, #12]
}
 8011df4:	bf00      	nop
 8011df6:	bf00      	nop
 8011df8:	e7fd      	b.n	8011df6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011dfa:	4b39      	ldr	r3, [pc, #228]	@ (8011ee0 <xPortStartScheduler+0x130>)
 8011dfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	22ff      	movs	r2, #255	@ 0xff
 8011e0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e14:	78fb      	ldrb	r3, [r7, #3]
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011e1c:	b2da      	uxtb	r2, r3
 8011e1e:	4b31      	ldr	r3, [pc, #196]	@ (8011ee4 <xPortStartScheduler+0x134>)
 8011e20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011e22:	4b31      	ldr	r3, [pc, #196]	@ (8011ee8 <xPortStartScheduler+0x138>)
 8011e24:	2207      	movs	r2, #7
 8011e26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e28:	e009      	b.n	8011e3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8011e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8011ee8 <xPortStartScheduler+0x138>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	3b01      	subs	r3, #1
 8011e30:	4a2d      	ldr	r2, [pc, #180]	@ (8011ee8 <xPortStartScheduler+0x138>)
 8011e32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011e34:	78fb      	ldrb	r3, [r7, #3]
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	005b      	lsls	r3, r3, #1
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e3e:	78fb      	ldrb	r3, [r7, #3]
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e46:	2b80      	cmp	r3, #128	@ 0x80
 8011e48:	d0ef      	beq.n	8011e2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011e4a:	4b27      	ldr	r3, [pc, #156]	@ (8011ee8 <xPortStartScheduler+0x138>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f1c3 0307 	rsb	r3, r3, #7
 8011e52:	2b04      	cmp	r3, #4
 8011e54:	d00b      	beq.n	8011e6e <xPortStartScheduler+0xbe>
	__asm volatile
 8011e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e5a:	f383 8811 	msr	BASEPRI, r3
 8011e5e:	f3bf 8f6f 	isb	sy
 8011e62:	f3bf 8f4f 	dsb	sy
 8011e66:	60bb      	str	r3, [r7, #8]
}
 8011e68:	bf00      	nop
 8011e6a:	bf00      	nop
 8011e6c:	e7fd      	b.n	8011e6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8011ee8 <xPortStartScheduler+0x138>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	021b      	lsls	r3, r3, #8
 8011e74:	4a1c      	ldr	r2, [pc, #112]	@ (8011ee8 <xPortStartScheduler+0x138>)
 8011e76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011e78:	4b1b      	ldr	r3, [pc, #108]	@ (8011ee8 <xPortStartScheduler+0x138>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011e80:	4a19      	ldr	r2, [pc, #100]	@ (8011ee8 <xPortStartScheduler+0x138>)
 8011e82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	b2da      	uxtb	r2, r3
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011e8c:	4b17      	ldr	r3, [pc, #92]	@ (8011eec <xPortStartScheduler+0x13c>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	4a16      	ldr	r2, [pc, #88]	@ (8011eec <xPortStartScheduler+0x13c>)
 8011e92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011e96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011e98:	4b14      	ldr	r3, [pc, #80]	@ (8011eec <xPortStartScheduler+0x13c>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	4a13      	ldr	r2, [pc, #76]	@ (8011eec <xPortStartScheduler+0x13c>)
 8011e9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011ea2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011ea4:	f000 f8da 	bl	801205c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011ea8:	4b11      	ldr	r3, [pc, #68]	@ (8011ef0 <xPortStartScheduler+0x140>)
 8011eaa:	2200      	movs	r2, #0
 8011eac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011eae:	f000 f8f9 	bl	80120a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011eb2:	4b10      	ldr	r3, [pc, #64]	@ (8011ef4 <xPortStartScheduler+0x144>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8011ef4 <xPortStartScheduler+0x144>)
 8011eb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011ebc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011ebe:	f7ff ff63 	bl	8011d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011ec2:	f7fe ff2d 	bl	8010d20 <vTaskSwitchContext>
	prvTaskExitError();
 8011ec6:	f7ff ff19 	bl	8011cfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011eca:	2300      	movs	r3, #0
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3718      	adds	r7, #24
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	e000ed00 	.word	0xe000ed00
 8011ed8:	410fc271 	.word	0x410fc271
 8011edc:	410fc270 	.word	0x410fc270
 8011ee0:	e000e400 	.word	0xe000e400
 8011ee4:	20000ea8 	.word	0x20000ea8
 8011ee8:	20000eac 	.word	0x20000eac
 8011eec:	e000ed20 	.word	0xe000ed20
 8011ef0:	20000008 	.word	0x20000008
 8011ef4:	e000ef34 	.word	0xe000ef34

08011ef8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
	__asm volatile
 8011efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f02:	f383 8811 	msr	BASEPRI, r3
 8011f06:	f3bf 8f6f 	isb	sy
 8011f0a:	f3bf 8f4f 	dsb	sy
 8011f0e:	607b      	str	r3, [r7, #4]
}
 8011f10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011f12:	4b10      	ldr	r3, [pc, #64]	@ (8011f54 <vPortEnterCritical+0x5c>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	3301      	adds	r3, #1
 8011f18:	4a0e      	ldr	r2, [pc, #56]	@ (8011f54 <vPortEnterCritical+0x5c>)
 8011f1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8011f54 <vPortEnterCritical+0x5c>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	d110      	bne.n	8011f46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011f24:	4b0c      	ldr	r3, [pc, #48]	@ (8011f58 <vPortEnterCritical+0x60>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d00b      	beq.n	8011f46 <vPortEnterCritical+0x4e>
	__asm volatile
 8011f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f32:	f383 8811 	msr	BASEPRI, r3
 8011f36:	f3bf 8f6f 	isb	sy
 8011f3a:	f3bf 8f4f 	dsb	sy
 8011f3e:	603b      	str	r3, [r7, #0]
}
 8011f40:	bf00      	nop
 8011f42:	bf00      	nop
 8011f44:	e7fd      	b.n	8011f42 <vPortEnterCritical+0x4a>
	}
}
 8011f46:	bf00      	nop
 8011f48:	370c      	adds	r7, #12
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	20000008 	.word	0x20000008
 8011f58:	e000ed04 	.word	0xe000ed04

08011f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b083      	sub	sp, #12
 8011f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011f62:	4b12      	ldr	r3, [pc, #72]	@ (8011fac <vPortExitCritical+0x50>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d10b      	bne.n	8011f82 <vPortExitCritical+0x26>
	__asm volatile
 8011f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	607b      	str	r3, [r7, #4]
}
 8011f7c:	bf00      	nop
 8011f7e:	bf00      	nop
 8011f80:	e7fd      	b.n	8011f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011f82:	4b0a      	ldr	r3, [pc, #40]	@ (8011fac <vPortExitCritical+0x50>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	3b01      	subs	r3, #1
 8011f88:	4a08      	ldr	r2, [pc, #32]	@ (8011fac <vPortExitCritical+0x50>)
 8011f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011f8c:	4b07      	ldr	r3, [pc, #28]	@ (8011fac <vPortExitCritical+0x50>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d105      	bne.n	8011fa0 <vPortExitCritical+0x44>
 8011f94:	2300      	movs	r3, #0
 8011f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	f383 8811 	msr	BASEPRI, r3
}
 8011f9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011fa0:	bf00      	nop
 8011fa2:	370c      	adds	r7, #12
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011faa:	4770      	bx	lr
 8011fac:	20000008 	.word	0x20000008

08011fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011fb0:	f3ef 8009 	mrs	r0, PSP
 8011fb4:	f3bf 8f6f 	isb	sy
 8011fb8:	4b15      	ldr	r3, [pc, #84]	@ (8012010 <pxCurrentTCBConst>)
 8011fba:	681a      	ldr	r2, [r3, #0]
 8011fbc:	f01e 0f10 	tst.w	lr, #16
 8011fc0:	bf08      	it	eq
 8011fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fca:	6010      	str	r0, [r2, #0]
 8011fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011fd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011fd4:	f380 8811 	msr	BASEPRI, r0
 8011fd8:	f3bf 8f4f 	dsb	sy
 8011fdc:	f3bf 8f6f 	isb	sy
 8011fe0:	f7fe fe9e 	bl	8010d20 <vTaskSwitchContext>
 8011fe4:	f04f 0000 	mov.w	r0, #0
 8011fe8:	f380 8811 	msr	BASEPRI, r0
 8011fec:	bc09      	pop	{r0, r3}
 8011fee:	6819      	ldr	r1, [r3, #0]
 8011ff0:	6808      	ldr	r0, [r1, #0]
 8011ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff6:	f01e 0f10 	tst.w	lr, #16
 8011ffa:	bf08      	it	eq
 8011ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012000:	f380 8809 	msr	PSP, r0
 8012004:	f3bf 8f6f 	isb	sy
 8012008:	4770      	bx	lr
 801200a:	bf00      	nop
 801200c:	f3af 8000 	nop.w

08012010 <pxCurrentTCBConst>:
 8012010:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012014:	bf00      	nop
 8012016:	bf00      	nop

08012018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
	__asm volatile
 801201e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012022:	f383 8811 	msr	BASEPRI, r3
 8012026:	f3bf 8f6f 	isb	sy
 801202a:	f3bf 8f4f 	dsb	sy
 801202e:	607b      	str	r3, [r7, #4]
}
 8012030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012032:	f7fe fdbb 	bl	8010bac <xTaskIncrementTick>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d003      	beq.n	8012044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801203c:	4b06      	ldr	r3, [pc, #24]	@ (8012058 <xPortSysTickHandler+0x40>)
 801203e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012042:	601a      	str	r2, [r3, #0]
 8012044:	2300      	movs	r3, #0
 8012046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	f383 8811 	msr	BASEPRI, r3
}
 801204e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012050:	bf00      	nop
 8012052:	3708      	adds	r7, #8
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}
 8012058:	e000ed04 	.word	0xe000ed04

0801205c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801205c:	b480      	push	{r7}
 801205e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012060:	4b0b      	ldr	r3, [pc, #44]	@ (8012090 <vPortSetupTimerInterrupt+0x34>)
 8012062:	2200      	movs	r2, #0
 8012064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012066:	4b0b      	ldr	r3, [pc, #44]	@ (8012094 <vPortSetupTimerInterrupt+0x38>)
 8012068:	2200      	movs	r2, #0
 801206a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801206c:	4b0a      	ldr	r3, [pc, #40]	@ (8012098 <vPortSetupTimerInterrupt+0x3c>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	4a0a      	ldr	r2, [pc, #40]	@ (801209c <vPortSetupTimerInterrupt+0x40>)
 8012072:	fba2 2303 	umull	r2, r3, r2, r3
 8012076:	099b      	lsrs	r3, r3, #6
 8012078:	4a09      	ldr	r2, [pc, #36]	@ (80120a0 <vPortSetupTimerInterrupt+0x44>)
 801207a:	3b01      	subs	r3, #1
 801207c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801207e:	4b04      	ldr	r3, [pc, #16]	@ (8012090 <vPortSetupTimerInterrupt+0x34>)
 8012080:	2207      	movs	r2, #7
 8012082:	601a      	str	r2, [r3, #0]
}
 8012084:	bf00      	nop
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	e000e010 	.word	0xe000e010
 8012094:	e000e018 	.word	0xe000e018
 8012098:	20000010 	.word	0x20000010
 801209c:	10624dd3 	.word	0x10624dd3
 80120a0:	e000e014 	.word	0xe000e014

080120a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80120a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80120b4 <vPortEnableVFP+0x10>
 80120a8:	6801      	ldr	r1, [r0, #0]
 80120aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80120ae:	6001      	str	r1, [r0, #0]
 80120b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80120b2:	bf00      	nop
 80120b4:	e000ed88 	.word	0xe000ed88

080120b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80120b8:	b480      	push	{r7}
 80120ba:	b085      	sub	sp, #20
 80120bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80120be:	f3ef 8305 	mrs	r3, IPSR
 80120c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	2b0f      	cmp	r3, #15
 80120c8:	d915      	bls.n	80120f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80120ca:	4a18      	ldr	r2, [pc, #96]	@ (801212c <vPortValidateInterruptPriority+0x74>)
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	4413      	add	r3, r2
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80120d4:	4b16      	ldr	r3, [pc, #88]	@ (8012130 <vPortValidateInterruptPriority+0x78>)
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	7afa      	ldrb	r2, [r7, #11]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d20b      	bcs.n	80120f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80120de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120e2:	f383 8811 	msr	BASEPRI, r3
 80120e6:	f3bf 8f6f 	isb	sy
 80120ea:	f3bf 8f4f 	dsb	sy
 80120ee:	607b      	str	r3, [r7, #4]
}
 80120f0:	bf00      	nop
 80120f2:	bf00      	nop
 80120f4:	e7fd      	b.n	80120f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80120f6:	4b0f      	ldr	r3, [pc, #60]	@ (8012134 <vPortValidateInterruptPriority+0x7c>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80120fe:	4b0e      	ldr	r3, [pc, #56]	@ (8012138 <vPortValidateInterruptPriority+0x80>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	429a      	cmp	r2, r3
 8012104:	d90b      	bls.n	801211e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801210a:	f383 8811 	msr	BASEPRI, r3
 801210e:	f3bf 8f6f 	isb	sy
 8012112:	f3bf 8f4f 	dsb	sy
 8012116:	603b      	str	r3, [r7, #0]
}
 8012118:	bf00      	nop
 801211a:	bf00      	nop
 801211c:	e7fd      	b.n	801211a <vPortValidateInterruptPriority+0x62>
	}
 801211e:	bf00      	nop
 8012120:	3714      	adds	r7, #20
 8012122:	46bd      	mov	sp, r7
 8012124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012128:	4770      	bx	lr
 801212a:	bf00      	nop
 801212c:	e000e3f0 	.word	0xe000e3f0
 8012130:	20000ea8 	.word	0x20000ea8
 8012134:	e000ed0c 	.word	0xe000ed0c
 8012138:	20000eac 	.word	0x20000eac

0801213c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b08a      	sub	sp, #40	@ 0x28
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012144:	2300      	movs	r3, #0
 8012146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012148:	f7fe fc62 	bl	8010a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801214c:	4b5c      	ldr	r3, [pc, #368]	@ (80122c0 <pvPortMalloc+0x184>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d101      	bne.n	8012158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012154:	f000 f924 	bl	80123a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012158:	4b5a      	ldr	r3, [pc, #360]	@ (80122c4 <pvPortMalloc+0x188>)
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	4013      	ands	r3, r2
 8012160:	2b00      	cmp	r3, #0
 8012162:	f040 8095 	bne.w	8012290 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d01e      	beq.n	80121aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801216c:	2208      	movs	r2, #8
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	4413      	add	r3, r2
 8012172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f003 0307 	and.w	r3, r3, #7
 801217a:	2b00      	cmp	r3, #0
 801217c:	d015      	beq.n	80121aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f023 0307 	bic.w	r3, r3, #7
 8012184:	3308      	adds	r3, #8
 8012186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f003 0307 	and.w	r3, r3, #7
 801218e:	2b00      	cmp	r3, #0
 8012190:	d00b      	beq.n	80121aa <pvPortMalloc+0x6e>
	__asm volatile
 8012192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012196:	f383 8811 	msr	BASEPRI, r3
 801219a:	f3bf 8f6f 	isb	sy
 801219e:	f3bf 8f4f 	dsb	sy
 80121a2:	617b      	str	r3, [r7, #20]
}
 80121a4:	bf00      	nop
 80121a6:	bf00      	nop
 80121a8:	e7fd      	b.n	80121a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d06f      	beq.n	8012290 <pvPortMalloc+0x154>
 80121b0:	4b45      	ldr	r3, [pc, #276]	@ (80122c8 <pvPortMalloc+0x18c>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d86a      	bhi.n	8012290 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80121ba:	4b44      	ldr	r3, [pc, #272]	@ (80122cc <pvPortMalloc+0x190>)
 80121bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80121be:	4b43      	ldr	r3, [pc, #268]	@ (80122cc <pvPortMalloc+0x190>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80121c4:	e004      	b.n	80121d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80121c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80121ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80121d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d903      	bls.n	80121e2 <pvPortMalloc+0xa6>
 80121da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d1f1      	bne.n	80121c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80121e2:	4b37      	ldr	r3, [pc, #220]	@ (80122c0 <pvPortMalloc+0x184>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d051      	beq.n	8012290 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80121ec:	6a3b      	ldr	r3, [r7, #32]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	2208      	movs	r2, #8
 80121f2:	4413      	add	r3, r2
 80121f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80121f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121f8:	681a      	ldr	r2, [r3, #0]
 80121fa:	6a3b      	ldr	r3, [r7, #32]
 80121fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80121fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012200:	685a      	ldr	r2, [r3, #4]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	1ad2      	subs	r2, r2, r3
 8012206:	2308      	movs	r3, #8
 8012208:	005b      	lsls	r3, r3, #1
 801220a:	429a      	cmp	r2, r3
 801220c:	d920      	bls.n	8012250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801220e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	4413      	add	r3, r2
 8012214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012216:	69bb      	ldr	r3, [r7, #24]
 8012218:	f003 0307 	and.w	r3, r3, #7
 801221c:	2b00      	cmp	r3, #0
 801221e:	d00b      	beq.n	8012238 <pvPortMalloc+0xfc>
	__asm volatile
 8012220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012224:	f383 8811 	msr	BASEPRI, r3
 8012228:	f3bf 8f6f 	isb	sy
 801222c:	f3bf 8f4f 	dsb	sy
 8012230:	613b      	str	r3, [r7, #16]
}
 8012232:	bf00      	nop
 8012234:	bf00      	nop
 8012236:	e7fd      	b.n	8012234 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801223a:	685a      	ldr	r2, [r3, #4]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	1ad2      	subs	r2, r2, r3
 8012240:	69bb      	ldr	r3, [r7, #24]
 8012242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012246:	687a      	ldr	r2, [r7, #4]
 8012248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801224a:	69b8      	ldr	r0, [r7, #24]
 801224c:	f000 f90c 	bl	8012468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012250:	4b1d      	ldr	r3, [pc, #116]	@ (80122c8 <pvPortMalloc+0x18c>)
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	1ad3      	subs	r3, r2, r3
 801225a:	4a1b      	ldr	r2, [pc, #108]	@ (80122c8 <pvPortMalloc+0x18c>)
 801225c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801225e:	4b1a      	ldr	r3, [pc, #104]	@ (80122c8 <pvPortMalloc+0x18c>)
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	4b1b      	ldr	r3, [pc, #108]	@ (80122d0 <pvPortMalloc+0x194>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	429a      	cmp	r2, r3
 8012268:	d203      	bcs.n	8012272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801226a:	4b17      	ldr	r3, [pc, #92]	@ (80122c8 <pvPortMalloc+0x18c>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4a18      	ldr	r2, [pc, #96]	@ (80122d0 <pvPortMalloc+0x194>)
 8012270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012274:	685a      	ldr	r2, [r3, #4]
 8012276:	4b13      	ldr	r3, [pc, #76]	@ (80122c4 <pvPortMalloc+0x188>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	431a      	orrs	r2, r3
 801227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801227e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012282:	2200      	movs	r2, #0
 8012284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012286:	4b13      	ldr	r3, [pc, #76]	@ (80122d4 <pvPortMalloc+0x198>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	3301      	adds	r3, #1
 801228c:	4a11      	ldr	r2, [pc, #68]	@ (80122d4 <pvPortMalloc+0x198>)
 801228e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012290:	f7fe fbcc 	bl	8010a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012294:	69fb      	ldr	r3, [r7, #28]
 8012296:	f003 0307 	and.w	r3, r3, #7
 801229a:	2b00      	cmp	r3, #0
 801229c:	d00b      	beq.n	80122b6 <pvPortMalloc+0x17a>
	__asm volatile
 801229e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122a2:	f383 8811 	msr	BASEPRI, r3
 80122a6:	f3bf 8f6f 	isb	sy
 80122aa:	f3bf 8f4f 	dsb	sy
 80122ae:	60fb      	str	r3, [r7, #12]
}
 80122b0:	bf00      	nop
 80122b2:	bf00      	nop
 80122b4:	e7fd      	b.n	80122b2 <pvPortMalloc+0x176>
	return pvReturn;
 80122b6:	69fb      	ldr	r3, [r7, #28]
}
 80122b8:	4618      	mov	r0, r3
 80122ba:	3728      	adds	r7, #40	@ 0x28
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	2004a298 	.word	0x2004a298
 80122c4:	2004a2ac 	.word	0x2004a2ac
 80122c8:	2004a29c 	.word	0x2004a29c
 80122cc:	2004a290 	.word	0x2004a290
 80122d0:	2004a2a0 	.word	0x2004a2a0
 80122d4:	2004a2a4 	.word	0x2004a2a4

080122d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b086      	sub	sp, #24
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d04f      	beq.n	801238a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80122ea:	2308      	movs	r3, #8
 80122ec:	425b      	negs	r3, r3
 80122ee:	697a      	ldr	r2, [r7, #20]
 80122f0:	4413      	add	r3, r2
 80122f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	685a      	ldr	r2, [r3, #4]
 80122fc:	4b25      	ldr	r3, [pc, #148]	@ (8012394 <vPortFree+0xbc>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4013      	ands	r3, r2
 8012302:	2b00      	cmp	r3, #0
 8012304:	d10b      	bne.n	801231e <vPortFree+0x46>
	__asm volatile
 8012306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801230a:	f383 8811 	msr	BASEPRI, r3
 801230e:	f3bf 8f6f 	isb	sy
 8012312:	f3bf 8f4f 	dsb	sy
 8012316:	60fb      	str	r3, [r7, #12]
}
 8012318:	bf00      	nop
 801231a:	bf00      	nop
 801231c:	e7fd      	b.n	801231a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d00b      	beq.n	801233e <vPortFree+0x66>
	__asm volatile
 8012326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801232a:	f383 8811 	msr	BASEPRI, r3
 801232e:	f3bf 8f6f 	isb	sy
 8012332:	f3bf 8f4f 	dsb	sy
 8012336:	60bb      	str	r3, [r7, #8]
}
 8012338:	bf00      	nop
 801233a:	bf00      	nop
 801233c:	e7fd      	b.n	801233a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	685a      	ldr	r2, [r3, #4]
 8012342:	4b14      	ldr	r3, [pc, #80]	@ (8012394 <vPortFree+0xbc>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	4013      	ands	r3, r2
 8012348:	2b00      	cmp	r3, #0
 801234a:	d01e      	beq.n	801238a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801234c:	693b      	ldr	r3, [r7, #16]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d11a      	bne.n	801238a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	685a      	ldr	r2, [r3, #4]
 8012358:	4b0e      	ldr	r3, [pc, #56]	@ (8012394 <vPortFree+0xbc>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	43db      	mvns	r3, r3
 801235e:	401a      	ands	r2, r3
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012364:	f7fe fb54 	bl	8010a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	685a      	ldr	r2, [r3, #4]
 801236c:	4b0a      	ldr	r3, [pc, #40]	@ (8012398 <vPortFree+0xc0>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4413      	add	r3, r2
 8012372:	4a09      	ldr	r2, [pc, #36]	@ (8012398 <vPortFree+0xc0>)
 8012374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012376:	6938      	ldr	r0, [r7, #16]
 8012378:	f000 f876 	bl	8012468 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801237c:	4b07      	ldr	r3, [pc, #28]	@ (801239c <vPortFree+0xc4>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	3301      	adds	r3, #1
 8012382:	4a06      	ldr	r2, [pc, #24]	@ (801239c <vPortFree+0xc4>)
 8012384:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012386:	f7fe fb51 	bl	8010a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801238a:	bf00      	nop
 801238c:	3718      	adds	r7, #24
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
 8012392:	bf00      	nop
 8012394:	2004a2ac 	.word	0x2004a2ac
 8012398:	2004a29c 	.word	0x2004a29c
 801239c:	2004a2a8 	.word	0x2004a2a8

080123a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80123a0:	b480      	push	{r7}
 80123a2:	b085      	sub	sp, #20
 80123a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80123a6:	4b29      	ldr	r3, [pc, #164]	@ (801244c <prvHeapInit+0xac>)
 80123a8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80123aa:	4b29      	ldr	r3, [pc, #164]	@ (8012450 <prvHeapInit+0xb0>)
 80123ac:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	f003 0307 	and.w	r3, r3, #7
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d00c      	beq.n	80123d2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	3307      	adds	r3, #7
 80123bc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	f023 0307 	bic.w	r3, r3, #7
 80123c4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80123c6:	68ba      	ldr	r2, [r7, #8]
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	4a20      	ldr	r2, [pc, #128]	@ (8012450 <prvHeapInit+0xb0>)
 80123ce:	4413      	add	r3, r2
 80123d0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80123d6:	4a1f      	ldr	r2, [pc, #124]	@ (8012454 <prvHeapInit+0xb4>)
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80123dc:	4b1d      	ldr	r3, [pc, #116]	@ (8012454 <prvHeapInit+0xb4>)
 80123de:	2200      	movs	r2, #0
 80123e0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	68ba      	ldr	r2, [r7, #8]
 80123e6:	4413      	add	r3, r2
 80123e8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80123ea:	2208      	movs	r2, #8
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	1a9b      	subs	r3, r3, r2
 80123f0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f023 0307 	bic.w	r3, r3, #7
 80123f8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	4a16      	ldr	r2, [pc, #88]	@ (8012458 <prvHeapInit+0xb8>)
 80123fe:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012400:	4b15      	ldr	r3, [pc, #84]	@ (8012458 <prvHeapInit+0xb8>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2200      	movs	r2, #0
 8012406:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012408:	4b13      	ldr	r3, [pc, #76]	@ (8012458 <prvHeapInit+0xb8>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	2200      	movs	r2, #0
 801240e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	68fa      	ldr	r2, [r7, #12]
 8012418:	1ad2      	subs	r2, r2, r3
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801241e:	4b0e      	ldr	r3, [pc, #56]	@ (8012458 <prvHeapInit+0xb8>)
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	4a0c      	ldr	r2, [pc, #48]	@ (801245c <prvHeapInit+0xbc>)
 801242c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	4a0b      	ldr	r2, [pc, #44]	@ (8012460 <prvHeapInit+0xc0>)
 8012434:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012436:	4b0b      	ldr	r3, [pc, #44]	@ (8012464 <prvHeapInit+0xc4>)
 8012438:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801243c:	601a      	str	r2, [r3, #0]
}
 801243e:	bf00      	nop
 8012440:	3714      	adds	r7, #20
 8012442:	46bd      	mov	sp, r7
 8012444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012448:	4770      	bx	lr
 801244a:	bf00      	nop
 801244c:	000493e0 	.word	0x000493e0
 8012450:	20000eb0 	.word	0x20000eb0
 8012454:	2004a290 	.word	0x2004a290
 8012458:	2004a298 	.word	0x2004a298
 801245c:	2004a2a0 	.word	0x2004a2a0
 8012460:	2004a29c 	.word	0x2004a29c
 8012464:	2004a2ac 	.word	0x2004a2ac

08012468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012468:	b480      	push	{r7}
 801246a:	b085      	sub	sp, #20
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012470:	4b28      	ldr	r3, [pc, #160]	@ (8012514 <prvInsertBlockIntoFreeList+0xac>)
 8012472:	60fb      	str	r3, [r7, #12]
 8012474:	e002      	b.n	801247c <prvInsertBlockIntoFreeList+0x14>
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	60fb      	str	r3, [r7, #12]
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	429a      	cmp	r2, r3
 8012484:	d8f7      	bhi.n	8012476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	68ba      	ldr	r2, [r7, #8]
 8012490:	4413      	add	r3, r2
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	429a      	cmp	r2, r3
 8012496:	d108      	bne.n	80124aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	685a      	ldr	r2, [r3, #4]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	441a      	add	r2, r3
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	68ba      	ldr	r2, [r7, #8]
 80124b4:	441a      	add	r2, r3
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d118      	bne.n	80124f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681a      	ldr	r2, [r3, #0]
 80124c2:	4b15      	ldr	r3, [pc, #84]	@ (8012518 <prvInsertBlockIntoFreeList+0xb0>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d00d      	beq.n	80124e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	685a      	ldr	r2, [r3, #4]
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	441a      	add	r2, r3
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	681a      	ldr	r2, [r3, #0]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	601a      	str	r2, [r3, #0]
 80124e4:	e008      	b.n	80124f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80124e6:	4b0c      	ldr	r3, [pc, #48]	@ (8012518 <prvInsertBlockIntoFreeList+0xb0>)
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	601a      	str	r2, [r3, #0]
 80124ee:	e003      	b.n	80124f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681a      	ldr	r2, [r3, #0]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80124f8:	68fa      	ldr	r2, [r7, #12]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d002      	beq.n	8012506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	687a      	ldr	r2, [r7, #4]
 8012504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012506:	bf00      	nop
 8012508:	3714      	adds	r7, #20
 801250a:	46bd      	mov	sp, r7
 801250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012510:	4770      	bx	lr
 8012512:	bf00      	nop
 8012514:	2004a290 	.word	0x2004a290
 8012518:	2004a298 	.word	0x2004a298

0801251c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b082      	sub	sp, #8
 8012520:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012522:	2300      	movs	r3, #0
 8012524:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012526:	f000 f885 	bl	8012634 <BSP_SD_IsDetected>
 801252a:	4603      	mov	r3, r0
 801252c:	2b01      	cmp	r3, #1
 801252e:	d001      	beq.n	8012534 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012530:	2302      	movs	r3, #2
 8012532:	e012      	b.n	801255a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012534:	480b      	ldr	r0, [pc, #44]	@ (8012564 <BSP_SD_Init+0x48>)
 8012536:	f7f4 fb15 	bl	8006b64 <HAL_SD_Init>
 801253a:	4603      	mov	r3, r0
 801253c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801253e:	79fb      	ldrb	r3, [r7, #7]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d109      	bne.n	8012558 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012544:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8012548:	4806      	ldr	r0, [pc, #24]	@ (8012564 <BSP_SD_Init+0x48>)
 801254a:	f7f5 fa29 	bl	80079a0 <HAL_SD_ConfigWideBusOperation>
 801254e:	4603      	mov	r3, r0
 8012550:	2b00      	cmp	r3, #0
 8012552:	d001      	beq.n	8012558 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012554:	2301      	movs	r3, #1
 8012556:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012558:	79fb      	ldrb	r3, [r7, #7]
}
 801255a:	4618      	mov	r0, r3
 801255c:	3708      	adds	r7, #8
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}
 8012562:	bf00      	nop
 8012564:	200548a0 	.word	0x200548a0

08012568 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b086      	sub	sp, #24
 801256c:	af00      	add	r7, sp, #0
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	60b9      	str	r1, [r7, #8]
 8012572:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012574:	2300      	movs	r3, #0
 8012576:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	68ba      	ldr	r2, [r7, #8]
 801257c:	68f9      	ldr	r1, [r7, #12]
 801257e:	4806      	ldr	r0, [pc, #24]	@ (8012598 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012580:	f7f4 fc78 	bl	8006e74 <HAL_SD_ReadBlocks_DMA>
 8012584:	4603      	mov	r3, r0
 8012586:	2b00      	cmp	r3, #0
 8012588:	d001      	beq.n	801258e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801258a:	2301      	movs	r3, #1
 801258c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3718      	adds	r7, #24
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	200548a0 	.word	0x200548a0

0801259c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b086      	sub	sp, #24
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80125a8:	2300      	movs	r3, #0
 80125aa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	68ba      	ldr	r2, [r7, #8]
 80125b0:	68f9      	ldr	r1, [r7, #12]
 80125b2:	4806      	ldr	r0, [pc, #24]	@ (80125cc <BSP_SD_WriteBlocks_DMA+0x30>)
 80125b4:	f7f4 fd06 	bl	8006fc4 <HAL_SD_WriteBlocks_DMA>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d001      	beq.n	80125c2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80125be:	2301      	movs	r3, #1
 80125c0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80125c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3718      	adds	r7, #24
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	200548a0 	.word	0x200548a0

080125d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80125d4:	4805      	ldr	r0, [pc, #20]	@ (80125ec <BSP_SD_GetCardState+0x1c>)
 80125d6:	f7f5 fb09 	bl	8007bec <HAL_SD_GetCardState>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b04      	cmp	r3, #4
 80125de:	bf14      	ite	ne
 80125e0:	2301      	movne	r3, #1
 80125e2:	2300      	moveq	r3, #0
 80125e4:	b2db      	uxtb	r3, r3
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	bf00      	nop
 80125ec:	200548a0 	.word	0x200548a0

080125f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b082      	sub	sp, #8
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80125f8:	6879      	ldr	r1, [r7, #4]
 80125fa:	4803      	ldr	r0, [pc, #12]	@ (8012608 <BSP_SD_GetCardInfo+0x18>)
 80125fc:	f7f5 f9a4 	bl	8007948 <HAL_SD_GetCardInfo>
}
 8012600:	bf00      	nop
 8012602:	3708      	adds	r7, #8
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}
 8012608:	200548a0 	.word	0x200548a0

0801260c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012614:	f001 f976 	bl	8013904 <BSP_SD_WriteCpltCallback>
}
 8012618:	bf00      	nop
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012628:	f001 f97e 	bl	8013928 <BSP_SD_ReadCpltCallback>
}
 801262c:	bf00      	nop
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801263a:	2301      	movs	r3, #1
 801263c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801263e:	f000 fa13 	bl	8012a68 <BSP_PlatformIsDetected>
 8012642:	4603      	mov	r3, r0
 8012644:	2b00      	cmp	r3, #0
 8012646:	d101      	bne.n	801264c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012648:	2300      	movs	r3, #0
 801264a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801264c:	79fb      	ldrb	r3, [r7, #7]
 801264e:	b2db      	uxtb	r3, r3
}
 8012650:	4618      	mov	r0, r3
 8012652:	3708      	adds	r7, #8
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}

08012658 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 801265c:	4b2c      	ldr	r3, [pc, #176]	@ (8012710 <MX_DFSDM1_Init+0xb8>)
 801265e:	4a2d      	ldr	r2, [pc, #180]	@ (8012714 <MX_DFSDM1_Init+0xbc>)
 8012660:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8012662:	4b2b      	ldr	r3, [pc, #172]	@ (8012710 <MX_DFSDM1_Init+0xb8>)
 8012664:	2200      	movs	r2, #0
 8012666:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8012668:	4b29      	ldr	r3, [pc, #164]	@ (8012710 <MX_DFSDM1_Init+0xb8>)
 801266a:	2201      	movs	r2, #1
 801266c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 801266e:	4b28      	ldr	r3, [pc, #160]	@ (8012710 <MX_DFSDM1_Init+0xb8>)
 8012670:	2201      	movs	r2, #1
 8012672:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8012674:	4b26      	ldr	r3, [pc, #152]	@ (8012710 <MX_DFSDM1_Init+0xb8>)
 8012676:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 801267a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 68;
 801267c:	4b24      	ldr	r3, [pc, #144]	@ (8012710 <MX_DFSDM1_Init+0xb8>)
 801267e:	2244      	movs	r2, #68	@ 0x44
 8012680:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8012682:	4b23      	ldr	r3, [pc, #140]	@ (8012710 <MX_DFSDM1_Init+0xb8>)
 8012684:	2201      	movs	r2, #1
 8012686:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8012688:	4821      	ldr	r0, [pc, #132]	@ (8012710 <MX_DFSDM1_Init+0xb8>)
 801268a:	f7ee fabf 	bl	8000c0c <HAL_DFSDM_FilterInit>
 801268e:	4603      	mov	r3, r0
 8012690:	2b00      	cmp	r3, #0
 8012692:	d001      	beq.n	8012698 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8012694:	f000 ff54 	bl	8013540 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8012698:	4b1f      	ldr	r3, [pc, #124]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 801269a:	4a20      	ldr	r2, [pc, #128]	@ (801271c <MX_DFSDM1_Init+0xc4>)
 801269c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 801269e:	4b1e      	ldr	r3, [pc, #120]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126a0:	2201      	movs	r2, #1
 80126a2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80126a4:	4b1c      	ldr	r3, [pc, #112]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126a6:	2200      	movs	r2, #0
 80126a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 40;
 80126aa:	4b1b      	ldr	r3, [pc, #108]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126ac:	2228      	movs	r2, #40	@ 0x28
 80126ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80126b0:	4b19      	ldr	r3, [pc, #100]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126b2:	2200      	movs	r2, #0
 80126b4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80126b6:	4b18      	ldr	r3, [pc, #96]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126b8:	2200      	movs	r2, #0
 80126ba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80126bc:	4b16      	ldr	r3, [pc, #88]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126be:	2200      	movs	r2, #0
 80126c0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80126c2:	4b15      	ldr	r3, [pc, #84]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126c4:	2200      	movs	r2, #0
 80126c6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80126c8:	4b13      	ldr	r3, [pc, #76]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126ca:	2204      	movs	r2, #4
 80126cc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80126ce:	4b12      	ldr	r3, [pc, #72]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126d0:	2200      	movs	r2, #0
 80126d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80126d4:	4b10      	ldr	r3, [pc, #64]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126d6:	2201      	movs	r2, #1
 80126d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80126da:	4b0f      	ldr	r3, [pc, #60]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126dc:	2200      	movs	r2, #0
 80126de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80126e0:	4b0d      	ldr	r3, [pc, #52]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126e2:	2200      	movs	r2, #0
 80126e4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80126e6:	480c      	ldr	r0, [pc, #48]	@ (8012718 <MX_DFSDM1_Init+0xc0>)
 80126e8:	f7ee f8c8 	bl	800087c <HAL_DFSDM_ChannelInit>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d001      	beq.n	80126f6 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80126f2:	f000 ff25 	bl	8013540 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80126f6:	2201      	movs	r2, #1
 80126f8:	2101      	movs	r1, #1
 80126fa:	4805      	ldr	r0, [pc, #20]	@ (8012710 <MX_DFSDM1_Init+0xb8>)
 80126fc:	f7ee fc68 	bl	8000fd0 <HAL_DFSDM_FilterConfigRegChannel>
 8012700:	4603      	mov	r3, r0
 8012702:	2b00      	cmp	r3, #0
 8012704:	d001      	beq.n	801270a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8012706:	f000 ff1b 	bl	8013540 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 801270a:	bf00      	nop
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	2004a2b0 	.word	0x2004a2b0
 8012714:	40016100 	.word	0x40016100
 8012718:	2004a304 	.word	0x2004a304
 801271c:	40016000 	.word	0x40016000

08012720 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b0b0      	sub	sp, #192	@ 0xc0
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012728:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801272c:	2200      	movs	r2, #0
 801272e:	601a      	str	r2, [r3, #0]
 8012730:	605a      	str	r2, [r3, #4]
 8012732:	609a      	str	r2, [r3, #8]
 8012734:	60da      	str	r2, [r3, #12]
 8012736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012738:	f107 0314 	add.w	r3, r7, #20
 801273c:	2298      	movs	r2, #152	@ 0x98
 801273e:	2100      	movs	r1, #0
 8012740:	4618      	mov	r0, r3
 8012742:	f002 f823 	bl	801478c <memset>
  if(DFSDM1_Init == 0)
 8012746:	4b55      	ldr	r3, [pc, #340]	@ (801289c <HAL_DFSDM_FilterMspInit+0x17c>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d16c      	bne.n	8012828 <HAL_DFSDM_FilterMspInit+0x108>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 801274e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8012752:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8012754:	2300      	movs	r3, #0
 8012756:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801275a:	f107 0314 	add.w	r3, r7, #20
 801275e:	4618      	mov	r0, r3
 8012760:	f7f1 feb8 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8012764:	4603      	mov	r3, r0
 8012766:	2b00      	cmp	r3, #0
 8012768:	d001      	beq.n	801276e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 801276a:	f000 fee9 	bl	8013540 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 801276e:	4b4c      	ldr	r3, [pc, #304]	@ (80128a0 <HAL_DFSDM_FilterMspInit+0x180>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	3301      	adds	r3, #1
 8012774:	4a4a      	ldr	r2, [pc, #296]	@ (80128a0 <HAL_DFSDM_FilterMspInit+0x180>)
 8012776:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8012778:	4b49      	ldr	r3, [pc, #292]	@ (80128a0 <HAL_DFSDM_FilterMspInit+0x180>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2b01      	cmp	r3, #1
 801277e:	d10b      	bne.n	8012798 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8012780:	4b48      	ldr	r3, [pc, #288]	@ (80128a4 <HAL_DFSDM_FilterMspInit+0x184>)
 8012782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012784:	4a47      	ldr	r2, [pc, #284]	@ (80128a4 <HAL_DFSDM_FilterMspInit+0x184>)
 8012786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801278a:	6613      	str	r3, [r2, #96]	@ 0x60
 801278c:	4b45      	ldr	r3, [pc, #276]	@ (80128a4 <HAL_DFSDM_FilterMspInit+0x184>)
 801278e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012794:	613b      	str	r3, [r7, #16]
 8012796:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012798:	4b42      	ldr	r3, [pc, #264]	@ (80128a4 <HAL_DFSDM_FilterMspInit+0x184>)
 801279a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801279c:	4a41      	ldr	r2, [pc, #260]	@ (80128a4 <HAL_DFSDM_FilterMspInit+0x184>)
 801279e:	f043 0302 	orr.w	r3, r3, #2
 80127a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80127a4:	4b3f      	ldr	r3, [pc, #252]	@ (80128a4 <HAL_DFSDM_FilterMspInit+0x184>)
 80127a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127a8:	f003 0302 	and.w	r3, r3, #2
 80127ac:	60fb      	str	r3, [r7, #12]
 80127ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80127b0:	4b3c      	ldr	r3, [pc, #240]	@ (80128a4 <HAL_DFSDM_FilterMspInit+0x184>)
 80127b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127b4:	4a3b      	ldr	r2, [pc, #236]	@ (80128a4 <HAL_DFSDM_FilterMspInit+0x184>)
 80127b6:	f043 0310 	orr.w	r3, r3, #16
 80127ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80127bc:	4b39      	ldr	r3, [pc, #228]	@ (80128a4 <HAL_DFSDM_FilterMspInit+0x184>)
 80127be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127c0:	f003 0310 	and.w	r3, r3, #16
 80127c4:	60bb      	str	r3, [r7, #8]
 80127c6:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PB1     ------> DFSDM1_DATIN0
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80127c8:	2302      	movs	r3, #2
 80127ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127ce:	2302      	movs	r3, #2
 80127d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127d4:	2300      	movs	r3, #0
 80127d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80127da:	2300      	movs	r3, #0
 80127dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80127e0:	2306      	movs	r3, #6
 80127e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80127e6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80127ea:	4619      	mov	r1, r3
 80127ec:	482e      	ldr	r0, [pc, #184]	@ (80128a8 <HAL_DFSDM_FilterMspInit+0x188>)
 80127ee:	f7ef fa63 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80127f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80127f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127fa:	2302      	movs	r3, #2
 80127fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012800:	2300      	movs	r3, #0
 8012802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012806:	2300      	movs	r3, #0
 8012808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 801280c:	2306      	movs	r3, #6
 801280e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012812:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8012816:	4619      	mov	r1, r3
 8012818:	4824      	ldr	r0, [pc, #144]	@ (80128ac <HAL_DFSDM_FilterMspInit+0x18c>)
 801281a:	f7ef fa4d 	bl	8001cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 801281e:	4b1f      	ldr	r3, [pc, #124]	@ (801289c <HAL_DFSDM_FilterMspInit+0x17c>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	3301      	adds	r3, #1
 8012824:	4a1d      	ldr	r2, [pc, #116]	@ (801289c <HAL_DFSDM_FilterMspInit+0x17c>)
 8012826:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	4a20      	ldr	r2, [pc, #128]	@ (80128b0 <HAL_DFSDM_FilterMspInit+0x190>)
 801282e:	4293      	cmp	r3, r2
 8012830:	d130      	bne.n	8012894 <HAL_DFSDM_FilterMspInit+0x174>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8012832:	4b20      	ldr	r3, [pc, #128]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 8012834:	4a20      	ldr	r2, [pc, #128]	@ (80128b8 <HAL_DFSDM_FilterMspInit+0x198>)
 8012836:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8012838:	4b1e      	ldr	r3, [pc, #120]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 801283a:	2256      	movs	r2, #86	@ 0x56
 801283c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801283e:	4b1d      	ldr	r3, [pc, #116]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 8012840:	2200      	movs	r2, #0
 8012842:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8012844:	4b1b      	ldr	r3, [pc, #108]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 8012846:	2200      	movs	r2, #0
 8012848:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 801284a:	4b1a      	ldr	r3, [pc, #104]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 801284c:	2280      	movs	r2, #128	@ 0x80
 801284e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8012850:	4b18      	ldr	r3, [pc, #96]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 8012852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012856:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8012858:	4b16      	ldr	r3, [pc, #88]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 801285a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801285e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8012860:	4b14      	ldr	r3, [pc, #80]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 8012862:	2220      	movs	r2, #32
 8012864:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8012866:	4b13      	ldr	r3, [pc, #76]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 8012868:	2200      	movs	r2, #0
 801286a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 801286c:	4811      	ldr	r0, [pc, #68]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 801286e:	f7ee fe63 	bl	8001538 <HAL_DMA_Init>
 8012872:	4603      	mov	r3, r0
 8012874:	2b00      	cmp	r3, #0
 8012876:	d001      	beq.n	801287c <HAL_DFSDM_FilterMspInit+0x15c>
    {
      Error_Handler();
 8012878:	f000 fe62 	bl	8013540 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	4a0d      	ldr	r2, [pc, #52]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 8012880:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012882:	4a0c      	ldr	r2, [pc, #48]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	4a0a      	ldr	r2, [pc, #40]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 801288c:	629a      	str	r2, [r3, #40]	@ 0x28
 801288e:	4a09      	ldr	r2, [pc, #36]	@ (80128b4 <HAL_DFSDM_FilterMspInit+0x194>)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8012894:	bf00      	nop
 8012896:	37c0      	adds	r7, #192	@ 0xc0
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}
 801289c:	2004a3a0 	.word	0x2004a3a0
 80128a0:	2004a39c 	.word	0x2004a39c
 80128a4:	40021000 	.word	0x40021000
 80128a8:	48000400 	.word	0x48000400
 80128ac:	48001000 	.word	0x48001000
 80128b0:	40016100 	.word	0x40016100
 80128b4:	2004a33c 	.word	0x2004a33c
 80128b8:	40020008 	.word	0x40020008

080128bc <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b0b0      	sub	sp, #192	@ 0xc0
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80128c4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80128c8:	2200      	movs	r2, #0
 80128ca:	601a      	str	r2, [r3, #0]
 80128cc:	605a      	str	r2, [r3, #4]
 80128ce:	609a      	str	r2, [r3, #8]
 80128d0:	60da      	str	r2, [r3, #12]
 80128d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80128d4:	f107 0314 	add.w	r3, r7, #20
 80128d8:	2298      	movs	r2, #152	@ 0x98
 80128da:	2100      	movs	r1, #0
 80128dc:	4618      	mov	r0, r3
 80128de:	f001 ff55 	bl	801478c <memset>
  if(DFSDM1_Init == 0)
 80128e2:	4b3a      	ldr	r3, [pc, #232]	@ (80129cc <HAL_DFSDM_ChannelMspInit+0x110>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d16c      	bne.n	80129c4 <HAL_DFSDM_ChannelMspInit+0x108>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80128ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80128ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80128f0:	2300      	movs	r3, #0
 80128f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80128f6:	f107 0314 	add.w	r3, r7, #20
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7f1 fdea 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8012900:	4603      	mov	r3, r0
 8012902:	2b00      	cmp	r3, #0
 8012904:	d001      	beq.n	801290a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8012906:	f000 fe1b 	bl	8013540 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 801290a:	4b31      	ldr	r3, [pc, #196]	@ (80129d0 <HAL_DFSDM_ChannelMspInit+0x114>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	3301      	adds	r3, #1
 8012910:	4a2f      	ldr	r2, [pc, #188]	@ (80129d0 <HAL_DFSDM_ChannelMspInit+0x114>)
 8012912:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8012914:	4b2e      	ldr	r3, [pc, #184]	@ (80129d0 <HAL_DFSDM_ChannelMspInit+0x114>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2b01      	cmp	r3, #1
 801291a:	d10b      	bne.n	8012934 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 801291c:	4b2d      	ldr	r3, [pc, #180]	@ (80129d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 801291e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012920:	4a2c      	ldr	r2, [pc, #176]	@ (80129d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8012922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012926:	6613      	str	r3, [r2, #96]	@ 0x60
 8012928:	4b2a      	ldr	r3, [pc, #168]	@ (80129d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 801292a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801292c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012930:	613b      	str	r3, [r7, #16]
 8012932:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012934:	4b27      	ldr	r3, [pc, #156]	@ (80129d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8012936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012938:	4a26      	ldr	r2, [pc, #152]	@ (80129d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 801293a:	f043 0302 	orr.w	r3, r3, #2
 801293e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012940:	4b24      	ldr	r3, [pc, #144]	@ (80129d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8012942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012944:	f003 0302 	and.w	r3, r3, #2
 8012948:	60fb      	str	r3, [r7, #12]
 801294a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801294c:	4b21      	ldr	r3, [pc, #132]	@ (80129d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 801294e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012950:	4a20      	ldr	r2, [pc, #128]	@ (80129d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8012952:	f043 0310 	orr.w	r3, r3, #16
 8012956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012958:	4b1e      	ldr	r3, [pc, #120]	@ (80129d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 801295a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801295c:	f003 0310 	and.w	r3, r3, #16
 8012960:	60bb      	str	r3, [r7, #8]
 8012962:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PB1     ------> DFSDM1_DATIN0
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8012964:	2302      	movs	r3, #2
 8012966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801296a:	2302      	movs	r3, #2
 801296c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012970:	2300      	movs	r3, #0
 8012972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012976:	2300      	movs	r3, #0
 8012978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 801297c:	2306      	movs	r3, #6
 801297e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012982:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8012986:	4619      	mov	r1, r3
 8012988:	4813      	ldr	r0, [pc, #76]	@ (80129d8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 801298a:	f7ef f995 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801298e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012992:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012996:	2302      	movs	r3, #2
 8012998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801299c:	2300      	movs	r3, #0
 801299e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80129a2:	2300      	movs	r3, #0
 80129a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80129a8:	2306      	movs	r3, #6
 80129aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80129ae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80129b2:	4619      	mov	r1, r3
 80129b4:	4809      	ldr	r0, [pc, #36]	@ (80129dc <HAL_DFSDM_ChannelMspInit+0x120>)
 80129b6:	f7ef f97f 	bl	8001cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80129ba:	4b04      	ldr	r3, [pc, #16]	@ (80129cc <HAL_DFSDM_ChannelMspInit+0x110>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	3301      	adds	r3, #1
 80129c0:	4a02      	ldr	r2, [pc, #8]	@ (80129cc <HAL_DFSDM_ChannelMspInit+0x110>)
 80129c2:	6013      	str	r3, [r2, #0]
  }
}
 80129c4:	bf00      	nop
 80129c6:	37c0      	adds	r7, #192	@ 0xc0
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	2004a3a0 	.word	0x2004a3a0
 80129d0:	2004a39c 	.word	0x2004a39c
 80129d4:	40021000 	.word	0x40021000
 80129d8:	48000400 	.word	0x48000400
 80129dc:	48001000 	.word	0x48001000

080129e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80129e6:	4b12      	ldr	r3, [pc, #72]	@ (8012a30 <MX_DMA_Init+0x50>)
 80129e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80129ea:	4a11      	ldr	r2, [pc, #68]	@ (8012a30 <MX_DMA_Init+0x50>)
 80129ec:	f043 0304 	orr.w	r3, r3, #4
 80129f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80129f2:	4b0f      	ldr	r3, [pc, #60]	@ (8012a30 <MX_DMA_Init+0x50>)
 80129f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80129f6:	f003 0304 	and.w	r3, r3, #4
 80129fa:	607b      	str	r3, [r7, #4]
 80129fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80129fe:	4b0c      	ldr	r3, [pc, #48]	@ (8012a30 <MX_DMA_Init+0x50>)
 8012a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a02:	4a0b      	ldr	r2, [pc, #44]	@ (8012a30 <MX_DMA_Init+0x50>)
 8012a04:	f043 0301 	orr.w	r3, r3, #1
 8012a08:	6493      	str	r3, [r2, #72]	@ 0x48
 8012a0a:	4b09      	ldr	r3, [pc, #36]	@ (8012a30 <MX_DMA_Init+0x50>)
 8012a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a0e:	f003 0301 	and.w	r3, r3, #1
 8012a12:	603b      	str	r3, [r7, #0]
 8012a14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8012a16:	2200      	movs	r2, #0
 8012a18:	2105      	movs	r1, #5
 8012a1a:	200b      	movs	r0, #11
 8012a1c:	f7ed feea 	bl	80007f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8012a20:	200b      	movs	r0, #11
 8012a22:	f7ed ff13 	bl	800084c <HAL_NVIC_EnableIRQ>

}
 8012a26:	bf00      	nop
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	40021000 	.word	0x40021000

08012a34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012a38:	4904      	ldr	r1, [pc, #16]	@ (8012a4c <MX_FATFS_Init+0x18>)
 8012a3a:	4805      	ldr	r0, [pc, #20]	@ (8012a50 <MX_FATFS_Init+0x1c>)
 8012a3c:	f7fb ff0e 	bl	800e85c <FATFS_LinkDriver>
 8012a40:	4603      	mov	r3, r0
 8012a42:	461a      	mov	r2, r3
 8012a44:	4b03      	ldr	r3, [pc, #12]	@ (8012a54 <MX_FATFS_Init+0x20>)
 8012a46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012a48:	bf00      	nop
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	2004a3a8 	.word	0x2004a3a8
 8012a50:	08016098 	.word	0x08016098
 8012a54:	2004a3a4 	.word	0x2004a3a4

08012a58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012a58:	b480      	push	{r7}
 8012a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012a5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr

08012a68 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012a6e:	2301      	movs	r3, #1
 8012a70:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012a72:	2120      	movs	r1, #32
 8012a74:	4806      	ldr	r0, [pc, #24]	@ (8012a90 <BSP_PlatformIsDetected+0x28>)
 8012a76:	f7ef fb9d 	bl	80021b4 <HAL_GPIO_ReadPin>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d001      	beq.n	8012a84 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8012a80:	2300      	movs	r3, #0
 8012a82:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012a84:	79fb      	ldrb	r3, [r7, #7]
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3708      	adds	r7, #8
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	48000c00 	.word	0x48000c00

08012a94 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8012a94:	b580      	push	{r7, lr}
 8012a96:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8012a98:	4a08      	ldr	r2, [pc, #32]	@ (8012abc <MX_FREERTOS_Init+0x28>)
 8012a9a:	2100      	movs	r1, #0
 8012a9c:	4808      	ldr	r0, [pc, #32]	@ (8012ac0 <MX_FREERTOS_Init+0x2c>)
 8012a9e:	f7fc f8c0 	bl	800ec22 <osThreadNew>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	4a07      	ldr	r2, [pc, #28]	@ (8012ac4 <MX_FREERTOS_Init+0x30>)
 8012aa6:	6013      	str	r3, [r2, #0]

  /* creation of ledsTask */
  ledsTaskHandle = osThreadNew(StartLedsTask, NULL, &ledsTask_attributes);
 8012aa8:	4a07      	ldr	r2, [pc, #28]	@ (8012ac8 <MX_FREERTOS_Init+0x34>)
 8012aaa:	2100      	movs	r1, #0
 8012aac:	4807      	ldr	r0, [pc, #28]	@ (8012acc <MX_FREERTOS_Init+0x38>)
 8012aae:	f7fc f8b8 	bl	800ec22 <osThreadNew>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	4a06      	ldr	r2, [pc, #24]	@ (8012ad0 <MX_FREERTOS_Init+0x3c>)
 8012ab6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8012ab8:	bf00      	nop
 8012aba:	bd80      	pop	{r7, pc}
 8012abc:	08016050 	.word	0x08016050
 8012ac0:	08012ad5 	.word	0x08012ad5
 8012ac4:	2004a814 	.word	0x2004a814
 8012ac8:	08016074 	.word	0x08016074
 8012acc:	08012fc5 	.word	0x08012fc5
 8012ad0:	2004a818 	.word	0x2004a818

08012ad4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8012ad4:	b5b0      	push	{r4, r5, r7, lr}
 8012ad6:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8012ae0:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8012ae4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  uint32_t scheduling_kernel_tick_count = 0;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  /* Infinite loop */
  for(;;)
  {
    FRESULT res; /* FatFs function common result code */
    uint32_t byteswritten, bytesread; /* File write/read counts */
    uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8012aec:	4b3e      	ldr	r3, [pc, #248]	@ (8012be8 <StartDefaultTask+0x114>)
 8012aee:	f507 7403 	add.w	r4, r7, #524	@ 0x20c
 8012af2:	461d      	mov	r5, r3
 8012af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012af8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012afc:	c403      	stmia	r4!, {r0, r1}
 8012afe:	7022      	strb	r2, [r4, #0]
    uint8_t rtext[_MAX_SS];/* File read buffer */
    char file_name[50];

    uint32_t kernel_tick_count = osKernelGetTickCount();
 8012b00:	f7fc f87a 	bl	800ebf8 <osKernelGetTickCount>
 8012b04:	f8c7 0230 	str.w	r0, [r7, #560]	@ 0x230
    sprintf(file_name, "kernal_tick_count_is_%lu.txt", kernel_tick_count);
 8012b08:	f107 030c 	add.w	r3, r7, #12
 8012b0c:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8012b10:	4936      	ldr	r1, [pc, #216]	@ (8012bec <StartDefaultTask+0x118>)
 8012b12:	4618      	mov	r0, r3
 8012b14:	f001 fd42 	bl	801459c <siprintf>

    res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8012b18:	2200      	movs	r2, #0
 8012b1a:	4935      	ldr	r1, [pc, #212]	@ (8012bf0 <StartDefaultTask+0x11c>)
 8012b1c:	4835      	ldr	r0, [pc, #212]	@ (8012bf4 <StartDefaultTask+0x120>)
 8012b1e:	f7fb f8d5 	bl	800dccc <f_mount>
 8012b22:	4603      	mov	r3, r0
 8012b24:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
    printf("res: %d\n", res);
 8012b28:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8012b2c:	4619      	mov	r1, r3
 8012b2e:	4832      	ldr	r0, [pc, #200]	@ (8012bf8 <StartDefaultTask+0x124>)
 8012b30:	f001 fcc4 	bl	80144bc <iprintf>
    if(res != FR_OK)
 8012b34:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d002      	beq.n	8012b42 <StartDefaultTask+0x6e>
     {
         Error_Handler();
 8012b3c:	f000 fd00 	bl	8013540 <Error_Handler>
 8012b40:	e041      	b.n	8012bc6 <StartDefaultTask+0xf2>
     }
     else
     {
//       res = f_mkfs((TCHAR const*)SDPath, FM_FAT32, 0, rtext, sizeof(rtext));
//       printf("res: %d\n", res);
       if(res != FR_OK)
 8012b42:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d002      	beq.n	8012b50 <StartDefaultTask+0x7c>
       {
           Error_Handler();
 8012b4a:	f000 fcf9 	bl	8013540 <Error_Handler>
 8012b4e:	e03a      	b.n	8012bc6 <StartDefaultTask+0xf2>
       }
       else
       {
         //Open file for writing (Create)
         res = f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 8012b50:	f107 030c 	add.w	r3, r7, #12
 8012b54:	220a      	movs	r2, #10
 8012b56:	4619      	mov	r1, r3
 8012b58:	4828      	ldr	r0, [pc, #160]	@ (8012bfc <StartDefaultTask+0x128>)
 8012b5a:	f7fb f91b 	bl	800dd94 <f_open>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
         printf("res: %d\n", res);
 8012b64:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8012b68:	4619      	mov	r1, r3
 8012b6a:	4823      	ldr	r0, [pc, #140]	@ (8012bf8 <StartDefaultTask+0x124>)
 8012b6c:	f001 fca6 	bl	80144bc <iprintf>
         if(res != FR_OK)
 8012b70:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d002      	beq.n	8012b7e <StartDefaultTask+0xaa>
         {
             Error_Handler();
 8012b78:	f000 fce2 	bl	8013540 <Error_Handler>
 8012b7c:	e023      	b.n	8012bc6 <StartDefaultTask+0xf2>
         }
         else
         {
           //Write to the text file
           res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8012b7e:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7ed fb3c 	bl	8000200 <strlen>
 8012b88:	4602      	mov	r2, r0
 8012b8a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012b8e:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8012b92:	481a      	ldr	r0, [pc, #104]	@ (8012bfc <StartDefaultTask+0x128>)
 8012b94:	f7fb fbb9 	bl	800e30a <f_write>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
           printf("res: %d\n", res);
 8012b9e:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	4814      	ldr	r0, [pc, #80]	@ (8012bf8 <StartDefaultTask+0x124>)
 8012ba6:	f001 fc89 	bl	80144bc <iprintf>
           if((byteswritten == 0) || (res != FR_OK))
 8012baa:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d003      	beq.n	8012bba <StartDefaultTask+0xe6>
 8012bb2:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d002      	beq.n	8012bc0 <StartDefaultTask+0xec>
           {
             Error_Handler();
 8012bba:	f000 fcc1 	bl	8013540 <Error_Handler>
 8012bbe:	e002      	b.n	8012bc6 <StartDefaultTask+0xf2>
           }
           else
           {
             f_close(&SDFile);
 8012bc0:	480e      	ldr	r0, [pc, #56]	@ (8012bfc <StartDefaultTask+0x128>)
 8012bc2:	f7fb fdcf 	bl	800e764 <f_close>
           }
         }
       }
     }
    f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	2100      	movs	r1, #0
 8012bca:	480a      	ldr	r0, [pc, #40]	@ (8012bf4 <StartDefaultTask+0x120>)
 8012bcc:	f7fb f87e 	bl	800dccc <f_mount>

    scheduling_kernel_tick_count += 1000;
 8012bd0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012bd4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8012bd8:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    osDelayUntil(scheduling_kernel_tick_count);
 8012bdc:	f8d7 0234 	ldr.w	r0, [r7, #564]	@ 0x234
 8012be0:	f7fc f8b1 	bl	800ed46 <osDelayUntil>
  {
 8012be4:	e782      	b.n	8012aec <StartDefaultTask+0x18>
 8012be6:	bf00      	nop
 8012be8:	08015b0c 	.word	0x08015b0c
 8012bec:	08015ae0 	.word	0x08015ae0
 8012bf0:	2004a3a8 	.word	0x2004a3a8
 8012bf4:	2004a3ac 	.word	0x2004a3ac
 8012bf8:	08015b00 	.word	0x08015b00
 8012bfc:	2004a5e4 	.word	0x2004a5e4

08012c00 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b08e      	sub	sp, #56	@ 0x38
 8012c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	601a      	str	r2, [r3, #0]
 8012c0e:	605a      	str	r2, [r3, #4]
 8012c10:	609a      	str	r2, [r3, #8]
 8012c12:	60da      	str	r2, [r3, #12]
 8012c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012c16:	4b94      	ldr	r3, [pc, #592]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c1a:	4a93      	ldr	r2, [pc, #588]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c1c:	f043 0310 	orr.w	r3, r3, #16
 8012c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012c22:	4b91      	ldr	r3, [pc, #580]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c26:	f003 0310 	and.w	r3, r3, #16
 8012c2a:	623b      	str	r3, [r7, #32]
 8012c2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c2e:	4b8e      	ldr	r3, [pc, #568]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c32:	4a8d      	ldr	r2, [pc, #564]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c34:	f043 0304 	orr.w	r3, r3, #4
 8012c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012c3a:	4b8b      	ldr	r3, [pc, #556]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c3e:	f003 0304 	and.w	r3, r3, #4
 8012c42:	61fb      	str	r3, [r7, #28]
 8012c44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012c46:	4b88      	ldr	r3, [pc, #544]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c4a:	4a87      	ldr	r2, [pc, #540]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c4c:	f043 0320 	orr.w	r3, r3, #32
 8012c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012c52:	4b85      	ldr	r3, [pc, #532]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c56:	f003 0320 	and.w	r3, r3, #32
 8012c5a:	61bb      	str	r3, [r7, #24]
 8012c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012c5e:	4b82      	ldr	r3, [pc, #520]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c62:	4a81      	ldr	r2, [pc, #516]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012c72:	617b      	str	r3, [r7, #20]
 8012c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012c76:	4b7c      	ldr	r3, [pc, #496]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c7a:	4a7b      	ldr	r2, [pc, #492]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c7c:	f043 0301 	orr.w	r3, r3, #1
 8012c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012c82:	4b79      	ldr	r3, [pc, #484]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c86:	f003 0301 	and.w	r3, r3, #1
 8012c8a:	613b      	str	r3, [r7, #16]
 8012c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012c8e:	4b76      	ldr	r3, [pc, #472]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c92:	4a75      	ldr	r2, [pc, #468]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c94:	f043 0302 	orr.w	r3, r3, #2
 8012c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012c9a:	4b73      	ldr	r3, [pc, #460]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c9e:	f003 0302 	and.w	r3, r3, #2
 8012ca2:	60fb      	str	r3, [r7, #12]
 8012ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012ca6:	4b70      	ldr	r3, [pc, #448]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012caa:	4a6f      	ldr	r2, [pc, #444]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cba:	60bb      	str	r3, [r7, #8]
 8012cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012cc2:	4a69      	ldr	r2, [pc, #420]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012cc4:	f043 0308 	orr.w	r3, r3, #8
 8012cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012cca:	4b67      	ldr	r3, [pc, #412]	@ (8012e68 <MX_GPIO_Init+0x268>)
 8012ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012cce:	f003 0308 	and.w	r3, r3, #8
 8012cd2:	607b      	str	r3, [r7, #4]
 8012cd4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8012cd6:	f7f0 fad9 	bl	800328c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|INT_OUT_Pin, GPIO_PIN_RESET);
 8012cda:	2200      	movs	r2, #0
 8012cdc:	2139      	movs	r1, #57	@ 0x39
 8012cde:	4863      	ldr	r0, [pc, #396]	@ (8012e6c <MX_GPIO_Init+0x26c>)
 8012ce0:	f7ef fa88 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin|SPI1_CS2_Pin, GPIO_PIN_SET);
 8012ce4:	2201      	movs	r2, #1
 8012ce6:	2130      	movs	r1, #48	@ 0x30
 8012ce8:	4861      	ldr	r0, [pc, #388]	@ (8012e70 <MX_GPIO_Init+0x270>)
 8012cea:	f7ef fa83 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8012cee:	2201      	movs	r2, #1
 8012cf0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8012cf4:	485f      	ldr	r0, [pc, #380]	@ (8012e74 <MX_GPIO_Init+0x274>)
 8012cf6:	f7ef fa7d 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_DETECT_POL_GPIO_Port, SD_DETECT_POL_Pin, GPIO_PIN_RESET);
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	2110      	movs	r1, #16
 8012cfe:	485e      	ldr	r0, [pc, #376]	@ (8012e78 <MX_GPIO_Init+0x278>)
 8012d00:	f7ef fa78 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE6 PE7 PE8
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8012d04:	f64f 53c6 	movw	r3, #64966	@ 0xfdc6
 8012d08:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012d0a:	2303      	movs	r3, #3
 8012d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012d16:	4619      	mov	r1, r3
 8012d18:	4854      	ldr	r0, [pc, #336]	@ (8012e6c <MX_GPIO_Init+0x26c>)
 8012d1a:	f7ee ffcd 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|INT_OUT_Pin;
 8012d1e:	2339      	movs	r3, #57	@ 0x39
 8012d20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012d22:	2301      	movs	r3, #1
 8012d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d26:	2300      	movs	r3, #0
 8012d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012d32:	4619      	mov	r1, r3
 8012d34:	484d      	ldr	r0, [pc, #308]	@ (8012e6c <MX_GPIO_Init+0x26c>)
 8012d36:	f7ee ffbf 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8012d3a:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 8012d3e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012d40:	2303      	movs	r3, #3
 8012d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d44:	2300      	movs	r3, #0
 8012d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012d4c:	4619      	mov	r1, r3
 8012d4e:	4848      	ldr	r0, [pc, #288]	@ (8012e70 <MX_GPIO_Init+0x270>)
 8012d50:	f7ee ffb2 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8012d54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012d58:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012d5a:	2303      	movs	r3, #3
 8012d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012d66:	4619      	mov	r1, r3
 8012d68:	4844      	ldr	r0, [pc, #272]	@ (8012e7c <MX_GPIO_Init+0x27c>)
 8012d6a:	f7ee ffa5 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8012d6e:	f649 1313 	movw	r3, #39187	@ 0x9913
 8012d72:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012d74:	2303      	movs	r3, #3
 8012d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012d80:	4619      	mov	r1, r3
 8012d82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8012d86:	f7ee ff97 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin|SPI1_CS2_Pin;
 8012d8a:	2330      	movs	r3, #48	@ 0x30
 8012d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012d8e:	2301      	movs	r3, #1
 8012d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d92:	2300      	movs	r3, #0
 8012d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d96:	2300      	movs	r3, #0
 8012d98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012d9e:	4619      	mov	r1, r3
 8012da0:	4833      	ldr	r0, [pc, #204]	@ (8012e70 <MX_GPIO_Init+0x270>)
 8012da2:	f7ee ff89 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8012da6:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 8012daa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012dac:	2303      	movs	r3, #3
 8012dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012db0:	2300      	movs	r3, #0
 8012db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012db8:	4619      	mov	r1, r3
 8012dba:	482e      	ldr	r0, [pc, #184]	@ (8012e74 <MX_GPIO_Init+0x274>)
 8012dbc:	f7ee ff7c 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8012dc0:	f24e 13ff 	movw	r3, #57855	@ 0xe1ff
 8012dc4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012dc6:	2303      	movs	r3, #3
 8012dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012dd2:	4619      	mov	r1, r3
 8012dd4:	482a      	ldr	r0, [pc, #168]	@ (8012e80 <MX_GPIO_Init+0x280>)
 8012dd6:	f7ee ff6f 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8012dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012de0:	2301      	movs	r3, #1
 8012de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012de4:	2300      	movs	r3, #0
 8012de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012de8:	2300      	movs	r3, #0
 8012dea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8012dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012df0:	4619      	mov	r1, r3
 8012df2:	4820      	ldr	r0, [pc, #128]	@ (8012e74 <MX_GPIO_Init+0x274>)
 8012df4:	f7ee ff60 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD3 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8012df8:	f64f 73cb 	movw	r3, #65483	@ 0xffcb
 8012dfc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012dfe:	2303      	movs	r3, #3
 8012e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e02:	2300      	movs	r3, #0
 8012e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012e0a:	4619      	mov	r1, r3
 8012e0c:	481a      	ldr	r0, [pc, #104]	@ (8012e78 <MX_GPIO_Init+0x278>)
 8012e0e:	f7ee ff53 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_POL_Pin;
 8012e12:	2310      	movs	r3, #16
 8012e14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012e16:	2301      	movs	r3, #1
 8012e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SD_DETECT_POL_GPIO_Port, &GPIO_InitStruct);
 8012e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012e26:	4619      	mov	r1, r3
 8012e28:	4813      	ldr	r0, [pc, #76]	@ (8012e78 <MX_GPIO_Init+0x278>)
 8012e2a:	f7ee ff45 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8012e2e:	2320      	movs	r3, #32
 8012e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e32:	2300      	movs	r3, #0
 8012e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012e36:	2301      	movs	r3, #1
 8012e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8012e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012e3e:	4619      	mov	r1, r3
 8012e40:	480d      	ldr	r0, [pc, #52]	@ (8012e78 <MX_GPIO_Init+0x278>)
 8012e42:	f7ee ff39 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8012e46:	2308      	movs	r3, #8
 8012e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012e4a:	2303      	movs	r3, #3
 8012e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8012e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012e56:	4619      	mov	r1, r3
 8012e58:	480a      	ldr	r0, [pc, #40]	@ (8012e84 <MX_GPIO_Init+0x284>)
 8012e5a:	f7ee ff2d 	bl	8001cb8 <HAL_GPIO_Init>

}
 8012e5e:	bf00      	nop
 8012e60:	3738      	adds	r7, #56	@ 0x38
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}
 8012e66:	bf00      	nop
 8012e68:	40021000 	.word	0x40021000
 8012e6c:	48001000 	.word	0x48001000
 8012e70:	48000800 	.word	0x48000800
 8012e74:	48000400 	.word	0x48000400
 8012e78:	48000c00 	.word	0x48000c00
 8012e7c:	48001400 	.word	0x48001400
 8012e80:	48001800 	.word	0x48001800
 8012e84:	48001c00 	.word	0x48001c00

08012e88 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8012e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8012f00 <MX_I2C2_Init+0x78>)
 8012e90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 8012e92:	4b1a      	ldr	r3, [pc, #104]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012e94:	4a1b      	ldr	r2, [pc, #108]	@ (8012f04 <MX_I2C2_Init+0x7c>)
 8012e96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8012e98:	4b18      	ldr	r3, [pc, #96]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012e9e:	4b17      	ldr	r3, [pc, #92]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012ea4:	4b15      	ldr	r3, [pc, #84]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8012eaa:	4b14      	ldr	r3, [pc, #80]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012eac:	2200      	movs	r2, #0
 8012eae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012eb0:	4b12      	ldr	r3, [pc, #72]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012eb6:	4b11      	ldr	r3, [pc, #68]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012eb8:	2200      	movs	r2, #0
 8012eba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8012ec2:	480e      	ldr	r0, [pc, #56]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012ec4:	f7ef f9c2 	bl	800224c <HAL_I2C_Init>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d001      	beq.n	8012ed2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8012ece:	f000 fb37 	bl	8013540 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012ed2:	2100      	movs	r1, #0
 8012ed4:	4809      	ldr	r0, [pc, #36]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012ed6:	f7ef ffe5 	bl	8002ea4 <HAL_I2CEx_ConfigAnalogFilter>
 8012eda:	4603      	mov	r3, r0
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d001      	beq.n	8012ee4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8012ee0:	f000 fb2e 	bl	8013540 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	4805      	ldr	r0, [pc, #20]	@ (8012efc <MX_I2C2_Init+0x74>)
 8012ee8:	f7f0 f852 	bl	8002f90 <HAL_I2CEx_ConfigDigitalFilter>
 8012eec:	4603      	mov	r3, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d001      	beq.n	8012ef6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8012ef2:	f000 fb25 	bl	8013540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8012ef6:	bf00      	nop
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	2004a81c 	.word	0x2004a81c
 8012f00:	40005800 	.word	0x40005800
 8012f04:	30a175ab 	.word	0x30a175ab

08012f08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b0b0      	sub	sp, #192	@ 0xc0
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f10:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8012f14:	2200      	movs	r2, #0
 8012f16:	601a      	str	r2, [r3, #0]
 8012f18:	605a      	str	r2, [r3, #4]
 8012f1a:	609a      	str	r2, [r3, #8]
 8012f1c:	60da      	str	r2, [r3, #12]
 8012f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012f20:	f107 0314 	add.w	r3, r7, #20
 8012f24:	2298      	movs	r2, #152	@ 0x98
 8012f26:	2100      	movs	r1, #0
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f001 fc2f 	bl	801478c <memset>
  if(i2cHandle->Instance==I2C2)
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	4a21      	ldr	r2, [pc, #132]	@ (8012fb8 <HAL_I2C_MspInit+0xb0>)
 8012f34:	4293      	cmp	r3, r2
 8012f36:	d13b      	bne.n	8012fb0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8012f38:	2380      	movs	r3, #128	@ 0x80
 8012f3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012f40:	f107 0314 	add.w	r3, r7, #20
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7f1 fac5 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8012f50:	f000 faf6 	bl	8013540 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012f54:	4b19      	ldr	r3, [pc, #100]	@ (8012fbc <HAL_I2C_MspInit+0xb4>)
 8012f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012f58:	4a18      	ldr	r2, [pc, #96]	@ (8012fbc <HAL_I2C_MspInit+0xb4>)
 8012f5a:	f043 0302 	orr.w	r3, r3, #2
 8012f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012f60:	4b16      	ldr	r3, [pc, #88]	@ (8012fbc <HAL_I2C_MspInit+0xb4>)
 8012f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012f64:	f003 0302 	and.w	r3, r3, #2
 8012f68:	613b      	str	r3, [r7, #16]
 8012f6a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8012f6c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8012f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012f74:	2312      	movs	r3, #18
 8012f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f80:	2303      	movs	r3, #3
 8012f82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8012f86:	2304      	movs	r3, #4
 8012f88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012f8c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8012f90:	4619      	mov	r1, r3
 8012f92:	480b      	ldr	r0, [pc, #44]	@ (8012fc0 <HAL_I2C_MspInit+0xb8>)
 8012f94:	f7ee fe90 	bl	8001cb8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8012f98:	4b08      	ldr	r3, [pc, #32]	@ (8012fbc <HAL_I2C_MspInit+0xb4>)
 8012f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f9c:	4a07      	ldr	r2, [pc, #28]	@ (8012fbc <HAL_I2C_MspInit+0xb4>)
 8012f9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8012fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8012fa4:	4b05      	ldr	r3, [pc, #20]	@ (8012fbc <HAL_I2C_MspInit+0xb4>)
 8012fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012fac:	60fb      	str	r3, [r7, #12]
 8012fae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8012fb0:	bf00      	nop
 8012fb2:	37c0      	adds	r7, #192	@ 0xc0
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	40005800 	.word	0x40005800
 8012fbc:	40021000 	.word	0x40021000
 8012fc0:	48000400 	.word	0x48000400

08012fc4 <StartLedsTask>:
#include "task.h"
#include "cmsis_os.h"
#include <stdio.h>

void StartLedsTask(void *argument)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  int light_state = 0;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	60fb      	str	r3, [r7, #12]
  uint32_t scheduling_kernel_tick_count = 0;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	60bb      	str	r3, [r7, #8]

  while(1) {
    switch (light_state) {
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2b02      	cmp	r3, #2
 8012fd8:	d025      	beq.n	8013026 <StartLedsTask+0x62>
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	2b02      	cmp	r3, #2
 8012fde:	dc2f      	bgt.n	8013040 <StartLedsTask+0x7c>
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d003      	beq.n	8012fee <StartLedsTask+0x2a>
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	2b01      	cmp	r3, #1
 8012fea:	d00e      	beq.n	801300a <StartLedsTask+0x46>
 8012fec:	e028      	b.n	8013040 <StartLedsTask+0x7c>
      case 0:
        HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 8012fee:	2200      	movs	r2, #0
 8012ff0:	2120      	movs	r1, #32
 8012ff2:	481e      	ldr	r0, [pc, #120]	@ (801306c <StartLedsTask+0xa8>)
 8012ff4:	f7ef f8fe 	bl	80021f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_SET);
 8012ff8:	2201      	movs	r2, #1
 8012ffa:	2108      	movs	r1, #8
 8012ffc:	481b      	ldr	r0, [pc, #108]	@ (801306c <StartLedsTask+0xa8>)
 8012ffe:	f7ef f8f9 	bl	80021f4 <HAL_GPIO_WritePin>
        printf("green\n");
 8013002:	481b      	ldr	r0, [pc, #108]	@ (8013070 <StartLedsTask+0xac>)
 8013004:	f001 fac2 	bl	801458c <puts>
        break;
 8013008:	e01a      	b.n	8013040 <StartLedsTask+0x7c>
      case 1:
        HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_RESET);
 801300a:	2200      	movs	r2, #0
 801300c:	2108      	movs	r1, #8
 801300e:	4817      	ldr	r0, [pc, #92]	@ (801306c <StartLedsTask+0xa8>)
 8013010:	f7ef f8f0 	bl	80021f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOE, LED2_Pin, GPIO_PIN_SET);
 8013014:	2201      	movs	r2, #1
 8013016:	2110      	movs	r1, #16
 8013018:	4814      	ldr	r0, [pc, #80]	@ (801306c <StartLedsTask+0xa8>)
 801301a:	f7ef f8eb 	bl	80021f4 <HAL_GPIO_WritePin>
        printf("yellow\n");
 801301e:	4815      	ldr	r0, [pc, #84]	@ (8013074 <StartLedsTask+0xb0>)
 8013020:	f001 fab4 	bl	801458c <puts>
        break;
 8013024:	e00c      	b.n	8013040 <StartLedsTask+0x7c>
      case 2:
        HAL_GPIO_WritePin(GPIOE, LED2_Pin, GPIO_PIN_RESET);
 8013026:	2200      	movs	r2, #0
 8013028:	2110      	movs	r1, #16
 801302a:	4810      	ldr	r0, [pc, #64]	@ (801306c <StartLedsTask+0xa8>)
 801302c:	f7ef f8e2 	bl	80021f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 8013030:	2201      	movs	r2, #1
 8013032:	2120      	movs	r1, #32
 8013034:	480d      	ldr	r0, [pc, #52]	@ (801306c <StartLedsTask+0xa8>)
 8013036:	f7ef f8dd 	bl	80021f4 <HAL_GPIO_WritePin>
        printf("red\n");
 801303a:	480f      	ldr	r0, [pc, #60]	@ (8013078 <StartLedsTask+0xb4>)
 801303c:	f001 faa6 	bl	801458c <puts>
    }
    light_state++;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	3301      	adds	r3, #1
 8013044:	60fb      	str	r3, [r7, #12]
    light_state%=3;
 8013046:	68fa      	ldr	r2, [r7, #12]
 8013048:	4b0c      	ldr	r3, [pc, #48]	@ (801307c <StartLedsTask+0xb8>)
 801304a:	fb83 3102 	smull	r3, r1, r3, r2
 801304e:	17d3      	asrs	r3, r2, #31
 8013050:	1ac9      	subs	r1, r1, r3
 8013052:	460b      	mov	r3, r1
 8013054:	005b      	lsls	r3, r3, #1
 8013056:	440b      	add	r3, r1
 8013058:	1ad3      	subs	r3, r2, r3
 801305a:	60fb      	str	r3, [r7, #12]

    scheduling_kernel_tick_count += 1000;
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8013062:	60bb      	str	r3, [r7, #8]
    osDelayUntil(scheduling_kernel_tick_count);
 8013064:	68b8      	ldr	r0, [r7, #8]
 8013066:	f7fb fe6e 	bl	800ed46 <osDelayUntil>
    switch (light_state) {
 801306a:	e7b3      	b.n	8012fd4 <StartLedsTask+0x10>
 801306c:	48001000 	.word	0x48001000
 8013070:	08015b28 	.word	0x08015b28
 8013074:	08015b30 	.word	0x08015b30
 8013078:	08015b38 	.word	0x08015b38
 801307c:	55555556 	.word	0x55555556

08013080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013080:	b5b0      	push	{r4, r5, r7, lr}
 8013082:	b096      	sub	sp, #88	@ 0x58
 8013084:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013086:	f7ed fa8b 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801308a:	f000 f9b1 	bl	80133f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801308e:	f7ff fdb7 	bl	8012c00 <MX_GPIO_Init>
  MX_DMA_Init();
 8013092:	f7ff fca5 	bl	80129e0 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8013096:	f7ff fadf 	bl	8012658 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 801309a:	f7ff fef5 	bl	8012e88 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 801309e:	f000 fc55 	bl	801394c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80130a2:	f000 fd17 	bl	8013ad4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80130a6:	f000 fd53 	bl	8013b50 <MX_SPI2_Init>
  MX_SPI3_Init();
 80130aa:	f000 fd8f 	bl	8013bcc <MX_SPI3_Init>
  MX_FATFS_Init();
 80130ae:	f7ff fcc1 	bl	8012a34 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80130b2:	f000 ffdd 	bl	8014070 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80130b6:	f001 f827 	bl	8014108 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80130ba:	f000 fa53 	bl	8013564 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //microphone
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, rec_buf, AUDIO_BUF_LEN);
 80130be:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80130c2:	49b4      	ldr	r1, [pc, #720]	@ (8013394 <main+0x314>)
 80130c4:	48b4      	ldr	r0, [pc, #720]	@ (8013398 <main+0x318>)
 80130c6:	f7ee f827 	bl	8001118 <HAL_DFSDM_FilterRegularStart_DMA>

  //enable backup battery charging
  HAL_PWREx_EnableBatteryCharging(PWR_BATTERY_CHARGING_RESISTOR_5);
 80130ca:	2000      	movs	r0, #0
 80130cc:	f7f0 f8b8 	bl	8003240 <HAL_PWREx_EnableBatteryCharging>

  //mags
  const uint8_t tx_data[] = {0x2f|0x80,0};
 80130d0:	23af      	movs	r3, #175	@ 0xaf
 80130d2:	86bb      	strh	r3, [r7, #52]	@ 0x34
  uint8_t rx_data1[] = {0,0};
 80130d4:	2300      	movs	r3, #0
 80130d6:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint8_t rx_data2[] = {0,0};
 80130d8:	2300      	movs	r3, #0
 80130da:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data1, sizeof(tx_data), 1); //prime spi port
 80130dc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80130e0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80130e4:	2301      	movs	r3, #1
 80130e6:	9300      	str	r3, [sp, #0]
 80130e8:	2302      	movs	r3, #2
 80130ea:	48ac      	ldr	r0, [pc, #688]	@ (801339c <main+0x31c>)
 80130ec:	f7f5 fc90 	bl	8008a10 <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin, GPIO_PIN_RESET);
 80130f0:	2200      	movs	r2, #0
 80130f2:	2110      	movs	r1, #16
 80130f4:	48aa      	ldr	r0, [pc, #680]	@ (80133a0 <main+0x320>)
 80130f6:	f7ef f87d 	bl	80021f4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data1, sizeof(tx_data), 1);
 80130fa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80130fe:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8013102:	2301      	movs	r3, #1
 8013104:	9300      	str	r3, [sp, #0]
 8013106:	2302      	movs	r3, #2
 8013108:	48a4      	ldr	r0, [pc, #656]	@ (801339c <main+0x31c>)
 801310a:	f7f5 fc81 	bl	8008a10 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin, GPIO_PIN_SET);
 801310e:	2201      	movs	r2, #1
 8013110:	2110      	movs	r1, #16
 8013112:	48a3      	ldr	r0, [pc, #652]	@ (80133a0 <main+0x320>)
 8013114:	f7ef f86e 	bl	80021f4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, SPI1_CS2_Pin, GPIO_PIN_RESET);
 8013118:	2200      	movs	r2, #0
 801311a:	2120      	movs	r1, #32
 801311c:	48a0      	ldr	r0, [pc, #640]	@ (80133a0 <main+0x320>)
 801311e:	f7ef f869 	bl	80021f4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data2, sizeof(tx_data), 1);
 8013122:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013126:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801312a:	2301      	movs	r3, #1
 801312c:	9300      	str	r3, [sp, #0]
 801312e:	2302      	movs	r3, #2
 8013130:	489a      	ldr	r0, [pc, #616]	@ (801339c <main+0x31c>)
 8013132:	f7f5 fc6d 	bl	8008a10 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOC, SPI1_CS2_Pin, GPIO_PIN_SET);
 8013136:	2201      	movs	r2, #1
 8013138:	2120      	movs	r1, #32
 801313a:	4899      	ldr	r0, [pc, #612]	@ (80133a0 <main+0x320>)
 801313c:	f7ef f85a 	bl	80021f4 <HAL_GPIO_WritePin>

  printf("spi1_cs1 read from 0x2f: 0x%02x\n", rx_data1[1]);
 8013140:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8013144:	4619      	mov	r1, r3
 8013146:	4897      	ldr	r0, [pc, #604]	@ (80133a4 <main+0x324>)
 8013148:	f001 f9b8 	bl	80144bc <iprintf>
  printf("spi1_cs2 read from 0x2f: 0x%02x\n", rx_data2[1]);
 801314c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013150:	4619      	mov	r1, r3
 8013152:	4895      	ldr	r0, [pc, #596]	@ (80133a8 <main+0x328>)
 8013154:	f001 f9b2 	bl	80144bc <iprintf>

  //cam spi
  const uint8_t tx_data_cam_write[] = {0x0|0x80,0x4b};
 8013158:	f44f 4397 	mov.w	r3, #19328	@ 0x4b80
 801315c:	853b      	strh	r3, [r7, #40]	@ 0x28
  const uint8_t tx_data_cam_read[] = {0x0|0x00,0x00};
 801315e:	2300      	movs	r3, #0
 8013160:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint8_t rx_data_cam[] = {0,0};
 8013162:	2300      	movs	r3, #0
 8013164:	843b      	strh	r3, [r7, #32]

  HAL_SPI_TransmitReceive(&hspi2, tx_data_cam_write, rx_data_cam, sizeof(tx_data), 1); //prime spi port
 8013166:	f107 0220 	add.w	r2, r7, #32
 801316a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801316e:	2301      	movs	r3, #1
 8013170:	9300      	str	r3, [sp, #0]
 8013172:	2302      	movs	r3, #2
 8013174:	488d      	ldr	r0, [pc, #564]	@ (80133ac <main+0x32c>)
 8013176:	f7f5 fc4b 	bl	8008a10 <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 801317a:	2200      	movs	r2, #0
 801317c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8013180:	488b      	ldr	r0, [pc, #556]	@ (80133b0 <main+0x330>)
 8013182:	f7ef f837 	bl	80021f4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, tx_data_cam_write, rx_data_cam, sizeof(tx_data), 1);
 8013186:	f107 0220 	add.w	r2, r7, #32
 801318a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801318e:	2301      	movs	r3, #1
 8013190:	9300      	str	r3, [sp, #0]
 8013192:	2302      	movs	r3, #2
 8013194:	4885      	ldr	r0, [pc, #532]	@ (80133ac <main+0x32c>)
 8013196:	f7f5 fc3b 	bl	8008a10 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 801319a:	2201      	movs	r2, #1
 801319c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80131a0:	4883      	ldr	r0, [pc, #524]	@ (80133b0 <main+0x330>)
 80131a2:	f7ef f827 	bl	80021f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80131a6:	2200      	movs	r2, #0
 80131a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80131ac:	4880      	ldr	r0, [pc, #512]	@ (80133b0 <main+0x330>)
 80131ae:	f7ef f821 	bl	80021f4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, tx_data_cam_read, rx_data_cam, sizeof(tx_data), 1);
 80131b2:	f107 0220 	add.w	r2, r7, #32
 80131b6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80131ba:	2301      	movs	r3, #1
 80131bc:	9300      	str	r3, [sp, #0]
 80131be:	2302      	movs	r3, #2
 80131c0:	487a      	ldr	r0, [pc, #488]	@ (80133ac <main+0x32c>)
 80131c2:	f7f5 fc25 	bl	8008a10 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80131c6:	2201      	movs	r2, #1
 80131c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80131cc:	4878      	ldr	r0, [pc, #480]	@ (80133b0 <main+0x330>)
 80131ce:	f7ef f811 	bl	80021f4 <HAL_GPIO_WritePin>
  printf("cam read from 0x00: 0x%02x\n", rx_data_cam[1]);
 80131d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80131d6:	4619      	mov	r1, r3
 80131d8:	4876      	ldr	r0, [pc, #472]	@ (80133b4 <main+0x334>)
 80131da:	f001 f96f 	bl	80144bc <iprintf>

  //cam i2c (sequential read not supported)
  uint8_t tx_data_cam_i2c_set_to_reg_bank_2[] = {0xff, 0x01};
 80131de:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80131e2:	83bb      	strh	r3, [r7, #28]
  uint8_t tx_data_cam_i2c_set_reg_to_read_to_idA = 0x1c;
 80131e4:	231c      	movs	r3, #28
 80131e6:	76fb      	strb	r3, [r7, #27]
  uint8_t tx_data_cam_i2c_set_reg_to_read_to_idB = 0x1d;
 80131e8:	231d      	movs	r3, #29
 80131ea:	76bb      	strb	r3, [r7, #26]
  uint8_t rx_data_cam_i2c_idA, rx_data_cam_i2c_idB;
  HAL_I2C_Master_Transmit(
 80131ec:	f107 021c 	add.w	r2, r7, #28
 80131f0:	2301      	movs	r3, #1
 80131f2:	9300      	str	r3, [sp, #0]
 80131f4:	2302      	movs	r3, #2
 80131f6:	2160      	movs	r1, #96	@ 0x60
 80131f8:	486f      	ldr	r0, [pc, #444]	@ (80133b8 <main+0x338>)
 80131fa:	f7ef f955 	bl	80024a8 <HAL_I2C_Master_Transmit>
      &hi2c2,
      0x30<<1,
      tx_data_cam_i2c_set_to_reg_bank_2,
      sizeof(tx_data_cam_i2c_set_to_reg_bank_2),
      1);
  HAL_I2C_Master_Transmit(
 80131fe:	f107 021b 	add.w	r2, r7, #27
 8013202:	2301      	movs	r3, #1
 8013204:	9300      	str	r3, [sp, #0]
 8013206:	2301      	movs	r3, #1
 8013208:	2160      	movs	r1, #96	@ 0x60
 801320a:	486b      	ldr	r0, [pc, #428]	@ (80133b8 <main+0x338>)
 801320c:	f7ef f94c 	bl	80024a8 <HAL_I2C_Master_Transmit>
      &hi2c2,
      0x30<<1,
      &tx_data_cam_i2c_set_reg_to_read_to_idA,
      sizeof(tx_data_cam_i2c_set_reg_to_read_to_idA),
      1);
  HAL_I2C_Master_Receive(
 8013210:	f107 0219 	add.w	r2, r7, #25
 8013214:	2301      	movs	r3, #1
 8013216:	9300      	str	r3, [sp, #0]
 8013218:	2301      	movs	r3, #1
 801321a:	2160      	movs	r1, #96	@ 0x60
 801321c:	4866      	ldr	r0, [pc, #408]	@ (80133b8 <main+0x338>)
 801321e:	f7ef fa5b 	bl	80026d8 <HAL_I2C_Master_Receive>
      &hi2c2,
      0x30<<1,
      &rx_data_cam_i2c_idA,
      sizeof(rx_data_cam_i2c_idA),
      1);
  HAL_I2C_Master_Transmit(
 8013222:	f107 021a 	add.w	r2, r7, #26
 8013226:	2301      	movs	r3, #1
 8013228:	9300      	str	r3, [sp, #0]
 801322a:	2301      	movs	r3, #1
 801322c:	2160      	movs	r1, #96	@ 0x60
 801322e:	4862      	ldr	r0, [pc, #392]	@ (80133b8 <main+0x338>)
 8013230:	f7ef f93a 	bl	80024a8 <HAL_I2C_Master_Transmit>
      &hi2c2,
      0x30<<1,
      &tx_data_cam_i2c_set_reg_to_read_to_idB,
      sizeof(tx_data_cam_i2c_set_reg_to_read_to_idB),
      1);
  HAL_I2C_Master_Receive(
 8013234:	f107 0218 	add.w	r2, r7, #24
 8013238:	2301      	movs	r3, #1
 801323a:	9300      	str	r3, [sp, #0]
 801323c:	2301      	movs	r3, #1
 801323e:	2160      	movs	r1, #96	@ 0x60
 8013240:	485d      	ldr	r0, [pc, #372]	@ (80133b8 <main+0x338>)
 8013242:	f7ef fa49 	bl	80026d8 <HAL_I2C_Master_Receive>
      &hi2c2,
      0x30<<1,
      &rx_data_cam_i2c_idB,
      sizeof(rx_data_cam_i2c_idB),
      1);
  uint16_t cam_i2c_id = (uint16_t)rx_data_cam_i2c_idA<<8 | rx_data_cam_i2c_idB;
 8013246:	7e7b      	ldrb	r3, [r7, #25]
 8013248:	021b      	lsls	r3, r3, #8
 801324a:	b21a      	sxth	r2, r3
 801324c:	7e3b      	ldrb	r3, [r7, #24]
 801324e:	b21b      	sxth	r3, r3
 8013250:	4313      	orrs	r3, r2
 8013252:	b21b      	sxth	r3, r3
 8013254:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  printf("cam i2c ID: 0x%04x\n", cam_i2c_id);
 8013258:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801325c:	4619      	mov	r1, r3
 801325e:	4857      	ldr	r0, [pc, #348]	@ (80133bc <main+0x33c>)
 8013260:	f001 f92c 	bl	80144bc <iprintf>
//  printf("res: %d\n", res);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8013264:	f7fb fc5c 	bl	800eb20 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8013268:	f7ff fc14 	bl	8012a94 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 801326c:	f7fb fc9e 	bl	800ebac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t tick;
  int light_state = 0;
 8013270:	2300      	movs	r3, #0
 8013272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  int last_light_state = -1;
 8013274:	f04f 33ff 	mov.w	r3, #4294967295
 8013278:	647b      	str	r3, [r7, #68]	@ 0x44
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    tick = HAL_GetTick();
 801327a:	f7ed f9bd 	bl	80005f8 <HAL_GetTick>
 801327e:	63b8      	str	r0, [r7, #56]	@ 0x38
//        dma_rec_buf_cplt = false;
//        f_write(&SDFile, (const void*)save_buf, sizeof(save_buf), (void *)&byteswritten);
//      }
//    }

    light_state = (tick%3000) / 1000;
 8013280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013282:	4b4f      	ldr	r3, [pc, #316]	@ (80133c0 <main+0x340>)
 8013284:	fba3 1302 	umull	r1, r3, r3, r2
 8013288:	099b      	lsrs	r3, r3, #6
 801328a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 801328e:	fb01 f303 	mul.w	r3, r1, r3
 8013292:	1ad3      	subs	r3, r2, r3
 8013294:	4a4b      	ldr	r2, [pc, #300]	@ (80133c4 <main+0x344>)
 8013296:	fba2 2303 	umull	r2, r3, r2, r3
 801329a:	099b      	lsrs	r3, r3, #6
 801329c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (light_state != last_light_state) {
 801329e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80132a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d037      	beq.n	8013316 <main+0x296>
      last_light_state = light_state;
 80132a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132a8:	647b      	str	r3, [r7, #68]	@ 0x44
      switch (light_state) {
 80132aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132ac:	2b02      	cmp	r3, #2
 80132ae:	d025      	beq.n	80132fc <main+0x27c>
 80132b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132b2:	2b02      	cmp	r3, #2
 80132b4:	dc2f      	bgt.n	8013316 <main+0x296>
 80132b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d003      	beq.n	80132c4 <main+0x244>
 80132bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d00e      	beq.n	80132e0 <main+0x260>
 80132c2:	e028      	b.n	8013316 <main+0x296>
        case 0:
          HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 80132c4:	2200      	movs	r2, #0
 80132c6:	2120      	movs	r1, #32
 80132c8:	483f      	ldr	r0, [pc, #252]	@ (80133c8 <main+0x348>)
 80132ca:	f7ee ff93 	bl	80021f4 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_SET);
 80132ce:	2201      	movs	r2, #1
 80132d0:	2108      	movs	r1, #8
 80132d2:	483d      	ldr	r0, [pc, #244]	@ (80133c8 <main+0x348>)
 80132d4:	f7ee ff8e 	bl	80021f4 <HAL_GPIO_WritePin>
          printf("green\n");
 80132d8:	483c      	ldr	r0, [pc, #240]	@ (80133cc <main+0x34c>)
 80132da:	f001 f957 	bl	801458c <puts>
          break;
 80132de:	e01a      	b.n	8013316 <main+0x296>
        case 1:
          HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_RESET);
 80132e0:	2200      	movs	r2, #0
 80132e2:	2108      	movs	r1, #8
 80132e4:	4838      	ldr	r0, [pc, #224]	@ (80133c8 <main+0x348>)
 80132e6:	f7ee ff85 	bl	80021f4 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOE, LED2_Pin, GPIO_PIN_SET);
 80132ea:	2201      	movs	r2, #1
 80132ec:	2110      	movs	r1, #16
 80132ee:	4836      	ldr	r0, [pc, #216]	@ (80133c8 <main+0x348>)
 80132f0:	f7ee ff80 	bl	80021f4 <HAL_GPIO_WritePin>
          printf("yellow\n");
 80132f4:	4836      	ldr	r0, [pc, #216]	@ (80133d0 <main+0x350>)
 80132f6:	f001 f949 	bl	801458c <puts>
          break;
 80132fa:	e00c      	b.n	8013316 <main+0x296>
        case 2:
          HAL_GPIO_WritePin(GPIOE, LED2_Pin, GPIO_PIN_RESET);
 80132fc:	2200      	movs	r2, #0
 80132fe:	2110      	movs	r1, #16
 8013300:	4831      	ldr	r0, [pc, #196]	@ (80133c8 <main+0x348>)
 8013302:	f7ee ff77 	bl	80021f4 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 8013306:	2201      	movs	r2, #1
 8013308:	2120      	movs	r1, #32
 801330a:	482f      	ldr	r0, [pc, #188]	@ (80133c8 <main+0x348>)
 801330c:	f7ee ff72 	bl	80021f4 <HAL_GPIO_WritePin>
          printf("red\n");
 8013310:	4830      	ldr	r0, [pc, #192]	@ (80133d4 <main+0x354>)
 8013312:	f001 f93b 	bl	801458c <puts>
      }
    }
    if (tick%4111 == 0) {
 8013316:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013318:	4b2f      	ldr	r3, [pc, #188]	@ (80133d8 <main+0x358>)
 801331a:	fba3 2301 	umull	r2, r3, r3, r1
 801331e:	0ada      	lsrs	r2, r3, #11
 8013320:	4613      	mov	r3, r2
 8013322:	021b      	lsls	r3, r3, #8
 8013324:	4413      	add	r3, r2
 8013326:	011b      	lsls	r3, r3, #4
 8013328:	1a9b      	subs	r3, r3, r2
 801332a:	1aca      	subs	r2, r1, r3
 801332c:	2a00      	cmp	r2, #0
 801332e:	d11d      	bne.n	801336c <main+0x2ec>
      RTC_TimeTypeDef time;
      RTC_DateTypeDef date;
      HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8013330:	1d3b      	adds	r3, r7, #4
 8013332:	2200      	movs	r2, #0
 8013334:	4619      	mov	r1, r3
 8013336:	4829      	ldr	r0, [pc, #164]	@ (80133dc <main+0x35c>)
 8013338:	f7f3 faa0 	bl	800687c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 801333c:	463b      	mov	r3, r7
 801333e:	2200      	movs	r2, #0
 8013340:	4619      	mov	r1, r3
 8013342:	4826      	ldr	r0, [pc, #152]	@ (80133dc <main+0x35c>)
 8013344:	f7f3 fb04 	bl	8006950 <HAL_RTC_GetDate>
      printf("%02d/%02d/%04d %02d:%02d:%02d\n", date.Month, date.Date, 1980 + date.Year, time.Hours, time.Minutes, time.Seconds);
 8013348:	787b      	ldrb	r3, [r7, #1]
 801334a:	461c      	mov	r4, r3
 801334c:	78bb      	ldrb	r3, [r7, #2]
 801334e:	461d      	mov	r5, r3
 8013350:	78fb      	ldrb	r3, [r7, #3]
 8013352:	f203 73bc 	addw	r3, r3, #1980	@ 0x7bc
 8013356:	793a      	ldrb	r2, [r7, #4]
 8013358:	7979      	ldrb	r1, [r7, #5]
 801335a:	79b8      	ldrb	r0, [r7, #6]
 801335c:	9002      	str	r0, [sp, #8]
 801335e:	9101      	str	r1, [sp, #4]
 8013360:	9200      	str	r2, [sp, #0]
 8013362:	462a      	mov	r2, r5
 8013364:	4621      	mov	r1, r4
 8013366:	481e      	ldr	r0, [pc, #120]	@ (80133e0 <main+0x360>)
 8013368:	f001 f8a8 	bl	80144bc <iprintf>
    }
    if (dma_rec_buf_cplt_count > 65) { //end after 66-2 total buffers (14.85 seconds)
 801336c:	4b1d      	ldr	r3, [pc, #116]	@ (80133e4 <main+0x364>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	2b41      	cmp	r3, #65	@ 0x41
 8013372:	dd82      	ble.n	801327a <main+0x1fa>
      HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8013374:	4808      	ldr	r0, [pc, #32]	@ (8013398 <main+0x318>)
 8013376:	f7ed ff73 	bl	8001260 <HAL_DFSDM_FilterRegularStop_DMA>
      f_close(&SDFile);
 801337a:	481b      	ldr	r0, [pc, #108]	@ (80133e8 <main+0x368>)
 801337c:	f7fb f9f2 	bl	800e764 <f_close>
      f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8013380:	2200      	movs	r2, #0
 8013382:	2100      	movs	r1, #0
 8013384:	4819      	ldr	r0, [pc, #100]	@ (80133ec <main+0x36c>)
 8013386:	f7fa fca1 	bl	800dccc <f_mount>
      return 0;
 801338a:	2300      	movs	r3, #0
    }
  }
  /* USER CODE END 3 */
}
 801338c:	4618      	mov	r0, r3
 801338e:	3748      	adds	r7, #72	@ 0x48
 8013390:	46bd      	mov	sp, r7
 8013392:	bdb0      	pop	{r4, r5, r7, pc}
 8013394:	2004a870 	.word	0x2004a870
 8013398:	2004a2b0 	.word	0x2004a2b0
 801339c:	20054920 	.word	0x20054920
 80133a0:	48000800 	.word	0x48000800
 80133a4:	08015b3c 	.word	0x08015b3c
 80133a8:	08015b60 	.word	0x08015b60
 80133ac:	20054984 	.word	0x20054984
 80133b0:	48000400 	.word	0x48000400
 80133b4:	08015b84 	.word	0x08015b84
 80133b8:	2004a81c 	.word	0x2004a81c
 80133bc:	08015ba0 	.word	0x08015ba0
 80133c0:	057619f1 	.word	0x057619f1
 80133c4:	10624dd3 	.word	0x10624dd3
 80133c8:	48001000 	.word	0x48001000
 80133cc:	08015bb4 	.word	0x08015bb4
 80133d0:	08015bbc 	.word	0x08015bbc
 80133d4:	08015bc4 	.word	0x08015bc4
 80133d8:	7f887017 	.word	0x7f887017
 80133dc:	20054878 	.word	0x20054878
 80133e0:	08015bc8 	.word	0x08015bc8
 80133e4:	20054874 	.word	0x20054874
 80133e8:	2004a5e4 	.word	0x2004a5e4
 80133ec:	2004a3ac 	.word	0x2004a3ac

080133f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b096      	sub	sp, #88	@ 0x58
 80133f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80133f6:	f107 0314 	add.w	r3, r7, #20
 80133fa:	2244      	movs	r2, #68	@ 0x44
 80133fc:	2100      	movs	r1, #0
 80133fe:	4618      	mov	r0, r3
 8013400:	f001 f9c4 	bl	801478c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013404:	463b      	mov	r3, r7
 8013406:	2200      	movs	r2, #0
 8013408:	601a      	str	r2, [r3, #0]
 801340a:	605a      	str	r2, [r3, #4]
 801340c:	609a      	str	r2, [r3, #8]
 801340e:	60da      	str	r2, [r3, #12]
 8013410:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8013412:	2000      	movs	r0, #0
 8013414:	f7ef fe60 	bl	80030d8 <HAL_PWREx_ControlVoltageScaling>
 8013418:	4603      	mov	r3, r0
 801341a:	2b00      	cmp	r3, #0
 801341c:	d001      	beq.n	8013422 <SystemClock_Config+0x32>
  {
    Error_Handler();
 801341e:	f000 f88f 	bl	8013540 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8013422:	f7ef fe29 	bl	8003078 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8013426:	4b1f      	ldr	r3, [pc, #124]	@ (80134a4 <SystemClock_Config+0xb4>)
 8013428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801342c:	4a1d      	ldr	r2, [pc, #116]	@ (80134a4 <SystemClock_Config+0xb4>)
 801342e:	f023 0318 	bic.w	r3, r3, #24
 8013432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8013436:	2305      	movs	r3, #5
 8013438:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801343a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801343e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8013440:	2301      	movs	r3, #1
 8013442:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013444:	2302      	movs	r3, #2
 8013446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013448:	2303      	movs	r3, #3
 801344a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 801344c:	2302      	movs	r3, #2
 801344e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8013450:	2314      	movs	r3, #20
 8013452:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013454:	2302      	movs	r3, #2
 8013456:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8013458:	2302      	movs	r3, #2
 801345a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801345c:	2302      	movs	r3, #2
 801345e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013460:	f107 0314 	add.w	r3, r7, #20
 8013464:	4618      	mov	r0, r3
 8013466:	f7ef ff21 	bl	80032ac <HAL_RCC_OscConfig>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d001      	beq.n	8013474 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8013470:	f000 f866 	bl	8013540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013474:	230f      	movs	r3, #15
 8013476:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013478:	2303      	movs	r3, #3
 801347a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801347c:	2300      	movs	r3, #0
 801347e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8013480:	2300      	movs	r3, #0
 8013482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8013484:	2300      	movs	r3, #0
 8013486:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013488:	463b      	mov	r3, r7
 801348a:	2105      	movs	r1, #5
 801348c:	4618      	mov	r0, r3
 801348e:	f7f0 fc5d 	bl	8003d4c <HAL_RCC_ClockConfig>
 8013492:	4603      	mov	r3, r0
 8013494:	2b00      	cmp	r3, #0
 8013496:	d001      	beq.n	801349c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8013498:	f000 f852 	bl	8013540 <Error_Handler>
  }
}
 801349c:	bf00      	nop
 801349e:	3758      	adds	r7, #88	@ 0x58
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	40021000 	.word	0x40021000

080134a8 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b084      	sub	sp, #16
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	607a      	str	r2, [r7, #4]
  (void)file;

  HAL_UART_Transmit(&huart2, (const uint8_t *)ptr, len, 10);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	230a      	movs	r3, #10
 80134ba:	68b9      	ldr	r1, [r7, #8]
 80134bc:	4803      	ldr	r0, [pc, #12]	@ (80134cc <_write+0x24>)
 80134be:	f7f6 fa9b 	bl	80099f8 <HAL_UART_Transmit>
  return len;
 80134c2:	687b      	ldr	r3, [r7, #4]
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3710      	adds	r7, #16
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}
 80134cc:	20054b30 	.word	0x20054b30

080134d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
  dma_rec_half_buf_cplt = true;
 80134d8:	4b04      	ldr	r3, [pc, #16]	@ (80134ec <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80134da:	2201      	movs	r2, #1
 80134dc:	701a      	strb	r2, [r3, #0]
}
 80134de:	bf00      	nop
 80134e0:	370c      	adds	r7, #12
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr
 80134ea:	bf00      	nop
 80134ec:	20054870 	.word	0x20054870

080134f0 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
  dma_rec_buf_cplt = true;
 80134f8:	4b06      	ldr	r3, [pc, #24]	@ (8013514 <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 80134fa:	2201      	movs	r2, #1
 80134fc:	701a      	strb	r2, [r3, #0]
  dma_rec_buf_cplt_count++;
 80134fe:	4b06      	ldr	r3, [pc, #24]	@ (8013518 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	3301      	adds	r3, #1
 8013504:	4a04      	ldr	r2, [pc, #16]	@ (8013518 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>)
 8013506:	6013      	str	r3, [r2, #0]
}
 8013508:	bf00      	nop
 801350a:	370c      	adds	r7, #12
 801350c:	46bd      	mov	sp, r7
 801350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013512:	4770      	bx	lr
 8013514:	20054871 	.word	0x20054871
 8013518:	20054874 	.word	0x20054874

0801351c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	4a04      	ldr	r2, [pc, #16]	@ (801353c <HAL_TIM_PeriodElapsedCallback+0x20>)
 801352a:	4293      	cmp	r3, r2
 801352c:	d101      	bne.n	8013532 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801352e:	f7ed f84f 	bl	80005d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013532:	bf00      	nop
 8013534:	3708      	adds	r7, #8
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	40012c00 	.word	0x40012c00

08013540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013540:	b480      	push	{r7}
 8013542:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013544:	b672      	cpsid	i
}
 8013546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8013548:	bf00      	nop
 801354a:	e7fd      	b.n	8013548 <Error_Handler+0x8>

0801354c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 801354c:	b480      	push	{r7}
 801354e:	b083      	sub	sp, #12
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8013556:	bf00      	nop
 8013558:	370c      	adds	r7, #12
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr
	...

08013564 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8013568:	4b10      	ldr	r3, [pc, #64]	@ (80135ac <MX_RTC_Init+0x48>)
 801356a:	4a11      	ldr	r2, [pc, #68]	@ (80135b0 <MX_RTC_Init+0x4c>)
 801356c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801356e:	4b0f      	ldr	r3, [pc, #60]	@ (80135ac <MX_RTC_Init+0x48>)
 8013570:	2200      	movs	r2, #0
 8013572:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8013574:	4b0d      	ldr	r3, [pc, #52]	@ (80135ac <MX_RTC_Init+0x48>)
 8013576:	227f      	movs	r2, #127	@ 0x7f
 8013578:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 801357a:	4b0c      	ldr	r3, [pc, #48]	@ (80135ac <MX_RTC_Init+0x48>)
 801357c:	22ff      	movs	r2, #255	@ 0xff
 801357e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8013580:	4b0a      	ldr	r3, [pc, #40]	@ (80135ac <MX_RTC_Init+0x48>)
 8013582:	2200      	movs	r2, #0
 8013584:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8013586:	4b09      	ldr	r3, [pc, #36]	@ (80135ac <MX_RTC_Init+0x48>)
 8013588:	2200      	movs	r2, #0
 801358a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801358c:	4b07      	ldr	r3, [pc, #28]	@ (80135ac <MX_RTC_Init+0x48>)
 801358e:	2200      	movs	r2, #0
 8013590:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8013592:	4b06      	ldr	r3, [pc, #24]	@ (80135ac <MX_RTC_Init+0x48>)
 8013594:	2200      	movs	r2, #0
 8013596:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8013598:	4804      	ldr	r0, [pc, #16]	@ (80135ac <MX_RTC_Init+0x48>)
 801359a:	f7f3 f879 	bl	8006690 <HAL_RTC_Init>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d001      	beq.n	80135a8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80135a4:	f7ff ffcc 	bl	8013540 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80135a8:	bf00      	nop
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	20054878 	.word	0x20054878
 80135b0:	40002800 	.word	0x40002800

080135b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b0a8      	sub	sp, #160	@ 0xa0
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80135bc:	f107 0308 	add.w	r3, r7, #8
 80135c0:	2298      	movs	r2, #152	@ 0x98
 80135c2:	2100      	movs	r1, #0
 80135c4:	4618      	mov	r0, r3
 80135c6:	f001 f8e1 	bl	801478c <memset>
  if(rtcHandle->Instance==RTC)
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	4a10      	ldr	r2, [pc, #64]	@ (8013610 <HAL_RTC_MspInit+0x5c>)
 80135d0:	4293      	cmp	r3, r2
 80135d2:	d118      	bne.n	8013606 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80135d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80135d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80135da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80135de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80135e2:	f107 0308 	add.w	r3, r7, #8
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7f0 ff74 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 80135ec:	4603      	mov	r3, r0
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d001      	beq.n	80135f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80135f2:	f7ff ffa5 	bl	8013540 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80135f6:	4b07      	ldr	r3, [pc, #28]	@ (8013614 <HAL_RTC_MspInit+0x60>)
 80135f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80135fc:	4a05      	ldr	r2, [pc, #20]	@ (8013614 <HAL_RTC_MspInit+0x60>)
 80135fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013602:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8013606:	bf00      	nop
 8013608:	37a0      	adds	r7, #160	@ 0xa0
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	40002800 	.word	0x40002800
 8013614:	40021000 	.word	0x40021000

08013618 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b084      	sub	sp, #16
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8013620:	f7fb faea 	bl	800ebf8 <osKernelGetTickCount>
 8013624:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8013626:	e006      	b.n	8013636 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013628:	f7fe ffd2 	bl	80125d0 <BSP_SD_GetCardState>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d101      	bne.n	8013636 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013632:	2300      	movs	r3, #0
 8013634:	e009      	b.n	801364a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8013636:	f7fb fadf 	bl	800ebf8 <osKernelGetTickCount>
 801363a:	4602      	mov	r2, r0
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	1ad3      	subs	r3, r2, r3
 8013640:	687a      	ldr	r2, [r7, #4]
 8013642:	429a      	cmp	r2, r3
 8013644:	d8f0      	bhi.n	8013628 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013646:	f04f 33ff 	mov.w	r3, #4294967295
}
 801364a:	4618      	mov	r0, r3
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
	...

08013654 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
 801365a:	4603      	mov	r3, r0
 801365c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801365e:	4b0b      	ldr	r3, [pc, #44]	@ (801368c <SD_CheckStatus+0x38>)
 8013660:	2201      	movs	r2, #1
 8013662:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013664:	f7fe ffb4 	bl	80125d0 <BSP_SD_GetCardState>
 8013668:	4603      	mov	r3, r0
 801366a:	2b00      	cmp	r3, #0
 801366c:	d107      	bne.n	801367e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801366e:	4b07      	ldr	r3, [pc, #28]	@ (801368c <SD_CheckStatus+0x38>)
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	b2db      	uxtb	r3, r3
 8013674:	f023 0301 	bic.w	r3, r3, #1
 8013678:	b2da      	uxtb	r2, r3
 801367a:	4b04      	ldr	r3, [pc, #16]	@ (801368c <SD_CheckStatus+0x38>)
 801367c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801367e:	4b03      	ldr	r3, [pc, #12]	@ (801368c <SD_CheckStatus+0x38>)
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	b2db      	uxtb	r3, r3
}
 8013684:	4618      	mov	r0, r3
 8013686:	3708      	adds	r7, #8
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}
 801368c:	2000000c 	.word	0x2000000c

08013690 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	af00      	add	r7, sp, #0
 8013696:	4603      	mov	r3, r0
 8013698:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801369a:	4b1c      	ldr	r3, [pc, #112]	@ (801370c <SD_initialize+0x7c>)
 801369c:	2201      	movs	r2, #1
 801369e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80136a0:	f7fb fa62 	bl	800eb68 <osKernelGetState>
 80136a4:	4603      	mov	r3, r0
 80136a6:	2b02      	cmp	r3, #2
 80136a8:	d129      	bne.n	80136fe <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80136aa:	f7fe ff37 	bl	801251c <BSP_SD_Init>
 80136ae:	4603      	mov	r3, r0
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d107      	bne.n	80136c4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80136b4:	79fb      	ldrb	r3, [r7, #7]
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7ff ffcc 	bl	8013654 <SD_CheckStatus>
 80136bc:	4603      	mov	r3, r0
 80136be:	461a      	mov	r2, r3
 80136c0:	4b12      	ldr	r3, [pc, #72]	@ (801370c <SD_initialize+0x7c>)
 80136c2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80136c4:	4b11      	ldr	r3, [pc, #68]	@ (801370c <SD_initialize+0x7c>)
 80136c6:	781b      	ldrb	r3, [r3, #0]
 80136c8:	b2db      	uxtb	r3, r3
 80136ca:	2b01      	cmp	r3, #1
 80136cc:	d017      	beq.n	80136fe <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80136ce:	4b10      	ldr	r3, [pc, #64]	@ (8013710 <SD_initialize+0x80>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d107      	bne.n	80136e6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80136d6:	2200      	movs	r2, #0
 80136d8:	2102      	movs	r1, #2
 80136da:	200a      	movs	r0, #10
 80136dc:	f7fb fca4 	bl	800f028 <osMessageQueueNew>
 80136e0:	4603      	mov	r3, r0
 80136e2:	4a0b      	ldr	r2, [pc, #44]	@ (8013710 <SD_initialize+0x80>)
 80136e4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80136e6:	4b0a      	ldr	r3, [pc, #40]	@ (8013710 <SD_initialize+0x80>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d107      	bne.n	80136fe <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80136ee:	4b07      	ldr	r3, [pc, #28]	@ (801370c <SD_initialize+0x7c>)
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	b2db      	uxtb	r3, r3
 80136f4:	f043 0301 	orr.w	r3, r3, #1
 80136f8:	b2da      	uxtb	r2, r3
 80136fa:	4b04      	ldr	r3, [pc, #16]	@ (801370c <SD_initialize+0x7c>)
 80136fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80136fe:	4b03      	ldr	r3, [pc, #12]	@ (801370c <SD_initialize+0x7c>)
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	b2db      	uxtb	r3, r3
}
 8013704:	4618      	mov	r0, r3
 8013706:	3708      	adds	r7, #8
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}
 801370c:	2000000c 	.word	0x2000000c
 8013710:	2005489c 	.word	0x2005489c

08013714 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	4603      	mov	r3, r0
 801371c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801371e:	79fb      	ldrb	r3, [r7, #7]
 8013720:	4618      	mov	r0, r3
 8013722:	f7ff ff97 	bl	8013654 <SD_CheckStatus>
 8013726:	4603      	mov	r3, r0
}
 8013728:	4618      	mov	r0, r3
 801372a:	3708      	adds	r7, #8
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}

08013730 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b088      	sub	sp, #32
 8013734:	af00      	add	r7, sp, #0
 8013736:	60b9      	str	r1, [r7, #8]
 8013738:	607a      	str	r2, [r7, #4]
 801373a:	603b      	str	r3, [r7, #0]
 801373c:	4603      	mov	r3, r0
 801373e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8013740:	2301      	movs	r3, #1
 8013742:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013744:	f247 5030 	movw	r0, #30000	@ 0x7530
 8013748:	f7ff ff66 	bl	8013618 <SD_CheckStatusWithTimeout>
 801374c:	4603      	mov	r3, r0
 801374e:	2b00      	cmp	r3, #0
 8013750:	da01      	bge.n	8013756 <SD_read+0x26>
  {
    return res;
 8013752:	7ffb      	ldrb	r3, [r7, #31]
 8013754:	e02f      	b.n	80137b6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8013756:	683a      	ldr	r2, [r7, #0]
 8013758:	6879      	ldr	r1, [r7, #4]
 801375a:	68b8      	ldr	r0, [r7, #8]
 801375c:	f7fe ff04 	bl	8012568 <BSP_SD_ReadBlocks_DMA>
 8013760:	4603      	mov	r3, r0
 8013762:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8013764:	7fbb      	ldrb	r3, [r7, #30]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d124      	bne.n	80137b4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801376a:	4b15      	ldr	r3, [pc, #84]	@ (80137c0 <SD_read+0x90>)
 801376c:	6818      	ldr	r0, [r3, #0]
 801376e:	f107 0112 	add.w	r1, r7, #18
 8013772:	f247 5330 	movw	r3, #30000	@ 0x7530
 8013776:	2200      	movs	r2, #0
 8013778:	f7fb fd2a 	bl	800f1d0 <osMessageQueueGet>
 801377c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d117      	bne.n	80137b4 <SD_read+0x84>
 8013784:	8a7b      	ldrh	r3, [r7, #18]
 8013786:	2b01      	cmp	r3, #1
 8013788:	d114      	bne.n	80137b4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 801378a:	f7fb fa35 	bl	800ebf8 <osKernelGetTickCount>
 801378e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8013790:	e007      	b.n	80137a2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013792:	f7fe ff1d 	bl	80125d0 <BSP_SD_GetCardState>
 8013796:	4603      	mov	r3, r0
 8013798:	2b00      	cmp	r3, #0
 801379a:	d102      	bne.n	80137a2 <SD_read+0x72>
              {
                res = RES_OK;
 801379c:	2300      	movs	r3, #0
 801379e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80137a0:	e008      	b.n	80137b4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80137a2:	f7fb fa29 	bl	800ebf8 <osKernelGetTickCount>
 80137a6:	4602      	mov	r2, r0
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	1ad3      	subs	r3, r2, r3
 80137ac:	f247 522f 	movw	r2, #29999	@ 0x752f
 80137b0:	4293      	cmp	r3, r2
 80137b2:	d9ee      	bls.n	8013792 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80137b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3720      	adds	r7, #32
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	2005489c 	.word	0x2005489c

080137c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b088      	sub	sp, #32
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	60b9      	str	r1, [r7, #8]
 80137cc:	607a      	str	r2, [r7, #4]
 80137ce:	603b      	str	r3, [r7, #0]
 80137d0:	4603      	mov	r3, r0
 80137d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80137d4:	2301      	movs	r3, #1
 80137d6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80137d8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80137dc:	f7ff ff1c 	bl	8013618 <SD_CheckStatusWithTimeout>
 80137e0:	4603      	mov	r3, r0
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	da01      	bge.n	80137ea <SD_write+0x26>
  {
    return res;
 80137e6:	7ffb      	ldrb	r3, [r7, #31]
 80137e8:	e02d      	b.n	8013846 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80137ea:	683a      	ldr	r2, [r7, #0]
 80137ec:	6879      	ldr	r1, [r7, #4]
 80137ee:	68b8      	ldr	r0, [r7, #8]
 80137f0:	f7fe fed4 	bl	801259c <BSP_SD_WriteBlocks_DMA>
 80137f4:	4603      	mov	r3, r0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d124      	bne.n	8013844 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80137fa:	4b15      	ldr	r3, [pc, #84]	@ (8013850 <SD_write+0x8c>)
 80137fc:	6818      	ldr	r0, [r3, #0]
 80137fe:	f107 0112 	add.w	r1, r7, #18
 8013802:	f247 5330 	movw	r3, #30000	@ 0x7530
 8013806:	2200      	movs	r2, #0
 8013808:	f7fb fce2 	bl	800f1d0 <osMessageQueueGet>
 801380c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801380e:	69bb      	ldr	r3, [r7, #24]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d117      	bne.n	8013844 <SD_write+0x80>
 8013814:	8a7b      	ldrh	r3, [r7, #18]
 8013816:	2b02      	cmp	r3, #2
 8013818:	d114      	bne.n	8013844 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 801381a:	f7fb f9ed 	bl	800ebf8 <osKernelGetTickCount>
 801381e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8013820:	e007      	b.n	8013832 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013822:	f7fe fed5 	bl	80125d0 <BSP_SD_GetCardState>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d102      	bne.n	8013832 <SD_write+0x6e>
          {
            res = RES_OK;
 801382c:	2300      	movs	r3, #0
 801382e:	77fb      	strb	r3, [r7, #31]
            break;
 8013830:	e008      	b.n	8013844 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8013832:	f7fb f9e1 	bl	800ebf8 <osKernelGetTickCount>
 8013836:	4602      	mov	r2, r0
 8013838:	697b      	ldr	r3, [r7, #20]
 801383a:	1ad3      	subs	r3, r2, r3
 801383c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8013840:	4293      	cmp	r3, r2
 8013842:	d9ee      	bls.n	8013822 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8013844:	7ffb      	ldrb	r3, [r7, #31]
}
 8013846:	4618      	mov	r0, r3
 8013848:	3720      	adds	r7, #32
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	2005489c 	.word	0x2005489c

08013854 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b08c      	sub	sp, #48	@ 0x30
 8013858:	af00      	add	r7, sp, #0
 801385a:	4603      	mov	r3, r0
 801385c:	603a      	str	r2, [r7, #0]
 801385e:	71fb      	strb	r3, [r7, #7]
 8013860:	460b      	mov	r3, r1
 8013862:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013864:	2301      	movs	r3, #1
 8013866:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801386a:	4b25      	ldr	r3, [pc, #148]	@ (8013900 <SD_ioctl+0xac>)
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	b2db      	uxtb	r3, r3
 8013870:	f003 0301 	and.w	r3, r3, #1
 8013874:	2b00      	cmp	r3, #0
 8013876:	d001      	beq.n	801387c <SD_ioctl+0x28>
 8013878:	2303      	movs	r3, #3
 801387a:	e03c      	b.n	80138f6 <SD_ioctl+0xa2>

  switch (cmd)
 801387c:	79bb      	ldrb	r3, [r7, #6]
 801387e:	2b03      	cmp	r3, #3
 8013880:	d834      	bhi.n	80138ec <SD_ioctl+0x98>
 8013882:	a201      	add	r2, pc, #4	@ (adr r2, 8013888 <SD_ioctl+0x34>)
 8013884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013888:	08013899 	.word	0x08013899
 801388c:	080138a1 	.word	0x080138a1
 8013890:	080138b9 	.word	0x080138b9
 8013894:	080138d3 	.word	0x080138d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013898:	2300      	movs	r3, #0
 801389a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801389e:	e028      	b.n	80138f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80138a0:	f107 0308 	add.w	r3, r7, #8
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7fe fea3 	bl	80125f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80138aa:	6a3a      	ldr	r2, [r7, #32]
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80138b0:	2300      	movs	r3, #0
 80138b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80138b6:	e01c      	b.n	80138f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80138b8:	f107 0308 	add.w	r3, r7, #8
 80138bc:	4618      	mov	r0, r3
 80138be:	f7fe fe97 	bl	80125f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80138c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c4:	b29a      	uxth	r2, r3
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80138ca:	2300      	movs	r3, #0
 80138cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80138d0:	e00f      	b.n	80138f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80138d2:	f107 0308 	add.w	r3, r7, #8
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7fe fe8a 	bl	80125f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80138dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138de:	0a5a      	lsrs	r2, r3, #9
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80138e4:	2300      	movs	r3, #0
 80138e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80138ea:	e002      	b.n	80138f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80138ec:	2304      	movs	r3, #4
 80138ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80138f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3730      	adds	r7, #48	@ 0x30
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
 80138fe:	bf00      	nop
 8013900:	2000000c 	.word	0x2000000c

08013904 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801390a:	2302      	movs	r3, #2
 801390c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 801390e:	4b05      	ldr	r3, [pc, #20]	@ (8013924 <BSP_SD_WriteCpltCallback+0x20>)
 8013910:	6818      	ldr	r0, [r3, #0]
 8013912:	1db9      	adds	r1, r7, #6
 8013914:	2300      	movs	r3, #0
 8013916:	2200      	movs	r2, #0
 8013918:	f7fb fbfa 	bl	800f110 <osMessageQueuePut>
#endif
}
 801391c:	bf00      	nop
 801391e:	3708      	adds	r7, #8
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}
 8013924:	2005489c 	.word	0x2005489c

08013928 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 801392e:	2301      	movs	r3, #1
 8013930:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8013932:	4b05      	ldr	r3, [pc, #20]	@ (8013948 <BSP_SD_ReadCpltCallback+0x20>)
 8013934:	6818      	ldr	r0, [r3, #0]
 8013936:	1db9      	adds	r1, r7, #6
 8013938:	2300      	movs	r3, #0
 801393a:	2200      	movs	r2, #0
 801393c:	f7fb fbe8 	bl	800f110 <osMessageQueuePut>
#endif
}
 8013940:	bf00      	nop
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	2005489c 	.word	0x2005489c

0801394c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 801394c:	b480      	push	{r7}
 801394e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8013950:	4b0d      	ldr	r3, [pc, #52]	@ (8013988 <MX_SDMMC1_SD_Init+0x3c>)
 8013952:	4a0e      	ldr	r2, [pc, #56]	@ (801398c <MX_SDMMC1_SD_Init+0x40>)
 8013954:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8013956:	4b0c      	ldr	r3, [pc, #48]	@ (8013988 <MX_SDMMC1_SD_Init+0x3c>)
 8013958:	2200      	movs	r2, #0
 801395a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801395c:	4b0a      	ldr	r3, [pc, #40]	@ (8013988 <MX_SDMMC1_SD_Init+0x3c>)
 801395e:	2200      	movs	r2, #0
 8013960:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8013962:	4b09      	ldr	r3, [pc, #36]	@ (8013988 <MX_SDMMC1_SD_Init+0x3c>)
 8013964:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8013968:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801396a:	4b07      	ldr	r3, [pc, #28]	@ (8013988 <MX_SDMMC1_SD_Init+0x3c>)
 801396c:	2200      	movs	r2, #0
 801396e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 8013970:	4b05      	ldr	r3, [pc, #20]	@ (8013988 <MX_SDMMC1_SD_Init+0x3c>)
 8013972:	220a      	movs	r2, #10
 8013974:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8013976:	4b04      	ldr	r3, [pc, #16]	@ (8013988 <MX_SDMMC1_SD_Init+0x3c>)
 8013978:	2200      	movs	r2, #0
 801397a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 801397c:	bf00      	nop
 801397e:	46bd      	mov	sp, r7
 8013980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013984:	4770      	bx	lr
 8013986:	bf00      	nop
 8013988:	200548a0 	.word	0x200548a0
 801398c:	50062400 	.word	0x50062400

08013990 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b0b0      	sub	sp, #192	@ 0xc0
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013998:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801399c:	2200      	movs	r2, #0
 801399e:	601a      	str	r2, [r3, #0]
 80139a0:	605a      	str	r2, [r3, #4]
 80139a2:	609a      	str	r2, [r3, #8]
 80139a4:	60da      	str	r2, [r3, #12]
 80139a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80139a8:	f107 0314 	add.w	r3, r7, #20
 80139ac:	2298      	movs	r2, #152	@ 0x98
 80139ae:	2100      	movs	r1, #0
 80139b0:	4618      	mov	r0, r3
 80139b2:	f000 feeb 	bl	801478c <memset>
  if(sdHandle->Instance==SDMMC1)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	4a42      	ldr	r2, [pc, #264]	@ (8013ac4 <HAL_SD_MspInit+0x134>)
 80139bc:	4293      	cmp	r3, r2
 80139be:	d17d      	bne.n	8013abc <HAL_SD_MspInit+0x12c>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80139c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80139c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80139c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80139ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80139ce:	f107 0314 	add.w	r3, r7, #20
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7f0 fd7e 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 80139d8:	4603      	mov	r3, r0
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d001      	beq.n	80139e2 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80139de:	f7ff fdaf 	bl	8013540 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80139e2:	4b39      	ldr	r3, [pc, #228]	@ (8013ac8 <HAL_SD_MspInit+0x138>)
 80139e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139e6:	4a38      	ldr	r2, [pc, #224]	@ (8013ac8 <HAL_SD_MspInit+0x138>)
 80139e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80139ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80139ee:	4b36      	ldr	r3, [pc, #216]	@ (8013ac8 <HAL_SD_MspInit+0x138>)
 80139f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80139f6:	613b      	str	r3, [r7, #16]
 80139f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80139fa:	4b33      	ldr	r3, [pc, #204]	@ (8013ac8 <HAL_SD_MspInit+0x138>)
 80139fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139fe:	4a32      	ldr	r2, [pc, #200]	@ (8013ac8 <HAL_SD_MspInit+0x138>)
 8013a00:	f043 0304 	orr.w	r3, r3, #4
 8013a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8013a06:	4b30      	ldr	r3, [pc, #192]	@ (8013ac8 <HAL_SD_MspInit+0x138>)
 8013a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a0a:	f003 0304 	and.w	r3, r3, #4
 8013a0e:	60fb      	str	r3, [r7, #12]
 8013a10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013a12:	4b2d      	ldr	r3, [pc, #180]	@ (8013ac8 <HAL_SD_MspInit+0x138>)
 8013a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a16:	4a2c      	ldr	r2, [pc, #176]	@ (8013ac8 <HAL_SD_MspInit+0x138>)
 8013a18:	f043 0308 	orr.w	r3, r3, #8
 8013a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8013a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8013ac8 <HAL_SD_MspInit+0x138>)
 8013a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a22:	f003 0308 	and.w	r3, r3, #8
 8013a26:	60bb      	str	r3, [r7, #8]
 8013a28:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8013a2a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8013a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a32:	2302      	movs	r3, #2
 8013a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013a38:	2301      	movs	r3, #1
 8013a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a3e:	2303      	movs	r3, #3
 8013a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8013a44:	230c      	movs	r3, #12
 8013a46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013a4a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8013a4e:	4619      	mov	r1, r3
 8013a50:	481e      	ldr	r0, [pc, #120]	@ (8013acc <HAL_SD_MspInit+0x13c>)
 8013a52:	f7ee f931 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8013a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a5e:	2302      	movs	r3, #2
 8013a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a64:	2300      	movs	r3, #0
 8013a66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a6a:	2303      	movs	r3, #3
 8013a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8013a70:	230c      	movs	r3, #12
 8013a72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013a76:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	4813      	ldr	r0, [pc, #76]	@ (8013acc <HAL_SD_MspInit+0x13c>)
 8013a7e:	f7ee f91b 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8013a82:	2304      	movs	r3, #4
 8013a84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a88:	2302      	movs	r3, #2
 8013a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013a8e:	2301      	movs	r3, #1
 8013a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a94:	2303      	movs	r3, #3
 8013a96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8013a9a:	230c      	movs	r3, #12
 8013a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013aa0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	480a      	ldr	r0, [pc, #40]	@ (8013ad0 <HAL_SD_MspInit+0x140>)
 8013aa8:	f7ee f906 	bl	8001cb8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8013aac:	2200      	movs	r2, #0
 8013aae:	2105      	movs	r1, #5
 8013ab0:	2031      	movs	r0, #49	@ 0x31
 8013ab2:	f7ec fe9f 	bl	80007f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8013ab6:	2031      	movs	r0, #49	@ 0x31
 8013ab8:	f7ec fec8 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8013abc:	bf00      	nop
 8013abe:	37c0      	adds	r7, #192	@ 0xc0
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	50062400 	.word	0x50062400
 8013ac8:	40021000 	.word	0x40021000
 8013acc:	48000800 	.word	0x48000800
 8013ad0:	48000c00 	.word	0x48000c00

08013ad4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8013ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013ada:	4a1c      	ldr	r2, [pc, #112]	@ (8013b4c <MX_SPI1_Init+0x78>)
 8013adc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8013ade:	4b1a      	ldr	r3, [pc, #104]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8013ae4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8013ae6:	4b18      	ldr	r3, [pc, #96]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013ae8:	2200      	movs	r2, #0
 8013aea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8013aec:	4b16      	ldr	r3, [pc, #88]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013aee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8013af2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8013af4:	4b14      	ldr	r3, [pc, #80]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013af6:	2202      	movs	r2, #2
 8013af8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8013afa:	4b13      	ldr	r3, [pc, #76]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013afc:	2201      	movs	r2, #1
 8013afe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8013b00:	4b11      	ldr	r3, [pc, #68]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8013b08:	4b0f      	ldr	r3, [pc, #60]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013b0a:	2228      	movs	r2, #40	@ 0x28
 8013b0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013b10:	2200      	movs	r2, #0
 8013b12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8013b14:	4b0c      	ldr	r3, [pc, #48]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013b16:	2200      	movs	r2, #0
 8013b18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8013b20:	4b09      	ldr	r3, [pc, #36]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013b22:	2207      	movs	r2, #7
 8013b24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8013b26:	4b08      	ldr	r3, [pc, #32]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8013b2c:	4b06      	ldr	r3, [pc, #24]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013b2e:	2200      	movs	r2, #0
 8013b30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8013b32:	4805      	ldr	r0, [pc, #20]	@ (8013b48 <MX_SPI1_Init+0x74>)
 8013b34:	f7f4 fd7e 	bl	8008634 <HAL_SPI_Init>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d001      	beq.n	8013b42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8013b3e:	f7ff fcff 	bl	8013540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8013b42:	bf00      	nop
 8013b44:	bd80      	pop	{r7, pc}
 8013b46:	bf00      	nop
 8013b48:	20054920 	.word	0x20054920
 8013b4c:	40013000 	.word	0x40013000

08013b50 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8013b54:	4b1b      	ldr	r3, [pc, #108]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b56:	4a1c      	ldr	r2, [pc, #112]	@ (8013bc8 <MX_SPI2_Init+0x78>)
 8013b58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8013b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8013b60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8013b62:	4b18      	ldr	r3, [pc, #96]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b64:	2200      	movs	r2, #0
 8013b66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8013b68:	4b16      	ldr	r3, [pc, #88]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b6a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8013b6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013b70:	4b14      	ldr	r3, [pc, #80]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b72:	2200      	movs	r2, #0
 8013b74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013b76:	4b13      	ldr	r3, [pc, #76]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b78:	2200      	movs	r2, #0
 8013b7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8013b7c:	4b11      	ldr	r3, [pc, #68]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8013b84:	4b0f      	ldr	r3, [pc, #60]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b86:	2218      	movs	r2, #24
 8013b88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8013b90:	4b0c      	ldr	r3, [pc, #48]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b92:	2200      	movs	r2, #0
 8013b94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013b96:	4b0b      	ldr	r3, [pc, #44]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b98:	2200      	movs	r2, #0
 8013b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8013b9c:	4b09      	ldr	r3, [pc, #36]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013b9e:	2207      	movs	r2, #7
 8013ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8013ba2:	4b08      	ldr	r3, [pc, #32]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8013ba8:	4b06      	ldr	r3, [pc, #24]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013baa:	2208      	movs	r2, #8
 8013bac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8013bae:	4805      	ldr	r0, [pc, #20]	@ (8013bc4 <MX_SPI2_Init+0x74>)
 8013bb0:	f7f4 fd40 	bl	8008634 <HAL_SPI_Init>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d001      	beq.n	8013bbe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8013bba:	f7ff fcc1 	bl	8013540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8013bbe:	bf00      	nop
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	20054984 	.word	0x20054984
 8013bc8:	40003800 	.word	0x40003800

08013bcc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8013bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8013c44 <MX_SPI3_Init+0x78>)
 8013bd4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8013bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013bd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8013bdc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8013bde:	4b18      	ldr	r3, [pc, #96]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013be0:	2200      	movs	r2, #0
 8013be2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8013be4:	4b16      	ldr	r3, [pc, #88]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013be6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8013bea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013bec:	4b14      	ldr	r3, [pc, #80]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013bee:	2200      	movs	r2, #0
 8013bf0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013bf2:	4b13      	ldr	r3, [pc, #76]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8013bf8:	4b11      	ldr	r3, [pc, #68]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013bfa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8013bfe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013c00:	4b0f      	ldr	r3, [pc, #60]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013c02:	2200      	movs	r2, #0
 8013c04:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013c06:	4b0e      	ldr	r3, [pc, #56]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013c08:	2200      	movs	r2, #0
 8013c0a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8013c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013c0e:	2200      	movs	r2, #0
 8013c10:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013c12:	4b0b      	ldr	r3, [pc, #44]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013c14:	2200      	movs	r2, #0
 8013c16:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8013c18:	4b09      	ldr	r3, [pc, #36]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013c1a:	2207      	movs	r2, #7
 8013c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8013c1e:	4b08      	ldr	r3, [pc, #32]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013c20:	2200      	movs	r2, #0
 8013c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8013c24:	4b06      	ldr	r3, [pc, #24]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013c26:	2208      	movs	r2, #8
 8013c28:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8013c2a:	4805      	ldr	r0, [pc, #20]	@ (8013c40 <MX_SPI3_Init+0x74>)
 8013c2c:	f7f4 fd02 	bl	8008634 <HAL_SPI_Init>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d001      	beq.n	8013c3a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8013c36:	f7ff fc83 	bl	8013540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8013c3a:	bf00      	nop
 8013c3c:	bd80      	pop	{r7, pc}
 8013c3e:	bf00      	nop
 8013c40:	200549e8 	.word	0x200549e8
 8013c44:	40003c00 	.word	0x40003c00

08013c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b08e      	sub	sp, #56	@ 0x38
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013c54:	2200      	movs	r2, #0
 8013c56:	601a      	str	r2, [r3, #0]
 8013c58:	605a      	str	r2, [r3, #4]
 8013c5a:	609a      	str	r2, [r3, #8]
 8013c5c:	60da      	str	r2, [r3, #12]
 8013c5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4a47      	ldr	r2, [pc, #284]	@ (8013d84 <HAL_SPI_MspInit+0x13c>)
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d129      	bne.n	8013cbe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8013c6a:	4b47      	ldr	r3, [pc, #284]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013c6e:	4a46      	ldr	r2, [pc, #280]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013c70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8013c74:	6613      	str	r3, [r2, #96]	@ 0x60
 8013c76:	4b44      	ldr	r3, [pc, #272]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013c7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8013c7e:	623b      	str	r3, [r7, #32]
 8013c80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c82:	4b41      	ldr	r3, [pc, #260]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c86:	4a40      	ldr	r2, [pc, #256]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013c88:	f043 0301 	orr.w	r3, r3, #1
 8013c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8013c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c92:	f003 0301 	and.w	r3, r3, #1
 8013c96:	61fb      	str	r3, [r7, #28]
 8013c98:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8013c9a:	23e0      	movs	r3, #224	@ 0xe0
 8013c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c9e:	2302      	movs	r3, #2
 8013ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013caa:	2305      	movs	r3, #5
 8013cac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013cb8:	f7ed fffe 	bl	8001cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8013cbc:	e05e      	b.n	8013d7c <HAL_SPI_MspInit+0x134>
  else if(spiHandle->Instance==SPI2)
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	4a32      	ldr	r2, [pc, #200]	@ (8013d8c <HAL_SPI_MspInit+0x144>)
 8013cc4:	4293      	cmp	r3, r2
 8013cc6:	d129      	bne.n	8013d1c <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8013cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013cce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8013cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8013cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013cd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013cdc:	61bb      	str	r3, [r7, #24]
 8013cde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013ce0:	4b29      	ldr	r3, [pc, #164]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ce4:	4a28      	ldr	r2, [pc, #160]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013ce6:	f043 0302 	orr.w	r3, r3, #2
 8013cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8013cec:	4b26      	ldr	r3, [pc, #152]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013cf0:	f003 0302 	and.w	r3, r3, #2
 8013cf4:	617b      	str	r3, [r7, #20]
 8013cf6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8013cf8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8013cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013cfe:	2302      	movs	r3, #2
 8013d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d02:	2300      	movs	r3, #0
 8013d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d06:	2303      	movs	r3, #3
 8013d08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8013d0a:	2305      	movs	r3, #5
 8013d0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013d12:	4619      	mov	r1, r3
 8013d14:	481e      	ldr	r0, [pc, #120]	@ (8013d90 <HAL_SPI_MspInit+0x148>)
 8013d16:	f7ed ffcf 	bl	8001cb8 <HAL_GPIO_Init>
}
 8013d1a:	e02f      	b.n	8013d7c <HAL_SPI_MspInit+0x134>
  else if(spiHandle->Instance==SPI3)
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	4a1c      	ldr	r2, [pc, #112]	@ (8013d94 <HAL_SPI_MspInit+0x14c>)
 8013d22:	4293      	cmp	r3, r2
 8013d24:	d12a      	bne.n	8013d7c <HAL_SPI_MspInit+0x134>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8013d26:	4b18      	ldr	r3, [pc, #96]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013d2a:	4a17      	ldr	r2, [pc, #92]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8013d32:	4b15      	ldr	r3, [pc, #84]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013d36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013d3a:	613b      	str	r3, [r7, #16]
 8013d3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013d3e:	4b12      	ldr	r3, [pc, #72]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d42:	4a11      	ldr	r2, [pc, #68]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8013d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8013d88 <HAL_SPI_MspInit+0x140>)
 8013d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d52:	60fb      	str	r3, [r7, #12]
 8013d54:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8013d56:	f7ef fa99 	bl	800328c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8013d5a:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8013d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d60:	2302      	movs	r3, #2
 8013d62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d64:	2300      	movs	r3, #0
 8013d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d68:	2303      	movs	r3, #3
 8013d6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8013d6c:	2306      	movs	r3, #6
 8013d6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013d74:	4619      	mov	r1, r3
 8013d76:	4808      	ldr	r0, [pc, #32]	@ (8013d98 <HAL_SPI_MspInit+0x150>)
 8013d78:	f7ed ff9e 	bl	8001cb8 <HAL_GPIO_Init>
}
 8013d7c:	bf00      	nop
 8013d7e:	3738      	adds	r7, #56	@ 0x38
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	40013000 	.word	0x40013000
 8013d88:	40021000 	.word	0x40021000
 8013d8c:	40003800 	.word	0x40003800
 8013d90:	48000400 	.word	0x48000400
 8013d94:	40003c00 	.word	0x40003c00
 8013d98:	48001800 	.word	0x48001800

08013d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013da2:	4b11      	ldr	r3, [pc, #68]	@ (8013de8 <HAL_MspInit+0x4c>)
 8013da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013da6:	4a10      	ldr	r2, [pc, #64]	@ (8013de8 <HAL_MspInit+0x4c>)
 8013da8:	f043 0301 	orr.w	r3, r3, #1
 8013dac:	6613      	str	r3, [r2, #96]	@ 0x60
 8013dae:	4b0e      	ldr	r3, [pc, #56]	@ (8013de8 <HAL_MspInit+0x4c>)
 8013db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013db2:	f003 0301 	and.w	r3, r3, #1
 8013db6:	607b      	str	r3, [r7, #4]
 8013db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013dba:	4b0b      	ldr	r3, [pc, #44]	@ (8013de8 <HAL_MspInit+0x4c>)
 8013dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8013de8 <HAL_MspInit+0x4c>)
 8013dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8013dc6:	4b08      	ldr	r3, [pc, #32]	@ (8013de8 <HAL_MspInit+0x4c>)
 8013dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013dce:	603b      	str	r3, [r7, #0]
 8013dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	210f      	movs	r1, #15
 8013dd6:	f06f 0001 	mvn.w	r0, #1
 8013dda:	f7ec fd0b 	bl	80007f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013dde:	bf00      	nop
 8013de0:	3708      	adds	r7, #8
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
 8013de6:	bf00      	nop
 8013de8:	40021000 	.word	0x40021000

08013dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b08c      	sub	sp, #48	@ 0x30
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8013df4:	2300      	movs	r3, #0
 8013df6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8013dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8013eb4 <HAL_InitTick+0xc8>)
 8013dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8013eb4 <HAL_InitTick+0xc8>)
 8013e00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8013e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8013e06:	4b2b      	ldr	r3, [pc, #172]	@ (8013eb4 <HAL_InitTick+0xc8>)
 8013e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013e0e:	60bb      	str	r3, [r7, #8]
 8013e10:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013e12:	f107 020c 	add.w	r2, r7, #12
 8013e16:	f107 0310 	add.w	r3, r7, #16
 8013e1a:	4611      	mov	r1, r2
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7f0 fa57 	bl	80042d0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8013e22:	f7f0 fa3f 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 8013e26:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8013e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e2a:	4a23      	ldr	r2, [pc, #140]	@ (8013eb8 <HAL_InitTick+0xcc>)
 8013e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8013e30:	0c9b      	lsrs	r3, r3, #18
 8013e32:	3b01      	subs	r3, #1
 8013e34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8013e36:	4b21      	ldr	r3, [pc, #132]	@ (8013ebc <HAL_InitTick+0xd0>)
 8013e38:	4a21      	ldr	r2, [pc, #132]	@ (8013ec0 <HAL_InitTick+0xd4>)
 8013e3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8013e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8013ebc <HAL_InitTick+0xd0>)
 8013e3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8013e42:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8013e44:	4a1d      	ldr	r2, [pc, #116]	@ (8013ebc <HAL_InitTick+0xd0>)
 8013e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e48:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8013e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8013ebc <HAL_InitTick+0xd0>)
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013e50:	4b1a      	ldr	r3, [pc, #104]	@ (8013ebc <HAL_InitTick+0xd0>)
 8013e52:	2200      	movs	r2, #0
 8013e54:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013e56:	4b19      	ldr	r3, [pc, #100]	@ (8013ebc <HAL_InitTick+0xd0>)
 8013e58:	2200      	movs	r2, #0
 8013e5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8013e5c:	4817      	ldr	r0, [pc, #92]	@ (8013ebc <HAL_InitTick+0xd0>)
 8013e5e:	f7f5 f965 	bl	800912c <HAL_TIM_Base_Init>
 8013e62:	4603      	mov	r3, r0
 8013e64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8013e68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d11b      	bne.n	8013ea8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8013e70:	4812      	ldr	r0, [pc, #72]	@ (8013ebc <HAL_InitTick+0xd0>)
 8013e72:	f7f5 fa6f 	bl	8009354 <HAL_TIM_Base_Start_IT>
 8013e76:	4603      	mov	r3, r0
 8013e78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8013e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d111      	bne.n	8013ea8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8013e84:	2019      	movs	r0, #25
 8013e86:	f7ec fce1 	bl	800084c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2b0f      	cmp	r3, #15
 8013e8e:	d808      	bhi.n	8013ea2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8013e90:	2200      	movs	r2, #0
 8013e92:	6879      	ldr	r1, [r7, #4]
 8013e94:	2019      	movs	r0, #25
 8013e96:	f7ec fcad 	bl	80007f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8013e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8013ec4 <HAL_InitTick+0xd8>)
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6013      	str	r3, [r2, #0]
 8013ea0:	e002      	b.n	8013ea8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8013ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3730      	adds	r7, #48	@ 0x30
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	40021000 	.word	0x40021000
 8013eb8:	431bde83 	.word	0x431bde83
 8013ebc:	20054a4c 	.word	0x20054a4c
 8013ec0:	40012c00 	.word	0x40012c00
 8013ec4:	20000000 	.word	0x20000000

08013ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013ec8:	b480      	push	{r7}
 8013eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8013ecc:	bf00      	nop
 8013ece:	e7fd      	b.n	8013ecc <NMI_Handler+0x4>

08013ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013ed4:	bf00      	nop
 8013ed6:	e7fd      	b.n	8013ed4 <HardFault_Handler+0x4>

08013ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013ed8:	b480      	push	{r7}
 8013eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013edc:	bf00      	nop
 8013ede:	e7fd      	b.n	8013edc <MemManage_Handler+0x4>

08013ee0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013ee0:	b480      	push	{r7}
 8013ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013ee4:	bf00      	nop
 8013ee6:	e7fd      	b.n	8013ee4 <BusFault_Handler+0x4>

08013ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013eec:	bf00      	nop
 8013eee:	e7fd      	b.n	8013eec <UsageFault_Handler+0x4>

08013ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8013ef0:	b480      	push	{r7}
 8013ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013ef4:	bf00      	nop
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efc:	4770      	bx	lr
	...

08013f00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8013f04:	4802      	ldr	r0, [pc, #8]	@ (8013f10 <DMA1_Channel1_IRQHandler+0x10>)
 8013f06:	f7ed fd87 	bl	8001a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8013f0a:	bf00      	nop
 8013f0c:	bd80      	pop	{r7, pc}
 8013f0e:	bf00      	nop
 8013f10:	2004a33c 	.word	0x2004a33c

08013f14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8013f18:	4802      	ldr	r0, [pc, #8]	@ (8013f24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8013f1a:	f7f5 facf 	bl	80094bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8013f1e:	bf00      	nop
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	20054a4c 	.word	0x20054a4c

08013f28 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8013f2c:	4802      	ldr	r0, [pc, #8]	@ (8013f38 <SDMMC1_IRQHandler+0x10>)
 8013f2e:	f7f3 f8f1 	bl	8007114 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8013f32:	bf00      	nop
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	200548a0 	.word	0x200548a0

08013f3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b086      	sub	sp, #24
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	60f8      	str	r0, [r7, #12]
 8013f44:	60b9      	str	r1, [r7, #8]
 8013f46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013f48:	2300      	movs	r3, #0
 8013f4a:	617b      	str	r3, [r7, #20]
 8013f4c:	e00a      	b.n	8013f64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8013f4e:	f3af 8000 	nop.w
 8013f52:	4601      	mov	r1, r0
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	1c5a      	adds	r2, r3, #1
 8013f58:	60ba      	str	r2, [r7, #8]
 8013f5a:	b2ca      	uxtb	r2, r1
 8013f5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	3301      	adds	r3, #1
 8013f62:	617b      	str	r3, [r7, #20]
 8013f64:	697a      	ldr	r2, [r7, #20]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	dbf0      	blt.n	8013f4e <_read+0x12>
  }

  return len;
 8013f6c:	687b      	ldr	r3, [r7, #4]
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3718      	adds	r7, #24
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}

08013f76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8013f76:	b480      	push	{r7}
 8013f78:	b083      	sub	sp, #12
 8013f7a:	af00      	add	r7, sp, #0
 8013f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8013f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	370c      	adds	r7, #12
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013f8e:	b480      	push	{r7}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
 8013f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8013f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8013fa0:	2300      	movs	r3, #0
}
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	370c      	adds	r7, #12
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fac:	4770      	bx	lr

08013fae <_isatty>:

int _isatty(int file)
{
 8013fae:	b480      	push	{r7}
 8013fb0:	b083      	sub	sp, #12
 8013fb2:	af00      	add	r7, sp, #0
 8013fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8013fb6:	2301      	movs	r3, #1
}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	370c      	adds	r7, #12
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc2:	4770      	bx	lr

08013fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013fc4:	b480      	push	{r7}
 8013fc6:	b085      	sub	sp, #20
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8013fd0:	2300      	movs	r3, #0
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3714      	adds	r7, #20
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr
	...

08013fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013fe8:	4a14      	ldr	r2, [pc, #80]	@ (801403c <_sbrk+0x5c>)
 8013fea:	4b15      	ldr	r3, [pc, #84]	@ (8014040 <_sbrk+0x60>)
 8013fec:	1ad3      	subs	r3, r2, r3
 8013fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013ff4:	4b13      	ldr	r3, [pc, #76]	@ (8014044 <_sbrk+0x64>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d102      	bne.n	8014002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013ffc:	4b11      	ldr	r3, [pc, #68]	@ (8014044 <_sbrk+0x64>)
 8013ffe:	4a12      	ldr	r2, [pc, #72]	@ (8014048 <_sbrk+0x68>)
 8014000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8014002:	4b10      	ldr	r3, [pc, #64]	@ (8014044 <_sbrk+0x64>)
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4413      	add	r3, r2
 801400a:	693a      	ldr	r2, [r7, #16]
 801400c:	429a      	cmp	r2, r3
 801400e:	d207      	bcs.n	8014020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8014010:	f000 fc60 	bl	80148d4 <__errno>
 8014014:	4603      	mov	r3, r0
 8014016:	220c      	movs	r2, #12
 8014018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801401a:	f04f 33ff 	mov.w	r3, #4294967295
 801401e:	e009      	b.n	8014034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8014020:	4b08      	ldr	r3, [pc, #32]	@ (8014044 <_sbrk+0x64>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8014026:	4b07      	ldr	r3, [pc, #28]	@ (8014044 <_sbrk+0x64>)
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	4413      	add	r3, r2
 801402e:	4a05      	ldr	r2, [pc, #20]	@ (8014044 <_sbrk+0x64>)
 8014030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8014032:	68fb      	ldr	r3, [r7, #12]
}
 8014034:	4618      	mov	r0, r3
 8014036:	3718      	adds	r7, #24
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	200a0000 	.word	0x200a0000
 8014040:	00000800 	.word	0x00000800
 8014044:	20054a98 	.word	0x20054a98
 8014048:	20054d10 	.word	0x20054d10

0801404c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 801404c:	b480      	push	{r7}
 801404e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8014050:	4b06      	ldr	r3, [pc, #24]	@ (801406c <SystemInit+0x20>)
 8014052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014056:	4a05      	ldr	r2, [pc, #20]	@ (801406c <SystemInit+0x20>)
 8014058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801405c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8014060:	bf00      	nop
 8014062:	46bd      	mov	sp, r7
 8014064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014068:	4770      	bx	lr
 801406a:	bf00      	nop
 801406c:	e000ed00 	.word	0xe000ed00

08014070 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8014074:	4b22      	ldr	r3, [pc, #136]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 8014076:	4a23      	ldr	r2, [pc, #140]	@ (8014104 <MX_USART1_UART_Init+0x94>)
 8014078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801407a:	4b21      	ldr	r3, [pc, #132]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 801407c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8014080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8014082:	4b1f      	ldr	r3, [pc, #124]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 8014084:	2200      	movs	r2, #0
 8014086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8014088:	4b1d      	ldr	r3, [pc, #116]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 801408a:	2200      	movs	r2, #0
 801408c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801408e:	4b1c      	ldr	r3, [pc, #112]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 8014090:	2200      	movs	r2, #0
 8014092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8014094:	4b1a      	ldr	r3, [pc, #104]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 8014096:	220c      	movs	r2, #12
 8014098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801409a:	4b19      	ldr	r3, [pc, #100]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 801409c:	2200      	movs	r2, #0
 801409e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80140a0:	4b17      	ldr	r3, [pc, #92]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 80140a2:	2200      	movs	r2, #0
 80140a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80140a6:	4b16      	ldr	r3, [pc, #88]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 80140a8:	2200      	movs	r2, #0
 80140aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80140ac:	4b14      	ldr	r3, [pc, #80]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 80140ae:	2200      	movs	r2, #0
 80140b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80140b2:	4b13      	ldr	r3, [pc, #76]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 80140b4:	2200      	movs	r2, #0
 80140b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80140b8:	4811      	ldr	r0, [pc, #68]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 80140ba:	f7f5 fbf3 	bl	80098a4 <HAL_UART_Init>
 80140be:	4603      	mov	r3, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d001      	beq.n	80140c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80140c4:	f7ff fa3c 	bl	8013540 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80140c8:	2100      	movs	r1, #0
 80140ca:	480d      	ldr	r0, [pc, #52]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 80140cc:	f7f6 fc48 	bl	800a960 <HAL_UARTEx_SetTxFifoThreshold>
 80140d0:	4603      	mov	r3, r0
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d001      	beq.n	80140da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80140d6:	f7ff fa33 	bl	8013540 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80140da:	2100      	movs	r1, #0
 80140dc:	4808      	ldr	r0, [pc, #32]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 80140de:	f7f6 fccb 	bl	800aa78 <HAL_UARTEx_SetRxFifoThreshold>
 80140e2:	4603      	mov	r3, r0
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d001      	beq.n	80140ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80140e8:	f7ff fa2a 	bl	8013540 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80140ec:	4804      	ldr	r0, [pc, #16]	@ (8014100 <MX_USART1_UART_Init+0x90>)
 80140ee:	f7f6 fbcf 	bl	800a890 <HAL_UARTEx_DisableFifoMode>
 80140f2:	4603      	mov	r3, r0
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d001      	beq.n	80140fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80140f8:	f7ff fa22 	bl	8013540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80140fc:	bf00      	nop
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	20054a9c 	.word	0x20054a9c
 8014104:	40013800 	.word	0x40013800

08014108 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801410c:	4b22      	ldr	r3, [pc, #136]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 801410e:	4a23      	ldr	r2, [pc, #140]	@ (801419c <MX_USART2_UART_Init+0x94>)
 8014110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8014112:	4b21      	ldr	r3, [pc, #132]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 8014114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8014118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801411a:	4b1f      	ldr	r3, [pc, #124]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 801411c:	2200      	movs	r2, #0
 801411e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8014120:	4b1d      	ldr	r3, [pc, #116]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 8014122:	2200      	movs	r2, #0
 8014124:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8014126:	4b1c      	ldr	r3, [pc, #112]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 8014128:	2200      	movs	r2, #0
 801412a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801412c:	4b1a      	ldr	r3, [pc, #104]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 801412e:	220c      	movs	r2, #12
 8014130:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014132:	4b19      	ldr	r3, [pc, #100]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 8014134:	2200      	movs	r2, #0
 8014136:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8014138:	4b17      	ldr	r3, [pc, #92]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 801413a:	2200      	movs	r2, #0
 801413c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801413e:	4b16      	ldr	r3, [pc, #88]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 8014140:	2200      	movs	r2, #0
 8014142:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8014144:	4b14      	ldr	r3, [pc, #80]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 8014146:	2200      	movs	r2, #0
 8014148:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801414a:	4b13      	ldr	r3, [pc, #76]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 801414c:	2200      	movs	r2, #0
 801414e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8014150:	4811      	ldr	r0, [pc, #68]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 8014152:	f7f5 fba7 	bl	80098a4 <HAL_UART_Init>
 8014156:	4603      	mov	r3, r0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d001      	beq.n	8014160 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 801415c:	f7ff f9f0 	bl	8013540 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014160:	2100      	movs	r1, #0
 8014162:	480d      	ldr	r0, [pc, #52]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 8014164:	f7f6 fbfc 	bl	800a960 <HAL_UARTEx_SetTxFifoThreshold>
 8014168:	4603      	mov	r3, r0
 801416a:	2b00      	cmp	r3, #0
 801416c:	d001      	beq.n	8014172 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 801416e:	f7ff f9e7 	bl	8013540 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014172:	2100      	movs	r1, #0
 8014174:	4808      	ldr	r0, [pc, #32]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 8014176:	f7f6 fc7f 	bl	800aa78 <HAL_UARTEx_SetRxFifoThreshold>
 801417a:	4603      	mov	r3, r0
 801417c:	2b00      	cmp	r3, #0
 801417e:	d001      	beq.n	8014184 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8014180:	f7ff f9de 	bl	8013540 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8014184:	4804      	ldr	r0, [pc, #16]	@ (8014198 <MX_USART2_UART_Init+0x90>)
 8014186:	f7f6 fb83 	bl	800a890 <HAL_UARTEx_DisableFifoMode>
 801418a:	4603      	mov	r3, r0
 801418c:	2b00      	cmp	r3, #0
 801418e:	d001      	beq.n	8014194 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8014190:	f7ff f9d6 	bl	8013540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8014194:	bf00      	nop
 8014196:	bd80      	pop	{r7, pc}
 8014198:	20054b30 	.word	0x20054b30
 801419c:	40004400 	.word	0x40004400

080141a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b0b2      	sub	sp, #200	@ 0xc8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80141a8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80141ac:	2200      	movs	r2, #0
 80141ae:	601a      	str	r2, [r3, #0]
 80141b0:	605a      	str	r2, [r3, #4]
 80141b2:	609a      	str	r2, [r3, #8]
 80141b4:	60da      	str	r2, [r3, #12]
 80141b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80141b8:	f107 031c 	add.w	r3, r7, #28
 80141bc:	2298      	movs	r2, #152	@ 0x98
 80141be:	2100      	movs	r1, #0
 80141c0:	4618      	mov	r0, r3
 80141c2:	f000 fae3 	bl	801478c <memset>
  if(uartHandle->Instance==USART1)
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	4a43      	ldr	r2, [pc, #268]	@ (80142d8 <HAL_UART_MspInit+0x138>)
 80141cc:	4293      	cmp	r3, r2
 80141ce:	d13d      	bne.n	801424c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80141d0:	2301      	movs	r3, #1
 80141d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80141d4:	2300      	movs	r3, #0
 80141d6:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80141d8:	f107 031c 	add.w	r3, r7, #28
 80141dc:	4618      	mov	r0, r3
 80141de:	f7f0 f979 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d001      	beq.n	80141ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80141e8:	f7ff f9aa 	bl	8013540 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80141ec:	4b3b      	ldr	r3, [pc, #236]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 80141ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80141f0:	4a3a      	ldr	r2, [pc, #232]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 80141f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80141f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80141f8:	4b38      	ldr	r3, [pc, #224]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 80141fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80141fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014200:	61bb      	str	r3, [r7, #24]
 8014202:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014204:	4b35      	ldr	r3, [pc, #212]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 8014206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014208:	4a34      	ldr	r2, [pc, #208]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 801420a:	f043 0301 	orr.w	r3, r3, #1
 801420e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014210:	4b32      	ldr	r3, [pc, #200]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 8014212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014214:	f003 0301 	and.w	r3, r3, #1
 8014218:	617b      	str	r3, [r7, #20]
 801421a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801421c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8014220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014224:	2302      	movs	r3, #2
 8014226:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801422a:	2300      	movs	r3, #0
 801422c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014230:	2303      	movs	r3, #3
 8014232:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014236:	2307      	movs	r3, #7
 8014238:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801423c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8014240:	4619      	mov	r1, r3
 8014242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8014246:	f7ed fd37 	bl	8001cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 801424a:	e040      	b.n	80142ce <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	4a23      	ldr	r2, [pc, #140]	@ (80142e0 <HAL_UART_MspInit+0x140>)
 8014252:	4293      	cmp	r3, r2
 8014254:	d13b      	bne.n	80142ce <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8014256:	2302      	movs	r3, #2
 8014258:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 801425a:	2300      	movs	r3, #0
 801425c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801425e:	f107 031c 	add.w	r3, r7, #28
 8014262:	4618      	mov	r0, r3
 8014264:	f7f0 f936 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8014268:	4603      	mov	r3, r0
 801426a:	2b00      	cmp	r3, #0
 801426c:	d001      	beq.n	8014272 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 801426e:	f7ff f967 	bl	8013540 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8014272:	4b1a      	ldr	r3, [pc, #104]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 8014274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014276:	4a19      	ldr	r2, [pc, #100]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 8014278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801427c:	6593      	str	r3, [r2, #88]	@ 0x58
 801427e:	4b17      	ldr	r3, [pc, #92]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 8014280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014286:	613b      	str	r3, [r7, #16]
 8014288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801428a:	4b14      	ldr	r3, [pc, #80]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 801428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801428e:	4a13      	ldr	r2, [pc, #76]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 8014290:	f043 0301 	orr.w	r3, r3, #1
 8014294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014296:	4b11      	ldr	r3, [pc, #68]	@ (80142dc <HAL_UART_MspInit+0x13c>)
 8014298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801429a:	f003 0301 	and.w	r3, r3, #1
 801429e:	60fb      	str	r3, [r7, #12]
 80142a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80142a2:	230c      	movs	r3, #12
 80142a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142a8:	2302      	movs	r3, #2
 80142aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142ae:	2300      	movs	r3, #0
 80142b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80142b4:	2303      	movs	r3, #3
 80142b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80142ba:	2307      	movs	r3, #7
 80142bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80142c0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80142c4:	4619      	mov	r1, r3
 80142c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80142ca:	f7ed fcf5 	bl	8001cb8 <HAL_GPIO_Init>
}
 80142ce:	bf00      	nop
 80142d0:	37c8      	adds	r7, #200	@ 0xc8
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
 80142d6:	bf00      	nop
 80142d8:	40013800 	.word	0x40013800
 80142dc:	40021000 	.word	0x40021000
 80142e0:	40004400 	.word	0x40004400

080142e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80142e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801431c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80142e8:	f7ff feb0 	bl	801404c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80142ec:	480c      	ldr	r0, [pc, #48]	@ (8014320 <LoopForever+0x6>)
  ldr r1, =_edata
 80142ee:	490d      	ldr	r1, [pc, #52]	@ (8014324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80142f0:	4a0d      	ldr	r2, [pc, #52]	@ (8014328 <LoopForever+0xe>)
  movs r3, #0
 80142f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80142f4:	e002      	b.n	80142fc <LoopCopyDataInit>

080142f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80142f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80142f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80142fa:	3304      	adds	r3, #4

080142fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80142fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80142fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014300:	d3f9      	bcc.n	80142f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014302:	4a0a      	ldr	r2, [pc, #40]	@ (801432c <LoopForever+0x12>)
  ldr r4, =_ebss
 8014304:	4c0a      	ldr	r4, [pc, #40]	@ (8014330 <LoopForever+0x16>)
  movs r3, #0
 8014306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014308:	e001      	b.n	801430e <LoopFillZerobss>

0801430a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801430a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801430c:	3204      	adds	r2, #4

0801430e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801430e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014310:	d3fb      	bcc.n	801430a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8014312:	f000 fae5 	bl	80148e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8014316:	f7fe feb3 	bl	8013080 <main>

0801431a <LoopForever>:

LoopForever:
    b LoopForever
 801431a:	e7fe      	b.n	801431a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 801431c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8014320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014324:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8014328:	08016138 	.word	0x08016138
  ldr r2, =_sbss
 801432c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8014330:	20054d10 	.word	0x20054d10

08014334 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8014334:	e7fe      	b.n	8014334 <ADC1_IRQHandler>
	...

08014338 <std>:
 8014338:	2300      	movs	r3, #0
 801433a:	b510      	push	{r4, lr}
 801433c:	4604      	mov	r4, r0
 801433e:	e9c0 3300 	strd	r3, r3, [r0]
 8014342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014346:	6083      	str	r3, [r0, #8]
 8014348:	8181      	strh	r1, [r0, #12]
 801434a:	6643      	str	r3, [r0, #100]	@ 0x64
 801434c:	81c2      	strh	r2, [r0, #14]
 801434e:	6183      	str	r3, [r0, #24]
 8014350:	4619      	mov	r1, r3
 8014352:	2208      	movs	r2, #8
 8014354:	305c      	adds	r0, #92	@ 0x5c
 8014356:	f000 fa19 	bl	801478c <memset>
 801435a:	4b0d      	ldr	r3, [pc, #52]	@ (8014390 <std+0x58>)
 801435c:	6263      	str	r3, [r4, #36]	@ 0x24
 801435e:	4b0d      	ldr	r3, [pc, #52]	@ (8014394 <std+0x5c>)
 8014360:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014362:	4b0d      	ldr	r3, [pc, #52]	@ (8014398 <std+0x60>)
 8014364:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014366:	4b0d      	ldr	r3, [pc, #52]	@ (801439c <std+0x64>)
 8014368:	6323      	str	r3, [r4, #48]	@ 0x30
 801436a:	4b0d      	ldr	r3, [pc, #52]	@ (80143a0 <std+0x68>)
 801436c:	6224      	str	r4, [r4, #32]
 801436e:	429c      	cmp	r4, r3
 8014370:	d006      	beq.n	8014380 <std+0x48>
 8014372:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014376:	4294      	cmp	r4, r2
 8014378:	d002      	beq.n	8014380 <std+0x48>
 801437a:	33d0      	adds	r3, #208	@ 0xd0
 801437c:	429c      	cmp	r4, r3
 801437e:	d105      	bne.n	801438c <std+0x54>
 8014380:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014388:	f000 bace 	b.w	8014928 <__retarget_lock_init_recursive>
 801438c:	bd10      	pop	{r4, pc}
 801438e:	bf00      	nop
 8014390:	080145dd 	.word	0x080145dd
 8014394:	080145ff 	.word	0x080145ff
 8014398:	08014637 	.word	0x08014637
 801439c:	0801465b 	.word	0x0801465b
 80143a0:	20054bc4 	.word	0x20054bc4

080143a4 <stdio_exit_handler>:
 80143a4:	4a02      	ldr	r2, [pc, #8]	@ (80143b0 <stdio_exit_handler+0xc>)
 80143a6:	4903      	ldr	r1, [pc, #12]	@ (80143b4 <stdio_exit_handler+0x10>)
 80143a8:	4803      	ldr	r0, [pc, #12]	@ (80143b8 <stdio_exit_handler+0x14>)
 80143aa:	f000 b869 	b.w	8014480 <_fwalk_sglue>
 80143ae:	bf00      	nop
 80143b0:	20000014 	.word	0x20000014
 80143b4:	08015495 	.word	0x08015495
 80143b8:	20000024 	.word	0x20000024

080143bc <cleanup_stdio>:
 80143bc:	6841      	ldr	r1, [r0, #4]
 80143be:	4b0c      	ldr	r3, [pc, #48]	@ (80143f0 <cleanup_stdio+0x34>)
 80143c0:	4299      	cmp	r1, r3
 80143c2:	b510      	push	{r4, lr}
 80143c4:	4604      	mov	r4, r0
 80143c6:	d001      	beq.n	80143cc <cleanup_stdio+0x10>
 80143c8:	f001 f864 	bl	8015494 <_fflush_r>
 80143cc:	68a1      	ldr	r1, [r4, #8]
 80143ce:	4b09      	ldr	r3, [pc, #36]	@ (80143f4 <cleanup_stdio+0x38>)
 80143d0:	4299      	cmp	r1, r3
 80143d2:	d002      	beq.n	80143da <cleanup_stdio+0x1e>
 80143d4:	4620      	mov	r0, r4
 80143d6:	f001 f85d 	bl	8015494 <_fflush_r>
 80143da:	68e1      	ldr	r1, [r4, #12]
 80143dc:	4b06      	ldr	r3, [pc, #24]	@ (80143f8 <cleanup_stdio+0x3c>)
 80143de:	4299      	cmp	r1, r3
 80143e0:	d004      	beq.n	80143ec <cleanup_stdio+0x30>
 80143e2:	4620      	mov	r0, r4
 80143e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143e8:	f001 b854 	b.w	8015494 <_fflush_r>
 80143ec:	bd10      	pop	{r4, pc}
 80143ee:	bf00      	nop
 80143f0:	20054bc4 	.word	0x20054bc4
 80143f4:	20054c2c 	.word	0x20054c2c
 80143f8:	20054c94 	.word	0x20054c94

080143fc <global_stdio_init.part.0>:
 80143fc:	b510      	push	{r4, lr}
 80143fe:	4b0b      	ldr	r3, [pc, #44]	@ (801442c <global_stdio_init.part.0+0x30>)
 8014400:	4c0b      	ldr	r4, [pc, #44]	@ (8014430 <global_stdio_init.part.0+0x34>)
 8014402:	4a0c      	ldr	r2, [pc, #48]	@ (8014434 <global_stdio_init.part.0+0x38>)
 8014404:	601a      	str	r2, [r3, #0]
 8014406:	4620      	mov	r0, r4
 8014408:	2200      	movs	r2, #0
 801440a:	2104      	movs	r1, #4
 801440c:	f7ff ff94 	bl	8014338 <std>
 8014410:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014414:	2201      	movs	r2, #1
 8014416:	2109      	movs	r1, #9
 8014418:	f7ff ff8e 	bl	8014338 <std>
 801441c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014420:	2202      	movs	r2, #2
 8014422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014426:	2112      	movs	r1, #18
 8014428:	f7ff bf86 	b.w	8014338 <std>
 801442c:	20054cfc 	.word	0x20054cfc
 8014430:	20054bc4 	.word	0x20054bc4
 8014434:	080143a5 	.word	0x080143a5

08014438 <__sfp_lock_acquire>:
 8014438:	4801      	ldr	r0, [pc, #4]	@ (8014440 <__sfp_lock_acquire+0x8>)
 801443a:	f000 ba76 	b.w	801492a <__retarget_lock_acquire_recursive>
 801443e:	bf00      	nop
 8014440:	20054d05 	.word	0x20054d05

08014444 <__sfp_lock_release>:
 8014444:	4801      	ldr	r0, [pc, #4]	@ (801444c <__sfp_lock_release+0x8>)
 8014446:	f000 ba71 	b.w	801492c <__retarget_lock_release_recursive>
 801444a:	bf00      	nop
 801444c:	20054d05 	.word	0x20054d05

08014450 <__sinit>:
 8014450:	b510      	push	{r4, lr}
 8014452:	4604      	mov	r4, r0
 8014454:	f7ff fff0 	bl	8014438 <__sfp_lock_acquire>
 8014458:	6a23      	ldr	r3, [r4, #32]
 801445a:	b11b      	cbz	r3, 8014464 <__sinit+0x14>
 801445c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014460:	f7ff bff0 	b.w	8014444 <__sfp_lock_release>
 8014464:	4b04      	ldr	r3, [pc, #16]	@ (8014478 <__sinit+0x28>)
 8014466:	6223      	str	r3, [r4, #32]
 8014468:	4b04      	ldr	r3, [pc, #16]	@ (801447c <__sinit+0x2c>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d1f5      	bne.n	801445c <__sinit+0xc>
 8014470:	f7ff ffc4 	bl	80143fc <global_stdio_init.part.0>
 8014474:	e7f2      	b.n	801445c <__sinit+0xc>
 8014476:	bf00      	nop
 8014478:	080143bd 	.word	0x080143bd
 801447c:	20054cfc 	.word	0x20054cfc

08014480 <_fwalk_sglue>:
 8014480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014484:	4607      	mov	r7, r0
 8014486:	4688      	mov	r8, r1
 8014488:	4614      	mov	r4, r2
 801448a:	2600      	movs	r6, #0
 801448c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014490:	f1b9 0901 	subs.w	r9, r9, #1
 8014494:	d505      	bpl.n	80144a2 <_fwalk_sglue+0x22>
 8014496:	6824      	ldr	r4, [r4, #0]
 8014498:	2c00      	cmp	r4, #0
 801449a:	d1f7      	bne.n	801448c <_fwalk_sglue+0xc>
 801449c:	4630      	mov	r0, r6
 801449e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144a2:	89ab      	ldrh	r3, [r5, #12]
 80144a4:	2b01      	cmp	r3, #1
 80144a6:	d907      	bls.n	80144b8 <_fwalk_sglue+0x38>
 80144a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80144ac:	3301      	adds	r3, #1
 80144ae:	d003      	beq.n	80144b8 <_fwalk_sglue+0x38>
 80144b0:	4629      	mov	r1, r5
 80144b2:	4638      	mov	r0, r7
 80144b4:	47c0      	blx	r8
 80144b6:	4306      	orrs	r6, r0
 80144b8:	3568      	adds	r5, #104	@ 0x68
 80144ba:	e7e9      	b.n	8014490 <_fwalk_sglue+0x10>

080144bc <iprintf>:
 80144bc:	b40f      	push	{r0, r1, r2, r3}
 80144be:	b507      	push	{r0, r1, r2, lr}
 80144c0:	4906      	ldr	r1, [pc, #24]	@ (80144dc <iprintf+0x20>)
 80144c2:	ab04      	add	r3, sp, #16
 80144c4:	6808      	ldr	r0, [r1, #0]
 80144c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80144ca:	6881      	ldr	r1, [r0, #8]
 80144cc:	9301      	str	r3, [sp, #4]
 80144ce:	f000 fcb7 	bl	8014e40 <_vfiprintf_r>
 80144d2:	b003      	add	sp, #12
 80144d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80144d8:	b004      	add	sp, #16
 80144da:	4770      	bx	lr
 80144dc:	20000020 	.word	0x20000020

080144e0 <_puts_r>:
 80144e0:	6a03      	ldr	r3, [r0, #32]
 80144e2:	b570      	push	{r4, r5, r6, lr}
 80144e4:	6884      	ldr	r4, [r0, #8]
 80144e6:	4605      	mov	r5, r0
 80144e8:	460e      	mov	r6, r1
 80144ea:	b90b      	cbnz	r3, 80144f0 <_puts_r+0x10>
 80144ec:	f7ff ffb0 	bl	8014450 <__sinit>
 80144f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80144f2:	07db      	lsls	r3, r3, #31
 80144f4:	d405      	bmi.n	8014502 <_puts_r+0x22>
 80144f6:	89a3      	ldrh	r3, [r4, #12]
 80144f8:	0598      	lsls	r0, r3, #22
 80144fa:	d402      	bmi.n	8014502 <_puts_r+0x22>
 80144fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144fe:	f000 fa14 	bl	801492a <__retarget_lock_acquire_recursive>
 8014502:	89a3      	ldrh	r3, [r4, #12]
 8014504:	0719      	lsls	r1, r3, #28
 8014506:	d502      	bpl.n	801450e <_puts_r+0x2e>
 8014508:	6923      	ldr	r3, [r4, #16]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d135      	bne.n	801457a <_puts_r+0x9a>
 801450e:	4621      	mov	r1, r4
 8014510:	4628      	mov	r0, r5
 8014512:	f000 f8e5 	bl	80146e0 <__swsetup_r>
 8014516:	b380      	cbz	r0, 801457a <_puts_r+0x9a>
 8014518:	f04f 35ff 	mov.w	r5, #4294967295
 801451c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801451e:	07da      	lsls	r2, r3, #31
 8014520:	d405      	bmi.n	801452e <_puts_r+0x4e>
 8014522:	89a3      	ldrh	r3, [r4, #12]
 8014524:	059b      	lsls	r3, r3, #22
 8014526:	d402      	bmi.n	801452e <_puts_r+0x4e>
 8014528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801452a:	f000 f9ff 	bl	801492c <__retarget_lock_release_recursive>
 801452e:	4628      	mov	r0, r5
 8014530:	bd70      	pop	{r4, r5, r6, pc}
 8014532:	2b00      	cmp	r3, #0
 8014534:	da04      	bge.n	8014540 <_puts_r+0x60>
 8014536:	69a2      	ldr	r2, [r4, #24]
 8014538:	429a      	cmp	r2, r3
 801453a:	dc17      	bgt.n	801456c <_puts_r+0x8c>
 801453c:	290a      	cmp	r1, #10
 801453e:	d015      	beq.n	801456c <_puts_r+0x8c>
 8014540:	6823      	ldr	r3, [r4, #0]
 8014542:	1c5a      	adds	r2, r3, #1
 8014544:	6022      	str	r2, [r4, #0]
 8014546:	7019      	strb	r1, [r3, #0]
 8014548:	68a3      	ldr	r3, [r4, #8]
 801454a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801454e:	3b01      	subs	r3, #1
 8014550:	60a3      	str	r3, [r4, #8]
 8014552:	2900      	cmp	r1, #0
 8014554:	d1ed      	bne.n	8014532 <_puts_r+0x52>
 8014556:	2b00      	cmp	r3, #0
 8014558:	da11      	bge.n	801457e <_puts_r+0x9e>
 801455a:	4622      	mov	r2, r4
 801455c:	210a      	movs	r1, #10
 801455e:	4628      	mov	r0, r5
 8014560:	f000 f87f 	bl	8014662 <__swbuf_r>
 8014564:	3001      	adds	r0, #1
 8014566:	d0d7      	beq.n	8014518 <_puts_r+0x38>
 8014568:	250a      	movs	r5, #10
 801456a:	e7d7      	b.n	801451c <_puts_r+0x3c>
 801456c:	4622      	mov	r2, r4
 801456e:	4628      	mov	r0, r5
 8014570:	f000 f877 	bl	8014662 <__swbuf_r>
 8014574:	3001      	adds	r0, #1
 8014576:	d1e7      	bne.n	8014548 <_puts_r+0x68>
 8014578:	e7ce      	b.n	8014518 <_puts_r+0x38>
 801457a:	3e01      	subs	r6, #1
 801457c:	e7e4      	b.n	8014548 <_puts_r+0x68>
 801457e:	6823      	ldr	r3, [r4, #0]
 8014580:	1c5a      	adds	r2, r3, #1
 8014582:	6022      	str	r2, [r4, #0]
 8014584:	220a      	movs	r2, #10
 8014586:	701a      	strb	r2, [r3, #0]
 8014588:	e7ee      	b.n	8014568 <_puts_r+0x88>
	...

0801458c <puts>:
 801458c:	4b02      	ldr	r3, [pc, #8]	@ (8014598 <puts+0xc>)
 801458e:	4601      	mov	r1, r0
 8014590:	6818      	ldr	r0, [r3, #0]
 8014592:	f7ff bfa5 	b.w	80144e0 <_puts_r>
 8014596:	bf00      	nop
 8014598:	20000020 	.word	0x20000020

0801459c <siprintf>:
 801459c:	b40e      	push	{r1, r2, r3}
 801459e:	b500      	push	{lr}
 80145a0:	b09c      	sub	sp, #112	@ 0x70
 80145a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80145a4:	9002      	str	r0, [sp, #8]
 80145a6:	9006      	str	r0, [sp, #24]
 80145a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80145ac:	4809      	ldr	r0, [pc, #36]	@ (80145d4 <siprintf+0x38>)
 80145ae:	9107      	str	r1, [sp, #28]
 80145b0:	9104      	str	r1, [sp, #16]
 80145b2:	4909      	ldr	r1, [pc, #36]	@ (80145d8 <siprintf+0x3c>)
 80145b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80145b8:	9105      	str	r1, [sp, #20]
 80145ba:	6800      	ldr	r0, [r0, #0]
 80145bc:	9301      	str	r3, [sp, #4]
 80145be:	a902      	add	r1, sp, #8
 80145c0:	f000 fb18 	bl	8014bf4 <_svfiprintf_r>
 80145c4:	9b02      	ldr	r3, [sp, #8]
 80145c6:	2200      	movs	r2, #0
 80145c8:	701a      	strb	r2, [r3, #0]
 80145ca:	b01c      	add	sp, #112	@ 0x70
 80145cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80145d0:	b003      	add	sp, #12
 80145d2:	4770      	bx	lr
 80145d4:	20000020 	.word	0x20000020
 80145d8:	ffff0208 	.word	0xffff0208

080145dc <__sread>:
 80145dc:	b510      	push	{r4, lr}
 80145de:	460c      	mov	r4, r1
 80145e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145e4:	f000 f952 	bl	801488c <_read_r>
 80145e8:	2800      	cmp	r0, #0
 80145ea:	bfab      	itete	ge
 80145ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80145ee:	89a3      	ldrhlt	r3, [r4, #12]
 80145f0:	181b      	addge	r3, r3, r0
 80145f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80145f6:	bfac      	ite	ge
 80145f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80145fa:	81a3      	strhlt	r3, [r4, #12]
 80145fc:	bd10      	pop	{r4, pc}

080145fe <__swrite>:
 80145fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014602:	461f      	mov	r7, r3
 8014604:	898b      	ldrh	r3, [r1, #12]
 8014606:	05db      	lsls	r3, r3, #23
 8014608:	4605      	mov	r5, r0
 801460a:	460c      	mov	r4, r1
 801460c:	4616      	mov	r6, r2
 801460e:	d505      	bpl.n	801461c <__swrite+0x1e>
 8014610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014614:	2302      	movs	r3, #2
 8014616:	2200      	movs	r2, #0
 8014618:	f000 f926 	bl	8014868 <_lseek_r>
 801461c:	89a3      	ldrh	r3, [r4, #12]
 801461e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014626:	81a3      	strh	r3, [r4, #12]
 8014628:	4632      	mov	r2, r6
 801462a:	463b      	mov	r3, r7
 801462c:	4628      	mov	r0, r5
 801462e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014632:	f000 b93d 	b.w	80148b0 <_write_r>

08014636 <__sseek>:
 8014636:	b510      	push	{r4, lr}
 8014638:	460c      	mov	r4, r1
 801463a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801463e:	f000 f913 	bl	8014868 <_lseek_r>
 8014642:	1c43      	adds	r3, r0, #1
 8014644:	89a3      	ldrh	r3, [r4, #12]
 8014646:	bf15      	itete	ne
 8014648:	6560      	strne	r0, [r4, #84]	@ 0x54
 801464a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801464e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014652:	81a3      	strheq	r3, [r4, #12]
 8014654:	bf18      	it	ne
 8014656:	81a3      	strhne	r3, [r4, #12]
 8014658:	bd10      	pop	{r4, pc}

0801465a <__sclose>:
 801465a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801465e:	f000 b89d 	b.w	801479c <_close_r>

08014662 <__swbuf_r>:
 8014662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014664:	460e      	mov	r6, r1
 8014666:	4614      	mov	r4, r2
 8014668:	4605      	mov	r5, r0
 801466a:	b118      	cbz	r0, 8014674 <__swbuf_r+0x12>
 801466c:	6a03      	ldr	r3, [r0, #32]
 801466e:	b90b      	cbnz	r3, 8014674 <__swbuf_r+0x12>
 8014670:	f7ff feee 	bl	8014450 <__sinit>
 8014674:	69a3      	ldr	r3, [r4, #24]
 8014676:	60a3      	str	r3, [r4, #8]
 8014678:	89a3      	ldrh	r3, [r4, #12]
 801467a:	071a      	lsls	r2, r3, #28
 801467c:	d501      	bpl.n	8014682 <__swbuf_r+0x20>
 801467e:	6923      	ldr	r3, [r4, #16]
 8014680:	b943      	cbnz	r3, 8014694 <__swbuf_r+0x32>
 8014682:	4621      	mov	r1, r4
 8014684:	4628      	mov	r0, r5
 8014686:	f000 f82b 	bl	80146e0 <__swsetup_r>
 801468a:	b118      	cbz	r0, 8014694 <__swbuf_r+0x32>
 801468c:	f04f 37ff 	mov.w	r7, #4294967295
 8014690:	4638      	mov	r0, r7
 8014692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014694:	6823      	ldr	r3, [r4, #0]
 8014696:	6922      	ldr	r2, [r4, #16]
 8014698:	1a98      	subs	r0, r3, r2
 801469a:	6963      	ldr	r3, [r4, #20]
 801469c:	b2f6      	uxtb	r6, r6
 801469e:	4283      	cmp	r3, r0
 80146a0:	4637      	mov	r7, r6
 80146a2:	dc05      	bgt.n	80146b0 <__swbuf_r+0x4e>
 80146a4:	4621      	mov	r1, r4
 80146a6:	4628      	mov	r0, r5
 80146a8:	f000 fef4 	bl	8015494 <_fflush_r>
 80146ac:	2800      	cmp	r0, #0
 80146ae:	d1ed      	bne.n	801468c <__swbuf_r+0x2a>
 80146b0:	68a3      	ldr	r3, [r4, #8]
 80146b2:	3b01      	subs	r3, #1
 80146b4:	60a3      	str	r3, [r4, #8]
 80146b6:	6823      	ldr	r3, [r4, #0]
 80146b8:	1c5a      	adds	r2, r3, #1
 80146ba:	6022      	str	r2, [r4, #0]
 80146bc:	701e      	strb	r6, [r3, #0]
 80146be:	6962      	ldr	r2, [r4, #20]
 80146c0:	1c43      	adds	r3, r0, #1
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d004      	beq.n	80146d0 <__swbuf_r+0x6e>
 80146c6:	89a3      	ldrh	r3, [r4, #12]
 80146c8:	07db      	lsls	r3, r3, #31
 80146ca:	d5e1      	bpl.n	8014690 <__swbuf_r+0x2e>
 80146cc:	2e0a      	cmp	r6, #10
 80146ce:	d1df      	bne.n	8014690 <__swbuf_r+0x2e>
 80146d0:	4621      	mov	r1, r4
 80146d2:	4628      	mov	r0, r5
 80146d4:	f000 fede 	bl	8015494 <_fflush_r>
 80146d8:	2800      	cmp	r0, #0
 80146da:	d0d9      	beq.n	8014690 <__swbuf_r+0x2e>
 80146dc:	e7d6      	b.n	801468c <__swbuf_r+0x2a>
	...

080146e0 <__swsetup_r>:
 80146e0:	b538      	push	{r3, r4, r5, lr}
 80146e2:	4b29      	ldr	r3, [pc, #164]	@ (8014788 <__swsetup_r+0xa8>)
 80146e4:	4605      	mov	r5, r0
 80146e6:	6818      	ldr	r0, [r3, #0]
 80146e8:	460c      	mov	r4, r1
 80146ea:	b118      	cbz	r0, 80146f4 <__swsetup_r+0x14>
 80146ec:	6a03      	ldr	r3, [r0, #32]
 80146ee:	b90b      	cbnz	r3, 80146f4 <__swsetup_r+0x14>
 80146f0:	f7ff feae 	bl	8014450 <__sinit>
 80146f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146f8:	0719      	lsls	r1, r3, #28
 80146fa:	d422      	bmi.n	8014742 <__swsetup_r+0x62>
 80146fc:	06da      	lsls	r2, r3, #27
 80146fe:	d407      	bmi.n	8014710 <__swsetup_r+0x30>
 8014700:	2209      	movs	r2, #9
 8014702:	602a      	str	r2, [r5, #0]
 8014704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014708:	81a3      	strh	r3, [r4, #12]
 801470a:	f04f 30ff 	mov.w	r0, #4294967295
 801470e:	e033      	b.n	8014778 <__swsetup_r+0x98>
 8014710:	0758      	lsls	r0, r3, #29
 8014712:	d512      	bpl.n	801473a <__swsetup_r+0x5a>
 8014714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014716:	b141      	cbz	r1, 801472a <__swsetup_r+0x4a>
 8014718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801471c:	4299      	cmp	r1, r3
 801471e:	d002      	beq.n	8014726 <__swsetup_r+0x46>
 8014720:	4628      	mov	r0, r5
 8014722:	f000 f913 	bl	801494c <_free_r>
 8014726:	2300      	movs	r3, #0
 8014728:	6363      	str	r3, [r4, #52]	@ 0x34
 801472a:	89a3      	ldrh	r3, [r4, #12]
 801472c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014730:	81a3      	strh	r3, [r4, #12]
 8014732:	2300      	movs	r3, #0
 8014734:	6063      	str	r3, [r4, #4]
 8014736:	6923      	ldr	r3, [r4, #16]
 8014738:	6023      	str	r3, [r4, #0]
 801473a:	89a3      	ldrh	r3, [r4, #12]
 801473c:	f043 0308 	orr.w	r3, r3, #8
 8014740:	81a3      	strh	r3, [r4, #12]
 8014742:	6923      	ldr	r3, [r4, #16]
 8014744:	b94b      	cbnz	r3, 801475a <__swsetup_r+0x7a>
 8014746:	89a3      	ldrh	r3, [r4, #12]
 8014748:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801474c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014750:	d003      	beq.n	801475a <__swsetup_r+0x7a>
 8014752:	4621      	mov	r1, r4
 8014754:	4628      	mov	r0, r5
 8014756:	f000 feeb 	bl	8015530 <__smakebuf_r>
 801475a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801475e:	f013 0201 	ands.w	r2, r3, #1
 8014762:	d00a      	beq.n	801477a <__swsetup_r+0x9a>
 8014764:	2200      	movs	r2, #0
 8014766:	60a2      	str	r2, [r4, #8]
 8014768:	6962      	ldr	r2, [r4, #20]
 801476a:	4252      	negs	r2, r2
 801476c:	61a2      	str	r2, [r4, #24]
 801476e:	6922      	ldr	r2, [r4, #16]
 8014770:	b942      	cbnz	r2, 8014784 <__swsetup_r+0xa4>
 8014772:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014776:	d1c5      	bne.n	8014704 <__swsetup_r+0x24>
 8014778:	bd38      	pop	{r3, r4, r5, pc}
 801477a:	0799      	lsls	r1, r3, #30
 801477c:	bf58      	it	pl
 801477e:	6962      	ldrpl	r2, [r4, #20]
 8014780:	60a2      	str	r2, [r4, #8]
 8014782:	e7f4      	b.n	801476e <__swsetup_r+0x8e>
 8014784:	2000      	movs	r0, #0
 8014786:	e7f7      	b.n	8014778 <__swsetup_r+0x98>
 8014788:	20000020 	.word	0x20000020

0801478c <memset>:
 801478c:	4402      	add	r2, r0
 801478e:	4603      	mov	r3, r0
 8014790:	4293      	cmp	r3, r2
 8014792:	d100      	bne.n	8014796 <memset+0xa>
 8014794:	4770      	bx	lr
 8014796:	f803 1b01 	strb.w	r1, [r3], #1
 801479a:	e7f9      	b.n	8014790 <memset+0x4>

0801479c <_close_r>:
 801479c:	b538      	push	{r3, r4, r5, lr}
 801479e:	4d06      	ldr	r5, [pc, #24]	@ (80147b8 <_close_r+0x1c>)
 80147a0:	2300      	movs	r3, #0
 80147a2:	4604      	mov	r4, r0
 80147a4:	4608      	mov	r0, r1
 80147a6:	602b      	str	r3, [r5, #0]
 80147a8:	f7ff fbe5 	bl	8013f76 <_close>
 80147ac:	1c43      	adds	r3, r0, #1
 80147ae:	d102      	bne.n	80147b6 <_close_r+0x1a>
 80147b0:	682b      	ldr	r3, [r5, #0]
 80147b2:	b103      	cbz	r3, 80147b6 <_close_r+0x1a>
 80147b4:	6023      	str	r3, [r4, #0]
 80147b6:	bd38      	pop	{r3, r4, r5, pc}
 80147b8:	20054d00 	.word	0x20054d00

080147bc <_reclaim_reent>:
 80147bc:	4b29      	ldr	r3, [pc, #164]	@ (8014864 <_reclaim_reent+0xa8>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4283      	cmp	r3, r0
 80147c2:	b570      	push	{r4, r5, r6, lr}
 80147c4:	4604      	mov	r4, r0
 80147c6:	d04b      	beq.n	8014860 <_reclaim_reent+0xa4>
 80147c8:	69c3      	ldr	r3, [r0, #28]
 80147ca:	b1ab      	cbz	r3, 80147f8 <_reclaim_reent+0x3c>
 80147cc:	68db      	ldr	r3, [r3, #12]
 80147ce:	b16b      	cbz	r3, 80147ec <_reclaim_reent+0x30>
 80147d0:	2500      	movs	r5, #0
 80147d2:	69e3      	ldr	r3, [r4, #28]
 80147d4:	68db      	ldr	r3, [r3, #12]
 80147d6:	5959      	ldr	r1, [r3, r5]
 80147d8:	2900      	cmp	r1, #0
 80147da:	d13b      	bne.n	8014854 <_reclaim_reent+0x98>
 80147dc:	3504      	adds	r5, #4
 80147de:	2d80      	cmp	r5, #128	@ 0x80
 80147e0:	d1f7      	bne.n	80147d2 <_reclaim_reent+0x16>
 80147e2:	69e3      	ldr	r3, [r4, #28]
 80147e4:	4620      	mov	r0, r4
 80147e6:	68d9      	ldr	r1, [r3, #12]
 80147e8:	f000 f8b0 	bl	801494c <_free_r>
 80147ec:	69e3      	ldr	r3, [r4, #28]
 80147ee:	6819      	ldr	r1, [r3, #0]
 80147f0:	b111      	cbz	r1, 80147f8 <_reclaim_reent+0x3c>
 80147f2:	4620      	mov	r0, r4
 80147f4:	f000 f8aa 	bl	801494c <_free_r>
 80147f8:	6961      	ldr	r1, [r4, #20]
 80147fa:	b111      	cbz	r1, 8014802 <_reclaim_reent+0x46>
 80147fc:	4620      	mov	r0, r4
 80147fe:	f000 f8a5 	bl	801494c <_free_r>
 8014802:	69e1      	ldr	r1, [r4, #28]
 8014804:	b111      	cbz	r1, 801480c <_reclaim_reent+0x50>
 8014806:	4620      	mov	r0, r4
 8014808:	f000 f8a0 	bl	801494c <_free_r>
 801480c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801480e:	b111      	cbz	r1, 8014816 <_reclaim_reent+0x5a>
 8014810:	4620      	mov	r0, r4
 8014812:	f000 f89b 	bl	801494c <_free_r>
 8014816:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014818:	b111      	cbz	r1, 8014820 <_reclaim_reent+0x64>
 801481a:	4620      	mov	r0, r4
 801481c:	f000 f896 	bl	801494c <_free_r>
 8014820:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014822:	b111      	cbz	r1, 801482a <_reclaim_reent+0x6e>
 8014824:	4620      	mov	r0, r4
 8014826:	f000 f891 	bl	801494c <_free_r>
 801482a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801482c:	b111      	cbz	r1, 8014834 <_reclaim_reent+0x78>
 801482e:	4620      	mov	r0, r4
 8014830:	f000 f88c 	bl	801494c <_free_r>
 8014834:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014836:	b111      	cbz	r1, 801483e <_reclaim_reent+0x82>
 8014838:	4620      	mov	r0, r4
 801483a:	f000 f887 	bl	801494c <_free_r>
 801483e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014840:	b111      	cbz	r1, 8014848 <_reclaim_reent+0x8c>
 8014842:	4620      	mov	r0, r4
 8014844:	f000 f882 	bl	801494c <_free_r>
 8014848:	6a23      	ldr	r3, [r4, #32]
 801484a:	b14b      	cbz	r3, 8014860 <_reclaim_reent+0xa4>
 801484c:	4620      	mov	r0, r4
 801484e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014852:	4718      	bx	r3
 8014854:	680e      	ldr	r6, [r1, #0]
 8014856:	4620      	mov	r0, r4
 8014858:	f000 f878 	bl	801494c <_free_r>
 801485c:	4631      	mov	r1, r6
 801485e:	e7bb      	b.n	80147d8 <_reclaim_reent+0x1c>
 8014860:	bd70      	pop	{r4, r5, r6, pc}
 8014862:	bf00      	nop
 8014864:	20000020 	.word	0x20000020

08014868 <_lseek_r>:
 8014868:	b538      	push	{r3, r4, r5, lr}
 801486a:	4d07      	ldr	r5, [pc, #28]	@ (8014888 <_lseek_r+0x20>)
 801486c:	4604      	mov	r4, r0
 801486e:	4608      	mov	r0, r1
 8014870:	4611      	mov	r1, r2
 8014872:	2200      	movs	r2, #0
 8014874:	602a      	str	r2, [r5, #0]
 8014876:	461a      	mov	r2, r3
 8014878:	f7ff fba4 	bl	8013fc4 <_lseek>
 801487c:	1c43      	adds	r3, r0, #1
 801487e:	d102      	bne.n	8014886 <_lseek_r+0x1e>
 8014880:	682b      	ldr	r3, [r5, #0]
 8014882:	b103      	cbz	r3, 8014886 <_lseek_r+0x1e>
 8014884:	6023      	str	r3, [r4, #0]
 8014886:	bd38      	pop	{r3, r4, r5, pc}
 8014888:	20054d00 	.word	0x20054d00

0801488c <_read_r>:
 801488c:	b538      	push	{r3, r4, r5, lr}
 801488e:	4d07      	ldr	r5, [pc, #28]	@ (80148ac <_read_r+0x20>)
 8014890:	4604      	mov	r4, r0
 8014892:	4608      	mov	r0, r1
 8014894:	4611      	mov	r1, r2
 8014896:	2200      	movs	r2, #0
 8014898:	602a      	str	r2, [r5, #0]
 801489a:	461a      	mov	r2, r3
 801489c:	f7ff fb4e 	bl	8013f3c <_read>
 80148a0:	1c43      	adds	r3, r0, #1
 80148a2:	d102      	bne.n	80148aa <_read_r+0x1e>
 80148a4:	682b      	ldr	r3, [r5, #0]
 80148a6:	b103      	cbz	r3, 80148aa <_read_r+0x1e>
 80148a8:	6023      	str	r3, [r4, #0]
 80148aa:	bd38      	pop	{r3, r4, r5, pc}
 80148ac:	20054d00 	.word	0x20054d00

080148b0 <_write_r>:
 80148b0:	b538      	push	{r3, r4, r5, lr}
 80148b2:	4d07      	ldr	r5, [pc, #28]	@ (80148d0 <_write_r+0x20>)
 80148b4:	4604      	mov	r4, r0
 80148b6:	4608      	mov	r0, r1
 80148b8:	4611      	mov	r1, r2
 80148ba:	2200      	movs	r2, #0
 80148bc:	602a      	str	r2, [r5, #0]
 80148be:	461a      	mov	r2, r3
 80148c0:	f7fe fdf2 	bl	80134a8 <_write>
 80148c4:	1c43      	adds	r3, r0, #1
 80148c6:	d102      	bne.n	80148ce <_write_r+0x1e>
 80148c8:	682b      	ldr	r3, [r5, #0]
 80148ca:	b103      	cbz	r3, 80148ce <_write_r+0x1e>
 80148cc:	6023      	str	r3, [r4, #0]
 80148ce:	bd38      	pop	{r3, r4, r5, pc}
 80148d0:	20054d00 	.word	0x20054d00

080148d4 <__errno>:
 80148d4:	4b01      	ldr	r3, [pc, #4]	@ (80148dc <__errno+0x8>)
 80148d6:	6818      	ldr	r0, [r3, #0]
 80148d8:	4770      	bx	lr
 80148da:	bf00      	nop
 80148dc:	20000020 	.word	0x20000020

080148e0 <__libc_init_array>:
 80148e0:	b570      	push	{r4, r5, r6, lr}
 80148e2:	4d0d      	ldr	r5, [pc, #52]	@ (8014918 <__libc_init_array+0x38>)
 80148e4:	4c0d      	ldr	r4, [pc, #52]	@ (801491c <__libc_init_array+0x3c>)
 80148e6:	1b64      	subs	r4, r4, r5
 80148e8:	10a4      	asrs	r4, r4, #2
 80148ea:	2600      	movs	r6, #0
 80148ec:	42a6      	cmp	r6, r4
 80148ee:	d109      	bne.n	8014904 <__libc_init_array+0x24>
 80148f0:	4d0b      	ldr	r5, [pc, #44]	@ (8014920 <__libc_init_array+0x40>)
 80148f2:	4c0c      	ldr	r4, [pc, #48]	@ (8014924 <__libc_init_array+0x44>)
 80148f4:	f000 feda 	bl	80156ac <_init>
 80148f8:	1b64      	subs	r4, r4, r5
 80148fa:	10a4      	asrs	r4, r4, #2
 80148fc:	2600      	movs	r6, #0
 80148fe:	42a6      	cmp	r6, r4
 8014900:	d105      	bne.n	801490e <__libc_init_array+0x2e>
 8014902:	bd70      	pop	{r4, r5, r6, pc}
 8014904:	f855 3b04 	ldr.w	r3, [r5], #4
 8014908:	4798      	blx	r3
 801490a:	3601      	adds	r6, #1
 801490c:	e7ee      	b.n	80148ec <__libc_init_array+0xc>
 801490e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014912:	4798      	blx	r3
 8014914:	3601      	adds	r6, #1
 8014916:	e7f2      	b.n	80148fe <__libc_init_array+0x1e>
 8014918:	08016130 	.word	0x08016130
 801491c:	08016130 	.word	0x08016130
 8014920:	08016130 	.word	0x08016130
 8014924:	08016134 	.word	0x08016134

08014928 <__retarget_lock_init_recursive>:
 8014928:	4770      	bx	lr

0801492a <__retarget_lock_acquire_recursive>:
 801492a:	4770      	bx	lr

0801492c <__retarget_lock_release_recursive>:
 801492c:	4770      	bx	lr

0801492e <memcpy>:
 801492e:	440a      	add	r2, r1
 8014930:	4291      	cmp	r1, r2
 8014932:	f100 33ff 	add.w	r3, r0, #4294967295
 8014936:	d100      	bne.n	801493a <memcpy+0xc>
 8014938:	4770      	bx	lr
 801493a:	b510      	push	{r4, lr}
 801493c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014944:	4291      	cmp	r1, r2
 8014946:	d1f9      	bne.n	801493c <memcpy+0xe>
 8014948:	bd10      	pop	{r4, pc}
	...

0801494c <_free_r>:
 801494c:	b538      	push	{r3, r4, r5, lr}
 801494e:	4605      	mov	r5, r0
 8014950:	2900      	cmp	r1, #0
 8014952:	d041      	beq.n	80149d8 <_free_r+0x8c>
 8014954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014958:	1f0c      	subs	r4, r1, #4
 801495a:	2b00      	cmp	r3, #0
 801495c:	bfb8      	it	lt
 801495e:	18e4      	addlt	r4, r4, r3
 8014960:	f000 f8e0 	bl	8014b24 <__malloc_lock>
 8014964:	4a1d      	ldr	r2, [pc, #116]	@ (80149dc <_free_r+0x90>)
 8014966:	6813      	ldr	r3, [r2, #0]
 8014968:	b933      	cbnz	r3, 8014978 <_free_r+0x2c>
 801496a:	6063      	str	r3, [r4, #4]
 801496c:	6014      	str	r4, [r2, #0]
 801496e:	4628      	mov	r0, r5
 8014970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014974:	f000 b8dc 	b.w	8014b30 <__malloc_unlock>
 8014978:	42a3      	cmp	r3, r4
 801497a:	d908      	bls.n	801498e <_free_r+0x42>
 801497c:	6820      	ldr	r0, [r4, #0]
 801497e:	1821      	adds	r1, r4, r0
 8014980:	428b      	cmp	r3, r1
 8014982:	bf01      	itttt	eq
 8014984:	6819      	ldreq	r1, [r3, #0]
 8014986:	685b      	ldreq	r3, [r3, #4]
 8014988:	1809      	addeq	r1, r1, r0
 801498a:	6021      	streq	r1, [r4, #0]
 801498c:	e7ed      	b.n	801496a <_free_r+0x1e>
 801498e:	461a      	mov	r2, r3
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	b10b      	cbz	r3, 8014998 <_free_r+0x4c>
 8014994:	42a3      	cmp	r3, r4
 8014996:	d9fa      	bls.n	801498e <_free_r+0x42>
 8014998:	6811      	ldr	r1, [r2, #0]
 801499a:	1850      	adds	r0, r2, r1
 801499c:	42a0      	cmp	r0, r4
 801499e:	d10b      	bne.n	80149b8 <_free_r+0x6c>
 80149a0:	6820      	ldr	r0, [r4, #0]
 80149a2:	4401      	add	r1, r0
 80149a4:	1850      	adds	r0, r2, r1
 80149a6:	4283      	cmp	r3, r0
 80149a8:	6011      	str	r1, [r2, #0]
 80149aa:	d1e0      	bne.n	801496e <_free_r+0x22>
 80149ac:	6818      	ldr	r0, [r3, #0]
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	6053      	str	r3, [r2, #4]
 80149b2:	4408      	add	r0, r1
 80149b4:	6010      	str	r0, [r2, #0]
 80149b6:	e7da      	b.n	801496e <_free_r+0x22>
 80149b8:	d902      	bls.n	80149c0 <_free_r+0x74>
 80149ba:	230c      	movs	r3, #12
 80149bc:	602b      	str	r3, [r5, #0]
 80149be:	e7d6      	b.n	801496e <_free_r+0x22>
 80149c0:	6820      	ldr	r0, [r4, #0]
 80149c2:	1821      	adds	r1, r4, r0
 80149c4:	428b      	cmp	r3, r1
 80149c6:	bf04      	itt	eq
 80149c8:	6819      	ldreq	r1, [r3, #0]
 80149ca:	685b      	ldreq	r3, [r3, #4]
 80149cc:	6063      	str	r3, [r4, #4]
 80149ce:	bf04      	itt	eq
 80149d0:	1809      	addeq	r1, r1, r0
 80149d2:	6021      	streq	r1, [r4, #0]
 80149d4:	6054      	str	r4, [r2, #4]
 80149d6:	e7ca      	b.n	801496e <_free_r+0x22>
 80149d8:	bd38      	pop	{r3, r4, r5, pc}
 80149da:	bf00      	nop
 80149dc:	20054d0c 	.word	0x20054d0c

080149e0 <sbrk_aligned>:
 80149e0:	b570      	push	{r4, r5, r6, lr}
 80149e2:	4e0f      	ldr	r6, [pc, #60]	@ (8014a20 <sbrk_aligned+0x40>)
 80149e4:	460c      	mov	r4, r1
 80149e6:	6831      	ldr	r1, [r6, #0]
 80149e8:	4605      	mov	r5, r0
 80149ea:	b911      	cbnz	r1, 80149f2 <sbrk_aligned+0x12>
 80149ec:	f000 fe18 	bl	8015620 <_sbrk_r>
 80149f0:	6030      	str	r0, [r6, #0]
 80149f2:	4621      	mov	r1, r4
 80149f4:	4628      	mov	r0, r5
 80149f6:	f000 fe13 	bl	8015620 <_sbrk_r>
 80149fa:	1c43      	adds	r3, r0, #1
 80149fc:	d103      	bne.n	8014a06 <sbrk_aligned+0x26>
 80149fe:	f04f 34ff 	mov.w	r4, #4294967295
 8014a02:	4620      	mov	r0, r4
 8014a04:	bd70      	pop	{r4, r5, r6, pc}
 8014a06:	1cc4      	adds	r4, r0, #3
 8014a08:	f024 0403 	bic.w	r4, r4, #3
 8014a0c:	42a0      	cmp	r0, r4
 8014a0e:	d0f8      	beq.n	8014a02 <sbrk_aligned+0x22>
 8014a10:	1a21      	subs	r1, r4, r0
 8014a12:	4628      	mov	r0, r5
 8014a14:	f000 fe04 	bl	8015620 <_sbrk_r>
 8014a18:	3001      	adds	r0, #1
 8014a1a:	d1f2      	bne.n	8014a02 <sbrk_aligned+0x22>
 8014a1c:	e7ef      	b.n	80149fe <sbrk_aligned+0x1e>
 8014a1e:	bf00      	nop
 8014a20:	20054d08 	.word	0x20054d08

08014a24 <_malloc_r>:
 8014a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a28:	1ccd      	adds	r5, r1, #3
 8014a2a:	f025 0503 	bic.w	r5, r5, #3
 8014a2e:	3508      	adds	r5, #8
 8014a30:	2d0c      	cmp	r5, #12
 8014a32:	bf38      	it	cc
 8014a34:	250c      	movcc	r5, #12
 8014a36:	2d00      	cmp	r5, #0
 8014a38:	4606      	mov	r6, r0
 8014a3a:	db01      	blt.n	8014a40 <_malloc_r+0x1c>
 8014a3c:	42a9      	cmp	r1, r5
 8014a3e:	d904      	bls.n	8014a4a <_malloc_r+0x26>
 8014a40:	230c      	movs	r3, #12
 8014a42:	6033      	str	r3, [r6, #0]
 8014a44:	2000      	movs	r0, #0
 8014a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014b20 <_malloc_r+0xfc>
 8014a4e:	f000 f869 	bl	8014b24 <__malloc_lock>
 8014a52:	f8d8 3000 	ldr.w	r3, [r8]
 8014a56:	461c      	mov	r4, r3
 8014a58:	bb44      	cbnz	r4, 8014aac <_malloc_r+0x88>
 8014a5a:	4629      	mov	r1, r5
 8014a5c:	4630      	mov	r0, r6
 8014a5e:	f7ff ffbf 	bl	80149e0 <sbrk_aligned>
 8014a62:	1c43      	adds	r3, r0, #1
 8014a64:	4604      	mov	r4, r0
 8014a66:	d158      	bne.n	8014b1a <_malloc_r+0xf6>
 8014a68:	f8d8 4000 	ldr.w	r4, [r8]
 8014a6c:	4627      	mov	r7, r4
 8014a6e:	2f00      	cmp	r7, #0
 8014a70:	d143      	bne.n	8014afa <_malloc_r+0xd6>
 8014a72:	2c00      	cmp	r4, #0
 8014a74:	d04b      	beq.n	8014b0e <_malloc_r+0xea>
 8014a76:	6823      	ldr	r3, [r4, #0]
 8014a78:	4639      	mov	r1, r7
 8014a7a:	4630      	mov	r0, r6
 8014a7c:	eb04 0903 	add.w	r9, r4, r3
 8014a80:	f000 fdce 	bl	8015620 <_sbrk_r>
 8014a84:	4581      	cmp	r9, r0
 8014a86:	d142      	bne.n	8014b0e <_malloc_r+0xea>
 8014a88:	6821      	ldr	r1, [r4, #0]
 8014a8a:	1a6d      	subs	r5, r5, r1
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	4630      	mov	r0, r6
 8014a90:	f7ff ffa6 	bl	80149e0 <sbrk_aligned>
 8014a94:	3001      	adds	r0, #1
 8014a96:	d03a      	beq.n	8014b0e <_malloc_r+0xea>
 8014a98:	6823      	ldr	r3, [r4, #0]
 8014a9a:	442b      	add	r3, r5
 8014a9c:	6023      	str	r3, [r4, #0]
 8014a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8014aa2:	685a      	ldr	r2, [r3, #4]
 8014aa4:	bb62      	cbnz	r2, 8014b00 <_malloc_r+0xdc>
 8014aa6:	f8c8 7000 	str.w	r7, [r8]
 8014aaa:	e00f      	b.n	8014acc <_malloc_r+0xa8>
 8014aac:	6822      	ldr	r2, [r4, #0]
 8014aae:	1b52      	subs	r2, r2, r5
 8014ab0:	d420      	bmi.n	8014af4 <_malloc_r+0xd0>
 8014ab2:	2a0b      	cmp	r2, #11
 8014ab4:	d917      	bls.n	8014ae6 <_malloc_r+0xc2>
 8014ab6:	1961      	adds	r1, r4, r5
 8014ab8:	42a3      	cmp	r3, r4
 8014aba:	6025      	str	r5, [r4, #0]
 8014abc:	bf18      	it	ne
 8014abe:	6059      	strne	r1, [r3, #4]
 8014ac0:	6863      	ldr	r3, [r4, #4]
 8014ac2:	bf08      	it	eq
 8014ac4:	f8c8 1000 	streq.w	r1, [r8]
 8014ac8:	5162      	str	r2, [r4, r5]
 8014aca:	604b      	str	r3, [r1, #4]
 8014acc:	4630      	mov	r0, r6
 8014ace:	f000 f82f 	bl	8014b30 <__malloc_unlock>
 8014ad2:	f104 000b 	add.w	r0, r4, #11
 8014ad6:	1d23      	adds	r3, r4, #4
 8014ad8:	f020 0007 	bic.w	r0, r0, #7
 8014adc:	1ac2      	subs	r2, r0, r3
 8014ade:	bf1c      	itt	ne
 8014ae0:	1a1b      	subne	r3, r3, r0
 8014ae2:	50a3      	strne	r3, [r4, r2]
 8014ae4:	e7af      	b.n	8014a46 <_malloc_r+0x22>
 8014ae6:	6862      	ldr	r2, [r4, #4]
 8014ae8:	42a3      	cmp	r3, r4
 8014aea:	bf0c      	ite	eq
 8014aec:	f8c8 2000 	streq.w	r2, [r8]
 8014af0:	605a      	strne	r2, [r3, #4]
 8014af2:	e7eb      	b.n	8014acc <_malloc_r+0xa8>
 8014af4:	4623      	mov	r3, r4
 8014af6:	6864      	ldr	r4, [r4, #4]
 8014af8:	e7ae      	b.n	8014a58 <_malloc_r+0x34>
 8014afa:	463c      	mov	r4, r7
 8014afc:	687f      	ldr	r7, [r7, #4]
 8014afe:	e7b6      	b.n	8014a6e <_malloc_r+0x4a>
 8014b00:	461a      	mov	r2, r3
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	42a3      	cmp	r3, r4
 8014b06:	d1fb      	bne.n	8014b00 <_malloc_r+0xdc>
 8014b08:	2300      	movs	r3, #0
 8014b0a:	6053      	str	r3, [r2, #4]
 8014b0c:	e7de      	b.n	8014acc <_malloc_r+0xa8>
 8014b0e:	230c      	movs	r3, #12
 8014b10:	6033      	str	r3, [r6, #0]
 8014b12:	4630      	mov	r0, r6
 8014b14:	f000 f80c 	bl	8014b30 <__malloc_unlock>
 8014b18:	e794      	b.n	8014a44 <_malloc_r+0x20>
 8014b1a:	6005      	str	r5, [r0, #0]
 8014b1c:	e7d6      	b.n	8014acc <_malloc_r+0xa8>
 8014b1e:	bf00      	nop
 8014b20:	20054d0c 	.word	0x20054d0c

08014b24 <__malloc_lock>:
 8014b24:	4801      	ldr	r0, [pc, #4]	@ (8014b2c <__malloc_lock+0x8>)
 8014b26:	f7ff bf00 	b.w	801492a <__retarget_lock_acquire_recursive>
 8014b2a:	bf00      	nop
 8014b2c:	20054d04 	.word	0x20054d04

08014b30 <__malloc_unlock>:
 8014b30:	4801      	ldr	r0, [pc, #4]	@ (8014b38 <__malloc_unlock+0x8>)
 8014b32:	f7ff befb 	b.w	801492c <__retarget_lock_release_recursive>
 8014b36:	bf00      	nop
 8014b38:	20054d04 	.word	0x20054d04

08014b3c <__ssputs_r>:
 8014b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b40:	688e      	ldr	r6, [r1, #8]
 8014b42:	461f      	mov	r7, r3
 8014b44:	42be      	cmp	r6, r7
 8014b46:	680b      	ldr	r3, [r1, #0]
 8014b48:	4682      	mov	sl, r0
 8014b4a:	460c      	mov	r4, r1
 8014b4c:	4690      	mov	r8, r2
 8014b4e:	d82d      	bhi.n	8014bac <__ssputs_r+0x70>
 8014b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014b54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014b58:	d026      	beq.n	8014ba8 <__ssputs_r+0x6c>
 8014b5a:	6965      	ldr	r5, [r4, #20]
 8014b5c:	6909      	ldr	r1, [r1, #16]
 8014b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b62:	eba3 0901 	sub.w	r9, r3, r1
 8014b66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014b6a:	1c7b      	adds	r3, r7, #1
 8014b6c:	444b      	add	r3, r9
 8014b6e:	106d      	asrs	r5, r5, #1
 8014b70:	429d      	cmp	r5, r3
 8014b72:	bf38      	it	cc
 8014b74:	461d      	movcc	r5, r3
 8014b76:	0553      	lsls	r3, r2, #21
 8014b78:	d527      	bpl.n	8014bca <__ssputs_r+0x8e>
 8014b7a:	4629      	mov	r1, r5
 8014b7c:	f7ff ff52 	bl	8014a24 <_malloc_r>
 8014b80:	4606      	mov	r6, r0
 8014b82:	b360      	cbz	r0, 8014bde <__ssputs_r+0xa2>
 8014b84:	6921      	ldr	r1, [r4, #16]
 8014b86:	464a      	mov	r2, r9
 8014b88:	f7ff fed1 	bl	801492e <memcpy>
 8014b8c:	89a3      	ldrh	r3, [r4, #12]
 8014b8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014b96:	81a3      	strh	r3, [r4, #12]
 8014b98:	6126      	str	r6, [r4, #16]
 8014b9a:	6165      	str	r5, [r4, #20]
 8014b9c:	444e      	add	r6, r9
 8014b9e:	eba5 0509 	sub.w	r5, r5, r9
 8014ba2:	6026      	str	r6, [r4, #0]
 8014ba4:	60a5      	str	r5, [r4, #8]
 8014ba6:	463e      	mov	r6, r7
 8014ba8:	42be      	cmp	r6, r7
 8014baa:	d900      	bls.n	8014bae <__ssputs_r+0x72>
 8014bac:	463e      	mov	r6, r7
 8014bae:	6820      	ldr	r0, [r4, #0]
 8014bb0:	4632      	mov	r2, r6
 8014bb2:	4641      	mov	r1, r8
 8014bb4:	f000 fcf8 	bl	80155a8 <memmove>
 8014bb8:	68a3      	ldr	r3, [r4, #8]
 8014bba:	1b9b      	subs	r3, r3, r6
 8014bbc:	60a3      	str	r3, [r4, #8]
 8014bbe:	6823      	ldr	r3, [r4, #0]
 8014bc0:	4433      	add	r3, r6
 8014bc2:	6023      	str	r3, [r4, #0]
 8014bc4:	2000      	movs	r0, #0
 8014bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bca:	462a      	mov	r2, r5
 8014bcc:	f000 fd38 	bl	8015640 <_realloc_r>
 8014bd0:	4606      	mov	r6, r0
 8014bd2:	2800      	cmp	r0, #0
 8014bd4:	d1e0      	bne.n	8014b98 <__ssputs_r+0x5c>
 8014bd6:	6921      	ldr	r1, [r4, #16]
 8014bd8:	4650      	mov	r0, sl
 8014bda:	f7ff feb7 	bl	801494c <_free_r>
 8014bde:	230c      	movs	r3, #12
 8014be0:	f8ca 3000 	str.w	r3, [sl]
 8014be4:	89a3      	ldrh	r3, [r4, #12]
 8014be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014bea:	81a3      	strh	r3, [r4, #12]
 8014bec:	f04f 30ff 	mov.w	r0, #4294967295
 8014bf0:	e7e9      	b.n	8014bc6 <__ssputs_r+0x8a>
	...

08014bf4 <_svfiprintf_r>:
 8014bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bf8:	4698      	mov	r8, r3
 8014bfa:	898b      	ldrh	r3, [r1, #12]
 8014bfc:	061b      	lsls	r3, r3, #24
 8014bfe:	b09d      	sub	sp, #116	@ 0x74
 8014c00:	4607      	mov	r7, r0
 8014c02:	460d      	mov	r5, r1
 8014c04:	4614      	mov	r4, r2
 8014c06:	d510      	bpl.n	8014c2a <_svfiprintf_r+0x36>
 8014c08:	690b      	ldr	r3, [r1, #16]
 8014c0a:	b973      	cbnz	r3, 8014c2a <_svfiprintf_r+0x36>
 8014c0c:	2140      	movs	r1, #64	@ 0x40
 8014c0e:	f7ff ff09 	bl	8014a24 <_malloc_r>
 8014c12:	6028      	str	r0, [r5, #0]
 8014c14:	6128      	str	r0, [r5, #16]
 8014c16:	b930      	cbnz	r0, 8014c26 <_svfiprintf_r+0x32>
 8014c18:	230c      	movs	r3, #12
 8014c1a:	603b      	str	r3, [r7, #0]
 8014c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c20:	b01d      	add	sp, #116	@ 0x74
 8014c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c26:	2340      	movs	r3, #64	@ 0x40
 8014c28:	616b      	str	r3, [r5, #20]
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c2e:	2320      	movs	r3, #32
 8014c30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c38:	2330      	movs	r3, #48	@ 0x30
 8014c3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014dd8 <_svfiprintf_r+0x1e4>
 8014c3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014c42:	f04f 0901 	mov.w	r9, #1
 8014c46:	4623      	mov	r3, r4
 8014c48:	469a      	mov	sl, r3
 8014c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c4e:	b10a      	cbz	r2, 8014c54 <_svfiprintf_r+0x60>
 8014c50:	2a25      	cmp	r2, #37	@ 0x25
 8014c52:	d1f9      	bne.n	8014c48 <_svfiprintf_r+0x54>
 8014c54:	ebba 0b04 	subs.w	fp, sl, r4
 8014c58:	d00b      	beq.n	8014c72 <_svfiprintf_r+0x7e>
 8014c5a:	465b      	mov	r3, fp
 8014c5c:	4622      	mov	r2, r4
 8014c5e:	4629      	mov	r1, r5
 8014c60:	4638      	mov	r0, r7
 8014c62:	f7ff ff6b 	bl	8014b3c <__ssputs_r>
 8014c66:	3001      	adds	r0, #1
 8014c68:	f000 80a7 	beq.w	8014dba <_svfiprintf_r+0x1c6>
 8014c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014c6e:	445a      	add	r2, fp
 8014c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8014c72:	f89a 3000 	ldrb.w	r3, [sl]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	f000 809f 	beq.w	8014dba <_svfiprintf_r+0x1c6>
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8014c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c86:	f10a 0a01 	add.w	sl, sl, #1
 8014c8a:	9304      	str	r3, [sp, #16]
 8014c8c:	9307      	str	r3, [sp, #28]
 8014c8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014c92:	931a      	str	r3, [sp, #104]	@ 0x68
 8014c94:	4654      	mov	r4, sl
 8014c96:	2205      	movs	r2, #5
 8014c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c9c:	484e      	ldr	r0, [pc, #312]	@ (8014dd8 <_svfiprintf_r+0x1e4>)
 8014c9e:	f7eb fab7 	bl	8000210 <memchr>
 8014ca2:	9a04      	ldr	r2, [sp, #16]
 8014ca4:	b9d8      	cbnz	r0, 8014cde <_svfiprintf_r+0xea>
 8014ca6:	06d0      	lsls	r0, r2, #27
 8014ca8:	bf44      	itt	mi
 8014caa:	2320      	movmi	r3, #32
 8014cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014cb0:	0711      	lsls	r1, r2, #28
 8014cb2:	bf44      	itt	mi
 8014cb4:	232b      	movmi	r3, #43	@ 0x2b
 8014cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014cba:	f89a 3000 	ldrb.w	r3, [sl]
 8014cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8014cc0:	d015      	beq.n	8014cee <_svfiprintf_r+0xfa>
 8014cc2:	9a07      	ldr	r2, [sp, #28]
 8014cc4:	4654      	mov	r4, sl
 8014cc6:	2000      	movs	r0, #0
 8014cc8:	f04f 0c0a 	mov.w	ip, #10
 8014ccc:	4621      	mov	r1, r4
 8014cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014cd2:	3b30      	subs	r3, #48	@ 0x30
 8014cd4:	2b09      	cmp	r3, #9
 8014cd6:	d94b      	bls.n	8014d70 <_svfiprintf_r+0x17c>
 8014cd8:	b1b0      	cbz	r0, 8014d08 <_svfiprintf_r+0x114>
 8014cda:	9207      	str	r2, [sp, #28]
 8014cdc:	e014      	b.n	8014d08 <_svfiprintf_r+0x114>
 8014cde:	eba0 0308 	sub.w	r3, r0, r8
 8014ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8014ce6:	4313      	orrs	r3, r2
 8014ce8:	9304      	str	r3, [sp, #16]
 8014cea:	46a2      	mov	sl, r4
 8014cec:	e7d2      	b.n	8014c94 <_svfiprintf_r+0xa0>
 8014cee:	9b03      	ldr	r3, [sp, #12]
 8014cf0:	1d19      	adds	r1, r3, #4
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	9103      	str	r1, [sp, #12]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	bfbb      	ittet	lt
 8014cfa:	425b      	neglt	r3, r3
 8014cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8014d00:	9307      	strge	r3, [sp, #28]
 8014d02:	9307      	strlt	r3, [sp, #28]
 8014d04:	bfb8      	it	lt
 8014d06:	9204      	strlt	r2, [sp, #16]
 8014d08:	7823      	ldrb	r3, [r4, #0]
 8014d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8014d0c:	d10a      	bne.n	8014d24 <_svfiprintf_r+0x130>
 8014d0e:	7863      	ldrb	r3, [r4, #1]
 8014d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8014d12:	d132      	bne.n	8014d7a <_svfiprintf_r+0x186>
 8014d14:	9b03      	ldr	r3, [sp, #12]
 8014d16:	1d1a      	adds	r2, r3, #4
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	9203      	str	r2, [sp, #12]
 8014d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014d20:	3402      	adds	r4, #2
 8014d22:	9305      	str	r3, [sp, #20]
 8014d24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014de8 <_svfiprintf_r+0x1f4>
 8014d28:	7821      	ldrb	r1, [r4, #0]
 8014d2a:	2203      	movs	r2, #3
 8014d2c:	4650      	mov	r0, sl
 8014d2e:	f7eb fa6f 	bl	8000210 <memchr>
 8014d32:	b138      	cbz	r0, 8014d44 <_svfiprintf_r+0x150>
 8014d34:	9b04      	ldr	r3, [sp, #16]
 8014d36:	eba0 000a 	sub.w	r0, r0, sl
 8014d3a:	2240      	movs	r2, #64	@ 0x40
 8014d3c:	4082      	lsls	r2, r0
 8014d3e:	4313      	orrs	r3, r2
 8014d40:	3401      	adds	r4, #1
 8014d42:	9304      	str	r3, [sp, #16]
 8014d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d48:	4824      	ldr	r0, [pc, #144]	@ (8014ddc <_svfiprintf_r+0x1e8>)
 8014d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014d4e:	2206      	movs	r2, #6
 8014d50:	f7eb fa5e 	bl	8000210 <memchr>
 8014d54:	2800      	cmp	r0, #0
 8014d56:	d036      	beq.n	8014dc6 <_svfiprintf_r+0x1d2>
 8014d58:	4b21      	ldr	r3, [pc, #132]	@ (8014de0 <_svfiprintf_r+0x1ec>)
 8014d5a:	bb1b      	cbnz	r3, 8014da4 <_svfiprintf_r+0x1b0>
 8014d5c:	9b03      	ldr	r3, [sp, #12]
 8014d5e:	3307      	adds	r3, #7
 8014d60:	f023 0307 	bic.w	r3, r3, #7
 8014d64:	3308      	adds	r3, #8
 8014d66:	9303      	str	r3, [sp, #12]
 8014d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d6a:	4433      	add	r3, r6
 8014d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d6e:	e76a      	b.n	8014c46 <_svfiprintf_r+0x52>
 8014d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d74:	460c      	mov	r4, r1
 8014d76:	2001      	movs	r0, #1
 8014d78:	e7a8      	b.n	8014ccc <_svfiprintf_r+0xd8>
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	3401      	adds	r4, #1
 8014d7e:	9305      	str	r3, [sp, #20]
 8014d80:	4619      	mov	r1, r3
 8014d82:	f04f 0c0a 	mov.w	ip, #10
 8014d86:	4620      	mov	r0, r4
 8014d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d8c:	3a30      	subs	r2, #48	@ 0x30
 8014d8e:	2a09      	cmp	r2, #9
 8014d90:	d903      	bls.n	8014d9a <_svfiprintf_r+0x1a6>
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d0c6      	beq.n	8014d24 <_svfiprintf_r+0x130>
 8014d96:	9105      	str	r1, [sp, #20]
 8014d98:	e7c4      	b.n	8014d24 <_svfiprintf_r+0x130>
 8014d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d9e:	4604      	mov	r4, r0
 8014da0:	2301      	movs	r3, #1
 8014da2:	e7f0      	b.n	8014d86 <_svfiprintf_r+0x192>
 8014da4:	ab03      	add	r3, sp, #12
 8014da6:	9300      	str	r3, [sp, #0]
 8014da8:	462a      	mov	r2, r5
 8014daa:	4b0e      	ldr	r3, [pc, #56]	@ (8014de4 <_svfiprintf_r+0x1f0>)
 8014dac:	a904      	add	r1, sp, #16
 8014dae:	4638      	mov	r0, r7
 8014db0:	f3af 8000 	nop.w
 8014db4:	1c42      	adds	r2, r0, #1
 8014db6:	4606      	mov	r6, r0
 8014db8:	d1d6      	bne.n	8014d68 <_svfiprintf_r+0x174>
 8014dba:	89ab      	ldrh	r3, [r5, #12]
 8014dbc:	065b      	lsls	r3, r3, #25
 8014dbe:	f53f af2d 	bmi.w	8014c1c <_svfiprintf_r+0x28>
 8014dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014dc4:	e72c      	b.n	8014c20 <_svfiprintf_r+0x2c>
 8014dc6:	ab03      	add	r3, sp, #12
 8014dc8:	9300      	str	r3, [sp, #0]
 8014dca:	462a      	mov	r2, r5
 8014dcc:	4b05      	ldr	r3, [pc, #20]	@ (8014de4 <_svfiprintf_r+0x1f0>)
 8014dce:	a904      	add	r1, sp, #16
 8014dd0:	4638      	mov	r0, r7
 8014dd2:	f000 f9bb 	bl	801514c <_printf_i>
 8014dd6:	e7ed      	b.n	8014db4 <_svfiprintf_r+0x1c0>
 8014dd8:	080160f4 	.word	0x080160f4
 8014ddc:	080160fe 	.word	0x080160fe
 8014de0:	00000000 	.word	0x00000000
 8014de4:	08014b3d 	.word	0x08014b3d
 8014de8:	080160fa 	.word	0x080160fa

08014dec <__sfputc_r>:
 8014dec:	6893      	ldr	r3, [r2, #8]
 8014dee:	3b01      	subs	r3, #1
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	b410      	push	{r4}
 8014df4:	6093      	str	r3, [r2, #8]
 8014df6:	da08      	bge.n	8014e0a <__sfputc_r+0x1e>
 8014df8:	6994      	ldr	r4, [r2, #24]
 8014dfa:	42a3      	cmp	r3, r4
 8014dfc:	db01      	blt.n	8014e02 <__sfputc_r+0x16>
 8014dfe:	290a      	cmp	r1, #10
 8014e00:	d103      	bne.n	8014e0a <__sfputc_r+0x1e>
 8014e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e06:	f7ff bc2c 	b.w	8014662 <__swbuf_r>
 8014e0a:	6813      	ldr	r3, [r2, #0]
 8014e0c:	1c58      	adds	r0, r3, #1
 8014e0e:	6010      	str	r0, [r2, #0]
 8014e10:	7019      	strb	r1, [r3, #0]
 8014e12:	4608      	mov	r0, r1
 8014e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e18:	4770      	bx	lr

08014e1a <__sfputs_r>:
 8014e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e1c:	4606      	mov	r6, r0
 8014e1e:	460f      	mov	r7, r1
 8014e20:	4614      	mov	r4, r2
 8014e22:	18d5      	adds	r5, r2, r3
 8014e24:	42ac      	cmp	r4, r5
 8014e26:	d101      	bne.n	8014e2c <__sfputs_r+0x12>
 8014e28:	2000      	movs	r0, #0
 8014e2a:	e007      	b.n	8014e3c <__sfputs_r+0x22>
 8014e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e30:	463a      	mov	r2, r7
 8014e32:	4630      	mov	r0, r6
 8014e34:	f7ff ffda 	bl	8014dec <__sfputc_r>
 8014e38:	1c43      	adds	r3, r0, #1
 8014e3a:	d1f3      	bne.n	8014e24 <__sfputs_r+0xa>
 8014e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014e40 <_vfiprintf_r>:
 8014e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e44:	460d      	mov	r5, r1
 8014e46:	b09d      	sub	sp, #116	@ 0x74
 8014e48:	4614      	mov	r4, r2
 8014e4a:	4698      	mov	r8, r3
 8014e4c:	4606      	mov	r6, r0
 8014e4e:	b118      	cbz	r0, 8014e58 <_vfiprintf_r+0x18>
 8014e50:	6a03      	ldr	r3, [r0, #32]
 8014e52:	b90b      	cbnz	r3, 8014e58 <_vfiprintf_r+0x18>
 8014e54:	f7ff fafc 	bl	8014450 <__sinit>
 8014e58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014e5a:	07d9      	lsls	r1, r3, #31
 8014e5c:	d405      	bmi.n	8014e6a <_vfiprintf_r+0x2a>
 8014e5e:	89ab      	ldrh	r3, [r5, #12]
 8014e60:	059a      	lsls	r2, r3, #22
 8014e62:	d402      	bmi.n	8014e6a <_vfiprintf_r+0x2a>
 8014e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014e66:	f7ff fd60 	bl	801492a <__retarget_lock_acquire_recursive>
 8014e6a:	89ab      	ldrh	r3, [r5, #12]
 8014e6c:	071b      	lsls	r3, r3, #28
 8014e6e:	d501      	bpl.n	8014e74 <_vfiprintf_r+0x34>
 8014e70:	692b      	ldr	r3, [r5, #16]
 8014e72:	b99b      	cbnz	r3, 8014e9c <_vfiprintf_r+0x5c>
 8014e74:	4629      	mov	r1, r5
 8014e76:	4630      	mov	r0, r6
 8014e78:	f7ff fc32 	bl	80146e0 <__swsetup_r>
 8014e7c:	b170      	cbz	r0, 8014e9c <_vfiprintf_r+0x5c>
 8014e7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014e80:	07dc      	lsls	r4, r3, #31
 8014e82:	d504      	bpl.n	8014e8e <_vfiprintf_r+0x4e>
 8014e84:	f04f 30ff 	mov.w	r0, #4294967295
 8014e88:	b01d      	add	sp, #116	@ 0x74
 8014e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e8e:	89ab      	ldrh	r3, [r5, #12]
 8014e90:	0598      	lsls	r0, r3, #22
 8014e92:	d4f7      	bmi.n	8014e84 <_vfiprintf_r+0x44>
 8014e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014e96:	f7ff fd49 	bl	801492c <__retarget_lock_release_recursive>
 8014e9a:	e7f3      	b.n	8014e84 <_vfiprintf_r+0x44>
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ea0:	2320      	movs	r3, #32
 8014ea2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014eaa:	2330      	movs	r3, #48	@ 0x30
 8014eac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801505c <_vfiprintf_r+0x21c>
 8014eb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014eb4:	f04f 0901 	mov.w	r9, #1
 8014eb8:	4623      	mov	r3, r4
 8014eba:	469a      	mov	sl, r3
 8014ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ec0:	b10a      	cbz	r2, 8014ec6 <_vfiprintf_r+0x86>
 8014ec2:	2a25      	cmp	r2, #37	@ 0x25
 8014ec4:	d1f9      	bne.n	8014eba <_vfiprintf_r+0x7a>
 8014ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8014eca:	d00b      	beq.n	8014ee4 <_vfiprintf_r+0xa4>
 8014ecc:	465b      	mov	r3, fp
 8014ece:	4622      	mov	r2, r4
 8014ed0:	4629      	mov	r1, r5
 8014ed2:	4630      	mov	r0, r6
 8014ed4:	f7ff ffa1 	bl	8014e1a <__sfputs_r>
 8014ed8:	3001      	adds	r0, #1
 8014eda:	f000 80a7 	beq.w	801502c <_vfiprintf_r+0x1ec>
 8014ede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ee0:	445a      	add	r2, fp
 8014ee2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	f000 809f 	beq.w	801502c <_vfiprintf_r+0x1ec>
 8014eee:	2300      	movs	r3, #0
 8014ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8014ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ef8:	f10a 0a01 	add.w	sl, sl, #1
 8014efc:	9304      	str	r3, [sp, #16]
 8014efe:	9307      	str	r3, [sp, #28]
 8014f00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014f04:	931a      	str	r3, [sp, #104]	@ 0x68
 8014f06:	4654      	mov	r4, sl
 8014f08:	2205      	movs	r2, #5
 8014f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f0e:	4853      	ldr	r0, [pc, #332]	@ (801505c <_vfiprintf_r+0x21c>)
 8014f10:	f7eb f97e 	bl	8000210 <memchr>
 8014f14:	9a04      	ldr	r2, [sp, #16]
 8014f16:	b9d8      	cbnz	r0, 8014f50 <_vfiprintf_r+0x110>
 8014f18:	06d1      	lsls	r1, r2, #27
 8014f1a:	bf44      	itt	mi
 8014f1c:	2320      	movmi	r3, #32
 8014f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014f22:	0713      	lsls	r3, r2, #28
 8014f24:	bf44      	itt	mi
 8014f26:	232b      	movmi	r3, #43	@ 0x2b
 8014f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8014f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8014f32:	d015      	beq.n	8014f60 <_vfiprintf_r+0x120>
 8014f34:	9a07      	ldr	r2, [sp, #28]
 8014f36:	4654      	mov	r4, sl
 8014f38:	2000      	movs	r0, #0
 8014f3a:	f04f 0c0a 	mov.w	ip, #10
 8014f3e:	4621      	mov	r1, r4
 8014f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f44:	3b30      	subs	r3, #48	@ 0x30
 8014f46:	2b09      	cmp	r3, #9
 8014f48:	d94b      	bls.n	8014fe2 <_vfiprintf_r+0x1a2>
 8014f4a:	b1b0      	cbz	r0, 8014f7a <_vfiprintf_r+0x13a>
 8014f4c:	9207      	str	r2, [sp, #28]
 8014f4e:	e014      	b.n	8014f7a <_vfiprintf_r+0x13a>
 8014f50:	eba0 0308 	sub.w	r3, r0, r8
 8014f54:	fa09 f303 	lsl.w	r3, r9, r3
 8014f58:	4313      	orrs	r3, r2
 8014f5a:	9304      	str	r3, [sp, #16]
 8014f5c:	46a2      	mov	sl, r4
 8014f5e:	e7d2      	b.n	8014f06 <_vfiprintf_r+0xc6>
 8014f60:	9b03      	ldr	r3, [sp, #12]
 8014f62:	1d19      	adds	r1, r3, #4
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	9103      	str	r1, [sp, #12]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	bfbb      	ittet	lt
 8014f6c:	425b      	neglt	r3, r3
 8014f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8014f72:	9307      	strge	r3, [sp, #28]
 8014f74:	9307      	strlt	r3, [sp, #28]
 8014f76:	bfb8      	it	lt
 8014f78:	9204      	strlt	r2, [sp, #16]
 8014f7a:	7823      	ldrb	r3, [r4, #0]
 8014f7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8014f7e:	d10a      	bne.n	8014f96 <_vfiprintf_r+0x156>
 8014f80:	7863      	ldrb	r3, [r4, #1]
 8014f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8014f84:	d132      	bne.n	8014fec <_vfiprintf_r+0x1ac>
 8014f86:	9b03      	ldr	r3, [sp, #12]
 8014f88:	1d1a      	adds	r2, r3, #4
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	9203      	str	r2, [sp, #12]
 8014f8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014f92:	3402      	adds	r4, #2
 8014f94:	9305      	str	r3, [sp, #20]
 8014f96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801506c <_vfiprintf_r+0x22c>
 8014f9a:	7821      	ldrb	r1, [r4, #0]
 8014f9c:	2203      	movs	r2, #3
 8014f9e:	4650      	mov	r0, sl
 8014fa0:	f7eb f936 	bl	8000210 <memchr>
 8014fa4:	b138      	cbz	r0, 8014fb6 <_vfiprintf_r+0x176>
 8014fa6:	9b04      	ldr	r3, [sp, #16]
 8014fa8:	eba0 000a 	sub.w	r0, r0, sl
 8014fac:	2240      	movs	r2, #64	@ 0x40
 8014fae:	4082      	lsls	r2, r0
 8014fb0:	4313      	orrs	r3, r2
 8014fb2:	3401      	adds	r4, #1
 8014fb4:	9304      	str	r3, [sp, #16]
 8014fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fba:	4829      	ldr	r0, [pc, #164]	@ (8015060 <_vfiprintf_r+0x220>)
 8014fbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014fc0:	2206      	movs	r2, #6
 8014fc2:	f7eb f925 	bl	8000210 <memchr>
 8014fc6:	2800      	cmp	r0, #0
 8014fc8:	d03f      	beq.n	801504a <_vfiprintf_r+0x20a>
 8014fca:	4b26      	ldr	r3, [pc, #152]	@ (8015064 <_vfiprintf_r+0x224>)
 8014fcc:	bb1b      	cbnz	r3, 8015016 <_vfiprintf_r+0x1d6>
 8014fce:	9b03      	ldr	r3, [sp, #12]
 8014fd0:	3307      	adds	r3, #7
 8014fd2:	f023 0307 	bic.w	r3, r3, #7
 8014fd6:	3308      	adds	r3, #8
 8014fd8:	9303      	str	r3, [sp, #12]
 8014fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014fdc:	443b      	add	r3, r7
 8014fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fe0:	e76a      	b.n	8014eb8 <_vfiprintf_r+0x78>
 8014fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014fe6:	460c      	mov	r4, r1
 8014fe8:	2001      	movs	r0, #1
 8014fea:	e7a8      	b.n	8014f3e <_vfiprintf_r+0xfe>
 8014fec:	2300      	movs	r3, #0
 8014fee:	3401      	adds	r4, #1
 8014ff0:	9305      	str	r3, [sp, #20]
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	f04f 0c0a 	mov.w	ip, #10
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ffe:	3a30      	subs	r2, #48	@ 0x30
 8015000:	2a09      	cmp	r2, #9
 8015002:	d903      	bls.n	801500c <_vfiprintf_r+0x1cc>
 8015004:	2b00      	cmp	r3, #0
 8015006:	d0c6      	beq.n	8014f96 <_vfiprintf_r+0x156>
 8015008:	9105      	str	r1, [sp, #20]
 801500a:	e7c4      	b.n	8014f96 <_vfiprintf_r+0x156>
 801500c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015010:	4604      	mov	r4, r0
 8015012:	2301      	movs	r3, #1
 8015014:	e7f0      	b.n	8014ff8 <_vfiprintf_r+0x1b8>
 8015016:	ab03      	add	r3, sp, #12
 8015018:	9300      	str	r3, [sp, #0]
 801501a:	462a      	mov	r2, r5
 801501c:	4b12      	ldr	r3, [pc, #72]	@ (8015068 <_vfiprintf_r+0x228>)
 801501e:	a904      	add	r1, sp, #16
 8015020:	4630      	mov	r0, r6
 8015022:	f3af 8000 	nop.w
 8015026:	4607      	mov	r7, r0
 8015028:	1c78      	adds	r0, r7, #1
 801502a:	d1d6      	bne.n	8014fda <_vfiprintf_r+0x19a>
 801502c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801502e:	07d9      	lsls	r1, r3, #31
 8015030:	d405      	bmi.n	801503e <_vfiprintf_r+0x1fe>
 8015032:	89ab      	ldrh	r3, [r5, #12]
 8015034:	059a      	lsls	r2, r3, #22
 8015036:	d402      	bmi.n	801503e <_vfiprintf_r+0x1fe>
 8015038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801503a:	f7ff fc77 	bl	801492c <__retarget_lock_release_recursive>
 801503e:	89ab      	ldrh	r3, [r5, #12]
 8015040:	065b      	lsls	r3, r3, #25
 8015042:	f53f af1f 	bmi.w	8014e84 <_vfiprintf_r+0x44>
 8015046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015048:	e71e      	b.n	8014e88 <_vfiprintf_r+0x48>
 801504a:	ab03      	add	r3, sp, #12
 801504c:	9300      	str	r3, [sp, #0]
 801504e:	462a      	mov	r2, r5
 8015050:	4b05      	ldr	r3, [pc, #20]	@ (8015068 <_vfiprintf_r+0x228>)
 8015052:	a904      	add	r1, sp, #16
 8015054:	4630      	mov	r0, r6
 8015056:	f000 f879 	bl	801514c <_printf_i>
 801505a:	e7e4      	b.n	8015026 <_vfiprintf_r+0x1e6>
 801505c:	080160f4 	.word	0x080160f4
 8015060:	080160fe 	.word	0x080160fe
 8015064:	00000000 	.word	0x00000000
 8015068:	08014e1b 	.word	0x08014e1b
 801506c:	080160fa 	.word	0x080160fa

08015070 <_printf_common>:
 8015070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015074:	4616      	mov	r6, r2
 8015076:	4698      	mov	r8, r3
 8015078:	688a      	ldr	r2, [r1, #8]
 801507a:	690b      	ldr	r3, [r1, #16]
 801507c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015080:	4293      	cmp	r3, r2
 8015082:	bfb8      	it	lt
 8015084:	4613      	movlt	r3, r2
 8015086:	6033      	str	r3, [r6, #0]
 8015088:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801508c:	4607      	mov	r7, r0
 801508e:	460c      	mov	r4, r1
 8015090:	b10a      	cbz	r2, 8015096 <_printf_common+0x26>
 8015092:	3301      	adds	r3, #1
 8015094:	6033      	str	r3, [r6, #0]
 8015096:	6823      	ldr	r3, [r4, #0]
 8015098:	0699      	lsls	r1, r3, #26
 801509a:	bf42      	ittt	mi
 801509c:	6833      	ldrmi	r3, [r6, #0]
 801509e:	3302      	addmi	r3, #2
 80150a0:	6033      	strmi	r3, [r6, #0]
 80150a2:	6825      	ldr	r5, [r4, #0]
 80150a4:	f015 0506 	ands.w	r5, r5, #6
 80150a8:	d106      	bne.n	80150b8 <_printf_common+0x48>
 80150aa:	f104 0a19 	add.w	sl, r4, #25
 80150ae:	68e3      	ldr	r3, [r4, #12]
 80150b0:	6832      	ldr	r2, [r6, #0]
 80150b2:	1a9b      	subs	r3, r3, r2
 80150b4:	42ab      	cmp	r3, r5
 80150b6:	dc26      	bgt.n	8015106 <_printf_common+0x96>
 80150b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80150bc:	6822      	ldr	r2, [r4, #0]
 80150be:	3b00      	subs	r3, #0
 80150c0:	bf18      	it	ne
 80150c2:	2301      	movne	r3, #1
 80150c4:	0692      	lsls	r2, r2, #26
 80150c6:	d42b      	bmi.n	8015120 <_printf_common+0xb0>
 80150c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80150cc:	4641      	mov	r1, r8
 80150ce:	4638      	mov	r0, r7
 80150d0:	47c8      	blx	r9
 80150d2:	3001      	adds	r0, #1
 80150d4:	d01e      	beq.n	8015114 <_printf_common+0xa4>
 80150d6:	6823      	ldr	r3, [r4, #0]
 80150d8:	6922      	ldr	r2, [r4, #16]
 80150da:	f003 0306 	and.w	r3, r3, #6
 80150de:	2b04      	cmp	r3, #4
 80150e0:	bf02      	ittt	eq
 80150e2:	68e5      	ldreq	r5, [r4, #12]
 80150e4:	6833      	ldreq	r3, [r6, #0]
 80150e6:	1aed      	subeq	r5, r5, r3
 80150e8:	68a3      	ldr	r3, [r4, #8]
 80150ea:	bf0c      	ite	eq
 80150ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80150f0:	2500      	movne	r5, #0
 80150f2:	4293      	cmp	r3, r2
 80150f4:	bfc4      	itt	gt
 80150f6:	1a9b      	subgt	r3, r3, r2
 80150f8:	18ed      	addgt	r5, r5, r3
 80150fa:	2600      	movs	r6, #0
 80150fc:	341a      	adds	r4, #26
 80150fe:	42b5      	cmp	r5, r6
 8015100:	d11a      	bne.n	8015138 <_printf_common+0xc8>
 8015102:	2000      	movs	r0, #0
 8015104:	e008      	b.n	8015118 <_printf_common+0xa8>
 8015106:	2301      	movs	r3, #1
 8015108:	4652      	mov	r2, sl
 801510a:	4641      	mov	r1, r8
 801510c:	4638      	mov	r0, r7
 801510e:	47c8      	blx	r9
 8015110:	3001      	adds	r0, #1
 8015112:	d103      	bne.n	801511c <_printf_common+0xac>
 8015114:	f04f 30ff 	mov.w	r0, #4294967295
 8015118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801511c:	3501      	adds	r5, #1
 801511e:	e7c6      	b.n	80150ae <_printf_common+0x3e>
 8015120:	18e1      	adds	r1, r4, r3
 8015122:	1c5a      	adds	r2, r3, #1
 8015124:	2030      	movs	r0, #48	@ 0x30
 8015126:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801512a:	4422      	add	r2, r4
 801512c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015130:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015134:	3302      	adds	r3, #2
 8015136:	e7c7      	b.n	80150c8 <_printf_common+0x58>
 8015138:	2301      	movs	r3, #1
 801513a:	4622      	mov	r2, r4
 801513c:	4641      	mov	r1, r8
 801513e:	4638      	mov	r0, r7
 8015140:	47c8      	blx	r9
 8015142:	3001      	adds	r0, #1
 8015144:	d0e6      	beq.n	8015114 <_printf_common+0xa4>
 8015146:	3601      	adds	r6, #1
 8015148:	e7d9      	b.n	80150fe <_printf_common+0x8e>
	...

0801514c <_printf_i>:
 801514c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015150:	7e0f      	ldrb	r7, [r1, #24]
 8015152:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015154:	2f78      	cmp	r7, #120	@ 0x78
 8015156:	4691      	mov	r9, r2
 8015158:	4680      	mov	r8, r0
 801515a:	460c      	mov	r4, r1
 801515c:	469a      	mov	sl, r3
 801515e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015162:	d807      	bhi.n	8015174 <_printf_i+0x28>
 8015164:	2f62      	cmp	r7, #98	@ 0x62
 8015166:	d80a      	bhi.n	801517e <_printf_i+0x32>
 8015168:	2f00      	cmp	r7, #0
 801516a:	f000 80d2 	beq.w	8015312 <_printf_i+0x1c6>
 801516e:	2f58      	cmp	r7, #88	@ 0x58
 8015170:	f000 80b9 	beq.w	80152e6 <_printf_i+0x19a>
 8015174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015178:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801517c:	e03a      	b.n	80151f4 <_printf_i+0xa8>
 801517e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015182:	2b15      	cmp	r3, #21
 8015184:	d8f6      	bhi.n	8015174 <_printf_i+0x28>
 8015186:	a101      	add	r1, pc, #4	@ (adr r1, 801518c <_printf_i+0x40>)
 8015188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801518c:	080151e5 	.word	0x080151e5
 8015190:	080151f9 	.word	0x080151f9
 8015194:	08015175 	.word	0x08015175
 8015198:	08015175 	.word	0x08015175
 801519c:	08015175 	.word	0x08015175
 80151a0:	08015175 	.word	0x08015175
 80151a4:	080151f9 	.word	0x080151f9
 80151a8:	08015175 	.word	0x08015175
 80151ac:	08015175 	.word	0x08015175
 80151b0:	08015175 	.word	0x08015175
 80151b4:	08015175 	.word	0x08015175
 80151b8:	080152f9 	.word	0x080152f9
 80151bc:	08015223 	.word	0x08015223
 80151c0:	080152b3 	.word	0x080152b3
 80151c4:	08015175 	.word	0x08015175
 80151c8:	08015175 	.word	0x08015175
 80151cc:	0801531b 	.word	0x0801531b
 80151d0:	08015175 	.word	0x08015175
 80151d4:	08015223 	.word	0x08015223
 80151d8:	08015175 	.word	0x08015175
 80151dc:	08015175 	.word	0x08015175
 80151e0:	080152bb 	.word	0x080152bb
 80151e4:	6833      	ldr	r3, [r6, #0]
 80151e6:	1d1a      	adds	r2, r3, #4
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	6032      	str	r2, [r6, #0]
 80151ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80151f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80151f4:	2301      	movs	r3, #1
 80151f6:	e09d      	b.n	8015334 <_printf_i+0x1e8>
 80151f8:	6833      	ldr	r3, [r6, #0]
 80151fa:	6820      	ldr	r0, [r4, #0]
 80151fc:	1d19      	adds	r1, r3, #4
 80151fe:	6031      	str	r1, [r6, #0]
 8015200:	0606      	lsls	r6, r0, #24
 8015202:	d501      	bpl.n	8015208 <_printf_i+0xbc>
 8015204:	681d      	ldr	r5, [r3, #0]
 8015206:	e003      	b.n	8015210 <_printf_i+0xc4>
 8015208:	0645      	lsls	r5, r0, #25
 801520a:	d5fb      	bpl.n	8015204 <_printf_i+0xb8>
 801520c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015210:	2d00      	cmp	r5, #0
 8015212:	da03      	bge.n	801521c <_printf_i+0xd0>
 8015214:	232d      	movs	r3, #45	@ 0x2d
 8015216:	426d      	negs	r5, r5
 8015218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801521c:	4859      	ldr	r0, [pc, #356]	@ (8015384 <_printf_i+0x238>)
 801521e:	230a      	movs	r3, #10
 8015220:	e011      	b.n	8015246 <_printf_i+0xfa>
 8015222:	6821      	ldr	r1, [r4, #0]
 8015224:	6833      	ldr	r3, [r6, #0]
 8015226:	0608      	lsls	r0, r1, #24
 8015228:	f853 5b04 	ldr.w	r5, [r3], #4
 801522c:	d402      	bmi.n	8015234 <_printf_i+0xe8>
 801522e:	0649      	lsls	r1, r1, #25
 8015230:	bf48      	it	mi
 8015232:	b2ad      	uxthmi	r5, r5
 8015234:	2f6f      	cmp	r7, #111	@ 0x6f
 8015236:	4853      	ldr	r0, [pc, #332]	@ (8015384 <_printf_i+0x238>)
 8015238:	6033      	str	r3, [r6, #0]
 801523a:	bf14      	ite	ne
 801523c:	230a      	movne	r3, #10
 801523e:	2308      	moveq	r3, #8
 8015240:	2100      	movs	r1, #0
 8015242:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015246:	6866      	ldr	r6, [r4, #4]
 8015248:	60a6      	str	r6, [r4, #8]
 801524a:	2e00      	cmp	r6, #0
 801524c:	bfa2      	ittt	ge
 801524e:	6821      	ldrge	r1, [r4, #0]
 8015250:	f021 0104 	bicge.w	r1, r1, #4
 8015254:	6021      	strge	r1, [r4, #0]
 8015256:	b90d      	cbnz	r5, 801525c <_printf_i+0x110>
 8015258:	2e00      	cmp	r6, #0
 801525a:	d04b      	beq.n	80152f4 <_printf_i+0x1a8>
 801525c:	4616      	mov	r6, r2
 801525e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015262:	fb03 5711 	mls	r7, r3, r1, r5
 8015266:	5dc7      	ldrb	r7, [r0, r7]
 8015268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801526c:	462f      	mov	r7, r5
 801526e:	42bb      	cmp	r3, r7
 8015270:	460d      	mov	r5, r1
 8015272:	d9f4      	bls.n	801525e <_printf_i+0x112>
 8015274:	2b08      	cmp	r3, #8
 8015276:	d10b      	bne.n	8015290 <_printf_i+0x144>
 8015278:	6823      	ldr	r3, [r4, #0]
 801527a:	07df      	lsls	r7, r3, #31
 801527c:	d508      	bpl.n	8015290 <_printf_i+0x144>
 801527e:	6923      	ldr	r3, [r4, #16]
 8015280:	6861      	ldr	r1, [r4, #4]
 8015282:	4299      	cmp	r1, r3
 8015284:	bfde      	ittt	le
 8015286:	2330      	movle	r3, #48	@ 0x30
 8015288:	f806 3c01 	strble.w	r3, [r6, #-1]
 801528c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015290:	1b92      	subs	r2, r2, r6
 8015292:	6122      	str	r2, [r4, #16]
 8015294:	f8cd a000 	str.w	sl, [sp]
 8015298:	464b      	mov	r3, r9
 801529a:	aa03      	add	r2, sp, #12
 801529c:	4621      	mov	r1, r4
 801529e:	4640      	mov	r0, r8
 80152a0:	f7ff fee6 	bl	8015070 <_printf_common>
 80152a4:	3001      	adds	r0, #1
 80152a6:	d14a      	bne.n	801533e <_printf_i+0x1f2>
 80152a8:	f04f 30ff 	mov.w	r0, #4294967295
 80152ac:	b004      	add	sp, #16
 80152ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152b2:	6823      	ldr	r3, [r4, #0]
 80152b4:	f043 0320 	orr.w	r3, r3, #32
 80152b8:	6023      	str	r3, [r4, #0]
 80152ba:	4833      	ldr	r0, [pc, #204]	@ (8015388 <_printf_i+0x23c>)
 80152bc:	2778      	movs	r7, #120	@ 0x78
 80152be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80152c2:	6823      	ldr	r3, [r4, #0]
 80152c4:	6831      	ldr	r1, [r6, #0]
 80152c6:	061f      	lsls	r7, r3, #24
 80152c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80152cc:	d402      	bmi.n	80152d4 <_printf_i+0x188>
 80152ce:	065f      	lsls	r7, r3, #25
 80152d0:	bf48      	it	mi
 80152d2:	b2ad      	uxthmi	r5, r5
 80152d4:	6031      	str	r1, [r6, #0]
 80152d6:	07d9      	lsls	r1, r3, #31
 80152d8:	bf44      	itt	mi
 80152da:	f043 0320 	orrmi.w	r3, r3, #32
 80152de:	6023      	strmi	r3, [r4, #0]
 80152e0:	b11d      	cbz	r5, 80152ea <_printf_i+0x19e>
 80152e2:	2310      	movs	r3, #16
 80152e4:	e7ac      	b.n	8015240 <_printf_i+0xf4>
 80152e6:	4827      	ldr	r0, [pc, #156]	@ (8015384 <_printf_i+0x238>)
 80152e8:	e7e9      	b.n	80152be <_printf_i+0x172>
 80152ea:	6823      	ldr	r3, [r4, #0]
 80152ec:	f023 0320 	bic.w	r3, r3, #32
 80152f0:	6023      	str	r3, [r4, #0]
 80152f2:	e7f6      	b.n	80152e2 <_printf_i+0x196>
 80152f4:	4616      	mov	r6, r2
 80152f6:	e7bd      	b.n	8015274 <_printf_i+0x128>
 80152f8:	6833      	ldr	r3, [r6, #0]
 80152fa:	6825      	ldr	r5, [r4, #0]
 80152fc:	6961      	ldr	r1, [r4, #20]
 80152fe:	1d18      	adds	r0, r3, #4
 8015300:	6030      	str	r0, [r6, #0]
 8015302:	062e      	lsls	r6, r5, #24
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	d501      	bpl.n	801530c <_printf_i+0x1c0>
 8015308:	6019      	str	r1, [r3, #0]
 801530a:	e002      	b.n	8015312 <_printf_i+0x1c6>
 801530c:	0668      	lsls	r0, r5, #25
 801530e:	d5fb      	bpl.n	8015308 <_printf_i+0x1bc>
 8015310:	8019      	strh	r1, [r3, #0]
 8015312:	2300      	movs	r3, #0
 8015314:	6123      	str	r3, [r4, #16]
 8015316:	4616      	mov	r6, r2
 8015318:	e7bc      	b.n	8015294 <_printf_i+0x148>
 801531a:	6833      	ldr	r3, [r6, #0]
 801531c:	1d1a      	adds	r2, r3, #4
 801531e:	6032      	str	r2, [r6, #0]
 8015320:	681e      	ldr	r6, [r3, #0]
 8015322:	6862      	ldr	r2, [r4, #4]
 8015324:	2100      	movs	r1, #0
 8015326:	4630      	mov	r0, r6
 8015328:	f7ea ff72 	bl	8000210 <memchr>
 801532c:	b108      	cbz	r0, 8015332 <_printf_i+0x1e6>
 801532e:	1b80      	subs	r0, r0, r6
 8015330:	6060      	str	r0, [r4, #4]
 8015332:	6863      	ldr	r3, [r4, #4]
 8015334:	6123      	str	r3, [r4, #16]
 8015336:	2300      	movs	r3, #0
 8015338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801533c:	e7aa      	b.n	8015294 <_printf_i+0x148>
 801533e:	6923      	ldr	r3, [r4, #16]
 8015340:	4632      	mov	r2, r6
 8015342:	4649      	mov	r1, r9
 8015344:	4640      	mov	r0, r8
 8015346:	47d0      	blx	sl
 8015348:	3001      	adds	r0, #1
 801534a:	d0ad      	beq.n	80152a8 <_printf_i+0x15c>
 801534c:	6823      	ldr	r3, [r4, #0]
 801534e:	079b      	lsls	r3, r3, #30
 8015350:	d413      	bmi.n	801537a <_printf_i+0x22e>
 8015352:	68e0      	ldr	r0, [r4, #12]
 8015354:	9b03      	ldr	r3, [sp, #12]
 8015356:	4298      	cmp	r0, r3
 8015358:	bfb8      	it	lt
 801535a:	4618      	movlt	r0, r3
 801535c:	e7a6      	b.n	80152ac <_printf_i+0x160>
 801535e:	2301      	movs	r3, #1
 8015360:	4632      	mov	r2, r6
 8015362:	4649      	mov	r1, r9
 8015364:	4640      	mov	r0, r8
 8015366:	47d0      	blx	sl
 8015368:	3001      	adds	r0, #1
 801536a:	d09d      	beq.n	80152a8 <_printf_i+0x15c>
 801536c:	3501      	adds	r5, #1
 801536e:	68e3      	ldr	r3, [r4, #12]
 8015370:	9903      	ldr	r1, [sp, #12]
 8015372:	1a5b      	subs	r3, r3, r1
 8015374:	42ab      	cmp	r3, r5
 8015376:	dcf2      	bgt.n	801535e <_printf_i+0x212>
 8015378:	e7eb      	b.n	8015352 <_printf_i+0x206>
 801537a:	2500      	movs	r5, #0
 801537c:	f104 0619 	add.w	r6, r4, #25
 8015380:	e7f5      	b.n	801536e <_printf_i+0x222>
 8015382:	bf00      	nop
 8015384:	08016105 	.word	0x08016105
 8015388:	08016116 	.word	0x08016116

0801538c <__sflush_r>:
 801538c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015394:	0716      	lsls	r6, r2, #28
 8015396:	4605      	mov	r5, r0
 8015398:	460c      	mov	r4, r1
 801539a:	d454      	bmi.n	8015446 <__sflush_r+0xba>
 801539c:	684b      	ldr	r3, [r1, #4]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	dc02      	bgt.n	80153a8 <__sflush_r+0x1c>
 80153a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	dd48      	ble.n	801543a <__sflush_r+0xae>
 80153a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80153aa:	2e00      	cmp	r6, #0
 80153ac:	d045      	beq.n	801543a <__sflush_r+0xae>
 80153ae:	2300      	movs	r3, #0
 80153b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80153b4:	682f      	ldr	r7, [r5, #0]
 80153b6:	6a21      	ldr	r1, [r4, #32]
 80153b8:	602b      	str	r3, [r5, #0]
 80153ba:	d030      	beq.n	801541e <__sflush_r+0x92>
 80153bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80153be:	89a3      	ldrh	r3, [r4, #12]
 80153c0:	0759      	lsls	r1, r3, #29
 80153c2:	d505      	bpl.n	80153d0 <__sflush_r+0x44>
 80153c4:	6863      	ldr	r3, [r4, #4]
 80153c6:	1ad2      	subs	r2, r2, r3
 80153c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80153ca:	b10b      	cbz	r3, 80153d0 <__sflush_r+0x44>
 80153cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80153ce:	1ad2      	subs	r2, r2, r3
 80153d0:	2300      	movs	r3, #0
 80153d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80153d4:	6a21      	ldr	r1, [r4, #32]
 80153d6:	4628      	mov	r0, r5
 80153d8:	47b0      	blx	r6
 80153da:	1c43      	adds	r3, r0, #1
 80153dc:	89a3      	ldrh	r3, [r4, #12]
 80153de:	d106      	bne.n	80153ee <__sflush_r+0x62>
 80153e0:	6829      	ldr	r1, [r5, #0]
 80153e2:	291d      	cmp	r1, #29
 80153e4:	d82b      	bhi.n	801543e <__sflush_r+0xb2>
 80153e6:	4a2a      	ldr	r2, [pc, #168]	@ (8015490 <__sflush_r+0x104>)
 80153e8:	410a      	asrs	r2, r1
 80153ea:	07d6      	lsls	r6, r2, #31
 80153ec:	d427      	bmi.n	801543e <__sflush_r+0xb2>
 80153ee:	2200      	movs	r2, #0
 80153f0:	6062      	str	r2, [r4, #4]
 80153f2:	04d9      	lsls	r1, r3, #19
 80153f4:	6922      	ldr	r2, [r4, #16]
 80153f6:	6022      	str	r2, [r4, #0]
 80153f8:	d504      	bpl.n	8015404 <__sflush_r+0x78>
 80153fa:	1c42      	adds	r2, r0, #1
 80153fc:	d101      	bne.n	8015402 <__sflush_r+0x76>
 80153fe:	682b      	ldr	r3, [r5, #0]
 8015400:	b903      	cbnz	r3, 8015404 <__sflush_r+0x78>
 8015402:	6560      	str	r0, [r4, #84]	@ 0x54
 8015404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015406:	602f      	str	r7, [r5, #0]
 8015408:	b1b9      	cbz	r1, 801543a <__sflush_r+0xae>
 801540a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801540e:	4299      	cmp	r1, r3
 8015410:	d002      	beq.n	8015418 <__sflush_r+0x8c>
 8015412:	4628      	mov	r0, r5
 8015414:	f7ff fa9a 	bl	801494c <_free_r>
 8015418:	2300      	movs	r3, #0
 801541a:	6363      	str	r3, [r4, #52]	@ 0x34
 801541c:	e00d      	b.n	801543a <__sflush_r+0xae>
 801541e:	2301      	movs	r3, #1
 8015420:	4628      	mov	r0, r5
 8015422:	47b0      	blx	r6
 8015424:	4602      	mov	r2, r0
 8015426:	1c50      	adds	r0, r2, #1
 8015428:	d1c9      	bne.n	80153be <__sflush_r+0x32>
 801542a:	682b      	ldr	r3, [r5, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d0c6      	beq.n	80153be <__sflush_r+0x32>
 8015430:	2b1d      	cmp	r3, #29
 8015432:	d001      	beq.n	8015438 <__sflush_r+0xac>
 8015434:	2b16      	cmp	r3, #22
 8015436:	d11e      	bne.n	8015476 <__sflush_r+0xea>
 8015438:	602f      	str	r7, [r5, #0]
 801543a:	2000      	movs	r0, #0
 801543c:	e022      	b.n	8015484 <__sflush_r+0xf8>
 801543e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015442:	b21b      	sxth	r3, r3
 8015444:	e01b      	b.n	801547e <__sflush_r+0xf2>
 8015446:	690f      	ldr	r7, [r1, #16]
 8015448:	2f00      	cmp	r7, #0
 801544a:	d0f6      	beq.n	801543a <__sflush_r+0xae>
 801544c:	0793      	lsls	r3, r2, #30
 801544e:	680e      	ldr	r6, [r1, #0]
 8015450:	bf08      	it	eq
 8015452:	694b      	ldreq	r3, [r1, #20]
 8015454:	600f      	str	r7, [r1, #0]
 8015456:	bf18      	it	ne
 8015458:	2300      	movne	r3, #0
 801545a:	eba6 0807 	sub.w	r8, r6, r7
 801545e:	608b      	str	r3, [r1, #8]
 8015460:	f1b8 0f00 	cmp.w	r8, #0
 8015464:	dde9      	ble.n	801543a <__sflush_r+0xae>
 8015466:	6a21      	ldr	r1, [r4, #32]
 8015468:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801546a:	4643      	mov	r3, r8
 801546c:	463a      	mov	r2, r7
 801546e:	4628      	mov	r0, r5
 8015470:	47b0      	blx	r6
 8015472:	2800      	cmp	r0, #0
 8015474:	dc08      	bgt.n	8015488 <__sflush_r+0xfc>
 8015476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801547a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801547e:	81a3      	strh	r3, [r4, #12]
 8015480:	f04f 30ff 	mov.w	r0, #4294967295
 8015484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015488:	4407      	add	r7, r0
 801548a:	eba8 0800 	sub.w	r8, r8, r0
 801548e:	e7e7      	b.n	8015460 <__sflush_r+0xd4>
 8015490:	dfbffffe 	.word	0xdfbffffe

08015494 <_fflush_r>:
 8015494:	b538      	push	{r3, r4, r5, lr}
 8015496:	690b      	ldr	r3, [r1, #16]
 8015498:	4605      	mov	r5, r0
 801549a:	460c      	mov	r4, r1
 801549c:	b913      	cbnz	r3, 80154a4 <_fflush_r+0x10>
 801549e:	2500      	movs	r5, #0
 80154a0:	4628      	mov	r0, r5
 80154a2:	bd38      	pop	{r3, r4, r5, pc}
 80154a4:	b118      	cbz	r0, 80154ae <_fflush_r+0x1a>
 80154a6:	6a03      	ldr	r3, [r0, #32]
 80154a8:	b90b      	cbnz	r3, 80154ae <_fflush_r+0x1a>
 80154aa:	f7fe ffd1 	bl	8014450 <__sinit>
 80154ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d0f3      	beq.n	801549e <_fflush_r+0xa>
 80154b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80154b8:	07d0      	lsls	r0, r2, #31
 80154ba:	d404      	bmi.n	80154c6 <_fflush_r+0x32>
 80154bc:	0599      	lsls	r1, r3, #22
 80154be:	d402      	bmi.n	80154c6 <_fflush_r+0x32>
 80154c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80154c2:	f7ff fa32 	bl	801492a <__retarget_lock_acquire_recursive>
 80154c6:	4628      	mov	r0, r5
 80154c8:	4621      	mov	r1, r4
 80154ca:	f7ff ff5f 	bl	801538c <__sflush_r>
 80154ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80154d0:	07da      	lsls	r2, r3, #31
 80154d2:	4605      	mov	r5, r0
 80154d4:	d4e4      	bmi.n	80154a0 <_fflush_r+0xc>
 80154d6:	89a3      	ldrh	r3, [r4, #12]
 80154d8:	059b      	lsls	r3, r3, #22
 80154da:	d4e1      	bmi.n	80154a0 <_fflush_r+0xc>
 80154dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80154de:	f7ff fa25 	bl	801492c <__retarget_lock_release_recursive>
 80154e2:	e7dd      	b.n	80154a0 <_fflush_r+0xc>

080154e4 <__swhatbuf_r>:
 80154e4:	b570      	push	{r4, r5, r6, lr}
 80154e6:	460c      	mov	r4, r1
 80154e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154ec:	2900      	cmp	r1, #0
 80154ee:	b096      	sub	sp, #88	@ 0x58
 80154f0:	4615      	mov	r5, r2
 80154f2:	461e      	mov	r6, r3
 80154f4:	da0d      	bge.n	8015512 <__swhatbuf_r+0x2e>
 80154f6:	89a3      	ldrh	r3, [r4, #12]
 80154f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80154fc:	f04f 0100 	mov.w	r1, #0
 8015500:	bf14      	ite	ne
 8015502:	2340      	movne	r3, #64	@ 0x40
 8015504:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015508:	2000      	movs	r0, #0
 801550a:	6031      	str	r1, [r6, #0]
 801550c:	602b      	str	r3, [r5, #0]
 801550e:	b016      	add	sp, #88	@ 0x58
 8015510:	bd70      	pop	{r4, r5, r6, pc}
 8015512:	466a      	mov	r2, sp
 8015514:	f000 f862 	bl	80155dc <_fstat_r>
 8015518:	2800      	cmp	r0, #0
 801551a:	dbec      	blt.n	80154f6 <__swhatbuf_r+0x12>
 801551c:	9901      	ldr	r1, [sp, #4]
 801551e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015522:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015526:	4259      	negs	r1, r3
 8015528:	4159      	adcs	r1, r3
 801552a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801552e:	e7eb      	b.n	8015508 <__swhatbuf_r+0x24>

08015530 <__smakebuf_r>:
 8015530:	898b      	ldrh	r3, [r1, #12]
 8015532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015534:	079d      	lsls	r5, r3, #30
 8015536:	4606      	mov	r6, r0
 8015538:	460c      	mov	r4, r1
 801553a:	d507      	bpl.n	801554c <__smakebuf_r+0x1c>
 801553c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015540:	6023      	str	r3, [r4, #0]
 8015542:	6123      	str	r3, [r4, #16]
 8015544:	2301      	movs	r3, #1
 8015546:	6163      	str	r3, [r4, #20]
 8015548:	b003      	add	sp, #12
 801554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801554c:	ab01      	add	r3, sp, #4
 801554e:	466a      	mov	r2, sp
 8015550:	f7ff ffc8 	bl	80154e4 <__swhatbuf_r>
 8015554:	9f00      	ldr	r7, [sp, #0]
 8015556:	4605      	mov	r5, r0
 8015558:	4639      	mov	r1, r7
 801555a:	4630      	mov	r0, r6
 801555c:	f7ff fa62 	bl	8014a24 <_malloc_r>
 8015560:	b948      	cbnz	r0, 8015576 <__smakebuf_r+0x46>
 8015562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015566:	059a      	lsls	r2, r3, #22
 8015568:	d4ee      	bmi.n	8015548 <__smakebuf_r+0x18>
 801556a:	f023 0303 	bic.w	r3, r3, #3
 801556e:	f043 0302 	orr.w	r3, r3, #2
 8015572:	81a3      	strh	r3, [r4, #12]
 8015574:	e7e2      	b.n	801553c <__smakebuf_r+0xc>
 8015576:	89a3      	ldrh	r3, [r4, #12]
 8015578:	6020      	str	r0, [r4, #0]
 801557a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801557e:	81a3      	strh	r3, [r4, #12]
 8015580:	9b01      	ldr	r3, [sp, #4]
 8015582:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015586:	b15b      	cbz	r3, 80155a0 <__smakebuf_r+0x70>
 8015588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801558c:	4630      	mov	r0, r6
 801558e:	f000 f837 	bl	8015600 <_isatty_r>
 8015592:	b128      	cbz	r0, 80155a0 <__smakebuf_r+0x70>
 8015594:	89a3      	ldrh	r3, [r4, #12]
 8015596:	f023 0303 	bic.w	r3, r3, #3
 801559a:	f043 0301 	orr.w	r3, r3, #1
 801559e:	81a3      	strh	r3, [r4, #12]
 80155a0:	89a3      	ldrh	r3, [r4, #12]
 80155a2:	431d      	orrs	r5, r3
 80155a4:	81a5      	strh	r5, [r4, #12]
 80155a6:	e7cf      	b.n	8015548 <__smakebuf_r+0x18>

080155a8 <memmove>:
 80155a8:	4288      	cmp	r0, r1
 80155aa:	b510      	push	{r4, lr}
 80155ac:	eb01 0402 	add.w	r4, r1, r2
 80155b0:	d902      	bls.n	80155b8 <memmove+0x10>
 80155b2:	4284      	cmp	r4, r0
 80155b4:	4623      	mov	r3, r4
 80155b6:	d807      	bhi.n	80155c8 <memmove+0x20>
 80155b8:	1e43      	subs	r3, r0, #1
 80155ba:	42a1      	cmp	r1, r4
 80155bc:	d008      	beq.n	80155d0 <memmove+0x28>
 80155be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80155c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80155c6:	e7f8      	b.n	80155ba <memmove+0x12>
 80155c8:	4402      	add	r2, r0
 80155ca:	4601      	mov	r1, r0
 80155cc:	428a      	cmp	r2, r1
 80155ce:	d100      	bne.n	80155d2 <memmove+0x2a>
 80155d0:	bd10      	pop	{r4, pc}
 80155d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80155d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80155da:	e7f7      	b.n	80155cc <memmove+0x24>

080155dc <_fstat_r>:
 80155dc:	b538      	push	{r3, r4, r5, lr}
 80155de:	4d07      	ldr	r5, [pc, #28]	@ (80155fc <_fstat_r+0x20>)
 80155e0:	2300      	movs	r3, #0
 80155e2:	4604      	mov	r4, r0
 80155e4:	4608      	mov	r0, r1
 80155e6:	4611      	mov	r1, r2
 80155e8:	602b      	str	r3, [r5, #0]
 80155ea:	f7fe fcd0 	bl	8013f8e <_fstat>
 80155ee:	1c43      	adds	r3, r0, #1
 80155f0:	d102      	bne.n	80155f8 <_fstat_r+0x1c>
 80155f2:	682b      	ldr	r3, [r5, #0]
 80155f4:	b103      	cbz	r3, 80155f8 <_fstat_r+0x1c>
 80155f6:	6023      	str	r3, [r4, #0]
 80155f8:	bd38      	pop	{r3, r4, r5, pc}
 80155fa:	bf00      	nop
 80155fc:	20054d00 	.word	0x20054d00

08015600 <_isatty_r>:
 8015600:	b538      	push	{r3, r4, r5, lr}
 8015602:	4d06      	ldr	r5, [pc, #24]	@ (801561c <_isatty_r+0x1c>)
 8015604:	2300      	movs	r3, #0
 8015606:	4604      	mov	r4, r0
 8015608:	4608      	mov	r0, r1
 801560a:	602b      	str	r3, [r5, #0]
 801560c:	f7fe fccf 	bl	8013fae <_isatty>
 8015610:	1c43      	adds	r3, r0, #1
 8015612:	d102      	bne.n	801561a <_isatty_r+0x1a>
 8015614:	682b      	ldr	r3, [r5, #0]
 8015616:	b103      	cbz	r3, 801561a <_isatty_r+0x1a>
 8015618:	6023      	str	r3, [r4, #0]
 801561a:	bd38      	pop	{r3, r4, r5, pc}
 801561c:	20054d00 	.word	0x20054d00

08015620 <_sbrk_r>:
 8015620:	b538      	push	{r3, r4, r5, lr}
 8015622:	4d06      	ldr	r5, [pc, #24]	@ (801563c <_sbrk_r+0x1c>)
 8015624:	2300      	movs	r3, #0
 8015626:	4604      	mov	r4, r0
 8015628:	4608      	mov	r0, r1
 801562a:	602b      	str	r3, [r5, #0]
 801562c:	f7fe fcd8 	bl	8013fe0 <_sbrk>
 8015630:	1c43      	adds	r3, r0, #1
 8015632:	d102      	bne.n	801563a <_sbrk_r+0x1a>
 8015634:	682b      	ldr	r3, [r5, #0]
 8015636:	b103      	cbz	r3, 801563a <_sbrk_r+0x1a>
 8015638:	6023      	str	r3, [r4, #0]
 801563a:	bd38      	pop	{r3, r4, r5, pc}
 801563c:	20054d00 	.word	0x20054d00

08015640 <_realloc_r>:
 8015640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015644:	4680      	mov	r8, r0
 8015646:	4615      	mov	r5, r2
 8015648:	460c      	mov	r4, r1
 801564a:	b921      	cbnz	r1, 8015656 <_realloc_r+0x16>
 801564c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015650:	4611      	mov	r1, r2
 8015652:	f7ff b9e7 	b.w	8014a24 <_malloc_r>
 8015656:	b92a      	cbnz	r2, 8015664 <_realloc_r+0x24>
 8015658:	f7ff f978 	bl	801494c <_free_r>
 801565c:	2400      	movs	r4, #0
 801565e:	4620      	mov	r0, r4
 8015660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015664:	f000 f81a 	bl	801569c <_malloc_usable_size_r>
 8015668:	4285      	cmp	r5, r0
 801566a:	4606      	mov	r6, r0
 801566c:	d802      	bhi.n	8015674 <_realloc_r+0x34>
 801566e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015672:	d8f4      	bhi.n	801565e <_realloc_r+0x1e>
 8015674:	4629      	mov	r1, r5
 8015676:	4640      	mov	r0, r8
 8015678:	f7ff f9d4 	bl	8014a24 <_malloc_r>
 801567c:	4607      	mov	r7, r0
 801567e:	2800      	cmp	r0, #0
 8015680:	d0ec      	beq.n	801565c <_realloc_r+0x1c>
 8015682:	42b5      	cmp	r5, r6
 8015684:	462a      	mov	r2, r5
 8015686:	4621      	mov	r1, r4
 8015688:	bf28      	it	cs
 801568a:	4632      	movcs	r2, r6
 801568c:	f7ff f94f 	bl	801492e <memcpy>
 8015690:	4621      	mov	r1, r4
 8015692:	4640      	mov	r0, r8
 8015694:	f7ff f95a 	bl	801494c <_free_r>
 8015698:	463c      	mov	r4, r7
 801569a:	e7e0      	b.n	801565e <_realloc_r+0x1e>

0801569c <_malloc_usable_size_r>:
 801569c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156a0:	1f18      	subs	r0, r3, #4
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	bfbc      	itt	lt
 80156a6:	580b      	ldrlt	r3, [r1, r0]
 80156a8:	18c0      	addlt	r0, r0, r3
 80156aa:	4770      	bx	lr

080156ac <_init>:
 80156ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ae:	bf00      	nop
 80156b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156b2:	bc08      	pop	{r3}
 80156b4:	469e      	mov	lr, r3
 80156b6:	4770      	bx	lr

080156b8 <_fini>:
 80156b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ba:	bf00      	nop
 80156bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156be:	bc08      	pop	{r3}
 80156c0:	469e      	mov	lr, r3
 80156c2:	4770      	bx	lr
