
sensor_hub_data_collection_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e14  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a0  08010fd4  08010fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011974  08011974  00013068  2**0
                  CONTENTS
  4 .ARM          00000008  08011974  08011974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801197c  0801197c  00013068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801197c  0801197c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011980  08011980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08011984  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fa7c  20000068  080119ec  00013068  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000fae4  080119ec  00013ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000236d8  00000000  00000000  00013098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eea  00000000  00000000  00036770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc0  00000000  00000000  0003b660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001634  00000000  00000000  0003d320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031a19  00000000  00000000  0003e954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d0d1  00000000  00000000  0007036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001190d4  00000000  00000000  0009d43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001b6512  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d1c  00000000  00000000  001b6598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  001be2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000068 	.word	0x20000068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08010fbc 	.word	0x08010fbc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	08010fbc 	.word	0x08010fbc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059a:	2003      	movs	r0, #3
 800059c:	f000 f960 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a0:	200f      	movs	r0, #15
 80005a2:	f000 f80d 	bl	80005c0 <HAL_InitTick>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005ac:	2301      	movs	r3, #1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	e001      	b.n	80005b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005b2:	f00f fb0f 	bl	800fbd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005cc:	4b17      	ldr	r3, [pc, #92]	@ (800062c <HAL_InitTick+0x6c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d023      	beq.n	800061c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005d4:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <HAL_InitTick+0x70>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b14      	ldr	r3, [pc, #80]	@ (800062c <HAL_InitTick+0x6c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f99c 	bl	8000928 <HAL_SYSTICK_Config>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d10f      	bne.n	8000616 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d809      	bhi.n	8000610 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f94c 	bl	80008a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000608:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <HAL_InitTick+0x74>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	e007      	b.n	8000620 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e004      	b.n	8000620 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	73fb      	strb	r3, [r7, #15]
 800061a:	e001      	b.n	8000620 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004
 8000630:	20000008 	.word	0x20000008
 8000634:	20000000 	.word	0x20000000

08000638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000004 	.word	0x20000004
 800065c:	20000084 	.word	0x20000084

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000084 	.word	0x20000084

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000680:	f7ff ffee 	bl	8000660 <HAL_GetTick>
 8000684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000690:	d005      	beq.n	800069e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <HAL_Delay+0x44>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4413      	add	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800069e:	bf00      	nop
 80006a0:	f7ff ffde 	bl	8000660 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d8f7      	bhi.n	80006a0 <HAL_Delay+0x28>
  {
  }
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000004 	.word	0x20000004

080006c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f2:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <__NVIC_GetPriorityGrouping+0x18>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	f003 0307 	and.w	r3, r3, #7
}
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	db0b      	blt.n	800074e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 021f 	and.w	r2, r3, #31
 800073c:	4907      	ldr	r1, [pc, #28]	@ (800075c <__NVIC_EnableIRQ+0x38>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	@ (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	@ (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	@ 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	@ 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800082c:	d301      	bcc.n	8000832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082e:	2301      	movs	r3, #1
 8000830:	e00f      	b.n	8000852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000832:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <SysTick_Config+0x40>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083a:	210f      	movs	r1, #15
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f7ff ff8e 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <SysTick_Config+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	4b04      	ldr	r3, [pc, #16]	@ (800085c <SysTick_Config+0x40>)
 800084c:	2207      	movs	r2, #7
 800084e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	e000e010 	.word	0xe000e010

08000860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b07      	cmp	r3, #7
 800086c:	d00f      	beq.n	800088e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b06      	cmp	r3, #6
 8000872:	d00c      	beq.n	800088e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b05      	cmp	r3, #5
 8000878:	d009      	beq.n	800088e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b04      	cmp	r3, #4
 800087e:	d006      	beq.n	800088e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d003      	beq.n	800088e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000886:	21a6      	movs	r1, #166	@ 0xa6
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800088a:	f00e fe31 	bl	800f4f0 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ff16 	bl	80006c0 <__NVIC_SetPriorityGrouping>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	08010fd4 	.word	0x08010fd4

080008a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d903      	bls.n	80008c0 <HAL_NVIC_SetPriority+0x20>
 80008b8:	21be      	movs	r1, #190	@ 0xbe
 80008ba:	480e      	ldr	r0, [pc, #56]	@ (80008f4 <HAL_NVIC_SetPriority+0x54>)
 80008bc:	f00e fe18 	bl	800f4f0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2b0f      	cmp	r3, #15
 80008c4:	d903      	bls.n	80008ce <HAL_NVIC_SetPriority+0x2e>
 80008c6:	21bf      	movs	r1, #191	@ 0xbf
 80008c8:	480a      	ldr	r0, [pc, #40]	@ (80008f4 <HAL_NVIC_SetPriority+0x54>)
 80008ca:	f00e fe11 	bl	800f4f0 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80008ce:	f7ff ff1b 	bl	8000708 <__NVIC_GetPriorityGrouping>
 80008d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	68b9      	ldr	r1, [r7, #8]
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	f7ff ff6b 	bl	80007b4 <NVIC_EncodePriority>
 80008de:	4602      	mov	r2, r0
 80008e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff3a 	bl	8000760 <__NVIC_SetPriority>
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08010fd4 	.word	0x08010fd4

080008f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	da03      	bge.n	8000912 <HAL_NVIC_EnableIRQ+0x1a>
 800090a:	21d2      	movs	r1, #210	@ 0xd2
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <HAL_NVIC_EnableIRQ+0x2c>)
 800090e:	f00e fdef 	bl	800f4f0 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff04 	bl	8000724 <__NVIC_EnableIRQ>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	08010fd4 	.word	0x08010fd4

08000928 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff73 	bl	800081c <SysTick_Config>
 8000936:	4603      	mov	r3, r0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d101      	bne.n	8000952 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e1b2      	b.n	8000cb8 <HAL_DFSDM_ChannelInit+0x378>
  }

  /* Check parameters */
  assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a70      	ldr	r2, [pc, #448]	@ (8000b18 <HAL_DFSDM_ChannelInit+0x1d8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d027      	beq.n	80009ac <HAL_DFSDM_ChannelInit+0x6c>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a6e      	ldr	r2, [pc, #440]	@ (8000b1c <HAL_DFSDM_ChannelInit+0x1dc>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d022      	beq.n	80009ac <HAL_DFSDM_ChannelInit+0x6c>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a6d      	ldr	r2, [pc, #436]	@ (8000b20 <HAL_DFSDM_ChannelInit+0x1e0>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d01d      	beq.n	80009ac <HAL_DFSDM_ChannelInit+0x6c>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a6b      	ldr	r2, [pc, #428]	@ (8000b24 <HAL_DFSDM_ChannelInit+0x1e4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d018      	beq.n	80009ac <HAL_DFSDM_ChannelInit+0x6c>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a6a      	ldr	r2, [pc, #424]	@ (8000b28 <HAL_DFSDM_ChannelInit+0x1e8>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d013      	beq.n	80009ac <HAL_DFSDM_ChannelInit+0x6c>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a68      	ldr	r2, [pc, #416]	@ (8000b2c <HAL_DFSDM_ChannelInit+0x1ec>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d00e      	beq.n	80009ac <HAL_DFSDM_ChannelInit+0x6c>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a67      	ldr	r2, [pc, #412]	@ (8000b30 <HAL_DFSDM_ChannelInit+0x1f0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d009      	beq.n	80009ac <HAL_DFSDM_ChannelInit+0x6c>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a65      	ldr	r2, [pc, #404]	@ (8000b34 <HAL_DFSDM_ChannelInit+0x1f4>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d004      	beq.n	80009ac <HAL_DFSDM_ChannelInit+0x6c>
 80009a2:	f240 1171 	movw	r1, #369	@ 0x171
 80009a6:	4864      	ldr	r0, [pc, #400]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 80009a8:	f00e fda2 	bl	800f4f0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hdfsdm_channel->Init.OutputClock.Activation));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d008      	beq.n	80009c6 <HAL_DFSDM_ChannelInit+0x86>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d004      	beq.n	80009c6 <HAL_DFSDM_ChannelInit+0x86>
 80009bc:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 80009c0:	485d      	ldr	r0, [pc, #372]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 80009c2:	f00e fd95 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_INPUT(hdfsdm_channel->Init.Input.Multiplexer));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00e      	beq.n	80009ec <HAL_DFSDM_ChannelInit+0xac>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	691b      	ldr	r3, [r3, #16]
 80009d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80009d6:	d009      	beq.n	80009ec <HAL_DFSDM_ChannelInit+0xac>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009e0:	d004      	beq.n	80009ec <HAL_DFSDM_ChannelInit+0xac>
 80009e2:	f240 1173 	movw	r1, #371	@ 0x173
 80009e6:	4854      	ldr	r0, [pc, #336]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 80009e8:	f00e fd82 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_DATA_PACKING(hdfsdm_channel->Init.Input.DataPacking));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00e      	beq.n	8000a12 <HAL_DFSDM_ChannelInit+0xd2>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80009fc:	d009      	beq.n	8000a12 <HAL_DFSDM_ChannelInit+0xd2>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a06:	d004      	beq.n	8000a12 <HAL_DFSDM_ChannelInit+0xd2>
 8000a08:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8000a0c:	484a      	ldr	r0, [pc, #296]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000a0e:	f00e fd6f 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_INPUT_PINS(hdfsdm_channel->Init.Input.Pins));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d009      	beq.n	8000a2e <HAL_DFSDM_ChannelInit+0xee>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a22:	d004      	beq.n	8000a2e <HAL_DFSDM_ChannelInit+0xee>
 8000a24:	f240 1175 	movw	r1, #373	@ 0x175
 8000a28:	4843      	ldr	r0, [pc, #268]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000a2a:	f00e fd61 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_SERIAL_INTERFACE_TYPE(hdfsdm_channel->Init.SerialInterface.Type));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d010      	beq.n	8000a58 <HAL_DFSDM_ChannelInit+0x118>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d00c      	beq.n	8000a58 <HAL_DFSDM_ChannelInit+0x118>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d008      	beq.n	8000a58 <HAL_DFSDM_ChannelInit+0x118>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	2b03      	cmp	r3, #3
 8000a4c:	d004      	beq.n	8000a58 <HAL_DFSDM_ChannelInit+0x118>
 8000a4e:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 8000a52:	4839      	ldr	r0, [pc, #228]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000a54:	f00e fd4c 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_SPI_CLOCK(hdfsdm_channel->Init.SerialInterface.SpiClock));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d010      	beq.n	8000a82 <HAL_DFSDM_ChannelInit+0x142>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a1b      	ldr	r3, [r3, #32]
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d00c      	beq.n	8000a82 <HAL_DFSDM_ChannelInit+0x142>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	2b08      	cmp	r3, #8
 8000a6e:	d008      	beq.n	8000a82 <HAL_DFSDM_ChannelInit+0x142>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	2b0c      	cmp	r3, #12
 8000a76:	d004      	beq.n	8000a82 <HAL_DFSDM_ChannelInit+0x142>
 8000a78:	f240 1177 	movw	r1, #375	@ 0x177
 8000a7c:	482e      	ldr	r0, [pc, #184]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000a7e:	f00e fd37 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_FILTER_ORDER(hdfsdm_channel->Init.Awd.FilterOrder));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d013      	beq.n	8000ab2 <HAL_DFSDM_ChannelInit+0x172>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000a92:	d00e      	beq.n	8000ab2 <HAL_DFSDM_ChannelInit+0x172>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000a9c:	d009      	beq.n	8000ab2 <HAL_DFSDM_ChannelInit+0x172>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8000aa6:	d004      	beq.n	8000ab2 <HAL_DFSDM_ChannelInit+0x172>
 8000aa8:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8000aac:	4822      	ldr	r0, [pc, #136]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000aae:	f00e fd1f 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_DFSDM_ChannelInit+0x182>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000abe:	2b20      	cmp	r3, #32
 8000ac0:	d904      	bls.n	8000acc <HAL_DFSDM_ChannelInit+0x18c>
 8000ac2:	f240 1179 	movw	r1, #377	@ 0x179
 8000ac6:	481c      	ldr	r0, [pc, #112]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000ac8:	f00e fd12 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad0:	f513 0f00 	cmn.w	r3, #8388608	@ 0x800000
 8000ad4:	db04      	blt.n	8000ae0 <HAL_DFSDM_ChannelInit+0x1a0>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ada:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000ade:	db04      	blt.n	8000aea <HAL_DFSDM_ChannelInit+0x1aa>
 8000ae0:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8000ae4:	4814      	ldr	r0, [pc, #80]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000ae6:	f00e fd03 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	2b1f      	cmp	r3, #31
 8000af0:	d904      	bls.n	8000afc <HAL_DFSDM_ChannelInit+0x1bc>
 8000af2:	f240 117b 	movw	r1, #379	@ 0x17b
 8000af6:	4810      	ldr	r0, [pc, #64]	@ (8000b38 <HAL_DFSDM_ChannelInit+0x1f8>)
 8000af8:	f00e fcfa 	bl	800f4f0 <assert_failed>

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fc8b 	bl	800141c <DFSDM_GetChannelFromInstance>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <HAL_DFSDM_ChannelInit+0x1fc>)
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d016      	beq.n	8000b40 <HAL_DFSDM_ChannelInit+0x200>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e0d0      	b.n	8000cb8 <HAL_DFSDM_ChannelInit+0x378>
 8000b16:	bf00      	nop
 8000b18:	40016000 	.word	0x40016000
 8000b1c:	40016020 	.word	0x40016020
 8000b20:	40016040 	.word	0x40016040
 8000b24:	40016060 	.word	0x40016060
 8000b28:	40016080 	.word	0x40016080
 8000b2c:	400160a0 	.word	0x400160a0
 8000b30:	400160c0 	.word	0x400160c0
 8000b34:	400160e0 	.word	0x400160e0
 8000b38:	08011010 	.word	0x08011010
 8000b3c:	2000008c 	.word	0x2000008c
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f00d fed1 	bl	800e8e8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000b46:	4b5e      	ldr	r3, [pc, #376]	@ (8000cc0 <HAL_DFSDM_ChannelInit+0x380>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a5c      	ldr	r2, [pc, #368]	@ (8000cc0 <HAL_DFSDM_ChannelInit+0x380>)
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000b50:	4b5b      	ldr	r3, [pc, #364]	@ (8000cc0 <HAL_DFSDM_ChannelInit+0x380>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d141      	bne.n	8000bdc <HAL_DFSDM_ChannelInit+0x29c>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d009      	beq.n	8000b74 <HAL_DFSDM_ChannelInit+0x234>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b68:	d004      	beq.n	8000b74 <HAL_DFSDM_ChannelInit+0x234>
 8000b6a:	f240 1199 	movw	r1, #409	@ 0x199
 8000b6e:	4855      	ldr	r0, [pc, #340]	@ (8000cc4 <HAL_DFSDM_ChannelInit+0x384>)
 8000b70:	f00e fcbe 	bl	800f4f0 <assert_failed>
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000b74:	4b54      	ldr	r3, [pc, #336]	@ (8000cc8 <HAL_DFSDM_ChannelInit+0x388>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a53      	ldr	r2, [pc, #332]	@ (8000cc8 <HAL_DFSDM_ChannelInit+0x388>)
 8000b7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000b7e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000b80:	4b51      	ldr	r3, [pc, #324]	@ (8000cc8 <HAL_DFSDM_ChannelInit+0x388>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	494f      	ldr	r1, [pc, #316]	@ (8000cc8 <HAL_DFSDM_ChannelInit+0x388>)
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc8 <HAL_DFSDM_ChannelInit+0x388>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a4d      	ldr	r2, [pc, #308]	@ (8000cc8 <HAL_DFSDM_ChannelInit+0x388>)
 8000b94:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000b98:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d116      	bne.n	8000bd0 <HAL_DFSDM_ChannelInit+0x290>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d904      	bls.n	8000bb4 <HAL_DFSDM_ChannelInit+0x274>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bb2:	d904      	bls.n	8000bbe <HAL_DFSDM_ChannelInit+0x27e>
 8000bb4:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8000bb8:	4842      	ldr	r0, [pc, #264]	@ (8000cc4 <HAL_DFSDM_ChannelInit+0x384>)
 8000bba:	f00e fc99 	bl	800f4f0 <assert_failed>
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000bbe:	4b42      	ldr	r3, [pc, #264]	@ (8000cc8 <HAL_DFSDM_ChannelInit+0x388>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	041b      	lsls	r3, r3, #16
 8000bca:	493f      	ldr	r1, [pc, #252]	@ (8000cc8 <HAL_DFSDM_ChannelInit+0x388>)
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc8 <HAL_DFSDM_ChannelInit+0x388>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a3c      	ldr	r2, [pc, #240]	@ (8000cc8 <HAL_DFSDM_ChannelInit+0x388>)
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bda:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8000bea:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6819      	ldr	r1, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000bfa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000c00:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 020f 	bic.w	r2, r2, #15
 8000c18:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6819      	ldr	r1, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8000c40:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6899      	ldr	r1, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c50:	3b01      	subs	r3, #1
 8000c52:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f002 0207 	and.w	r2, r2, #7
 8000c6c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6859      	ldr	r1, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c78:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000c80:	431a      	orrs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c98:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fbb8 	bl	800141c <DFSDM_GetChannelFromInstance>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4907      	ldr	r1, [pc, #28]	@ (8000ccc <HAL_DFSDM_ChannelInit+0x38c>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000088 	.word	0x20000088
 8000cc4:	08011010 	.word	0x08011010
 8000cc8:	40016000 	.word	0x40016000
 8000ccc:	2000008c 	.word	0x2000008c

08000cd0 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e1d1      	b.n	8001086 <HAL_DFSDM_FilterInit+0x3b6>
  }

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a77      	ldr	r2, [pc, #476]	@ (8000ec4 <HAL_DFSDM_FilterInit+0x1f4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d013      	beq.n	8000d14 <HAL_DFSDM_FilterInit+0x44>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a75      	ldr	r2, [pc, #468]	@ (8000ec8 <HAL_DFSDM_FilterInit+0x1f8>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d00e      	beq.n	8000d14 <HAL_DFSDM_FilterInit+0x44>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a74      	ldr	r2, [pc, #464]	@ (8000ecc <HAL_DFSDM_FilterInit+0x1fc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d009      	beq.n	8000d14 <HAL_DFSDM_FilterInit+0x44>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a72      	ldr	r2, [pc, #456]	@ (8000ed0 <HAL_DFSDM_FilterInit+0x200>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d004      	beq.n	8000d14 <HAL_DFSDM_FilterInit+0x44>
 8000d0a:	f240 41fb 	movw	r1, #1275	@ 0x4fb
 8000d0e:	4871      	ldr	r0, [pc, #452]	@ (8000ed4 <HAL_DFSDM_FilterInit+0x204>)
 8000d10:	f00e fbee 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_FILTER_REG_TRIGGER(hdfsdm_filter->Init.RegularParam.Trigger));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d008      	beq.n	8000d2e <HAL_DFSDM_FilterInit+0x5e>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d004      	beq.n	8000d2e <HAL_DFSDM_FilterInit+0x5e>
 8000d24:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8000d28:	486a      	ldr	r0, [pc, #424]	@ (8000ed4 <HAL_DFSDM_FilterInit+0x204>)
 8000d2a:	f00e fbe1 	bl	800f4f0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.RegularParam.FastMode));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7a1b      	ldrb	r3, [r3, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d008      	beq.n	8000d48 <HAL_DFSDM_FilterInit+0x78>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7a1b      	ldrb	r3, [r3, #8]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d004      	beq.n	8000d48 <HAL_DFSDM_FilterInit+0x78>
 8000d3e:	f240 41fd 	movw	r1, #1277	@ 0x4fd
 8000d42:	4864      	ldr	r0, [pc, #400]	@ (8000ed4 <HAL_DFSDM_FilterInit+0x204>)
 8000d44:	f00e fbd4 	bl	800f4f0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.RegularParam.DmaMode));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7a5b      	ldrb	r3, [r3, #9]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d008      	beq.n	8000d62 <HAL_DFSDM_FilterInit+0x92>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	7a5b      	ldrb	r3, [r3, #9]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d004      	beq.n	8000d62 <HAL_DFSDM_FilterInit+0x92>
 8000d58:	f240 41fe 	movw	r1, #1278	@ 0x4fe
 8000d5c:	485d      	ldr	r0, [pc, #372]	@ (8000ed4 <HAL_DFSDM_FilterInit+0x204>)
 8000d5e:	f00e fbc7 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_FILTER_INJ_TRIGGER(hdfsdm_filter->Init.InjectedParam.Trigger));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00c      	beq.n	8000d84 <HAL_DFSDM_FilterInit+0xb4>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d008      	beq.n	8000d84 <HAL_DFSDM_FilterInit+0xb4>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d004      	beq.n	8000d84 <HAL_DFSDM_FilterInit+0xb4>
 8000d7a:	f240 41ff 	movw	r1, #1279	@ 0x4ff
 8000d7e:	4855      	ldr	r0, [pc, #340]	@ (8000ed4 <HAL_DFSDM_FilterInit+0x204>)
 8000d80:	f00e fbb6 	bl	800f4f0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.InjectedParam.ScanMode));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7c1b      	ldrb	r3, [r3, #16]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d008      	beq.n	8000d9e <HAL_DFSDM_FilterInit+0xce>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7c1b      	ldrb	r3, [r3, #16]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d004      	beq.n	8000d9e <HAL_DFSDM_FilterInit+0xce>
 8000d94:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8000d98:	484e      	ldr	r0, [pc, #312]	@ (8000ed4 <HAL_DFSDM_FilterInit+0x204>)
 8000d9a:	f00e fba9 	bl	800f4f0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.InjectedParam.DmaMode));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7c5b      	ldrb	r3, [r3, #17]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d008      	beq.n	8000db8 <HAL_DFSDM_FilterInit+0xe8>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7c5b      	ldrb	r3, [r3, #17]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d004      	beq.n	8000db8 <HAL_DFSDM_FilterInit+0xe8>
 8000dae:	f240 5101 	movw	r1, #1281	@ 0x501
 8000db2:	4848      	ldr	r0, [pc, #288]	@ (8000ed4 <HAL_DFSDM_FilterInit+0x204>)
 8000db4:	f00e fb9c 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d01d      	beq.n	8000dfc <HAL_DFSDM_FilterInit+0x12c>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000dc8:	d018      	beq.n	8000dfc <HAL_DFSDM_FilterInit+0x12c>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dd2:	d013      	beq.n	8000dfc <HAL_DFSDM_FilterInit+0x12c>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8000ddc:	d00e      	beq.n	8000dfc <HAL_DFSDM_FilterInit+0x12c>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000de6:	d009      	beq.n	8000dfc <HAL_DFSDM_FilterInit+0x12c>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8000df0:	d004      	beq.n	8000dfc <HAL_DFSDM_FilterInit+0x12c>
 8000df2:	f240 5102 	movw	r1, #1282	@ 0x502
 8000df6:	4837      	ldr	r0, [pc, #220]	@ (8000ed4 <HAL_DFSDM_FilterInit+0x204>)
 8000df8:	f00e fb7a 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <HAL_DFSDM_FilterInit+0x13e>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e0c:	d904      	bls.n	8000e18 <HAL_DFSDM_FilterInit+0x148>
 8000e0e:	f240 5103 	movw	r1, #1283	@ 0x503
 8000e12:	4830      	ldr	r0, [pc, #192]	@ (8000ed4 <HAL_DFSDM_FilterInit+0x204>)
 8000e14:	f00e fb6c 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d004      	beq.n	8000e2a <HAL_DFSDM_FilterInit+0x15a>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e28:	d904      	bls.n	8000e34 <HAL_DFSDM_FilterInit+0x164>
 8000e2a:	f240 5104 	movw	r1, #1284	@ 0x504
 8000e2e:	4829      	ldr	r0, [pc, #164]	@ (8000ed4 <HAL_DFSDM_FilterInit+0x204>)
 8000e30:	f00e fb5e 	bl	800f4f0 <assert_failed>

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a22      	ldr	r2, [pc, #136]	@ (8000ec4 <HAL_DFSDM_FilterInit+0x1f4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d109      	bne.n	8000e52 <HAL_DFSDM_FilterInit+0x182>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d003      	beq.n	8000e4e <HAL_DFSDM_FilterInit+0x17e>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d101      	bne.n	8000e52 <HAL_DFSDM_FilterInit+0x182>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e119      	b.n	8001086 <HAL_DFSDM_FilterInit+0x3b6>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f00d fc6e 	bl	800e74c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8000e7e:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7a1b      	ldrb	r3, [r3, #8]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d108      	bne.n	8000e9a <HAL_DFSDM_FilterInit+0x1ca>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	e007      	b.n	8000eaa <HAL_DFSDM_FilterInit+0x1da>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7a5b      	ldrb	r3, [r3, #9]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d112      	bne.n	8000ed8 <HAL_DFSDM_FilterInit+0x208>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e011      	b.n	8000ee8 <HAL_DFSDM_FilterInit+0x218>
 8000ec4:	40016100 	.word	0x40016100
 8000ec8:	40016180 	.word	0x40016180
 8000ecc:	40016200 	.word	0x40016200
 8000ed0:	40016280 	.word	0x40016280
 8000ed4:	08011010 	.word	0x08011010
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8000ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000ef6:	f023 0308 	bic.w	r3, r3, #8
 8000efa:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d15c      	bne.n	8000fbe <HAL_DFSDM_FilterInit+0x2ee>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d03b      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f14:	d036      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f1e:	d031      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000f28:	d02c      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f32:	d027      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8000f3c:	d022      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000f46:	d01d      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8000f50:	d018      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f5a:	d013      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8000f64:	d00e      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 8000f6e:	d009      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 8000f78:	d004      	beq.n	8000f84 <HAL_DFSDM_FilterInit+0x2b4>
 8000f7a:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 8000f7e:	4844      	ldr	r0, [pc, #272]	@ (8001090 <HAL_DFSDM_FilterInit+0x3c0>)
 8000f80:	f00e fab6 	bl	800f4f0 <assert_failed>
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f8c:	d00e      	beq.n	8000fac <HAL_DFSDM_FilterInit+0x2dc>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000f96:	d009      	beq.n	8000fac <HAL_DFSDM_FilterInit+0x2dc>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8000fa0:	d004      	beq.n	8000fac <HAL_DFSDM_FilterInit+0x2dc>
 8000fa2:	f240 5141 	movw	r1, #1345	@ 0x541
 8000fa6:	483a      	ldr	r0, [pc, #232]	@ (8001090 <HAL_DFSDM_FilterInit+0x3c0>)
 8000fa8:	f00e faa2 	bl	800f4f0 <assert_failed>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6819      	ldr	r1, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7c1b      	ldrb	r3, [r3, #16]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d108      	bne.n	8000fd8 <HAL_DFSDM_FilterInit+0x308>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0210 	orr.w	r2, r2, #16
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e007      	b.n	8000fe8 <HAL_DFSDM_FilterInit+0x318>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0210 	bic.w	r2, r2, #16
 8000fe6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7c5b      	ldrb	r3, [r3, #17]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d108      	bne.n	8001002 <HAL_DFSDM_FilterInit+0x332>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0220 	orr.w	r2, r2, #32
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e007      	b.n	8001012 <HAL_DFSDM_FilterInit+0x342>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0220 	bic.w	r2, r2, #32
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8001020:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001024:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6959      	ldr	r1, [r3, #20]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	3b01      	subs	r3, #1
 8001036:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001038:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103e:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001040:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7c1a      	ldrb	r2, [r3, #16]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	08011010 	.word	0x08011010

08001094 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a40      	ldr	r2, [pc, #256]	@ (80011ac <HAL_DFSDM_FilterConfigRegChannel+0x118>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_DFSDM_FilterConfigRegChannel+0x42>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a3f      	ldr	r2, [pc, #252]	@ (80011b0 <HAL_DFSDM_FilterConfigRegChannel+0x11c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d00e      	beq.n	80010d6 <HAL_DFSDM_FilterConfigRegChannel+0x42>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a3d      	ldr	r2, [pc, #244]	@ (80011b4 <HAL_DFSDM_FilterConfigRegChannel+0x120>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d009      	beq.n	80010d6 <HAL_DFSDM_FilterConfigRegChannel+0x42>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a3c      	ldr	r2, [pc, #240]	@ (80011b8 <HAL_DFSDM_FilterConfigRegChannel+0x124>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d004      	beq.n	80010d6 <HAL_DFSDM_FilterConfigRegChannel+0x42>
 80010cc:	f240 61bd 	movw	r1, #1725	@ 0x6bd
 80010d0:	483a      	ldr	r0, [pc, #232]	@ (80011bc <HAL_DFSDM_FilterConfigRegChannel+0x128>)
 80010d2:	f00e fa0d 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d020      	beq.n	800111e <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4a38      	ldr	r2, [pc, #224]	@ (80011c0 <HAL_DFSDM_FilterConfigRegChannel+0x12c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d01c      	beq.n	800111e <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4a37      	ldr	r2, [pc, #220]	@ (80011c4 <HAL_DFSDM_FilterConfigRegChannel+0x130>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d018      	beq.n	800111e <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4a36      	ldr	r2, [pc, #216]	@ (80011c8 <HAL_DFSDM_FilterConfigRegChannel+0x134>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d014      	beq.n	800111e <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4a35      	ldr	r2, [pc, #212]	@ (80011cc <HAL_DFSDM_FilterConfigRegChannel+0x138>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d010      	beq.n	800111e <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4a34      	ldr	r2, [pc, #208]	@ (80011d0 <HAL_DFSDM_FilterConfigRegChannel+0x13c>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d00c      	beq.n	800111e <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4a33      	ldr	r2, [pc, #204]	@ (80011d4 <HAL_DFSDM_FilterConfigRegChannel+0x140>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d008      	beq.n	800111e <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4a32      	ldr	r2, [pc, #200]	@ (80011d8 <HAL_DFSDM_FilterConfigRegChannel+0x144>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d004      	beq.n	800111e <HAL_DFSDM_FilterConfigRegChannel+0x8a>
 8001114:	f240 61be 	movw	r1, #1726	@ 0x6be
 8001118:	4828      	ldr	r0, [pc, #160]	@ (80011bc <HAL_DFSDM_FilterConfigRegChannel+0x128>)
 800111a:	f00e f9e9 	bl	800f4f0 <assert_failed>
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d007      	beq.n	8001134 <HAL_DFSDM_FilterConfigRegChannel+0xa0>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d004      	beq.n	8001134 <HAL_DFSDM_FilterConfigRegChannel+0xa0>
 800112a:	f240 61bf 	movw	r1, #1727	@ 0x6bf
 800112e:	4823      	ldr	r0, [pc, #140]	@ (80011bc <HAL_DFSDM_FilterConfigRegChannel+0x128>)
 8001130:	f00e f9de 	bl	800f4f0 <assert_failed>

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800113a:	2b00      	cmp	r3, #0
 800113c:	d02e      	beq.n	800119c <HAL_DFSDM_FilterConfigRegChannel+0x108>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001144:	2bff      	cmp	r3, #255	@ 0xff
 8001146:	d029      	beq.n	800119c <HAL_DFSDM_FilterConfigRegChannel+0x108>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d10d      	bne.n	800117e <HAL_DFSDM_FilterConfigRegChannel+0xea>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001170:	431a      	orrs	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e00a      	b.n	8001194 <HAL_DFSDM_FilterConfigRegChannel+0x100>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	631a      	str	r2, [r3, #48]	@ 0x30
 800119a:	e001      	b.n	80011a0 <HAL_DFSDM_FilterConfigRegChannel+0x10c>
  }
  else
  {
    status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40016100 	.word	0x40016100
 80011b0:	40016180 	.word	0x40016180
 80011b4:	40016200 	.word	0x40016200
 80011b8:	40016280 	.word	0x40016280
 80011bc:	08011010 	.word	0x08011010
 80011c0:	00010002 	.word	0x00010002
 80011c4:	00020004 	.word	0x00020004
 80011c8:	00030008 	.word	0x00030008
 80011cc:	00040010 	.word	0x00040010
 80011d0:	00050020 	.word	0x00050020
 80011d4:	00060040 	.word	0x00060040
 80011d8:	00070080 	.word	0x00070080

080011dc <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a44      	ldr	r2, [pc, #272]	@ (8001304 <HAL_DFSDM_FilterRegularStart_DMA+0x128>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_DFSDM_FilterRegularStart_DMA+0x42>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a43      	ldr	r2, [pc, #268]	@ (8001308 <HAL_DFSDM_FilterRegularStart_DMA+0x12c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00e      	beq.n	800121e <HAL_DFSDM_FilterRegularStart_DMA+0x42>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a41      	ldr	r2, [pc, #260]	@ (800130c <HAL_DFSDM_FilterRegularStart_DMA+0x130>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d009      	beq.n	800121e <HAL_DFSDM_FilterRegularStart_DMA+0x42>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a40      	ldr	r2, [pc, #256]	@ (8001310 <HAL_DFSDM_FilterRegularStart_DMA+0x134>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d004      	beq.n	800121e <HAL_DFSDM_FilterRegularStart_DMA+0x42>
 8001214:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 8001218:	483e      	ldr	r0, [pc, #248]	@ (8001314 <HAL_DFSDM_FilterRegularStart_DMA+0x138>)
 800121a:	f00e f969 	bl	800f4f0 <assert_failed>

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_DFSDM_FilterRegularStart_DMA+0x4e>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <HAL_DFSDM_FilterRegularStart_DMA+0x54>
  {
    status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
 800122e:	e064      	b.n	80012fa <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800123a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800123e:	d002      	beq.n	8001246 <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
  {
    status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	75fb      	strb	r3, [r7, #23]
 8001244:	e059      	b.n	80012fa <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10e      	bne.n	800126c <HAL_DFSDM_FilterRegularStart_DMA+0x90>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10a      	bne.n	800126c <HAL_DFSDM_FilterRegularStart_DMA+0x90>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800125c:	2b00      	cmp	r3, #0
 800125e:	d105      	bne.n	800126c <HAL_DFSDM_FilterRegularStart_DMA+0x90>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d002      	beq.n	800126c <HAL_DFSDM_FilterRegularStart_DMA+0x90>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]
 800126a:	e046      	b.n	80012fa <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10b      	bne.n	800128c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001282:	2b20      	cmp	r3, #32
 8001284:	d102      	bne.n	800128c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
  {
    status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	75fb      	strb	r3, [r7, #23]
 800128a:	e036      	b.n	80012fa <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001292:	2b01      	cmp	r3, #1
 8001294:	d004      	beq.n	80012a0 <HAL_DFSDM_FilterRegularStart_DMA+0xc4>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800129c:	2b03      	cmp	r3, #3
 800129e:	d12a      	bne.n	80012f6 <HAL_DFSDM_FilterRegularStart_DMA+0x11a>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001318 <HAL_DFSDM_FilterRegularStart_DMA+0x13c>)
 80012a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ac:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <HAL_DFSDM_FilterRegularStart_DMA+0x140>)
 80012ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b4:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80012b6:	2b20      	cmp	r3, #32
 80012b8:	d101      	bne.n	80012be <HAL_DFSDM_FilterRegularStart_DMA+0xe2>
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <HAL_DFSDM_FilterRegularStart_DMA+0x144>)
 80012bc:	e000      	b.n	80012c0 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
 80012be:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	331c      	adds	r3, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f000 fb1b 	bl	8001910 <HAL_DMA_Start_IT>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_DFSDM_FilterRegularStart_DMA+0x112>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	22ff      	movs	r2, #255	@ 0xff
 80012e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80012ec:	e005      	b.n	80012fa <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 f8e0 	bl	80014b4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80012f4:	e001      	b.n	80012fa <HAL_DFSDM_FilterRegularStart_DMA+0x11e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40016100 	.word	0x40016100
 8001308:	40016180 	.word	0x40016180
 800130c:	40016200 	.word	0x40016200
 8001310:	40016280 	.word	0x40016280
 8001314:	08011010 	.word	0x08011010
 8001318:	080013dd 	.word	0x080013dd
 800131c:	080013f9 	.word	0x080013f9
 8001320:	080013c1 	.word	0x080013c1

08001324 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <HAL_DFSDM_FilterRegularStop_DMA+0x74>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_DFSDM_FilterRegularStop_DMA+0x3e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a17      	ldr	r2, [pc, #92]	@ (800139c <HAL_DFSDM_FilterRegularStop_DMA+0x78>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00e      	beq.n	8001362 <HAL_DFSDM_FilterRegularStop_DMA+0x3e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a15      	ldr	r2, [pc, #84]	@ (80013a0 <HAL_DFSDM_FilterRegularStop_DMA+0x7c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d009      	beq.n	8001362 <HAL_DFSDM_FilterRegularStop_DMA+0x3e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a14      	ldr	r2, [pc, #80]	@ (80013a4 <HAL_DFSDM_FilterRegularStop_DMA+0x80>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d004      	beq.n	8001362 <HAL_DFSDM_FilterRegularStop_DMA+0x3e>
 8001358:	f640 0183 	movw	r1, #2179	@ 0x883
 800135c:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <HAL_DFSDM_FilterRegularStop_DMA+0x84>)
 800135e:	f00e f8c7 	bl	800f4f0 <assert_failed>

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001368:	2b02      	cmp	r3, #2
 800136a:	d007      	beq.n	800137c <HAL_DFSDM_FilterRegularStop_DMA+0x58>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001372:	2b04      	cmp	r3, #4
 8001374:	d002      	beq.n	800137c <HAL_DFSDM_FilterRegularStop_DMA+0x58>
  {
    /* Return error status */
    status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e007      	b.n	800138c <HAL_DFSDM_FilterRegularStop_DMA+0x68>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fb4f 	bl	8001a24 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f8ea 	bl	8001560 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40016100 	.word	0x40016100
 800139c:	40016180 	.word	0x40016180
 80013a0:	40016200 	.word	0x40016200
 80013a4:	40016280 	.word	0x40016280
 80013a8:	08011010 	.word	0x08011010

080013ac <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f00e f862 	bl	800f498 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f00e f864 	bl	800f4b8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001404:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2203      	movs	r2, #3
 800140a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f7ff ffcd 	bl	80013ac <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <DFSDM_GetChannelFromInstance+0x7c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d102      	bne.n	8001432 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	e02b      	b.n	800148a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a19      	ldr	r2, [pc, #100]	@ (800149c <DFSDM_GetChannelFromInstance+0x80>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d102      	bne.n	8001440 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e024      	b.n	800148a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <DFSDM_GetChannelFromInstance+0x84>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d102      	bne.n	800144e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001448:	2302      	movs	r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e01d      	b.n	800148a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a14      	ldr	r2, [pc, #80]	@ (80014a4 <DFSDM_GetChannelFromInstance+0x88>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d102      	bne.n	800145c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001456:	2304      	movs	r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e016      	b.n	800148a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <DFSDM_GetChannelFromInstance+0x8c>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d102      	bne.n	800146a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001464:	2305      	movs	r3, #5
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e00f      	b.n	800148a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <DFSDM_GetChannelFromInstance+0x90>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d102      	bne.n	8001478 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001472:	2306      	movs	r3, #6
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	e008      	b.n	800148a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0d      	ldr	r2, [pc, #52]	@ (80014b0 <DFSDM_GetChannelFromInstance+0x94>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d102      	bne.n	8001486 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001480:	2307      	movs	r3, #7
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e001      	b.n	800148a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001486:	2303      	movs	r3, #3
 8001488:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40016000 	.word	0x40016000
 800149c:	40016020 	.word	0x40016020
 80014a0:	40016040 	.word	0x40016040
 80014a4:	40016080 	.word	0x40016080
 80014a8:	400160a0 	.word	0x400160a0
 80014ac:	400160c0 	.word	0x400160c0
 80014b0:	400160e0 	.word	0x400160e0

080014b4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d108      	bne.n	80014d6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e033      	b.n	800153e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0201 	bic.w	r2, r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80014f4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800150c:	2b03      	cmp	r3, #3
 800150e:	d116      	bne.n	800153e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001514:	2b00      	cmp	r3, #0
 8001516:	d107      	bne.n	8001528 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0202 	orr.w	r2, r2, #2
 8001526:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800152e:	2b01      	cmp	r3, #1
 8001530:	d102      	bne.n	8001538 <DFSDM_RegConvStart+0x84>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	e000      	b.n	800153a <DFSDM_RegConvStart+0x86>
 8001538:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <DFSDM_RegConvStart+0x98>
 8001548:	2202      	movs	r2, #2
 800154a:	e000      	b.n	800154e <DFSDM_RegConvStart+0x9a>
 800154c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800157c:	2b01      	cmp	r3, #1
 800157e:	d107      	bne.n	8001590 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 800158e:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d116      	bne.n	80015d8 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d107      	bne.n	80015c2 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0202 	orr.w	r2, r2, #2
 80015c0:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d102      	bne.n	80015d2 <DFSDM_RegConvStop+0x72>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d0:	e000      	b.n	80015d4 <DFSDM_RegConvStop+0x74>
 80015d2:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d101      	bne.n	80015e6 <DFSDM_RegConvStop+0x86>
 80015e2:	2201      	movs	r2, #1
 80015e4:	e000      	b.n	80015e8 <DFSDM_RegConvStop+0x88>
 80015e6:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e176      	b.n	80018fc <HAL_DMA_Init+0x300>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6b      	ldr	r2, [pc, #428]	@ (80017c0 <HAL_DMA_Init+0x1c4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d044      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a69      	ldr	r2, [pc, #420]	@ (80017c4 <HAL_DMA_Init+0x1c8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d03f      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a68      	ldr	r2, [pc, #416]	@ (80017c8 <HAL_DMA_Init+0x1cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d03a      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a66      	ldr	r2, [pc, #408]	@ (80017cc <HAL_DMA_Init+0x1d0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d035      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a65      	ldr	r2, [pc, #404]	@ (80017d0 <HAL_DMA_Init+0x1d4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d030      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a63      	ldr	r2, [pc, #396]	@ (80017d4 <HAL_DMA_Init+0x1d8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d02b      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a62      	ldr	r2, [pc, #392]	@ (80017d8 <HAL_DMA_Init+0x1dc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d026      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a60      	ldr	r2, [pc, #384]	@ (80017dc <HAL_DMA_Init+0x1e0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d021      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a5f      	ldr	r2, [pc, #380]	@ (80017e0 <HAL_DMA_Init+0x1e4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d01c      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a5d      	ldr	r2, [pc, #372]	@ (80017e4 <HAL_DMA_Init+0x1e8>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d017      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a5c      	ldr	r2, [pc, #368]	@ (80017e8 <HAL_DMA_Init+0x1ec>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d012      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a5a      	ldr	r2, [pc, #360]	@ (80017ec <HAL_DMA_Init+0x1f0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a59      	ldr	r2, [pc, #356]	@ (80017f0 <HAL_DMA_Init+0x1f4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d008      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a57      	ldr	r2, [pc, #348]	@ (80017f4 <HAL_DMA_Init+0x1f8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_DMA_Init+0xa6>
 800169a:	21a5      	movs	r1, #165	@ 0xa5
 800169c:	4856      	ldr	r0, [pc, #344]	@ (80017f8 <HAL_DMA_Init+0x1fc>)
 800169e:	f00d ff27 	bl	800f4f0 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00c      	beq.n	80016c4 <HAL_DMA_Init+0xc8>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d008      	beq.n	80016c4 <HAL_DMA_Init+0xc8>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_Init+0xc8>
 80016bc:	21a6      	movs	r1, #166	@ 0xa6
 80016be:	484e      	ldr	r0, [pc, #312]	@ (80017f8 <HAL_DMA_Init+0x1fc>)
 80016c0:	f00d ff16 	bl	800f4f0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b40      	cmp	r3, #64	@ 0x40
 80016ca:	d007      	beq.n	80016dc <HAL_DMA_Init+0xe0>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_DMA_Init+0xe0>
 80016d4:	21a7      	movs	r1, #167	@ 0xa7
 80016d6:	4848      	ldr	r0, [pc, #288]	@ (80017f8 <HAL_DMA_Init+0x1fc>)
 80016d8:	f00d ff0a 	bl	800f4f0 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b80      	cmp	r3, #128	@ 0x80
 80016e2:	d007      	beq.n	80016f4 <HAL_DMA_Init+0xf8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_DMA_Init+0xf8>
 80016ec:	21a8      	movs	r1, #168	@ 0xa8
 80016ee:	4842      	ldr	r0, [pc, #264]	@ (80017f8 <HAL_DMA_Init+0x1fc>)
 80016f0:	f00d fefe 	bl	800f4f0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00d      	beq.n	8001718 <HAL_DMA_Init+0x11c>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001704:	d008      	beq.n	8001718 <HAL_DMA_Init+0x11c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800170e:	d003      	beq.n	8001718 <HAL_DMA_Init+0x11c>
 8001710:	21a9      	movs	r1, #169	@ 0xa9
 8001712:	4839      	ldr	r0, [pc, #228]	@ (80017f8 <HAL_DMA_Init+0x1fc>)
 8001714:	f00d feec 	bl	800f4f0 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00d      	beq.n	800173c <HAL_DMA_Init+0x140>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001728:	d008      	beq.n	800173c <HAL_DMA_Init+0x140>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001732:	d003      	beq.n	800173c <HAL_DMA_Init+0x140>
 8001734:	21aa      	movs	r1, #170	@ 0xaa
 8001736:	4830      	ldr	r0, [pc, #192]	@ (80017f8 <HAL_DMA_Init+0x1fc>)
 8001738:	f00d feda 	bl	800f4f0 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <HAL_DMA_Init+0x158>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b20      	cmp	r3, #32
 800174a:	d003      	beq.n	8001754 <HAL_DMA_Init+0x158>
 800174c:	21ab      	movs	r1, #171	@ 0xab
 800174e:	482a      	ldr	r0, [pc, #168]	@ (80017f8 <HAL_DMA_Init+0x1fc>)
 8001750:	f00d fece 	bl	800f4f0 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d012      	beq.n	8001782 <HAL_DMA_Init+0x186>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001764:	d00d      	beq.n	8001782 <HAL_DMA_Init+0x186>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800176e:	d008      	beq.n	8001782 <HAL_DMA_Init+0x186>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001778:	d003      	beq.n	8001782 <HAL_DMA_Init+0x186>
 800177a:	21ac      	movs	r1, #172	@ 0xac
 800177c:	481e      	ldr	r0, [pc, #120]	@ (80017f8 <HAL_DMA_Init+0x1fc>)
 800177e:	f00d feb7 	bl	800f4f0 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b5d      	cmp	r3, #93	@ 0x5d
 8001788:	d903      	bls.n	8001792 <HAL_DMA_Init+0x196>
 800178a:	21ae      	movs	r1, #174	@ 0xae
 800178c:	481a      	ldr	r0, [pc, #104]	@ (80017f8 <HAL_DMA_Init+0x1fc>)
 800178e:	f00d feaf 	bl	800f4f0 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_DMA_Init+0x200>)
 800179a:	429a      	cmp	r2, r3
 800179c:	d836      	bhi.n	800180c <HAL_DMA_Init+0x210>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <HAL_DMA_Init+0x204>)
 80017a6:	4413      	add	r3, r2
 80017a8:	4a16      	ldr	r2, [pc, #88]	@ (8001804 <HAL_DMA_Init+0x208>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	009a      	lsls	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <HAL_DMA_Init+0x20c>)
 80017ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80017bc:	e035      	b.n	800182a <HAL_DMA_Init+0x22e>
 80017be:	bf00      	nop
 80017c0:	40020008 	.word	0x40020008
 80017c4:	4002001c 	.word	0x4002001c
 80017c8:	40020030 	.word	0x40020030
 80017cc:	40020044 	.word	0x40020044
 80017d0:	40020058 	.word	0x40020058
 80017d4:	4002006c 	.word	0x4002006c
 80017d8:	40020080 	.word	0x40020080
 80017dc:	40020408 	.word	0x40020408
 80017e0:	4002041c 	.word	0x4002041c
 80017e4:	40020430 	.word	0x40020430
 80017e8:	40020444 	.word	0x40020444
 80017ec:	40020458 	.word	0x40020458
 80017f0:	4002046c 	.word	0x4002046c
 80017f4:	40020480 	.word	0x40020480
 80017f8:	0801104c 	.word	0x0801104c
 80017fc:	40020407 	.word	0x40020407
 8001800:	bffdfff8 	.word	0xbffdfff8
 8001804:	cccccccd 	.word	0xcccccccd
 8001808:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b3c      	ldr	r3, [pc, #240]	@ (8001904 <HAL_DMA_Init+0x308>)
 8001814:	4413      	add	r3, r2
 8001816:	4a3c      	ldr	r2, [pc, #240]	@ (8001908 <HAL_DMA_Init+0x30c>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	009a      	lsls	r2, r3, #2
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a39      	ldr	r2, [pc, #228]	@ (800190c <HAL_DMA_Init+0x310>)
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2202      	movs	r2, #2
 800182e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001844:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fa1b 	bl	8001cb8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800188a:	d102      	bne.n	8001892 <HAL_DMA_Init+0x296>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018a6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d010      	beq.n	80018d2 <HAL_DMA_Init+0x2d6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d80c      	bhi.n	80018d2 <HAL_DMA_Init+0x2d6>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fa3b 	bl	8001d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	e008      	b.n	80018e4 <HAL_DMA_Init+0x2e8>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	bffdfbf8 	.word	0xbffdfbf8
 8001908:	cccccccd 	.word	0xcccccccd
 800190c:	40020400 	.word	0x40020400

08001910 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_DMA_Start_IT+0x20>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800192e:	d304      	bcc.n	800193a <HAL_DMA_Start_IT+0x2a>
 8001930:	f240 11df 	movw	r1, #479	@ 0x1df
 8001934:	483a      	ldr	r0, [pc, #232]	@ (8001a20 <HAL_DMA_Start_IT+0x110>)
 8001936:	f00d fddb 	bl	800f4f0 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_DMA_Start_IT+0x38>
 8001944:	2302      	movs	r3, #2
 8001946:	e066      	b.n	8001a16 <HAL_DMA_Start_IT+0x106>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d155      	bne.n	8001a08 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f95a 	bl	8001c3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	2b00      	cmp	r3, #0
 800198c:	d008      	beq.n	80019a0 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 020e 	orr.w	r2, r2, #14
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e00f      	b.n	80019c0 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0204 	bic.w	r2, r2, #4
 80019ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 020a 	orr.w	r2, r2, #10
 80019be:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d007      	beq.n	80019de <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019f4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e005      	b.n	8001a14 <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a10:	2302      	movs	r3, #2
 8001a12:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	0801104c 	.word	0x0801104c

08001a24 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d008      	beq.n	8001a4e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e040      	b.n	8001ad0 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 020e 	bic.w	r2, r2, #14
 8001a5c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f003 021c 	and.w	r2, r3, #28
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a90:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a9a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00c      	beq.n	8001abe <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001abc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af8:	f003 031c 	and.w	r3, r3, #28
 8001afc:	2204      	movs	r2, #4
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d026      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x7a>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d021      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0204 	bic.w	r2, r2, #4
 8001b2e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b34:	f003 021c 	and.w	r2, r3, #28
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b42:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d071      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b54:	e06c      	b.n	8001c30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	f003 031c 	and.w	r3, r3, #28
 8001b5e:	2202      	movs	r2, #2
 8001b60:	409a      	lsls	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d02e      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0xec>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d029      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10b      	bne.n	8001b9a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 020a 	bic.w	r2, r2, #10
 8001b90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f003 021c 	and.w	r2, r3, #28
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d038      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001bc6:	e033      	b.n	8001c30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	f003 031c 	and.w	r3, r3, #28
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d02a      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x156>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d025      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 020e 	bic.w	r2, r2, #14
 8001bf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f003 021c 	and.w	r2, r3, #28
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	2101      	movs	r1, #1
 8001c04:	fa01 f202 	lsl.w	r2, r1, r2
 8001c08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
}
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c50:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c62:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c68:	f003 021c 	and.w	r2, r3, #28
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f202 	lsl.w	r2, r1, r2
 8001c76:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d108      	bne.n	8001c9a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c98:	e007      	b.n	8001caa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	60da      	str	r2, [r3, #12]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d80a      	bhi.n	8001ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001cd8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ce0:	e007      	b.n	8001cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	009a      	lsls	r2, r3, #2
 8001cea:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001cec:	4413      	add	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3b08      	subs	r3, #8
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001d08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	2201      	movs	r2, #1
 8001d12:	409a      	lsls	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40020407 	.word	0x40020407
 8001d28:	4002081c 	.word	0x4002081c
 8001d2c:	cccccccd 	.word	0xcccccccd
 8001d30:	40020880 	.word	0x40020880

08001d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d56:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2201      	movs	r2, #1
 8001d62:	409a      	lsls	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	1000823f 	.word	0x1000823f
 8001d78:	40020940 	.word	0x40020940

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d90:	d023      	beq.n	8001dda <HAL_GPIO_Init+0x5e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a3e      	ldr	r2, [pc, #248]	@ (8001e90 <HAL_GPIO_Init+0x114>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01f      	beq.n	8001dda <HAL_GPIO_Init+0x5e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e94 <HAL_GPIO_Init+0x118>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01b      	beq.n	8001dda <HAL_GPIO_Init+0x5e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a3c      	ldr	r2, [pc, #240]	@ (8001e98 <HAL_GPIO_Init+0x11c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d017      	beq.n	8001dda <HAL_GPIO_Init+0x5e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a3b      	ldr	r2, [pc, #236]	@ (8001e9c <HAL_GPIO_Init+0x120>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0x5e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ea0 <HAL_GPIO_Init+0x124>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00f      	beq.n	8001dda <HAL_GPIO_Init+0x5e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a39      	ldr	r2, [pc, #228]	@ (8001ea4 <HAL_GPIO_Init+0x128>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00b      	beq.n	8001dda <HAL_GPIO_Init+0x5e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a38      	ldr	r2, [pc, #224]	@ (8001ea8 <HAL_GPIO_Init+0x12c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x5e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a37      	ldr	r2, [pc, #220]	@ (8001eac <HAL_GPIO_Init+0x130>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x5e>
 8001dd2:	21aa      	movs	r1, #170	@ 0xaa
 8001dd4:	4836      	ldr	r0, [pc, #216]	@ (8001eb0 <HAL_GPIO_Init+0x134>)
 8001dd6:	f00d fb8b 	bl	800f4f0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d004      	beq.n	8001dee <HAL_GPIO_Init+0x72>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dec:	d303      	bcc.n	8001df6 <HAL_GPIO_Init+0x7a>
 8001dee:	21ab      	movs	r1, #171	@ 0xab
 8001df0:	482f      	ldr	r0, [pc, #188]	@ (8001eb0 <HAL_GPIO_Init+0x134>)
 8001df2:	f00d fb7d 	bl	800f4f0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 822b 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	f000 8226 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b11      	cmp	r3, #17
 8001e10:	f000 8221 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	f000 821c 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	f000 8217 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001e30:	f000 8211 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001e3c:	f000 820b 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001e48:	f000 8205 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001e54:	f000 81ff 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8001e60:	f000 81f9 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8001e6c:	f000 81f3 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	f000 81ee 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b0b      	cmp	r3, #11
 8001e80:	f000 81e9 	beq.w	8002256 <HAL_GPIO_Init+0x4da>
 8001e84:	21ac      	movs	r1, #172	@ 0xac
 8001e86:	480a      	ldr	r0, [pc, #40]	@ (8001eb0 <HAL_GPIO_Init+0x134>)
 8001e88:	f00d fb32 	bl	800f4f0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8c:	e1e3      	b.n	8002256 <HAL_GPIO_Init+0x4da>
 8001e8e:	bf00      	nop
 8001e90:	48000400 	.word	0x48000400
 8001e94:	48000800 	.word	0x48000800
 8001e98:	48000c00 	.word	0x48000c00
 8001e9c:	48001000 	.word	0x48001000
 8001ea0:	48001400 	.word	0x48001400
 8001ea4:	48001800 	.word	0x48001800
 8001ea8:	48001c00 	.word	0x48001c00
 8001eac:	48002000 	.word	0x48002000
 8001eb0:	08011084 	.word	0x08011084
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 81c2 	beq.w	8002250 <HAL_GPIO_Init+0x4d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d005      	beq.n	8001ee4 <HAL_GPIO_Init+0x168>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d144      	bne.n	8001f6e <HAL_GPIO_Init+0x1f2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00f      	beq.n	8001f0c <HAL_GPIO_Init+0x190>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d00b      	beq.n	8001f0c <HAL_GPIO_Init+0x190>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d007      	beq.n	8001f0c <HAL_GPIO_Init+0x190>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x190>
 8001f04:	21bb      	movs	r1, #187	@ 0xbb
 8001f06:	4895      	ldr	r0, [pc, #596]	@ (800215c <HAL_GPIO_Init+0x3e0>)
 8001f08:	f00d faf2 	bl	800f4f0 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f42:	2201      	movs	r2, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 0201 	and.w	r2, r3, #1
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d027      	beq.n	8001fca <HAL_GPIO_Init+0x24e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_GPIO_Init+0x21e>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d007      	beq.n	8001f9a <HAL_GPIO_Init+0x21e>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x21e>
 8001f92:	21dc      	movs	r1, #220	@ 0xdc
 8001f94:	4871      	ldr	r0, [pc, #452]	@ (800215c <HAL_GPIO_Init+0x3e0>)
 8001f96:	f00d faab 	bl	800f4f0 <assert_failed>

        temp = GPIOx->PUPDR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d153      	bne.n	800207e <HAL_GPIO_Init+0x302>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fdc:	d023      	beq.n	8002026 <HAL_GPIO_Init+0x2aa>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a5f      	ldr	r2, [pc, #380]	@ (8002160 <HAL_GPIO_Init+0x3e4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01f      	beq.n	8002026 <HAL_GPIO_Init+0x2aa>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8002164 <HAL_GPIO_Init+0x3e8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01b      	beq.n	8002026 <HAL_GPIO_Init+0x2aa>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a5d      	ldr	r2, [pc, #372]	@ (8002168 <HAL_GPIO_Init+0x3ec>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d017      	beq.n	8002026 <HAL_GPIO_Init+0x2aa>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a5c      	ldr	r2, [pc, #368]	@ (800216c <HAL_GPIO_Init+0x3f0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x2aa>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a5b      	ldr	r2, [pc, #364]	@ (8002170 <HAL_GPIO_Init+0x3f4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00f      	beq.n	8002026 <HAL_GPIO_Init+0x2aa>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a5a      	ldr	r2, [pc, #360]	@ (8002174 <HAL_GPIO_Init+0x3f8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00b      	beq.n	8002026 <HAL_GPIO_Init+0x2aa>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a59      	ldr	r2, [pc, #356]	@ (8002178 <HAL_GPIO_Init+0x3fc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x2aa>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a58      	ldr	r2, [pc, #352]	@ (800217c <HAL_GPIO_Init+0x400>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x2aa>
 800201e:	21e8      	movs	r1, #232	@ 0xe8
 8002020:	484e      	ldr	r0, [pc, #312]	@ (800215c <HAL_GPIO_Init+0x3e0>)
 8002022:	f00d fa65 	bl	800f4f0 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b0f      	cmp	r3, #15
 800202c:	d903      	bls.n	8002036 <HAL_GPIO_Init+0x2ba>
 800202e:	21e9      	movs	r1, #233	@ 0xe9
 8002030:	484a      	ldr	r0, [pc, #296]	@ (800215c <HAL_GPIO_Init+0x3e0>)
 8002032:	f00d fa5d 	bl	800f4f0 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	6939      	ldr	r1, [r7, #16]
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0203 	and.w	r2, r3, #3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80c8 	beq.w	8002250 <HAL_GPIO_Init+0x4d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002180 <HAL_GPIO_Init+0x404>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002180 <HAL_GPIO_Init+0x404>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80020cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002180 <HAL_GPIO_Init+0x404>)
 80020ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002184 <HAL_GPIO_Init+0x408>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002102:	d041      	beq.n	8002188 <HAL_GPIO_Init+0x40c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a16      	ldr	r2, [pc, #88]	@ (8002160 <HAL_GPIO_Init+0x3e4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d025      	beq.n	8002158 <HAL_GPIO_Init+0x3dc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a15      	ldr	r2, [pc, #84]	@ (8002164 <HAL_GPIO_Init+0x3e8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d01f      	beq.n	8002154 <HAL_GPIO_Init+0x3d8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a14      	ldr	r2, [pc, #80]	@ (8002168 <HAL_GPIO_Init+0x3ec>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d019      	beq.n	8002150 <HAL_GPIO_Init+0x3d4>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a13      	ldr	r2, [pc, #76]	@ (800216c <HAL_GPIO_Init+0x3f0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <HAL_GPIO_Init+0x3d0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <HAL_GPIO_Init+0x3f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00d      	beq.n	8002148 <HAL_GPIO_Init+0x3cc>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <HAL_GPIO_Init+0x3f8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <HAL_GPIO_Init+0x3c8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a10      	ldr	r2, [pc, #64]	@ (8002178 <HAL_GPIO_Init+0x3fc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_GPIO_Init+0x3c4>
 800213c:	2307      	movs	r3, #7
 800213e:	e024      	b.n	800218a <HAL_GPIO_Init+0x40e>
 8002140:	2308      	movs	r3, #8
 8002142:	e022      	b.n	800218a <HAL_GPIO_Init+0x40e>
 8002144:	2306      	movs	r3, #6
 8002146:	e020      	b.n	800218a <HAL_GPIO_Init+0x40e>
 8002148:	2305      	movs	r3, #5
 800214a:	e01e      	b.n	800218a <HAL_GPIO_Init+0x40e>
 800214c:	2304      	movs	r3, #4
 800214e:	e01c      	b.n	800218a <HAL_GPIO_Init+0x40e>
 8002150:	2303      	movs	r3, #3
 8002152:	e01a      	b.n	800218a <HAL_GPIO_Init+0x40e>
 8002154:	2302      	movs	r3, #2
 8002156:	e018      	b.n	800218a <HAL_GPIO_Init+0x40e>
 8002158:	2301      	movs	r3, #1
 800215a:	e016      	b.n	800218a <HAL_GPIO_Init+0x40e>
 800215c:	08011084 	.word	0x08011084
 8002160:	48000400 	.word	0x48000400
 8002164:	48000800 	.word	0x48000800
 8002168:	48000c00 	.word	0x48000c00
 800216c:	48001000 	.word	0x48001000
 8002170:	48001400 	.word	0x48001400
 8002174:	48001800 	.word	0x48001800
 8002178:	48001c00 	.word	0x48001c00
 800217c:	48002000 	.word	0x48002000
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000
 8002188:	2300      	movs	r3, #0
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	f002 0203 	and.w	r2, r2, #3
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	4093      	lsls	r3, r2
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800219a:	4935      	ldr	r1, [pc, #212]	@ (8002270 <HAL_GPIO_Init+0x4f4>)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a8:	4b32      	ldr	r3, [pc, #200]	@ (8002274 <HAL_GPIO_Init+0x4f8>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021cc:	4a29      	ldr	r2, [pc, #164]	@ (8002274 <HAL_GPIO_Init+0x4f8>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021d2:	4b28      	ldr	r3, [pc, #160]	@ (8002274 <HAL_GPIO_Init+0x4f8>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002274 <HAL_GPIO_Init+0x4f8>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <HAL_GPIO_Init+0x4f8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x4a4>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002220:	4a14      	ldr	r2, [pc, #80]	@ (8002274 <HAL_GPIO_Init+0x4f8>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <HAL_GPIO_Init+0x4f8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x4ce>
        {
          temp |= iocurrent;
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <HAL_GPIO_Init+0x4f8>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3301      	adds	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f ae27 	bne.w	8001eb4 <HAL_GPIO_Init+0x138>
  }
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40010000 	.word	0x40010000
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <HAL_GPIO_ReadPin+0x1c>
 800228a:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 800228e:	4809      	ldr	r0, [pc, #36]	@ (80022b4 <HAL_GPIO_ReadPin+0x3c>)
 8002290:	f00d f92e 	bl	800f4f0 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	887b      	ldrh	r3, [r7, #2]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e001      	b.n	80022aa <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	08011084 	.word	0x08011084

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80022c8:	887b      	ldrh	r3, [r7, #2]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d104      	bne.n	80022d8 <HAL_GPIO_WritePin+0x20>
 80022ce:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80022d2:	480e      	ldr	r0, [pc, #56]	@ (800230c <HAL_GPIO_WritePin+0x54>)
 80022d4:	f00d f90c 	bl	800f4f0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_WritePin+0x36>
 80022de:	787b      	ldrb	r3, [r7, #1]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d004      	beq.n	80022ee <HAL_GPIO_WritePin+0x36>
 80022e4:	f240 11af 	movw	r1, #431	@ 0x1af
 80022e8:	4808      	ldr	r0, [pc, #32]	@ (800230c <HAL_GPIO_WritePin+0x54>)
 80022ea:	f00d f901 	bl	800f4f0 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80022ee:	787b      	ldrb	r3, [r7, #1]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f4:	887a      	ldrh	r2, [r7, #2]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022fa:	e002      	b.n	8002302 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	08011084 	.word	0x08011084

08002310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e115      	b.n	800254e <HAL_I2C_Init+0x23e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a8c      	ldr	r2, [pc, #560]	@ (8002558 <HAL_I2C_Init+0x248>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d013      	beq.n	8002354 <HAL_I2C_Init+0x44>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a8a      	ldr	r2, [pc, #552]	@ (800255c <HAL_I2C_Init+0x24c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00e      	beq.n	8002354 <HAL_I2C_Init+0x44>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a89      	ldr	r2, [pc, #548]	@ (8002560 <HAL_I2C_Init+0x250>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_I2C_Init+0x44>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a87      	ldr	r2, [pc, #540]	@ (8002564 <HAL_I2C_Init+0x254>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_I2C_Init+0x44>
 800234a:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800234e:	4886      	ldr	r0, [pc, #536]	@ (8002568 <HAL_I2C_Init+0x258>)
 8002350:	f00d f8ce 	bl	800f4f0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235c:	d304      	bcc.n	8002368 <HAL_I2C_Init+0x58>
 800235e:	f240 2121 	movw	r1, #545	@ 0x221
 8002362:	4881      	ldr	r0, [pc, #516]	@ (8002568 <HAL_I2C_Init+0x258>)
 8002364:	f00d f8c4 	bl	800f4f0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d008      	beq.n	8002382 <HAL_I2C_Init+0x72>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d004      	beq.n	8002382 <HAL_I2C_Init+0x72>
 8002378:	f240 2122 	movw	r1, #546	@ 0x222
 800237c:	487a      	ldr	r0, [pc, #488]	@ (8002568 <HAL_I2C_Init+0x258>)
 800237e:	f00d f8b7 	bl	800f4f0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_I2C_Init+0x8e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002392:	d004      	beq.n	800239e <HAL_I2C_Init+0x8e>
 8002394:	f240 2123 	movw	r1, #547	@ 0x223
 8002398:	4873      	ldr	r0, [pc, #460]	@ (8002568 <HAL_I2C_Init+0x258>)
 800239a:	f00d f8a9 	bl	800f4f0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	2bff      	cmp	r3, #255	@ 0xff
 80023a4:	d904      	bls.n	80023b0 <HAL_I2C_Init+0xa0>
 80023a6:	f44f 7109 	mov.w	r1, #548	@ 0x224
 80023aa:	486f      	ldr	r0, [pc, #444]	@ (8002568 <HAL_I2C_Init+0x258>)
 80023ac:	f00d f8a0 	bl	800f4f0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_I2C_Init+0xea>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d01c      	beq.n	80023fa <HAL_I2C_Init+0xea>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d018      	beq.n	80023fa <HAL_I2C_Init+0xea>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d014      	beq.n	80023fa <HAL_I2C_Init+0xea>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d010      	beq.n	80023fa <HAL_I2C_Init+0xea>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d00c      	beq.n	80023fa <HAL_I2C_Init+0xea>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b06      	cmp	r3, #6
 80023e6:	d008      	beq.n	80023fa <HAL_I2C_Init+0xea>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b07      	cmp	r3, #7
 80023ee:	d004      	beq.n	80023fa <HAL_I2C_Init+0xea>
 80023f0:	f240 2125 	movw	r1, #549	@ 0x225
 80023f4:	485c      	ldr	r0, [pc, #368]	@ (8002568 <HAL_I2C_Init+0x258>)
 80023f6:	f00d f87b 	bl	800f4f0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_I2C_Init+0x106>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800240a:	d004      	beq.n	8002416 <HAL_I2C_Init+0x106>
 800240c:	f240 2126 	movw	r1, #550	@ 0x226
 8002410:	4855      	ldr	r0, [pc, #340]	@ (8002568 <HAL_I2C_Init+0x258>)
 8002412:	f00d f86d 	bl	800f4f0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_I2C_Init+0x122>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002426:	d004      	beq.n	8002432 <HAL_I2C_Init+0x122>
 8002428:	f240 2127 	movw	r1, #551	@ 0x227
 800242c:	484e      	ldr	r0, [pc, #312]	@ (8002568 <HAL_I2C_Init+0x258>)
 800242e:	f00d f85f 	bl	800f4f0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f00c fcbe 	bl	800edc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2224      	movs	r2, #36	@ 0x24
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002470:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002480:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	e006      	b.n	80024a8 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80024a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d108      	bne.n	80024c2 <HAL_I2C_Init+0x1b2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	e007      	b.n	80024d2 <HAL_I2C_Init+0x1c2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69d9      	ldr	r1, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40005400 	.word	0x40005400
 800255c:	40005800 	.word	0x40005800
 8002560:	40005c00 	.word	0x40005c00
 8002564:	40008400 	.word	0x40008400
 8002568:	080110c0 	.word	0x080110c0

0800256c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	461a      	mov	r2, r3
 8002578:	460b      	mov	r3, r1
 800257a:	817b      	strh	r3, [r7, #10]
 800257c:	4613      	mov	r3, r2
 800257e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b20      	cmp	r3, #32
 800258a:	f040 80fd 	bne.w	8002788 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_I2C_Master_Transmit+0x30>
 8002598:	2302      	movs	r3, #2
 800259a:	e0f6      	b.n	800278a <HAL_I2C_Master_Transmit+0x21e>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025a4:	f7fe f85c 	bl	8000660 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2319      	movs	r3, #25
 80025b0:	2201      	movs	r2, #1
 80025b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fa0a 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0e1      	b.n	800278a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2221      	movs	r2, #33	@ 0x21
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2210      	movs	r2, #16
 80025d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	893a      	ldrh	r2, [r7, #8]
 80025e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2bff      	cmp	r3, #255	@ 0xff
 80025f6:	d906      	bls.n	8002606 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	22ff      	movs	r2, #255	@ 0xff
 80025fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80025fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e007      	b.n	8002616 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002614:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d024      	beq.n	8002668 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002652:	b2db      	uxtb	r3, r3
 8002654:	3301      	adds	r3, #1
 8002656:	b2da      	uxtb	r2, r3
 8002658:	8979      	ldrh	r1, [r7, #10]
 800265a:	4b4e      	ldr	r3, [pc, #312]	@ (8002794 <HAL_I2C_Master_Transmit+0x228>)
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fc05 	bl	8002e70 <I2C_TransferConfig>
 8002666:	e066      	b.n	8002736 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266c:	b2da      	uxtb	r2, r3
 800266e:	8979      	ldrh	r1, [r7, #10]
 8002670:	4b48      	ldr	r3, [pc, #288]	@ (8002794 <HAL_I2C_Master_Transmit+0x228>)
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fbfa 	bl	8002e70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800267c:	e05b      	b.n	8002736 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f9fd 	bl	8002a82 <I2C_WaitOnTXISFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e07b      	b.n	800278a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	781a      	ldrb	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d034      	beq.n	8002736 <HAL_I2C_Master_Transmit+0x1ca>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d130      	bne.n	8002736 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	2200      	movs	r2, #0
 80026dc:	2180      	movs	r1, #128	@ 0x80
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f976 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e04d      	b.n	800278a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2bff      	cmp	r3, #255	@ 0xff
 80026f6:	d90e      	bls.n	8002716 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	22ff      	movs	r2, #255	@ 0xff
 80026fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002702:	b2da      	uxtb	r2, r3
 8002704:	8979      	ldrh	r1, [r7, #10]
 8002706:	2300      	movs	r3, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fbae 	bl	8002e70 <I2C_TransferConfig>
 8002714:	e00f      	b.n	8002736 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002724:	b2da      	uxtb	r2, r3
 8002726:	8979      	ldrh	r1, [r7, #10]
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fb9d 	bl	8002e70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d19e      	bne.n	800267e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	6a39      	ldr	r1, [r7, #32]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f9e3 	bl	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e01a      	b.n	800278a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2220      	movs	r2, #32
 800275a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <HAL_I2C_Master_Transmit+0x22c>)
 8002768:	400b      	ands	r3, r1
 800276a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	80002000 	.word	0x80002000
 8002798:	fe00e800 	.word	0xfe00e800

0800279c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	461a      	mov	r2, r3
 80027a8:	460b      	mov	r3, r1
 80027aa:	817b      	strh	r3, [r7, #10]
 80027ac:	4613      	mov	r3, r2
 80027ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	f040 80db 	bne.w	8002974 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_I2C_Master_Receive+0x30>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e0d4      	b.n	8002976 <HAL_I2C_Master_Receive+0x1da>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027d4:	f7fd ff44 	bl	8000660 <HAL_GetTick>
 80027d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2319      	movs	r3, #25
 80027e0:	2201      	movs	r2, #1
 80027e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f8f2 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0bf      	b.n	8002976 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2222      	movs	r2, #34	@ 0x22
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2210      	movs	r2, #16
 8002802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	893a      	ldrh	r2, [r7, #8]
 8002816:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	2bff      	cmp	r3, #255	@ 0xff
 8002826:	d90e      	bls.n	8002846 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	b2da      	uxtb	r2, r3
 8002834:	8979      	ldrh	r1, [r7, #10]
 8002836:	4b52      	ldr	r3, [pc, #328]	@ (8002980 <HAL_I2C_Master_Receive+0x1e4>)
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fb16 	bl	8002e70 <I2C_TransferConfig>
 8002844:	e06d      	b.n	8002922 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002854:	b2da      	uxtb	r2, r3
 8002856:	8979      	ldrh	r1, [r7, #10]
 8002858:	4b49      	ldr	r3, [pc, #292]	@ (8002980 <HAL_I2C_Master_Receive+0x1e4>)
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fb05 	bl	8002e70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002866:	e05c      	b.n	8002922 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	6a39      	ldr	r1, [r7, #32]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f993 	bl	8002b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e07c      	b.n	8002976 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d034      	beq.n	8002922 <HAL_I2C_Master_Receive+0x186>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d130      	bne.n	8002922 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2200      	movs	r2, #0
 80028c8:	2180      	movs	r1, #128	@ 0x80
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f880 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e04d      	b.n	8002976 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2bff      	cmp	r3, #255	@ 0xff
 80028e2:	d90e      	bls.n	8002902 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	22ff      	movs	r2, #255	@ 0xff
 80028e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	2300      	movs	r3, #0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fab8 	bl	8002e70 <I2C_TransferConfig>
 8002900:	e00f      	b.n	8002922 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002910:	b2da      	uxtb	r2, r3
 8002912:	8979      	ldrh	r1, [r7, #10]
 8002914:	2300      	movs	r3, #0
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 faa7 	bl	8002e70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d19d      	bne.n	8002868 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	6a39      	ldr	r1, [r7, #32]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f8ed 	bl	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e01a      	b.n	8002976 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2220      	movs	r2, #32
 8002946:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <HAL_I2C_Master_Receive+0x1e8>)
 8002954:	400b      	ands	r3, r1
 8002956:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002974:	2302      	movs	r3, #2
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	80002400 	.word	0x80002400
 8002984:	fe00e800 	.word	0xfe00e800

08002988 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d103      	bne.n	80029a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d007      	beq.n	80029c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	619a      	str	r2, [r3, #24]
  }
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e0:	e03b      	b.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f962 	bl	8002cb0 <I2C_IsErrorOccurred>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e041      	b.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d02d      	beq.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fe:	f7fd fe2f 	bl	8000660 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d122      	bne.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d113      	bne.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	f043 0220 	orr.w	r2, r3, #32
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00f      	b.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4013      	ands	r3, r2
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	bf0c      	ite	eq
 8002a6a:	2301      	moveq	r3, #1
 8002a6c:	2300      	movne	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d0b4      	beq.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a8e:	e033      	b.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f90b 	bl	8002cb0 <I2C_IsErrorOccurred>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e031      	b.n	8002b08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d025      	beq.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	f7fd fdd8 	bl	8000660 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d302      	bcc.n	8002ac2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11a      	bne.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d013      	beq.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d1c4      	bne.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1c:	e02f      	b.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f8c4 	bl	8002cb0 <I2C_IsErrorOccurred>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e02d      	b.n	8002b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7fd fd95 	bl	8000660 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d11a      	bne.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d013      	beq.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e007      	b.n	8002b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d1c8      	bne.n	8002b1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ba8:	e071      	b.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f87e 	bl	8002cb0 <I2C_IsErrorOccurred>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d13b      	bne.n	8002c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d138      	bne.n	8002c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d105      	bne.n	8002bec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d121      	bne.n	8002c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2210      	movs	r2, #16
 8002c00:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2204      	movs	r2, #4
 8002c06:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b24      	ldr	r3, [pc, #144]	@ (8002cac <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	75fb      	strb	r3, [r7, #23]
 8002c3c:	e002      	b.n	8002c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002c44:	f7fd fd0c 	bl	8000660 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d302      	bcc.n	8002c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d119      	bne.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d116      	bne.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d00f      	beq.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d002      	beq.n	8002ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d083      	beq.n	8002baa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	fe00e800 	.word	0xfe00e800

08002cb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	@ 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d068      	beq.n	8002dae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ce4:	e049      	b.n	8002d7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d045      	beq.n	8002d7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7fd fcb7 	bl	8000660 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_IsErrorOccurred+0x54>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d13a      	bne.n	8002d7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d26:	d121      	bne.n	8002d6c <I2C_IsErrorOccurred+0xbc>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d2e:	d01d      	beq.n	8002d6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d01a      	beq.n	8002d6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d46:	f7fd fc8b 	bl	8000660 <HAL_GetTick>
 8002d4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d4c:	e00e      	b.n	8002d6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d4e:	f7fd fc87 	bl	8000660 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b19      	cmp	r3, #25
 8002d5a:	d907      	bls.n	8002d6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f043 0320 	orr.w	r3, r3, #32
 8002d62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d6a:	e006      	b.n	8002d7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d1e9      	bne.n	8002d4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d003      	beq.n	8002d90 <I2C_IsErrorOccurred+0xe0>
 8002d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0aa      	beq.n	8002ce6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d103      	bne.n	8002da0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	f043 0308 	orr.w	r3, r3, #8
 8002de8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002df2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	f043 0302 	orr.w	r3, r3, #2
 8002e0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01c      	beq.n	8002e5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fdaf 	bl	8002988 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <I2C_IsErrorOccurred+0x1bc>)
 8002e36:	400b      	ands	r3, r1
 8002e38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3728      	adds	r7, #40	@ 0x28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	fe00e800 	.word	0xfe00e800

08002e70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	817b      	strh	r3, [r7, #10]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2f      	ldr	r2, [pc, #188]	@ (8002f44 <I2C_TransferConfig+0xd4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d013      	beq.n	8002eb4 <I2C_TransferConfig+0x44>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2d      	ldr	r2, [pc, #180]	@ (8002f48 <I2C_TransferConfig+0xd8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00e      	beq.n	8002eb4 <I2C_TransferConfig+0x44>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f4c <I2C_TransferConfig+0xdc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d009      	beq.n	8002eb4 <I2C_TransferConfig+0x44>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f50 <I2C_TransferConfig+0xe0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <I2C_TransferConfig+0x44>
 8002eaa:	f641 41a9 	movw	r1, #7337	@ 0x1ca9
 8002eae:	4829      	ldr	r0, [pc, #164]	@ (8002f54 <I2C_TransferConfig+0xe4>)
 8002eb0:	f00c fb1e 	bl	800f4f0 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eba:	d00b      	beq.n	8002ed4 <I2C_TransferConfig+0x64>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ec2:	d007      	beq.n	8002ed4 <I2C_TransferConfig+0x64>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <I2C_TransferConfig+0x64>
 8002eca:	f641 41aa 	movw	r1, #7338	@ 0x1caa
 8002ece:	4821      	ldr	r0, [pc, #132]	@ (8002f54 <I2C_TransferConfig+0xe4>)
 8002ed0:	f00c fb0e 	bl	800f4f0 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	4a20      	ldr	r2, [pc, #128]	@ (8002f58 <I2C_TransferConfig+0xe8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00f      	beq.n	8002efc <I2C_TransferConfig+0x8c>
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	4a1f      	ldr	r2, [pc, #124]	@ (8002f5c <I2C_TransferConfig+0xec>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <I2C_TransferConfig+0x8c>
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f60 <I2C_TransferConfig+0xf0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <I2C_TransferConfig+0x8c>
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d004      	beq.n	8002efc <I2C_TransferConfig+0x8c>
 8002ef2:	f641 41ab 	movw	r1, #7339	@ 0x1cab
 8002ef6:	4817      	ldr	r0, [pc, #92]	@ (8002f54 <I2C_TransferConfig+0xe4>)
 8002ef8:	f00c fafa 	bl	800f4f0 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002efc:	897b      	ldrh	r3, [r7, #10]
 8002efe:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f02:	7a7b      	ldrb	r3, [r7, #9]
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f0a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f18:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	0d5b      	lsrs	r3, r3, #21
 8002f24:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f28:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <I2C_TransferConfig+0xf4>)
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	ea02 0103 	and.w	r1, r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f3c:	bf00      	nop
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40005400 	.word	0x40005400
 8002f48:	40005800 	.word	0x40005800
 8002f4c:	40005c00 	.word	0x40005c00
 8002f50:	40008400 	.word	0x40008400
 8002f54:	080110c0 	.word	0x080110c0
 8002f58:	80004000 	.word	0x80004000
 8002f5c:	80002400 	.word	0x80002400
 8002f60:	80002000 	.word	0x80002000
 8002f64:	03ff63ff 	.word	0x03ff63ff

08002f68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a32      	ldr	r2, [pc, #200]	@ (8003040 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d012      	beq.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a30      	ldr	r2, [pc, #192]	@ (8003044 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00d      	beq.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003048 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d008      	beq.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2d      	ldr	r2, [pc, #180]	@ (800304c <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d003      	beq.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002f9a:	2163      	movs	r1, #99	@ 0x63
 8002f9c:	482c      	ldr	r0, [pc, #176]	@ (8003050 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8002f9e:	f00c faa7 	bl	800f4f0 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fae:	d003      	beq.n	8002fb8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002fb0:	2164      	movs	r1, #100	@ 0x64
 8002fb2:	4827      	ldr	r0, [pc, #156]	@ (8003050 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8002fb4:	f00c fa9c 	bl	800f4f0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d138      	bne.n	8003036 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e032      	b.n	8003038 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2224      	movs	r2, #36	@ 0x24
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003000:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40005400 	.word	0x40005400
 8003044:	40005800 	.word	0x40005800
 8003048:	40005c00 	.word	0x40005c00
 800304c:	40008400 	.word	0x40008400
 8003050:	080110f8 	.word	0x080110f8

08003054 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a31      	ldr	r2, [pc, #196]	@ (8003128 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d012      	beq.n	800308e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2f      	ldr	r2, [pc, #188]	@ (800312c <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00d      	beq.n	800308e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2e      	ldr	r2, [pc, #184]	@ (8003130 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d008      	beq.n	800308e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2c      	ldr	r2, [pc, #176]	@ (8003134 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003086:	2191      	movs	r1, #145	@ 0x91
 8003088:	482b      	ldr	r0, [pc, #172]	@ (8003138 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800308a:	f00c fa31 	bl	800f4f0 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b0f      	cmp	r3, #15
 8003092:	d903      	bls.n	800309c <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8003094:	2192      	movs	r1, #146	@ 0x92
 8003096:	4828      	ldr	r0, [pc, #160]	@ (8003138 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003098:	f00c fa2a 	bl	800f4f0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d139      	bne.n	800311c <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e033      	b.n	800311e <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2224      	movs	r2, #36	@ 0x24
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40005400 	.word	0x40005400
 800312c:	40005800 	.word	0x40005800
 8003130:	40005c00 	.word	0x40005c00
 8003134:	40008400 	.word	0x40008400
 8003138:	080110f8 	.word	0x080110f8

0800313c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314a:	6013      	str	r3, [r2, #0]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40007000 	.word	0x40007000

0800315c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003160:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316c:	d102      	bne.n	8003174 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800316e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003172:	e00b      	b.n	800318c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003174:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800317a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003182:	d102      	bne.n	800318a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003188:	e000      	b.n	800318c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800318a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40007000 	.word	0x40007000

0800319c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0x26>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031b0:	d007      	beq.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0x26>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b8:	d003      	beq.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0x26>
 80031ba:	21a7      	movs	r1, #167	@ 0xa7
 80031bc:	484d      	ldr	r0, [pc, #308]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x158>)
 80031be:	f00c f997 	bl	800f4f0 <assert_failed>

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d141      	bne.n	800324c <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c8:	4b4b      	ldr	r3, [pc, #300]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d4:	d131      	bne.n	800323a <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d6:	4b48      	ldr	r3, [pc, #288]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031dc:	4a46      	ldr	r2, [pc, #280]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031e2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e6:	4b44      	ldr	r3, [pc, #272]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031ee:	4a42      	ldr	r2, [pc, #264]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80031f6:	4b41      	ldr	r3, [pc, #260]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x160>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2232      	movs	r2, #50	@ 0x32
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	4a3f      	ldr	r2, [pc, #252]	@ (8003300 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0c9b      	lsrs	r3, r3, #18
 8003208:	3301      	adds	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320c:	e002      	b.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3b01      	subs	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003214:	4b38      	ldr	r3, [pc, #224]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003220:	d102      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f2      	bne.n	800320e <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003228:	4b33      	ldr	r3, [pc, #204]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003234:	d158      	bne.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e057      	b.n	80032ea <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800323a:	4b2f      	ldr	r3, [pc, #188]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800323c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003240:	4a2d      	ldr	r2, [pc, #180]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003242:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003246:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800324a:	e04d      	b.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003252:	d141      	bne.n	80032d8 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003254:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003260:	d131      	bne.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003262:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003268:	4a23      	ldr	r2, [pc, #140]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800326a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003272:	4b21      	ldr	r3, [pc, #132]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800327a:	4a1f      	ldr	r2, [pc, #124]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800327c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003282:	4b1e      	ldr	r3, [pc, #120]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x160>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2232      	movs	r2, #50	@ 0x32
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0c9b      	lsrs	r3, r3, #18
 8003294:	3301      	adds	r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003298:	e002      	b.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3b01      	subs	r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a0:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ac:	d102      	bne.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x118>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f2      	bne.n	800329a <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032b4:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c0:	d112      	bne.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e011      	b.n	80032ea <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c6:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032cc:	4a0a      	ldr	r2, [pc, #40]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032d6:	e007      	b.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032d8:	4b07      	ldr	r3, [pc, #28]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032e0:	4a05      	ldr	r2, [pc, #20]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	08011134 	.word	0x08011134
 80032f8:	40007000 	.word	0x40007000
 80032fc:	20000008 	.word	0x20000008
 8003300:	431bde83 	.word	0x431bde83

08003304 <HAL_PWREx_EnableBatteryCharging>:
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_5     5 kOhms resistor
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_1_5 1.5 kOhms resistor
  * @retval None
  */
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_PWREx_EnableBatteryCharging+0x20>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003318:	d004      	beq.n	8003324 <HAL_PWREx_EnableBatteryCharging+0x20>
 800331a:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800331e:	480a      	ldr	r0, [pc, #40]	@ (8003348 <HAL_PWREx_EnableBatteryCharging+0x44>)
 8003320:	f00c f8e6 	bl	800f4f0 <assert_failed>

  /* Specify resistor selection */
  MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
 8003324:	4b09      	ldr	r3, [pc, #36]	@ (800334c <HAL_PWREx_EnableBatteryCharging+0x48>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800332c:	4907      	ldr	r1, [pc, #28]	@ (800334c <HAL_PWREx_EnableBatteryCharging+0x48>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4313      	orrs	r3, r2
 8003332:	60cb      	str	r3, [r1, #12]

  /* Enable battery charging */
  SET_BIT(PWR->CR4, PWR_CR4_VBE);
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_PWREx_EnableBatteryCharging+0x48>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a04      	ldr	r2, [pc, #16]	@ (800334c <HAL_PWREx_EnableBatteryCharging+0x48>)
 800333a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800333e:	60d3      	str	r3, [r2, #12]
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	08011134 	.word	0x08011134
 800334c:	40007000 	.word	0x40007000

08003350 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003354:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a04      	ldr	r2, [pc, #16]	@ (800336c <HAL_PWREx_EnableVddIO2+0x1c>)
 800335a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800335e:	6053      	str	r3, [r2, #4]
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40007000 	.word	0x40007000

08003370 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f000 bd3e 	b.w	8003e00 <HAL_RCC_OscConfig+0xa90>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_OscConfig+0x2e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b3f      	cmp	r3, #63	@ 0x3f
 8003392:	d904      	bls.n	800339e <HAL_RCC_OscConfig+0x2e>
 8003394:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8003398:	489b      	ldr	r0, [pc, #620]	@ (8003608 <HAL_RCC_OscConfig+0x298>)
 800339a:	f00c f8a9 	bl	800f4f0 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339e:	4b9b      	ldr	r3, [pc, #620]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a8:	4b98      	ldr	r3, [pc, #608]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 813f 	beq.w	800363e <HAL_RCC_OscConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCC_OscConfig+0x6a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d004      	beq.n	80033da <HAL_RCC_OscConfig+0x6a>
 80033d0:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80033d4:	488c      	ldr	r0, [pc, #560]	@ (8003608 <HAL_RCC_OscConfig+0x298>)
 80033d6:	f00c f88b 	bl	800f4f0 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2bff      	cmp	r3, #255	@ 0xff
 80033e0:	d904      	bls.n	80033ec <HAL_RCC_OscConfig+0x7c>
 80033e2:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80033e6:	4888      	ldr	r0, [pc, #544]	@ (8003608 <HAL_RCC_OscConfig+0x298>)
 80033e8:	f00c f882 	bl	800f4f0 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d030      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d02c      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	2b20      	cmp	r3, #32
 8003402:	d028      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	2b30      	cmp	r3, #48	@ 0x30
 800340a:	d024      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	2b40      	cmp	r3, #64	@ 0x40
 8003412:	d020      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	2b50      	cmp	r3, #80	@ 0x50
 800341a:	d01c      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	2b60      	cmp	r3, #96	@ 0x60
 8003422:	d018      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	2b70      	cmp	r3, #112	@ 0x70
 800342a:	d014      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	2b80      	cmp	r3, #128	@ 0x80
 8003432:	d010      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	2b90      	cmp	r3, #144	@ 0x90
 800343a:	d00c      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	2ba0      	cmp	r3, #160	@ 0xa0
 8003442:	d008      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	2bb0      	cmp	r3, #176	@ 0xb0
 800344a:	d004      	beq.n	8003456 <HAL_RCC_OscConfig+0xe6>
 800344c:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8003450:	486d      	ldr	r0, [pc, #436]	@ (8003608 <HAL_RCC_OscConfig+0x298>)
 8003452:	f00c f84d 	bl	800f4f0 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_RCC_OscConfig+0xfc>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	f040 808f 	bne.w	8003582 <HAL_RCC_OscConfig+0x212>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b01      	cmp	r3, #1
 8003468:	f040 808b 	bne.w	8003582 <HAL_RCC_OscConfig+0x212>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800346c:	4b67      	ldr	r3, [pc, #412]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d006      	beq.n	8003486 <HAL_RCC_OscConfig+0x116>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	f000 bcbd 	b.w	8003e00 <HAL_RCC_OscConfig+0xa90>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1a      	ldr	r2, [r3, #32]
 800348a:	4b60      	ldr	r3, [pc, #384]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <HAL_RCC_OscConfig+0x130>
 8003496:	4b5d      	ldr	r3, [pc, #372]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800349e:	e005      	b.n	80034ac <HAL_RCC_OscConfig+0x13c>
 80034a0:	4b5a      	ldr	r3, [pc, #360]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d224      	bcs.n	80034fa <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 ff6d 	bl	8004394 <RCC_SetFlashLatencyFromMSIRange>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f000 bc9d 	b.w	8003e00 <HAL_RCC_OscConfig+0xa90>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c6:	4b51      	ldr	r3, [pc, #324]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a50      	ldr	r2, [pc, #320]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80034cc:	f043 0308 	orr.w	r3, r3, #8
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b4e      	ldr	r3, [pc, #312]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	494b      	ldr	r1, [pc, #300]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034e4:	4b49      	ldr	r3, [pc, #292]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	4946      	ldr	r1, [pc, #280]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	e026      	b.n	8003548 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034fa:	4b44      	ldr	r3, [pc, #272]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a43      	ldr	r2, [pc, #268]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b41      	ldr	r3, [pc, #260]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	493e      	ldr	r1, [pc, #248]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003518:	4b3c      	ldr	r3, [pc, #240]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	4939      	ldr	r1, [pc, #228]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 8003528:	4313      	orrs	r3, r2
 800352a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 ff2c 	bl	8004394 <RCC_SetFlashLatencyFromMSIRange>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f000 bc5c 	b.w	8003e00 <HAL_RCC_OscConfig+0xa90>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003548:	f000 fe60 	bl	800420c <HAL_RCC_GetSysClockFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b2f      	ldr	r3, [pc, #188]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	492d      	ldr	r1, [pc, #180]	@ (8003610 <HAL_RCC_OscConfig+0x2a0>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	4a2b      	ldr	r2, [pc, #172]	@ (8003614 <HAL_RCC_OscConfig+0x2a4>)
 8003566:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003568:	4b2b      	ldr	r3, [pc, #172]	@ (8003618 <HAL_RCC_OscConfig+0x2a8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd f827 	bl	80005c0 <HAL_InitTick>
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05f      	beq.n	800363c <HAL_RCC_OscConfig+0x2cc>
        {
          return status;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	f000 bc3f 	b.w	8003e00 <HAL_RCC_OscConfig+0xa90>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d033      	beq.n	80035f2 <HAL_RCC_OscConfig+0x282>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800358a:	4b20      	ldr	r3, [pc, #128]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1f      	ldr	r2, [pc, #124]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003596:	f7fd f863 	bl	8000660 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800359c:	e009      	b.n	80035b2 <HAL_RCC_OscConfig+0x242>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800359e:	f7fd f85f 	bl	8000660 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d902      	bls.n	80035b2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	f000 bc27 	b.w	8003e00 <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035b2:	4b16      	ldr	r3, [pc, #88]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0ef      	beq.n	800359e <HAL_RCC_OscConfig+0x22e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035be:	4b13      	ldr	r3, [pc, #76]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a12      	ldr	r2, [pc, #72]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80035c4:	f043 0308 	orr.w	r3, r3, #8
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b10      	ldr	r3, [pc, #64]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	490d      	ldr	r1, [pc, #52]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	4908      	ldr	r1, [pc, #32]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
 80035f0:	e025      	b.n	800363e <HAL_RCC_OscConfig+0x2ce>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a05      	ldr	r2, [pc, #20]	@ (800360c <HAL_RCC_OscConfig+0x29c>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035fe:	f7fd f82f 	bl	8000660 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003604:	e013      	b.n	800362e <HAL_RCC_OscConfig+0x2be>
 8003606:	bf00      	nop
 8003608:	08011170 	.word	0x08011170
 800360c:	40021000 	.word	0x40021000
 8003610:	080118f8 	.word	0x080118f8
 8003614:	20000008 	.word	0x20000008
 8003618:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800361c:	f7fd f820 	bl	8000660 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e3e8      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800362e:	4b97      	ldr	r3, [pc, #604]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x2ac>
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x2ce>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800363c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d07e      	beq.n	8003748 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <HAL_RCC_OscConfig+0x300>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800365a:	d009      	beq.n	8003670 <HAL_RCC_OscConfig+0x300>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003664:	d004      	beq.n	8003670 <HAL_RCC_OscConfig+0x300>
 8003666:	f240 2119 	movw	r1, #537	@ 0x219
 800366a:	4889      	ldr	r0, [pc, #548]	@ (8003890 <HAL_RCC_OscConfig+0x520>)
 800366c:	f00b ff40 	bl	800f4f0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b08      	cmp	r3, #8
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x312>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b0c      	cmp	r3, #12
 800367a:	d10e      	bne.n	800369a <HAL_RCC_OscConfig+0x32a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d10b      	bne.n	800369a <HAL_RCC_OscConfig+0x32a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003682:	4b82      	ldr	r3, [pc, #520]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d05b      	beq.n	8003746 <HAL_RCC_OscConfig+0x3d6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d157      	bne.n	8003746 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e3b2      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x342>
 80036a4:	4b79      	ldr	r3, [pc, #484]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a78      	ldr	r2, [pc, #480]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	e01d      	b.n	80036ee <HAL_RCC_OscConfig+0x37e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036ba:	d10c      	bne.n	80036d6 <HAL_RCC_OscConfig+0x366>
 80036bc:	4b73      	ldr	r3, [pc, #460]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a72      	ldr	r2, [pc, #456]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80036c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b70      	ldr	r3, [pc, #448]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a6f      	ldr	r2, [pc, #444]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80036ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	e00b      	b.n	80036ee <HAL_RCC_OscConfig+0x37e>
 80036d6:	4b6d      	ldr	r3, [pc, #436]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6c      	ldr	r2, [pc, #432]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80036dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	4b6a      	ldr	r3, [pc, #424]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a69      	ldr	r2, [pc, #420]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80036e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d013      	beq.n	800371e <HAL_RCC_OscConfig+0x3ae>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fc ffb3 	bl	8000660 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fe:	f7fc ffaf 	bl	8000660 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b64      	cmp	r3, #100	@ 0x64
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e377      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003710:	4b5e      	ldr	r3, [pc, #376]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x38e>
 800371c:	e014      	b.n	8003748 <HAL_RCC_OscConfig+0x3d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fc ff9f 	bl	8000660 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x3c8>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003726:	f7fc ff9b 	bl	8000660 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b64      	cmp	r3, #100	@ 0x64
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x3c8>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e363      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003738:	4b54      	ldr	r3, [pc, #336]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x3b6>
 8003744:	e000      	b.n	8003748 <HAL_RCC_OscConfig+0x3d8>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003746:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d077      	beq.n	8003844 <HAL_RCC_OscConfig+0x4d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d009      	beq.n	8003770 <HAL_RCC_OscConfig+0x400>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003764:	d004      	beq.n	8003770 <HAL_RCC_OscConfig+0x400>
 8003766:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800376a:	4849      	ldr	r0, [pc, #292]	@ (8003890 <HAL_RCC_OscConfig+0x520>)
 800376c:	f00b fec0 	bl	800f4f0 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b7f      	cmp	r3, #127	@ 0x7f
 8003776:	d904      	bls.n	8003782 <HAL_RCC_OscConfig+0x412>
 8003778:	f240 214d 	movw	r1, #589	@ 0x24d
 800377c:	4844      	ldr	r0, [pc, #272]	@ (8003890 <HAL_RCC_OscConfig+0x520>)
 800377e:	f00b feb7 	bl	800f4f0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b04      	cmp	r3, #4
 8003786:	d005      	beq.n	8003794 <HAL_RCC_OscConfig+0x424>
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d119      	bne.n	80037c2 <HAL_RCC_OscConfig+0x452>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d116      	bne.n	80037c2 <HAL_RCC_OscConfig+0x452>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003794:	4b3d      	ldr	r3, [pc, #244]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_OscConfig+0x43c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_OscConfig+0x43c>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e329      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ac:	4b37      	ldr	r3, [pc, #220]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	4934      	ldr	r1, [pc, #208]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c0:	e040      	b.n	8003844 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d023      	beq.n	8003812 <HAL_RCC_OscConfig+0x4a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ca:	4b30      	ldr	r3, [pc, #192]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2f      	ldr	r2, [pc, #188]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fc ff43 	bl	8000660 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x480>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037de:	f7fc ff3f 	bl	8000660 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x480>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e307      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f0:	4b26      	ldr	r3, [pc, #152]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x46e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fc:	4b23      	ldr	r3, [pc, #140]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	061b      	lsls	r3, r3, #24
 800380a:	4920      	ldr	r1, [pc, #128]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
 8003810:	e018      	b.n	8003844 <HAL_RCC_OscConfig+0x4d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003812:	4b1e      	ldr	r3, [pc, #120]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 8003818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800381c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fc ff1f 	bl	8000660 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x4c8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003826:	f7fc ff1b 	bl	8000660 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x4c8>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e2e3      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003838:	4b14      	ldr	r3, [pc, #80]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <HAL_RCC_OscConfig+0x4b6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d04e      	beq.n	80038ee <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_OscConfig+0x4fa>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d004      	beq.n	800386a <HAL_RCC_OscConfig+0x4fa>
 8003860:	f240 218d 	movw	r1, #653	@ 0x28d
 8003864:	480a      	ldr	r0, [pc, #40]	@ (8003890 <HAL_RCC_OscConfig+0x520>)
 8003866:	f00b fe43 	bl	800f4f0 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d021      	beq.n	80038b6 <HAL_RCC_OscConfig+0x546>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 8003874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003878:	4a04      	ldr	r2, [pc, #16]	@ (800388c <HAL_RCC_OscConfig+0x51c>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fc feed 	bl	8000660 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003888:	e00d      	b.n	80038a6 <HAL_RCC_OscConfig+0x536>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	08011170 	.word	0x08011170
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003894:	f7fc fee4 	bl	8000660 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e2ac      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a6:	4b93      	ldr	r3, [pc, #588]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80038a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ef      	beq.n	8003894 <HAL_RCC_OscConfig+0x524>
 80038b4:	e01b      	b.n	80038ee <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b6:	4b8f      	ldr	r3, [pc, #572]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80038b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038bc:	4a8d      	ldr	r2, [pc, #564]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c6:	f7fc fecb 	bl	8000660 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ce:	f7fc fec7 	bl	8000660 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e28f      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e0:	4b84      	ldr	r3, [pc, #528]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ef      	bne.n	80038ce <HAL_RCC_OscConfig+0x55e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80b2 	beq.w	8003a60 <HAL_RCC_OscConfig+0x6f0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fc:	2300      	movs	r3, #0
 80038fe:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00c      	beq.n	8003922 <HAL_RCC_OscConfig+0x5b2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d008      	beq.n	8003922 <HAL_RCC_OscConfig+0x5b2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b05      	cmp	r3, #5
 8003916:	d004      	beq.n	8003922 <HAL_RCC_OscConfig+0x5b2>
 8003918:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 800391c:	4876      	ldr	r0, [pc, #472]	@ (8003af8 <HAL_RCC_OscConfig+0x788>)
 800391e:	f00b fde7 	bl	800f4f0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003922:	4b74      	ldr	r3, [pc, #464]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <HAL_RCC_OscConfig+0x5da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	4b71      	ldr	r3, [pc, #452]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003932:	4a70      	ldr	r2, [pc, #448]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003938:	6593      	str	r3, [r2, #88]	@ 0x58
 800393a:	4b6e      	ldr	r3, [pc, #440]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003946:	2301      	movs	r3, #1
 8003948:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800394a:	4b6c      	ldr	r3, [pc, #432]	@ (8003afc <HAL_RCC_OscConfig+0x78c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d118      	bne.n	8003988 <HAL_RCC_OscConfig+0x618>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003956:	4b69      	ldr	r3, [pc, #420]	@ (8003afc <HAL_RCC_OscConfig+0x78c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a68      	ldr	r2, [pc, #416]	@ (8003afc <HAL_RCC_OscConfig+0x78c>)
 800395c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003962:	f7fc fe7d 	bl	8000660 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x60c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396a:	f7fc fe79 	bl	8000660 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x60c>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e241      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800397c:	4b5f      	ldr	r3, [pc, #380]	@ (8003afc <HAL_RCC_OscConfig+0x78c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCC_OscConfig+0x5fa>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d108      	bne.n	80039a2 <HAL_RCC_OscConfig+0x632>
 8003990:	4b58      	ldr	r3, [pc, #352]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003996:	4a57      	ldr	r2, [pc, #348]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039a0:	e024      	b.n	80039ec <HAL_RCC_OscConfig+0x67c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d110      	bne.n	80039cc <HAL_RCC_OscConfig+0x65c>
 80039aa:	4b52      	ldr	r3, [pc, #328]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b0:	4a50      	ldr	r2, [pc, #320]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80039b2:	f043 0304 	orr.w	r3, r3, #4
 80039b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039ba:	4b4e      	ldr	r3, [pc, #312]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c0:	4a4c      	ldr	r2, [pc, #304]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039ca:	e00f      	b.n	80039ec <HAL_RCC_OscConfig+0x67c>
 80039cc:	4b49      	ldr	r3, [pc, #292]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	4a48      	ldr	r2, [pc, #288]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039dc:	4b45      	ldr	r3, [pc, #276]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e2:	4a44      	ldr	r2, [pc, #272]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 80039e4:	f023 0304 	bic.w	r3, r3, #4
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d016      	beq.n	8003a22 <HAL_RCC_OscConfig+0x6b2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fc fe34 	bl	8000660 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_OscConfig+0x6a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fc fe30 	bl	8000660 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x6a2>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e1f6      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a12:	4b38      	ldr	r3, [pc, #224]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ed      	beq.n	80039fc <HAL_RCC_OscConfig+0x68c>
 8003a20:	e015      	b.n	8003a4e <HAL_RCC_OscConfig+0x6de>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a22:	f7fc fe1d 	bl	8000660 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_OscConfig+0x6d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fc fe19 	bl	8000660 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x6d0>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1df      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a40:	4b2c      	ldr	r3, [pc, #176]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1ed      	bne.n	8003a2a <HAL_RCC_OscConfig+0x6ba>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a4e:	7ffb      	ldrb	r3, [r7, #31]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d105      	bne.n	8003a60 <HAL_RCC_OscConfig+0x6f0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a54:	4b27      	ldr	r3, [pc, #156]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a58:	4a26      	ldr	r2, [pc, #152]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d050      	beq.n	8003b0e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_OscConfig+0x716>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d004      	beq.n	8003a86 <HAL_RCC_OscConfig+0x716>
 8003a7c:	f240 3145 	movw	r1, #837	@ 0x345
 8003a80:	481d      	ldr	r0, [pc, #116]	@ (8003af8 <HAL_RCC_OscConfig+0x788>)
 8003a82:	f00b fd35 	bl	800f4f0 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01c      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x758>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a8e:	4b19      	ldr	r3, [pc, #100]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a94:	4a17      	ldr	r2, [pc, #92]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9e:	f7fc fddf 	bl	8000660 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x748>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aa6:	f7fc fddb 	bl	8000660 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x748>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e1a3      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0ef      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x736>
 8003ac6:	e022      	b.n	8003b0e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ace:	4a09      	ldr	r2, [pc, #36]	@ (8003af4 <HAL_RCC_OscConfig+0x784>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fc fdc2 	bl	8000660 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ade:	e00f      	b.n	8003b00 <HAL_RCC_OscConfig+0x790>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ae0:	f7fc fdbe 	bl	8000660 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d908      	bls.n	8003b00 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e186      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	08011170 	.word	0x08011170
 8003afc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b00:	4b96      	ldr	r3, [pc, #600]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e8      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x770>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <HAL_RCC_OscConfig+0x7c0>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d008      	beq.n	8003b30 <HAL_RCC_OscConfig+0x7c0>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d004      	beq.n	8003b30 <HAL_RCC_OscConfig+0x7c0>
 8003b26:	f240 316e 	movw	r1, #878	@ 0x36e
 8003b2a:	488d      	ldr	r0, [pc, #564]	@ (8003d60 <HAL_RCC_OscConfig+0x9f0>)
 8003b2c:	f00b fce0 	bl	800f4f0 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8162 	beq.w	8003dfe <HAL_RCC_OscConfig+0xa8e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	f040 8138 	bne.w	8003db4 <HAL_RCC_OscConfig+0xa44>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d010      	beq.n	8003b6e <HAL_RCC_OscConfig+0x7fe>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d00c      	beq.n	8003b6e <HAL_RCC_OscConfig+0x7fe>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_OscConfig+0x7fe>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d004      	beq.n	8003b6e <HAL_RCC_OscConfig+0x7fe>
 8003b64:	f240 3176 	movw	r1, #886	@ 0x376
 8003b68:	487d      	ldr	r0, [pc, #500]	@ (8003d60 <HAL_RCC_OscConfig+0x9f0>)
 8003b6a:	f00b fcc1 	bl	800f4f0 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_OscConfig+0x80e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d904      	bls.n	8003b88 <HAL_RCC_OscConfig+0x818>
 8003b7e:	f240 3177 	movw	r1, #887	@ 0x377
 8003b82:	4877      	ldr	r0, [pc, #476]	@ (8003d60 <HAL_RCC_OscConfig+0x9f0>)
 8003b84:	f00b fcb4 	bl	800f4f0 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8c:	2b07      	cmp	r3, #7
 8003b8e:	d903      	bls.n	8003b98 <HAL_RCC_OscConfig+0x828>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b94:	2b56      	cmp	r3, #86	@ 0x56
 8003b96:	d904      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x832>
 8003b98:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8003b9c:	4870      	ldr	r0, [pc, #448]	@ (8003d60 <HAL_RCC_OscConfig+0x9f0>)
 8003b9e:	f00b fca7 	bl	800f4f0 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d903      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x842>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	2b1f      	cmp	r3, #31
 8003bb0:	d904      	bls.n	8003bbc <HAL_RCC_OscConfig+0x84c>
 8003bb2:	f240 317a 	movw	r1, #890	@ 0x37a
 8003bb6:	486a      	ldr	r0, [pc, #424]	@ (8003d60 <HAL_RCC_OscConfig+0x9f0>)
 8003bb8:	f00b fc9a 	bl	800f4f0 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d010      	beq.n	8003be6 <HAL_RCC_OscConfig+0x876>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d00c      	beq.n	8003be6 <HAL_RCC_OscConfig+0x876>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd0:	2b06      	cmp	r3, #6
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCC_OscConfig+0x876>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d004      	beq.n	8003be6 <HAL_RCC_OscConfig+0x876>
 8003bdc:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8003be0:	485f      	ldr	r0, [pc, #380]	@ (8003d60 <HAL_RCC_OscConfig+0x9f0>)
 8003be2:	f00b fc85 	bl	800f4f0 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d010      	beq.n	8003c10 <HAL_RCC_OscConfig+0x8a0>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d00c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x8a0>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	2b06      	cmp	r3, #6
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCC_OscConfig+0x8a0>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d004      	beq.n	8003c10 <HAL_RCC_OscConfig+0x8a0>
 8003c06:	f240 317d 	movw	r1, #893	@ 0x37d
 8003c0a:	4855      	ldr	r0, [pc, #340]	@ (8003d60 <HAL_RCC_OscConfig+0x9f0>)
 8003c0c:	f00b fc70 	bl	800f4f0 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c10:	4b52      	ldr	r3, [pc, #328]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0203 	and.w	r2, r3, #3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d12c      	bne.n	8003c7e <HAL_RCC_OscConfig+0x90e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d123      	bne.n	8003c7e <HAL_RCC_OscConfig+0x90e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d11b      	bne.n	8003c7e <HAL_RCC_OscConfig+0x90e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c50:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d113      	bne.n	8003c7e <HAL_RCC_OscConfig+0x90e>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	3b01      	subs	r3, #1
 8003c64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_OscConfig+0x90e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	3b01      	subs	r3, #1
 8003c78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d074      	beq.n	8003d68 <HAL_RCC_OscConfig+0x9f8>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2b0c      	cmp	r3, #12
 8003c82:	d068      	beq.n	8003d56 <HAL_RCC_OscConfig+0x9e6>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c84:	4b35      	ldr	r3, [pc, #212]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCC_OscConfig+0x92c>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c90:	4b32      	ldr	r3, [pc, #200]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x930>
#endif
            )
          {
            return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0af      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cac:	f7fc fcd8 	bl	8000660 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x956>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fc fcd4 	bl	8000660 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x956>
              {
                return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e09c      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc6:	4b25      	ldr	r3, [pc, #148]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x944>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd2:	4b22      	ldr	r3, [pc, #136]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	4b23      	ldr	r3, [pc, #140]	@ (8003d64 <HAL_RCC_OscConfig+0x9f4>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ce2:	3a01      	subs	r2, #1
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	4311      	orrs	r1, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cec:	0212      	lsls	r2, r2, #8
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cf4:	0852      	lsrs	r2, r2, #1
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	0552      	lsls	r2, r2, #21
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d00:	0852      	lsrs	r2, r2, #1
 8003d02:	3a01      	subs	r2, #1
 8003d04:	0652      	lsls	r2, r2, #25
 8003d06:	4311      	orrs	r1, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d0c:	06d2      	lsls	r2, r2, #27
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	4912      	ldr	r1, [pc, #72]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d16:	4b11      	ldr	r3, [pc, #68]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a10      	ldr	r2, [pc, #64]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003d1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d20:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d22:	4b0e      	ldr	r3, [pc, #56]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4a0d      	ldr	r2, [pc, #52]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003d28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d2c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d2e:	f7fc fc97 	bl	8000660 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x9d8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fc fc93 	bl	8000660 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x9d8>
              {
                return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e05b      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d48:	4b04      	ldr	r3, [pc, #16]	@ (8003d5c <HAL_RCC_OscConfig+0x9ec>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x9c6>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d54:	e053      	b.n	8003dfe <HAL_RCC_OscConfig+0xa8e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e052      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	08011170 	.word	0x08011170
 8003d64:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d68:	4b27      	ldr	r3, [pc, #156]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d144      	bne.n	8003dfe <HAL_RCC_OscConfig+0xa8e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d74:	4b24      	ldr	r3, [pc, #144]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a23      	ldr	r2, [pc, #140]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d80:	4b21      	ldr	r3, [pc, #132]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a20      	ldr	r2, [pc, #128]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d8c:	f7fc fc68 	bl	8000660 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0xa36>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fc fc64 	bl	8000660 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0xa36>
            {
              return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e02c      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da6:	4b18      	ldr	r3, [pc, #96]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0xa24>
 8003db2:	e024      	b.n	8003dfe <HAL_RCC_OscConfig+0xa8e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d01f      	beq.n	8003dfa <HAL_RCC_OscConfig+0xa8a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b13      	ldr	r3, [pc, #76]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003dc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fc fc4b 	bl	8000660 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0xa70>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fc fc47 	bl	8000660 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0xa70>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e00f      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de0:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f0      	bne.n	8003dce <HAL_RCC_OscConfig+0xa5e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dec:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	4905      	ldr	r1, [pc, #20]	@ (8003e08 <HAL_RCC_OscConfig+0xa98>)
 8003df2:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <HAL_RCC_OscConfig+0xa9c>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	60cb      	str	r3, [r1, #12]
 8003df8:	e001      	b.n	8003dfe <HAL_RCC_OscConfig+0xa8e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_RCC_OscConfig+0xa90>
      }
    }
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	feeefffc 	.word	0xfeeefffc

08003e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e1e1      	b.n	80041ec <HAL_RCC_ClockConfig+0x3dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x28>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	d904      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x32>
 8003e38:	f240 4159 	movw	r1, #1113	@ 0x459
 8003e3c:	488e      	ldr	r0, [pc, #568]	@ (8004078 <HAL_RCC_ClockConfig+0x268>)
 8003e3e:	f00b fb57 	bl	800f4f0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d031      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d02e      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d02b      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d028      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d025      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d022      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d01f      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b07      	cmp	r3, #7
 8003e70:	d01c      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d019      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b09      	cmp	r3, #9
 8003e7c:	d016      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b0a      	cmp	r3, #10
 8003e82:	d013      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b0b      	cmp	r3, #11
 8003e88:	d010      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d00d      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b0d      	cmp	r3, #13
 8003e94:	d00a      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b0e      	cmp	r3, #14
 8003e9a:	d007      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	d004      	beq.n	8003eac <HAL_RCC_ClockConfig+0x9c>
 8003ea2:	f240 415a 	movw	r1, #1114	@ 0x45a
 8003ea6:	4874      	ldr	r0, [pc, #464]	@ (8004078 <HAL_RCC_ClockConfig+0x268>)
 8003ea8:	f00b fb22 	bl	800f4f0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b73      	ldr	r3, [pc, #460]	@ (800407c <HAL_RCC_ClockConfig+0x26c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b70      	ldr	r3, [pc, #448]	@ (800407c <HAL_RCC_ClockConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 020f 	bic.w	r2, r3, #15
 8003ec2:	496e      	ldr	r1, [pc, #440]	@ (800407c <HAL_RCC_ClockConfig+0x26c>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b6c      	ldr	r3, [pc, #432]	@ (800407c <HAL_RCC_ClockConfig+0x26c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e187      	b.n	80041ec <HAL_RCC_ClockConfig+0x3dc>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d039      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x14c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d024      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b80      	cmp	r3, #128	@ 0x80
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b90      	cmp	r3, #144	@ 0x90
 8003efe:	d01c      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f06:	d018      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2bb0      	cmp	r3, #176	@ 0xb0
 8003f0e:	d014      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f16:	d010      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2bd0      	cmp	r3, #208	@ 0xd0
 8003f1e:	d00c      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2be0      	cmp	r3, #224	@ 0xe0
 8003f26:	d008      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2bf0      	cmp	r3, #240	@ 0xf0
 8003f2e:	d004      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
 8003f30:	f240 4172 	movw	r1, #1138	@ 0x472
 8003f34:	4850      	ldr	r0, [pc, #320]	@ (8004078 <HAL_RCC_ClockConfig+0x268>)
 8003f36:	f00b fadb 	bl	800f4f0 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	4b50      	ldr	r3, [pc, #320]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d908      	bls.n	8003f5c <HAL_RCC_ClockConfig+0x14c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	494a      	ldr	r1, [pc, #296]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8098 	beq.w	800409a <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d010      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x184>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d00c      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x184>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d008      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x184>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d004      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x184>
 8003f8a:	f240 417d 	movw	r1, #1149	@ 0x47d
 8003f8e:	483a      	ldr	r0, [pc, #232]	@ (8004078 <HAL_RCC_ClockConfig+0x268>)
 8003f90:	f00b faae 	bl	800f4f0 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d11e      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9c:	4b38      	ldr	r3, [pc, #224]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x19c>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e11f      	b.n	80041ec <HAL_RCC_ClockConfig+0x3dc>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003fac:	f000 fa4c 	bl	8004448 <RCC_GetSysClockFreqFromPLLSource>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4a34      	ldr	r2, [pc, #208]	@ (8004084 <HAL_RCC_ClockConfig+0x274>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d946      	bls.n	8004046 <HAL_RCC_ClockConfig+0x236>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003fb8:	4b31      	ldr	r3, [pc, #196]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d140      	bne.n	8004046 <HAL_RCC_ClockConfig+0x236>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8003fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fd4:	2380      	movs	r3, #128	@ 0x80
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e035      	b.n	8004046 <HAL_RCC_ClockConfig+0x236>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0x1e2>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe2:	4b27      	ldr	r3, [pc, #156]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d115      	bne.n	800401a <HAL_RCC_ClockConfig+0x20a>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0fc      	b.n	80041ec <HAL_RCC_ClockConfig+0x3dc>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0x1fa>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ffa:	4b21      	ldr	r3, [pc, #132]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <HAL_RCC_ClockConfig+0x20a>
        {
          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0f0      	b.n	80041ec <HAL_RCC_ClockConfig+0x3dc>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400a:	4b1d      	ldr	r3, [pc, #116]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_ClockConfig+0x20a>
        {
          return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e0e8      	b.n	80041ec <HAL_RCC_ClockConfig+0x3dc>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800401a:	f000 f8f7 	bl	800420c <HAL_RCC_GetSysClockFreq>
 800401e:	4603      	mov	r3, r0
 8004020:	4a18      	ldr	r2, [pc, #96]	@ (8004084 <HAL_RCC_ClockConfig+0x274>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d90f      	bls.n	8004046 <HAL_RCC_ClockConfig+0x236>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004026:	4b16      	ldr	r3, [pc, #88]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <HAL_RCC_ClockConfig+0x236>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004032:	4b13      	ldr	r3, [pc, #76]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800403a:	4a11      	ldr	r2, [pc, #68]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 800403c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004040:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004042:	2380      	movs	r3, #128	@ 0x80
 8004044:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004046:	4b0e      	ldr	r3, [pc, #56]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f023 0203 	bic.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	490b      	ldr	r1, [pc, #44]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004058:	f7fc fb02 	bl	8000660 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	e013      	b.n	8004088 <HAL_RCC_ClockConfig+0x278>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004060:	f7fc fafe 	bl	8000660 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d90a      	bls.n	8004088 <HAL_RCC_ClockConfig+0x278>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e0ba      	b.n	80041ec <HAL_RCC_ClockConfig+0x3dc>
 8004076:	bf00      	nop
 8004078:	08011170 	.word	0x08011170
 800407c:	40022000 	.word	0x40022000
 8004080:	40021000 	.word	0x40021000
 8004084:	04c4b400 	.word	0x04c4b400
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004088:	4b5a      	ldr	r3, [pc, #360]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 020c 	and.w	r2, r3, #12
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	429a      	cmp	r2, r3
 8004098:	d1e2      	bne.n	8004060 <HAL_RCC_ClockConfig+0x250>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b80      	cmp	r3, #128	@ 0x80
 800409e:	d105      	bne.n	80040ac <HAL_RCC_ClockConfig+0x29c>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040a0:	4b54      	ldr	r3, [pc, #336]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a53      	ldr	r2, [pc, #332]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 80040a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040aa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d010      	beq.n	80040da <HAL_RCC_ClockConfig+0x2ca>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	4b4d      	ldr	r3, [pc, #308]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d208      	bcs.n	80040da <HAL_RCC_ClockConfig+0x2ca>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c8:	4b4a      	ldr	r3, [pc, #296]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4947      	ldr	r1, [pc, #284]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040da:	4b47      	ldr	r3, [pc, #284]	@ (80041f8 <HAL_RCC_ClockConfig+0x3e8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d210      	bcs.n	800410a <HAL_RCC_ClockConfig+0x2fa>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e8:	4b43      	ldr	r3, [pc, #268]	@ (80041f8 <HAL_RCC_ClockConfig+0x3e8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 020f 	bic.w	r2, r3, #15
 80040f0:	4941      	ldr	r1, [pc, #260]	@ (80041f8 <HAL_RCC_ClockConfig+0x3e8>)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f8:	4b3f      	ldr	r3, [pc, #252]	@ (80041f8 <HAL_RCC_ClockConfig+0x3e8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d001      	beq.n	800410a <HAL_RCC_ClockConfig+0x2fa>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e070      	b.n	80041ec <HAL_RCC_ClockConfig+0x3dc>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d025      	beq.n	8004162 <HAL_RCC_ClockConfig+0x352>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d018      	beq.n	8004150 <HAL_RCC_ClockConfig+0x340>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004126:	d013      	beq.n	8004150 <HAL_RCC_ClockConfig+0x340>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004130:	d00e      	beq.n	8004150 <HAL_RCC_ClockConfig+0x340>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800413a:	d009      	beq.n	8004150 <HAL_RCC_ClockConfig+0x340>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004144:	d004      	beq.n	8004150 <HAL_RCC_ClockConfig+0x340>
 8004146:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 800414a:	482c      	ldr	r0, [pc, #176]	@ (80041fc <HAL_RCC_ClockConfig+0x3ec>)
 800414c:	f00b f9d0 	bl	800f4f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004150:	4b28      	ldr	r3, [pc, #160]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4925      	ldr	r1, [pc, #148]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d026      	beq.n	80041bc <HAL_RCC_ClockConfig+0x3ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d018      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x398>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417e:	d013      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x398>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004188:	d00e      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x398>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004192:	d009      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x398>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800419c:	d004      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x398>
 800419e:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 80041a2:	4816      	ldr	r0, [pc, #88]	@ (80041fc <HAL_RCC_ClockConfig+0x3ec>)
 80041a4:	f00b f9a4 	bl	800f4f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a8:	4b12      	ldr	r3, [pc, #72]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	490f      	ldr	r1, [pc, #60]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041bc:	f000 f826 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <HAL_RCC_ClockConfig+0x3e4>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	490c      	ldr	r1, [pc, #48]	@ (8004200 <HAL_RCC_ClockConfig+0x3f0>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
 80041d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004204 <HAL_RCC_ClockConfig+0x3f4>)
 80041da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004208 <HAL_RCC_ClockConfig+0x3f8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fc f9ed 	bl	80005c0 <HAL_InitTick>
 80041e6:	4603      	mov	r3, r0
 80041e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40022000 	.word	0x40022000
 80041fc:	08011170 	.word	0x08011170
 8004200:	080118f8 	.word	0x080118f8
 8004204:	20000008 	.word	0x20000008
 8004208:	20000000 	.word	0x20000000

0800420c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	@ 0x24
 8004210:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421a:	4b3e      	ldr	r3, [pc, #248]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004224:	4b3b      	ldr	r3, [pc, #236]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x34>
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d121      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d11e      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004240:	4b34      	ldr	r3, [pc, #208]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800424c:	4b31      	ldr	r3, [pc, #196]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800424e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e005      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800425c:	4b2d      	ldr	r3, [pc, #180]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004268:	4a2b      	ldr	r2, [pc, #172]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x10c>)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004270:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10d      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800427c:	e00a      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d102      	bne.n	800428a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004284:	4b25      	ldr	r3, [pc, #148]	@ (800431c <HAL_RCC_GetSysClockFreq+0x110>)
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e004      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d101      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004290:	4b23      	ldr	r3, [pc, #140]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x114>)
 8004292:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d134      	bne.n	8004304 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800429a:	4b1e      	ldr	r3, [pc, #120]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d003      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0xac>
 80042b0:	e005      	b.n	80042be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042b2:	4b1a      	ldr	r3, [pc, #104]	@ (800431c <HAL_RCC_GetSysClockFreq+0x110>)
 80042b4:	617b      	str	r3, [r7, #20]
      break;
 80042b6:	e005      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042b8:	4b19      	ldr	r3, [pc, #100]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x114>)
 80042ba:	617b      	str	r3, [r7, #20]
      break;
 80042bc:	e002      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	617b      	str	r3, [r7, #20]
      break;
 80042c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042c4:	4b13      	ldr	r3, [pc, #76]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	3301      	adds	r3, #1
 80042d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042d2:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	fb03 f202 	mul.w	r2, r3, r2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	0e5b      	lsrs	r3, r3, #25
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	3301      	adds	r3, #1
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004304:	69bb      	ldr	r3, [r7, #24]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3724      	adds	r7, #36	@ 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	08011910 	.word	0x08011910
 800431c:	00f42400 	.word	0x00f42400
 8004320:	016e3600 	.word	0x016e3600

08004324 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004328:	4b03      	ldr	r3, [pc, #12]	@ (8004338 <HAL_RCC_GetHCLKFreq+0x14>)
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000008 	.word	0x20000008

0800433c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004340:	f7ff fff0 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0a1b      	lsrs	r3, r3, #8
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4904      	ldr	r1, [pc, #16]	@ (8004364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000
 8004364:	08011908 	.word	0x08011908

08004368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800436c:	f7ff ffda 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b06      	ldr	r3, [pc, #24]	@ (800438c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0adb      	lsrs	r3, r3, #11
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4904      	ldr	r1, [pc, #16]	@ (8004390 <HAL_RCC_GetPCLK2Freq+0x28>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40021000 	.word	0x40021000
 8004390:	08011908 	.word	0x08011908

08004394 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043a0:	4b27      	ldr	r3, [pc, #156]	@ (8004440 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043ac:	f7fe fed6 	bl	800315c <HAL_PWREx_GetVoltageRange>
 80043b0:	6178      	str	r0, [r7, #20]
 80043b2:	e014      	b.n	80043de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b4:	4b22      	ldr	r3, [pc, #136]	@ (8004440 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b8:	4a21      	ldr	r2, [pc, #132]	@ (8004440 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043be:	6593      	str	r3, [r2, #88]	@ 0x58
 80043c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043cc:	f7fe fec6 	bl	800315c <HAL_PWREx_GetVoltageRange>
 80043d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004440 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e4:	d10b      	bne.n	80043fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b80      	cmp	r3, #128	@ 0x80
 80043ea:	d913      	bls.n	8004414 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80043f0:	d902      	bls.n	80043f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043f2:	2302      	movs	r3, #2
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	e00d      	b.n	8004414 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043f8:	2301      	movs	r3, #1
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	e00a      	b.n	8004414 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b7f      	cmp	r3, #127	@ 0x7f
 8004402:	d902      	bls.n	800440a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004404:	2302      	movs	r3, #2
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	e004      	b.n	8004414 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b70      	cmp	r3, #112	@ 0x70
 800440e:	d101      	bne.n	8004414 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004410:	2301      	movs	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004414:	4b0b      	ldr	r3, [pc, #44]	@ (8004444 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f023 020f 	bic.w	r2, r3, #15
 800441c:	4909      	ldr	r1, [pc, #36]	@ (8004444 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004424:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	429a      	cmp	r2, r3
 8004430:	d001      	beq.n	8004436 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000
 8004444:	40022000 	.word	0x40022000

08004448 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800444e:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d00b      	beq.n	8004476 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d825      	bhi.n	80044b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d008      	beq.n	800447c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d11f      	bne.n	80044b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004470:	4b25      	ldr	r3, [pc, #148]	@ (8004508 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004472:	613b      	str	r3, [r7, #16]
    break;
 8004474:	e01f      	b.n	80044b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004476:	4b25      	ldr	r3, [pc, #148]	@ (800450c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004478:	613b      	str	r3, [r7, #16]
    break;
 800447a:	e01c      	b.n	80044b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800447c:	4b21      	ldr	r3, [pc, #132]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004488:	4b1e      	ldr	r3, [pc, #120]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800448a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e005      	b.n	80044a4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004498:	4b1a      	ldr	r3, [pc, #104]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80044a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004510 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ac:	613b      	str	r3, [r7, #16]
    break;
 80044ae:	e002      	b.n	80044b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]
    break;
 80044b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b6:	4b13      	ldr	r3, [pc, #76]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	3301      	adds	r3, #1
 80044c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	fb03 f202 	mul.w	r2, r3, r2
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044dc:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	0e5b      	lsrs	r3, r3, #25
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	3301      	adds	r3, #1
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80044f6:	683b      	ldr	r3, [r7, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40021000 	.word	0x40021000
 8004508:	00f42400 	.word	0x00f42400
 800450c:	016e3600 	.word	0x016e3600
 8004510:	08011910 	.word	0x08011910

08004514 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800451c:	2300      	movs	r3, #0
 800451e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004520:	2300      	movs	r3, #0
 8004522:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4b94      	ldr	r3, [pc, #592]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4b92      	ldr	r3, [pc, #584]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x30>
 800453c:	21c9      	movs	r1, #201	@ 0xc9
 800453e:	4891      	ldr	r0, [pc, #580]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004540:	f00a ffd6 	bl	800f4f0 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800454c:	2b00      	cmp	r3, #0
 800454e:	d058      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800455c:	2b20      	cmp	r3, #32
 800455e:	d00f      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d00b      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800456c:	2b60      	cmp	r3, #96	@ 0x60
 800456e:	d007      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004574:	2b80      	cmp	r3, #128	@ 0x80
 8004576:	d003      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004578:	21d1      	movs	r1, #209	@ 0xd1
 800457a:	4882      	ldr	r0, [pc, #520]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800457c:	f00a ffb8 	bl	800f4f0 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004584:	2b80      	cmp	r3, #128	@ 0x80
 8004586:	d02a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xca>
 8004588:	2b80      	cmp	r3, #128	@ 0x80
 800458a:	d825      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800458c:	2b60      	cmp	r3, #96	@ 0x60
 800458e:	d026      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xca>
 8004590:	2b60      	cmp	r3, #96	@ 0x60
 8004592:	d821      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d006      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004598:	2b40      	cmp	r3, #64	@ 0x40
 800459a:	d81d      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d010      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 80045a4:	e018      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045a6:	4b78      	ldr	r3, [pc, #480]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4a77      	ldr	r2, [pc, #476]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80045ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045b2:	e015      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	2100      	movs	r1, #0
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 fc76 	bl	8005eac <RCCEx_PLLSAI1_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045c4:	e00c      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3320      	adds	r3, #32
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f001 fded 	bl	80061ac <RCCEx_PLLSAI2_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d6:	e003      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	74fb      	strb	r3, [r7, #19]
      break;
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      break;
 80045de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e6:	4b68      	ldr	r3, [pc, #416]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80045e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045ec:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045f4:	4964      	ldr	r1, [pc, #400]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80045fc:	e001      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d064      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	2b00      	cmp	r3, #0
 8004614:	d018      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800461e:	d013      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004628:	d00e      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004632:	d009      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463c:	d004      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800463e:	f240 110f 	movw	r1, #271	@ 0x10f
 8004642:	4850      	ldr	r0, [pc, #320]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004644:	f00a ff54 	bl	800f4f0 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004650:	d030      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004656:	d82a      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800465c:	d02a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800465e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004662:	d824      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004668:	d008      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800466a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800466e:	d81e      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004678:	d010      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x188>
 800467a:	e018      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800467c:	4b42      	ldr	r3, [pc, #264]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a41      	ldr	r2, [pc, #260]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004686:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004688:	e015      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f001 fc0b 	bl	8005eac <RCCEx_PLLSAI1_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800469a:	e00c      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3320      	adds	r3, #32
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fd82 	bl	80061ac <RCCEx_PLLSAI2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ac:	e003      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	74fb      	strb	r3, [r7, #19]
      break;
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      break;
 80046b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046bc:	4b32      	ldr	r3, [pc, #200]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80046be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ca:	492f      	ldr	r1, [pc, #188]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80046d2:	e001      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80c6 	beq.w	8004872 <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e6:	2300      	movs	r3, #0
 80046e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d016      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046fe:	d010      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004712:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004716:	d004      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8004718:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800471c:	4819      	ldr	r0, [pc, #100]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800471e:	f00a fee7 	bl	800f4f0 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004722:	4b19      	ldr	r3, [pc, #100]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004732:	2300      	movs	r3, #0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004738:	4b13      	ldr	r3, [pc, #76]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473c:	4a12      	ldr	r2, [pc, #72]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800473e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004742:	6593      	str	r3, [r2, #88]	@ 0x58
 8004744:	4b10      	ldr	r3, [pc, #64]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004750:	2301      	movs	r3, #1
 8004752:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004754:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0c      	ldr	r2, [pc, #48]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800475a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800475e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004760:	f7fb ff7e 	bl	8000660 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004766:	e013      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004768:	f7fb ff7a 	bl	8000660 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d90c      	bls.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        ret = HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	74fb      	strb	r3, [r7, #19]
        break;
 800477a:	e00f      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800477c:	017f7fff 	.word	0x017f7fff
 8004780:	fe808000 	.word	0xfe808000
 8004784:	080111a8 	.word	0x080111a8
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004790:	4b30      	ldr	r3, [pc, #192]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0e5      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x254>
      }
    }

    if(ret == HAL_OK)
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d15c      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01f      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d019      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047c0:	4b25      	ldr	r3, [pc, #148]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047cc:	4b22      	ldr	r3, [pc, #136]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d2:	4a21      	ldr	r2, [pc, #132]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fb ff2f 	bl	8000660 <HAL_GetTick>
 8004802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004804:	e00b      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fb ff2b 	bl	8000660 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d902      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x30a>
          {
            ret = HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	74fb      	strb	r3, [r7, #19]
            break;
 800481c:	e006      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x318>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481e:	4b0e      	ldr	r3, [pc, #56]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ec      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
          }
        }
      }

      if(ret == HAL_OK)
 800482c:	7cfb      	ldrb	r3, [r7, #19]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10c      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x338>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004832:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004838:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004842:	4905      	ldr	r1, [pc, #20]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800484a:	e009      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	74bb      	strb	r3, [r7, #18]
 8004850:	e006      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004852:	bf00      	nop
 8004854:	40007000 	.word	0x40007000
 8004858:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004860:	7c7b      	ldrb	r3, [r7, #17]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004866:	4b8d      	ldr	r3, [pc, #564]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486a:	4a8c      	ldr	r2, [pc, #560]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004870:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01f      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d010      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d00c      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004892:	2b03      	cmp	r3, #3
 8004894:	d008      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489a:	2b02      	cmp	r3, #2
 800489c:	d004      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800489e:	f240 1199 	movw	r1, #409	@ 0x199
 80048a2:	487f      	ldr	r0, [pc, #508]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80048a4:	f00a fe24 	bl	800f4f0 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048a8:	4b7c      	ldr	r3, [pc, #496]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ae:	f023 0203 	bic.w	r2, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b6:	4979      	ldr	r1, [pc, #484]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01f      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d010      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d00c      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	d008      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d004      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80048ea:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80048ee:	486c      	ldr	r0, [pc, #432]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80048f0:	f00a fdfe 	bl	800f4f0 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f4:	4b69      	ldr	r3, [pc, #420]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fa:	f023 020c 	bic.w	r2, r3, #12
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	4966      	ldr	r1, [pc, #408]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01f      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491a:	2b00      	cmp	r3, #0
 800491c:	d010      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	2b10      	cmp	r3, #16
 8004924:	d00c      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492a:	2b30      	cmp	r3, #48	@ 0x30
 800492c:	d008      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004932:	2b20      	cmp	r3, #32
 8004934:	d004      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004936:	f240 11af 	movw	r1, #431	@ 0x1af
 800493a:	4859      	ldr	r0, [pc, #356]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800493c:	f00a fdd8 	bl	800f4f0 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004940:	4b56      	ldr	r3, [pc, #344]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494e:	4953      	ldr	r1, [pc, #332]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01f      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004966:	2b00      	cmp	r3, #0
 8004968:	d010      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496e:	2b40      	cmp	r3, #64	@ 0x40
 8004970:	d00c      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004976:	2bc0      	cmp	r3, #192	@ 0xc0
 8004978:	d008      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800497e:	2b80      	cmp	r3, #128	@ 0x80
 8004980:	d004      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004982:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8004986:	4846      	ldr	r0, [pc, #280]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004988:	f00a fdb2 	bl	800f4f0 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800498c:	4b43      	ldr	r3, [pc, #268]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004992:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800499a:	4940      	ldr	r1, [pc, #256]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d022      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d013      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049be:	d00e      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c8:	d009      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d2:	d004      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80049d4:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80049d8:	4831      	ldr	r0, [pc, #196]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80049da:	f00a fd89 	bl	800f4f0 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049de:	4b2f      	ldr	r3, [pc, #188]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ec:	492b      	ldr	r1, [pc, #172]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d022      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d013      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a10:	d00e      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a1a:	d009      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a24:	d004      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004a26:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8004a2a:	481d      	ldr	r0, [pc, #116]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004a2c:	f00a fd60 	bl	800f4f0 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a30:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a3e:	4917      	ldr	r1, [pc, #92]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d028      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d013      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a62:	d00e      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a72:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a76:	d004      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8004a78:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004a7c:	4808      	ldr	r0, [pc, #32]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004a7e:	f00a fd37 	bl	800f4f0 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a90:	4902      	ldr	r1, [pc, #8]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a98:	e004      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	080111a8 	.word	0x080111a8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d022      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d013      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004abc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ac0:	d00e      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ac6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aca:	d009      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ad0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ad4:	d004      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004ad6:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8004ada:	489f      	ldr	r0, [pc, #636]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004adc:	f00a fd08 	bl	800f4f0 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ae0:	4b9e      	ldr	r3, [pc, #632]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aee:	499b      	ldr	r1, [pc, #620]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01d      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00e      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b12:	d009      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b1c:	d004      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004b1e:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8004b22:	488d      	ldr	r0, [pc, #564]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004b24:	f00a fce4 	bl	800f4f0 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b28:	4b8c      	ldr	r3, [pc, #560]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b36:	4989      	ldr	r1, [pc, #548]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01d      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x672>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00e      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b5a:	d009      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b64:	d004      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004b66:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8004b6a:	487b      	ldr	r0, [pc, #492]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004b6c:	f00a fcc0 	bl	800f4f0 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b70:	4b7a      	ldr	r3, [pc, #488]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7e:	4977      	ldr	r1, [pc, #476]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01d      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x6ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00e      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bac:	d004      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004bae:	f240 2107 	movw	r1, #519	@ 0x207
 8004bb2:	4869      	ldr	r0, [pc, #420]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004bb4:	f00a fc9c 	bl	800f4f0 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bb8:	4b68      	ldr	r3, [pc, #416]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc6:	4965      	ldr	r1, [pc, #404]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d01b      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d008      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d004      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8004bf2:	f240 2113 	movw	r1, #531	@ 0x213
 8004bf6:	4858      	ldr	r0, [pc, #352]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004bf8:	f00a fc7a 	bl	800f4f0 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bfc:	4b57      	ldr	r3, [pc, #348]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c02:	f023 0203 	bic.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0a:	4954      	ldr	r1, [pc, #336]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d040      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x78c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d013      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c2e:	d00e      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c38:	d009      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c42:	d004      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004c44:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8004c48:	4843      	ldr	r0, [pc, #268]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c4a:	f00a fc51 	bl	800f4f0 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c4e:	4b43      	ldr	r3, [pc, #268]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c54:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5c:	493f      	ldr	r1, [pc, #252]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	4a3a      	ldr	r2, [pc, #232]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c78:	60d3      	str	r3, [r2, #12]
 8004c7a:	e011      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 f90d 	bl	8005eac <RCCEx_PLLSAI1_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c96:	7cfb      	ldrb	r3, [r7, #19]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x78c>
        {
          /* set overall return value */
          status = ret;
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d06b      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x870>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cb4:	d017      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d013      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ccc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cd6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004cda:	d004      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004cdc:	f240 2141 	movw	r1, #577	@ 0x241
 8004ce0:	481d      	ldr	r0, [pc, #116]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004ce2:	f00a fc05 	bl	800f4f0 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cee:	d108      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cf6:	4a19      	ldr	r2, [pc, #100]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cfc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d00:	e012      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x814>
 8004d02:	4b16      	ldr	r3, [pc, #88]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d08:	4a14      	ldr	r2, [pc, #80]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d0e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d12:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d20:	490e      	ldr	r1, [pc, #56]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d30:	d106      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d32:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	4a09      	ldr	r2, [pc, #36]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d3c:	60d3      	str	r3, [r2, #12]
 8004d3e:	e021      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x870>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d48:	d10a      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d4a:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	4a03      	ldr	r2, [pc, #12]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d54:	60d3      	str	r3, [r2, #12]
 8004d56:	e015      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8004d58:	080111a8 	.word	0x080111a8
 8004d5c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d68:	d10c      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x870>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	2101      	movs	r1, #1
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 f89b 	bl	8005eac <RCCEx_PLLSAI1_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d7a:	7cfb      	ldrb	r3, [r7, #19]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x870>
      {
        /* set overall return value */
        status = ret;
 8004d80:	7cfb      	ldrb	r3, [r7, #19]
 8004d82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d040      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004da0:	d00e      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004daa:	d009      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004db0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004db4:	d004      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8004db6:	f240 2166 	movw	r1, #614	@ 0x266
 8004dba:	489f      	ldr	r0, [pc, #636]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004dbc:	f00a fb98 	bl	800f4f0 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dc0:	4b9e      	ldr	r3, [pc, #632]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dce:	499b      	ldr	r1, [pc, #620]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dde:	d106      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de0:	4b96      	ldr	r3, [pc, #600]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4a95      	ldr	r2, [pc, #596]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dea:	60d3      	str	r3, [r2, #12]
 8004dec:	e011      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004df2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004df6:	d10c      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 f854 	bl	8005eac <RCCEx_PLLSAI1_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      {
        /* set overall return value */
        status = ret;
 8004e0e:	7cfb      	ldrb	r3, [r7, #19]
 8004e10:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d034      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x974>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d010      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x936>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x936>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e3e:	d004      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x936>
 8004e40:	f240 2186 	movw	r1, #646	@ 0x286
 8004e44:	487c      	ldr	r0, [pc, #496]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004e46:	f00a fb53 	bl	800f4f0 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e4a:	4b7c      	ldr	r3, [pc, #496]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e50:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e5a:	4978      	ldr	r1, [pc, #480]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x974>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2102      	movs	r1, #2
 8004e74:	4618      	mov	r0, r3
 8004e76:	f001 f819 	bl	8005eac <RCCEx_PLLSAI1_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e7e:	7cfb      	ldrb	r3, [r7, #19]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      {
        /* set overall return value */
        status = ret;
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d004      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8004ea8:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8004eac:	4862      	ldr	r0, [pc, #392]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004eae:	f00a fb1f 	bl	800f4f0 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eb2:	4b62      	ldr	r3, [pc, #392]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004eb8:	f023 0204 	bic.w	r2, r3, #4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec2:	495e      	ldr	r1, [pc, #376]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01f      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00e      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d009      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d004      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 8004ef4:	f240 21cf 	movw	r1, #719	@ 0x2cf
 8004ef8:	484f      	ldr	r0, [pc, #316]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004efa:	f00a faf9 	bl	800f4f0 <assert_failed>

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004efe:	4b4f      	ldr	r3, [pc, #316]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f04:	f023 0218 	bic.w	r2, r3, #24
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0e:	494b      	ldr	r1, [pc, #300]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d051      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d016      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f36:	d010      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f42:	d00a      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f4e:	d004      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8004f50:	f240 21df 	movw	r1, #735	@ 0x2df
 8004f54:	4838      	ldr	r0, [pc, #224]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004f56:	f00a facb 	bl	800f4f0 <assert_failed>

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f5a:	4b38      	ldr	r3, [pc, #224]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a37      	ldr	r2, [pc, #220]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f66:	f7fb fb7b 	bl	8000660 <HAL_GetTick>
 8004f6a:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f6c:	e009      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f6e:	f7fb fb77 	bl	8000660 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d902      	bls.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
      {
        ret = HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	74fb      	strb	r3, [r7, #19]
        break;
 8004f80:	e005      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f82:	4b2e      	ldr	r3, [pc, #184]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1ef      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
      }
    }

    if(ret == HAL_OK)
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d113      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004f94:	4b29      	ldr	r3, [pc, #164]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fa4:	4925      	ldr	r1, [pc, #148]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3320      	adds	r3, #32
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f001 f8fa 	bl	80061ac <RCCEx_PLLSAI2_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004fbc:	7cfb      	ldrb	r3, [r7, #19]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
    {
      /* set overall return value */
      status = ret;
 8004fc2:	7cfb      	ldrb	r3, [r7, #19]
 8004fc4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d02d      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ff2:	d004      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004ff4:	f240 3123 	movw	r1, #803	@ 0x323
 8004ff8:	480f      	ldr	r0, [pc, #60]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0xb24>)
 8004ffa:	f00a fa79 	bl	800f4f0 <assert_failed>

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8005000:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005004:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500e:	490b      	ldr	r1, [pc, #44]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005020:	d105      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005022:	4b06      	ldr	r3, [pc, #24]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	4a05      	ldr	r2, [pc, #20]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0xb28>)
 8005028:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800502c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800502e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	080111a8 	.word	0x080111a8
 800503c:	40021000 	.word	0x40021000

08005040 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
#if defined(SDMMC1) && defined(RCC_CCIPR2_SDMMCSEL)
  uint32_t pllp;  /* no init needed */
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4b4e      	ldr	r3, [pc, #312]	@ (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x148>)
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	4b4c      	ldr	r3, [pc, #304]	@ (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>)
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 8005060:	f240 418b 	movw	r1, #1163	@ 0x48b
 8005064:	484a      	ldr	r0, [pc, #296]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005066:	f00a fa43 	bl	800f4f0 <assert_failed>

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005070:	d13e      	bne.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005072:	4b48      	ldr	r3, [pc, #288]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005078:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507c:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005084:	d028      	beq.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800508c:	f200 86f9 	bhi.w	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005096:	d005      	beq.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800509e:	d00e      	beq.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80050a0:	f000 beef 	b.w	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	f040 86e9 	bne.w	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
        frequency = LSE_VALUE;
 80050b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050b8:	61fb      	str	r3, [r7, #28]
      break;
 80050ba:	f000 bee4 	b.w	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80050be:	4b35      	ldr	r3, [pc, #212]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	f040 86de 	bne.w	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = LSI_VALUE;
 80050ce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80050d2:	61fb      	str	r3, [r7, #28]
      break;
 80050d4:	f000 bed9 	b.w	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050e4:	f040 86d3 	bne.w	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
        frequency = HSE_VALUE / 32U;
 80050e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80050ea:	61fb      	str	r3, [r7, #28]
      break;
 80050ec:	f000 becf 	b.w	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f0:	4b28      	ldr	r3, [pc, #160]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d036      	beq.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b03      	cmp	r3, #3
 8005104:	d850      	bhi.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d003      	beq.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d020      	beq.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005112:	e049      	b.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005114:	4b1f      	ldr	r3, [pc, #124]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b02      	cmp	r3, #2
 800511e:	d116      	bne.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005120:	4b1c      	ldr	r3, [pc, #112]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 800512c:	4b19      	ldr	r3, [pc, #100]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	e005      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005138:	4b16      	ldr	r3, [pc, #88]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800513a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	4a15      	ldr	r2, [pc, #84]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800514c:	e02f      	b.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        pllvco = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
      break;
 8005152:	e02c      	b.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005154:	4b0f      	ldr	r3, [pc, #60]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005160:	d102      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
      {
        pllvco = HSI_VALUE;
 8005162:	4b0f      	ldr	r3, [pc, #60]	@ (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005164:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005166:	e022      	b.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        pllvco = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	61bb      	str	r3, [r7, #24]
      break;
 800516c:	e01f      	b.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800516e:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800517a:	d102      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        pllvco = HSE_VALUE;
 800517c:	4b09      	ldr	r3, [pc, #36]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800517e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005180:	e015      	b.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        pllvco = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	61bb      	str	r3, [r7, #24]
      break;
 8005186:	e012      	b.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8005188:	017f7fff 	.word	0x017f7fff
 800518c:	fe808000 	.word	0xfe808000
 8005190:	080111a8 	.word	0x080111a8
 8005194:	40021000 	.word	0x40021000
 8005198:	000b71b0 	.word	0x000b71b0
 800519c:	08011910 	.word	0x08011910
 80051a0:	00f42400 	.word	0x00f42400
 80051a4:	016e3600 	.word	0x016e3600
    default:
      /* No source */
      pllvco = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61bb      	str	r3, [r7, #24]
      break;
 80051ac:	bf00      	nop
    }

    switch(PeriphClk)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051b4:	f000 85fb 	beq.w	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051be:	f200 8668 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051c8:	f000 845e 	beq.w	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051d2:	f200 865e 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051dc:	f000 8526 	beq.w	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051e6:	f200 8654 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051f0:	f000 817c 	beq.w	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051fa:	f200 864a 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005204:	f000 80c2 	beq.w	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800520e:	f200 8640 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005218:	f000 8425 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005222:	f200 8636 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800522c:	f000 83d9 	beq.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005236:	f200 862c 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005240:	f000 80a4 	beq.w	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800524a:	f200 8622 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005254:	f000 8092 	beq.w	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525e:	f200 8618 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005268:	f000 8080 	beq.w	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005272:	f200 860e 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527c:	f000 8549 	beq.w	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005286:	f200 8604 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005290:	f000 84f5 	beq.w	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800529a:	f200 85fa 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052a4:	f000 8496 	beq.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ae:	f200 85f0 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b80      	cmp	r3, #128	@ 0x80
 80052b6:	f000 8461 	beq.w	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b80      	cmp	r3, #128	@ 0x80
 80052be:	f200 85e8 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d84b      	bhi.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 85e1 	beq.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	2b1f      	cmp	r3, #31
 80052d6:	f200 85dc 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80052da:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	080056e1 	.word	0x080056e1
 80052e4:	0800574f 	.word	0x0800574f
 80052e8:	08005e93 	.word	0x08005e93
 80052ec:	080057e3 	.word	0x080057e3
 80052f0:	08005e93 	.word	0x08005e93
 80052f4:	08005e93 	.word	0x08005e93
 80052f8:	08005e93 	.word	0x08005e93
 80052fc:	0800585b 	.word	0x0800585b
 8005300:	08005e93 	.word	0x08005e93
 8005304:	08005e93 	.word	0x08005e93
 8005308:	08005e93 	.word	0x08005e93
 800530c:	08005e93 	.word	0x08005e93
 8005310:	08005e93 	.word	0x08005e93
 8005314:	08005e93 	.word	0x08005e93
 8005318:	08005e93 	.word	0x08005e93
 800531c:	080058df 	.word	0x080058df
 8005320:	08005e93 	.word	0x08005e93
 8005324:	08005e93 	.word	0x08005e93
 8005328:	08005e93 	.word	0x08005e93
 800532c:	08005e93 	.word	0x08005e93
 8005330:	08005e93 	.word	0x08005e93
 8005334:	08005e93 	.word	0x08005e93
 8005338:	08005e93 	.word	0x08005e93
 800533c:	08005e93 	.word	0x08005e93
 8005340:	08005e93 	.word	0x08005e93
 8005344:	08005e93 	.word	0x08005e93
 8005348:	08005e93 	.word	0x08005e93
 800534c:	08005e93 	.word	0x08005e93
 8005350:	08005e93 	.word	0x08005e93
 8005354:	08005e93 	.word	0x08005e93
 8005358:	08005e93 	.word	0x08005e93
 800535c:	08005961 	.word	0x08005961
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b40      	cmp	r3, #64	@ 0x40
 8005364:	f000 83de 	beq.w	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005368:	f000 bd93 	b.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800536c:	69b9      	ldr	r1, [r7, #24]
 800536e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005372:	f001 f89b 	bl	80064ac <RCCEx_GetSAIxPeriphCLKFreq>
 8005376:	61f8      	str	r0, [r7, #28]
      break;
 8005378:	f000 bd8e 	b.w	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800537c:	69b9      	ldr	r1, [r7, #24]
 800537e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005382:	f001 f893 	bl	80064ac <RCCEx_GetSAIxPeriphCLKFreq>
 8005386:	61f8      	str	r0, [r7, #28]
      break;
 8005388:	f000 bd86 	b.w	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800538c:	4b9a      	ldr	r3, [pc, #616]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005392:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800539e:	d015      	beq.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80053a6:	f200 8092 	bhi.w	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053b0:	d029      	beq.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053b8:	f200 8089 	bhi.w	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d07b      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053c8:	d04a      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          break;
 80053ca:	e080      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80053cc:	4b8a      	ldr	r3, [pc, #552]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d17d      	bne.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80053d8:	4b87      	ldr	r3, [pc, #540]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 80053e4:	4b84      	ldr	r3, [pc, #528]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	e005      	b.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80053f0:	4b81      	ldr	r3, [pc, #516]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80053f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053f6:	0a1b      	lsrs	r3, r3, #8
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	4a7f      	ldr	r2, [pc, #508]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>)
 80053fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005402:	61fb      	str	r3, [r7, #28]
          break;
 8005404:	e066      	b.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005406:	4b7c      	ldr	r3, [pc, #496]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005412:	d162      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005414:	4b78      	ldr	r3, [pc, #480]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800541c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005420:	d15b      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005422:	4b75      	ldr	r3, [pc, #468]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800542c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	fb03 f202 	mul.w	r2, r3, r2
 8005436:	4b70      	ldr	r3, [pc, #448]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	3301      	adds	r3, #1
 8005442:	fbb2 f3f3 	udiv	r3, r2, r3
 8005446:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005448:	4b6b      	ldr	r3, [pc, #428]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	0d5b      	lsrs	r3, r3, #21
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	3301      	adds	r3, #1
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	61fb      	str	r3, [r7, #28]
          break;
 800545e:	e03c      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005460:	4b65      	ldr	r3, [pc, #404]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800546c:	d138      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800546e:	4b62      	ldr	r3, [pc, #392]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800547a:	d131      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800547c:	4b5e      	ldr	r3, [pc, #376]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005486:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	fb03 f202 	mul.w	r2, r3, r2
 8005490:	4b59      	ldr	r3, [pc, #356]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	3301      	adds	r3, #1
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80054a2:	4b55      	ldr	r3, [pc, #340]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	0d5b      	lsrs	r3, r3, #21
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	3301      	adds	r3, #1
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	61fb      	str	r3, [r7, #28]
          break;
 80054b8:	e012      	b.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80054ba:	4b4f      	ldr	r3, [pc, #316]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80054bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d10e      	bne.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
            frequency = HSI48_VALUE;
 80054c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>)
 80054ca:	61fb      	str	r3, [r7, #28]
          break;
 80054cc:	e00b      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          break;
 80054ce:	bf00      	nop
 80054d0:	f000 bce2 	b.w	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80054d4:	bf00      	nop
 80054d6:	f000 bcdf 	b.w	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80054da:	bf00      	nop
 80054dc:	f000 bcdc 	b.w	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80054e0:	bf00      	nop
 80054e2:	f000 bcd9 	b.w	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80054e6:	bf00      	nop
        break;
 80054e8:	f000 bcd6 	b.w	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80054ec:	4b42      	ldr	r3, [pc, #264]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80054ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054fa:	d13d      	bne.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80054fc:	4b3e      	ldr	r3, [pc, #248]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005508:	f040 84c5 	bne.w	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800550c:	4b3a      	ldr	r3, [pc, #232]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005518:	f040 84bd 	bne.w	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800551c:	4b36      	ldr	r3, [pc, #216]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	0a1b      	lsrs	r3, r3, #8
 8005522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005526:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	fb03 f202 	mul.w	r2, r3, r2
 8005530:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	3301      	adds	r3, #1
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005542:	4b2d      	ldr	r3, [pc, #180]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	0edb      	lsrs	r3, r3, #27
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005554:	4b28      	ldr	r3, [pc, #160]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x526>
                pllp = 17U;
 8005560:	2311      	movs	r3, #17
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e001      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
                pllp = 7U;
 8005566:	2307      	movs	r3, #7
 8005568:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	61fb      	str	r3, [r7, #28]
      break;
 8005574:	f000 bc8f 	b.w	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005578:	4b1f      	ldr	r3, [pc, #124]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800558a:	d016      	beq.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005592:	f200 809b 	bhi.w	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800559c:	d032      	beq.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055a4:	f200 8092 	bhi.w	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8084 	beq.w	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055b6:	d052      	beq.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 80055b8:	e088      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80055ba:	4b0f      	ldr	r3, [pc, #60]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	f040 8084 	bne.w	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80055c8:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80055d4:	4b08      	ldr	r3, [pc, #32]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	091b      	lsrs	r3, r3, #4
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	e005      	b.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
 80055e0:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80055e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	4a03      	ldr	r2, [pc, #12]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>)
 80055ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f2:	61fb      	str	r3, [r7, #28]
          break;
 80055f4:	e06c      	b.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
 80055fc:	08011910 	.word	0x08011910
 8005600:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005604:	4ba5      	ldr	r3, [pc, #660]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005610:	d160      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005612:	4ba2      	ldr	r3, [pc, #648]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800561a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800561e:	d159      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005620:	4b9e      	ldr	r3, [pc, #632]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	0a1b      	lsrs	r3, r3, #8
 8005626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	fb03 f202 	mul.w	r2, r3, r2
 8005634:	4b99      	ldr	r3, [pc, #612]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	3301      	adds	r3, #1
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005646:	4b95      	ldr	r3, [pc, #596]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	0d5b      	lsrs	r3, r3, #21
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	3301      	adds	r3, #1
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	61fb      	str	r3, [r7, #28]
          break;
 800565c:	e03a      	b.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800565e:	4b8f      	ldr	r3, [pc, #572]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005666:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800566a:	d135      	bne.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800566c:	4b8b      	ldr	r3, [pc, #556]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005674:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005678:	d12e      	bne.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800567a:	4b88      	ldr	r3, [pc, #544]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	0a1b      	lsrs	r3, r3, #8
 8005680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005684:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	fb03 f202 	mul.w	r2, r3, r2
 800568e:	4b83      	ldr	r3, [pc, #524]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	091b      	lsrs	r3, r3, #4
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	3301      	adds	r3, #1
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80056a0:	4b7e      	ldr	r3, [pc, #504]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	0d5b      	lsrs	r3, r3, #21
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	3301      	adds	r3, #1
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	61fb      	str	r3, [r7, #28]
          break;
 80056b6:	e00f      	b.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80056b8:	4b78      	ldr	r3, [pc, #480]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80056ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d10a      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI48_VALUE;
 80056c6:	4b76      	ldr	r3, [pc, #472]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 80056c8:	61fb      	str	r3, [r7, #28]
          break;
 80056ca:	e007      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          break;
 80056cc:	bf00      	nop
 80056ce:	e3e2      	b.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 80056d0:	bf00      	nop
 80056d2:	e3e0      	b.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 80056d4:	bf00      	nop
 80056d6:	e3de      	b.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 80056d8:	bf00      	nop
 80056da:	e3dc      	b.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 80056dc:	bf00      	nop
      break;
 80056de:	e3da      	b.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80056e0:	4b6e      	ldr	r3, [pc, #440]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d827      	bhi.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80056f2:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	08005709 	.word	0x08005709
 80056fc:	08005711 	.word	0x08005711
 8005700:	08005719 	.word	0x08005719
 8005704:	0800572d 	.word	0x0800572d
          frequency = HAL_RCC_GetPCLK2Freq();
 8005708:	f7fe fe2e 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 800570c:	61f8      	str	r0, [r7, #28]
          break;
 800570e:	e01d      	b.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005710:	f7fe fd7c 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005714:	61f8      	str	r0, [r7, #28]
          break;
 8005716:	e019      	b.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005718:	4b60      	ldr	r3, [pc, #384]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005724:	d10f      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
            frequency = HSI_VALUE;
 8005726:	4b5f      	ldr	r3, [pc, #380]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005728:	61fb      	str	r3, [r7, #28]
          break;
 800572a:	e00c      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800572c:	4b5b      	ldr	r3, [pc, #364]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b02      	cmp	r3, #2
 8005738:	d107      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
            frequency = LSE_VALUE;
 800573a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573e:	61fb      	str	r3, [r7, #28]
          break;
 8005740:	e003      	b.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          break;
 8005742:	bf00      	nop
 8005744:	e3a8      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005746:	bf00      	nop
 8005748:	e3a6      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800574a:	bf00      	nop
        break;
 800574c:	e3a4      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800574e:	4b53      	ldr	r3, [pc, #332]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005754:	f003 030c 	and.w	r3, r3, #12
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b0c      	cmp	r3, #12
 800575e:	d83a      	bhi.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8005760:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x728>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800579d 	.word	0x0800579d
 800576c:	080057d7 	.word	0x080057d7
 8005770:	080057d7 	.word	0x080057d7
 8005774:	080057d7 	.word	0x080057d7
 8005778:	080057a5 	.word	0x080057a5
 800577c:	080057d7 	.word	0x080057d7
 8005780:	080057d7 	.word	0x080057d7
 8005784:	080057d7 	.word	0x080057d7
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057d7 	.word	0x080057d7
 8005790:	080057d7 	.word	0x080057d7
 8005794:	080057d7 	.word	0x080057d7
 8005798:	080057c1 	.word	0x080057c1
          frequency = HAL_RCC_GetPCLK1Freq();
 800579c:	f7fe fdce 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 80057a0:	61f8      	str	r0, [r7, #28]
          break;
 80057a2:	e01d      	b.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80057a4:	f7fe fd32 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80057a8:	61f8      	str	r0, [r7, #28]
          break;
 80057aa:	e019      	b.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057ac:	4b3b      	ldr	r3, [pc, #236]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b8:	d10f      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
            frequency = HSI_VALUE;
 80057ba:	4b3a      	ldr	r3, [pc, #232]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80057bc:	61fb      	str	r3, [r7, #28]
          break;
 80057be:	e00c      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057c0:	4b36      	ldr	r3, [pc, #216]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d107      	bne.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
            frequency = LSE_VALUE;
 80057ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057d2:	61fb      	str	r3, [r7, #28]
          break;
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          break;
 80057d6:	bf00      	nop
 80057d8:	e35e      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80057da:	bf00      	nop
 80057dc:	e35c      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80057de:	bf00      	nop
        break;
 80057e0:	e35a      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80057e2:	4b2e      	ldr	r3, [pc, #184]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b30      	cmp	r3, #48	@ 0x30
 80057f2:	d021      	beq.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b30      	cmp	r3, #48	@ 0x30
 80057f8:	d829      	bhi.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d011      	beq.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b20      	cmp	r3, #32
 8005804:	d823      	bhi.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b10      	cmp	r3, #16
 8005810:	d004      	beq.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          break;
 8005812:	e01c      	b.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005814:	f7fe fd92 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005818:	61f8      	str	r0, [r7, #28]
          break;
 800581a:	e01d      	b.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
          frequency = HAL_RCC_GetSysClockFreq();
 800581c:	f7fe fcf6 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005820:	61f8      	str	r0, [r7, #28]
          break;
 8005822:	e019      	b.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005824:	4b1d      	ldr	r3, [pc, #116]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005830:	d10f      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            frequency = HSI_VALUE;
 8005832:	4b1c      	ldr	r3, [pc, #112]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005834:	61fb      	str	r3, [r7, #28]
          break;
 8005836:	e00c      	b.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005838:	4b18      	ldr	r3, [pc, #96]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d107      	bne.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = LSE_VALUE;
 8005846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800584a:	61fb      	str	r3, [r7, #28]
          break;
 800584c:	e003      	b.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          break;
 800584e:	bf00      	nop
 8005850:	e322      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005852:	bf00      	nop
 8005854:	e320      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005856:	bf00      	nop
        break;
 8005858:	e31e      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800585a:	4b10      	ldr	r3, [pc, #64]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005860:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2bc0      	cmp	r3, #192	@ 0xc0
 800586a:	d027      	beq.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005870:	d82f      	bhi.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b80      	cmp	r3, #128	@ 0x80
 8005876:	d017      	beq.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b80      	cmp	r3, #128	@ 0x80
 800587c:	d829      	bhi.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b40      	cmp	r3, #64	@ 0x40
 8005888:	d004      	beq.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
          break;
 800588a:	e022      	b.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800588c:	f7fe fd56 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005890:	61f8      	str	r0, [r7, #28]
          break;
 8005892:	e023      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005894:	f7fe fcba 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005898:	61f8      	str	r0, [r7, #28]
          break;
 800589a:	e01f      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800589c:	40021000 	.word	0x40021000
 80058a0:	02dc6c00 	.word	0x02dc6c00
 80058a4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058a8:	4b9b      	ldr	r3, [pc, #620]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b4:	d10f      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80058b6:	4b99      	ldr	r3, [pc, #612]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80058b8:	61fb      	str	r3, [r7, #28]
          break;
 80058ba:	e00c      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058bc:	4b96      	ldr	r3, [pc, #600]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d107      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = LSE_VALUE;
 80058ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ce:	61fb      	str	r3, [r7, #28]
          break;
 80058d0:	e003      	b.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          break;
 80058d2:	bf00      	nop
 80058d4:	e2e0      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80058d6:	bf00      	nop
 80058d8:	e2de      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80058da:	bf00      	nop
        break;
 80058dc:	e2dc      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80058de:	4b8e      	ldr	r3, [pc, #568]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058f0:	d025      	beq.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058f8:	d82c      	bhi.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005900:	d013      	beq.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005908:	d824      	bhi.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005916:	d004      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
          break;
 8005918:	e01c      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = HAL_RCC_GetPCLK1Freq();
 800591a:	f7fe fd0f 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 800591e:	61f8      	str	r0, [r7, #28]
          break;
 8005920:	e01d      	b.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005922:	f7fe fc73 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005926:	61f8      	str	r0, [r7, #28]
          break;
 8005928:	e019      	b.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800592a:	4b7b      	ldr	r3, [pc, #492]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005936:	d10f      	bne.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            frequency = HSI_VALUE;
 8005938:	4b78      	ldr	r3, [pc, #480]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800593a:	61fb      	str	r3, [r7, #28]
          break;
 800593c:	e00c      	b.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800593e:	4b76      	ldr	r3, [pc, #472]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b02      	cmp	r3, #2
 800594a:	d107      	bne.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = LSE_VALUE;
 800594c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005950:	61fb      	str	r3, [r7, #28]
          break;
 8005952:	e003      	b.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          break;
 8005954:	bf00      	nop
 8005956:	e29f      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005958:	bf00      	nop
 800595a:	e29d      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800595c:	bf00      	nop
        break;
 800595e:	e29b      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005960:	4b6d      	ldr	r3, [pc, #436]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005966:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005972:	d025      	beq.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800597a:	d82c      	bhi.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005982:	d013      	beq.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800598a:	d824      	bhi.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005998:	d004      	beq.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          break;
 800599a:	e01c      	b.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
          frequency = HAL_RCC_GetPCLK1Freq();
 800599c:	f7fe fcce 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 80059a0:	61f8      	str	r0, [r7, #28]
          break;
 80059a2:	e01d      	b.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80059a4:	f7fe fc32 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80059a8:	61f8      	str	r0, [r7, #28]
          break;
 80059aa:	e019      	b.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059b8:	d10f      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            frequency = HSI_VALUE;
 80059ba:	4b58      	ldr	r3, [pc, #352]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80059bc:	61fb      	str	r3, [r7, #28]
          break;
 80059be:	e00c      	b.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059c0:	4b55      	ldr	r3, [pc, #340]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d107      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = LSE_VALUE;
 80059ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059d2:	61fb      	str	r3, [r7, #28]
          break;
 80059d4:	e003      	b.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          break;
 80059d6:	bf00      	nop
 80059d8:	e25e      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80059da:	bf00      	nop
 80059dc:	e25c      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80059de:	bf00      	nop
        break;
 80059e0:	e25a      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80059e2:	4b4d      	ldr	r3, [pc, #308]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059f4:	d007      	beq.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059fc:	d12f      	bne.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = HAL_RCC_GetSysClockFreq();
 80059fe:	f7fe fc05 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005a02:	61f8      	str	r0, [r7, #28]
          break;
 8005a04:	e02e      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005a06:	4b44      	ldr	r3, [pc, #272]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a12:	d126      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8005a14:	4b40      	ldr	r3, [pc, #256]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d020      	beq.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a20:	4b3d      	ldr	r3, [pc, #244]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	0a1b      	lsrs	r3, r3, #8
 8005a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a2a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	fb03 f202 	mul.w	r2, r3, r2
 8005a34:	4b38      	ldr	r3, [pc, #224]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	3301      	adds	r3, #1
 8005a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a44:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005a46:	4b34      	ldr	r3, [pc, #208]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	0e5b      	lsrs	r3, r3, #25
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	3301      	adds	r3, #1
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	61fb      	str	r3, [r7, #28]
          break;
 8005a5c:	e001      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8005a5e:	bf00      	nop
 8005a60:	e21a      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005a62:	bf00      	nop
        break;
 8005a64:	e218      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005a66:	4b2c      	ldr	r3, [pc, #176]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d103      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005a78:	f7fe fc76 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 8005a7c:	61f8      	str	r0, [r7, #28]
        break;
 8005a7e:	e20b      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a80:	f7fe fbc4 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005a84:	61f8      	str	r0, [r7, #28]
        break;
 8005a86:	e207      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005a88:	4b23      	ldr	r3, [pc, #140]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a8e:	f003 0318 	and.w	r3, r3, #24
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d010      	beq.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d834      	bhi.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d024      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          break;
 8005aac:	e02d      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005aae:	69b9      	ldr	r1, [r7, #24]
 8005ab0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005ab4:	f000 fcfa 	bl	80064ac <RCCEx_GetSAIxPeriphCLKFreq>
 8005ab8:	61f8      	str	r0, [r7, #28]
          break;
 8005aba:	e02b      	b.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005abc:	4b16      	ldr	r3, [pc, #88]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d122      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005ac8:	4b13      	ldr	r3, [pc, #76]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8005ad4:	4b10      	ldr	r3, [pc, #64]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	e005      	b.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8005ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	4a0c      	ldr	r2, [pc, #48]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af2:	61fb      	str	r3, [r7, #28]
          break;
 8005af4:	e00b      	b.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0xace>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005af6:	4b08      	ldr	r3, [pc, #32]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b02:	d106      	bne.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            frequency = HSI_VALUE;
 8005b04:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005b06:	61fb      	str	r3, [r7, #28]
          break;
 8005b08:	e003      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
          break;
 8005b0a:	bf00      	nop
 8005b0c:	e1c4      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005b0e:	bf00      	nop
 8005b10:	e1c2      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005b12:	bf00      	nop
        break;
 8005b14:	e1c0      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8005b16:	bf00      	nop
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	00f42400 	.word	0x00f42400
 8005b20:	08011910 	.word	0x08011910
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005b24:	4b96      	ldr	r3, [pc, #600]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b36:	d013      	beq.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b3e:	d819      	bhi.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b4c:	d004      	beq.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
          break;
 8005b4e:	e011      	b.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b50:	f7fe fbf4 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005b54:	61f8      	str	r0, [r7, #28]
          break;
 8005b56:	e010      	b.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b58:	f7fe fb58 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005b5c:	61f8      	str	r0, [r7, #28]
          break;
 8005b5e:	e00c      	b.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b60:	4b87      	ldr	r3, [pc, #540]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b6c:	d104      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            frequency = HSI_VALUE;
 8005b6e:	4b85      	ldr	r3, [pc, #532]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005b70:	61fb      	str	r3, [r7, #28]
          break;
 8005b72:	e001      	b.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
          break;
 8005b74:	bf00      	nop
 8005b76:	e18f      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005b78:	bf00      	nop
        break;
 8005b7a:	e18d      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005b7c:	4b80      	ldr	r3, [pc, #512]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b82:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b8e:	d013      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b96:	d819      	bhi.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ba4:	d004      	beq.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
          break;
 8005ba6:	e011      	b.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ba8:	f7fe fbc8 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005bac:	61f8      	str	r0, [r7, #28]
          break;
 8005bae:	e010      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bb0:	f7fe fb2c 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005bb4:	61f8      	str	r0, [r7, #28]
          break;
 8005bb6:	e00c      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bb8:	4b71      	ldr	r3, [pc, #452]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc4:	d104      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            frequency = HSI_VALUE;
 8005bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005bc8:	61fb      	str	r3, [r7, #28]
          break;
 8005bca:	e001      	b.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
          break;
 8005bcc:	bf00      	nop
 8005bce:	e163      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005bd0:	bf00      	nop
        break;
 8005bd2:	e161      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005be6:	d013      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bee:	d819      	bhi.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bfc:	d004      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
          break;
 8005bfe:	e011      	b.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c00:	f7fe fb9c 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005c04:	61f8      	str	r0, [r7, #28]
          break;
 8005c06:	e010      	b.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c08:	f7fe fb00 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005c0c:	61f8      	str	r0, [r7, #28]
          break;
 8005c0e:	e00c      	b.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c10:	4b5b      	ldr	r3, [pc, #364]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1c:	d104      	bne.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            frequency = HSI_VALUE;
 8005c1e:	4b59      	ldr	r3, [pc, #356]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005c20:	61fb      	str	r3, [r7, #28]
          break;
 8005c22:	e001      	b.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          break;
 8005c24:	bf00      	nop
 8005c26:	e137      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005c28:	bf00      	nop
        break;
 8005c2a:	e135      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005c2c:	4b54      	ldr	r3, [pc, #336]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d011      	beq.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d818      	bhi.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d004      	beq.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8005c50:	e011      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c52:	f7fe fb73 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005c56:	61f8      	str	r0, [r7, #28]
          break;
 8005c58:	e010      	b.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c5a:	f7fe fad7 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005c5e:	61f8      	str	r0, [r7, #28]
          break;
 8005c60:	e00c      	b.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c62:	4b47      	ldr	r3, [pc, #284]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c6e:	d104      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            frequency = HSI_VALUE;
 8005c70:	4b44      	ldr	r3, [pc, #272]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005c72:	61fb      	str	r3, [r7, #28]
          break;
 8005c74:	e001      	b.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
          break;
 8005c76:	bf00      	nop
 8005c78:	e10e      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005c7a:	bf00      	nop
        break;
 8005c7c:	e10c      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c7e:	4b40      	ldr	r3, [pc, #256]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c84:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c90:	d02c      	beq.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c98:	d833      	bhi.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ca0:	d01a      	beq.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ca8:	d82b      	bhi.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cb6:	d004      	beq.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
          break;
 8005cb8:	e023      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cba:	f7fe fb3f 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005cbe:	61f8      	str	r0, [r7, #28]
          break;
 8005cc0:	e026      	b.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d11a      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 8005cd0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005cd4:	61fb      	str	r3, [r7, #28]
          break;
 8005cd6:	e016      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cd8:	4b29      	ldr	r3, [pc, #164]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce4:	d111      	bne.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            frequency = HSI_VALUE;
 8005ce6:	4b27      	ldr	r3, [pc, #156]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005ce8:	61fb      	str	r3, [r7, #28]
          break;
 8005cea:	e00e      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cec:	4b24      	ldr	r3, [pc, #144]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d109      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            frequency = LSE_VALUE;
 8005cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cfe:	61fb      	str	r3, [r7, #28]
          break;
 8005d00:	e005      	b.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
          break;
 8005d02:	bf00      	nop
 8005d04:	e0c8      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005d06:	bf00      	nop
 8005d08:	e0c6      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005d0a:	bf00      	nop
 8005d0c:	e0c4      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005d0e:	bf00      	nop
        break;
 8005d10:	e0c2      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005d12:	4b1b      	ldr	r3, [pc, #108]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d24:	d030      	beq.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d2c:	d837      	bhi.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d34:	d01a      	beq.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d3c:	d82f      	bhi.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d4a:	d004      	beq.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
          break;
 8005d4c:	e027      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d4e:	f7fe faf5 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005d52:	61f8      	str	r0, [r7, #28]
          break;
 8005d54:	e02a      	b.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d56:	4b0a      	ldr	r3, [pc, #40]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d11e      	bne.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8005d64:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005d68:	61fb      	str	r3, [r7, #28]
          break;
 8005d6a:	e01a      	b.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d6c:	4b04      	ldr	r3, [pc, #16]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d78:	d115      	bne.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
            frequency = HSI_VALUE;
 8005d7a:	4b02      	ldr	r3, [pc, #8]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005d7c:	61fb      	str	r3, [r7, #28]
          break;
 8005d7e:	e012      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 8005d80:	40021000 	.word	0x40021000
 8005d84:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d88:	4b46      	ldr	r3, [pc, #280]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d109      	bne.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            frequency = LSE_VALUE;
 8005d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d9a:	61fb      	str	r3, [r7, #28]
          break;
 8005d9c:	e005      	b.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
          break;
 8005d9e:	bf00      	nop
 8005da0:	e07a      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005da2:	bf00      	nop
 8005da4:	e078      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005da6:	bf00      	nop
 8005da8:	e076      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005daa:	bf00      	nop
        break;
 8005dac:	e074      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005dae:	4b3d      	ldr	r3, [pc, #244]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005db4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dc0:	d02c      	beq.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dc8:	d855      	bhi.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dd6:	d004      	beq.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xda2>
          break;
 8005dd8:	e04d      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dda:	f7fe fa17 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005dde:	61f8      	str	r0, [r7, #28]
          break;
 8005de0:	e04e      	b.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005de2:	4b30      	ldr	r3, [pc, #192]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d145      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005dee:	4b2d      	ldr	r3, [pc, #180]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0xdc6>
 8005dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	e005      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8005e06:	4b27      	ldr	r3, [pc, #156]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e0c:	0a1b      	lsrs	r3, r3, #8
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	4a25      	ldr	r2, [pc, #148]	@ (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>)
 8005e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e18:	61fb      	str	r3, [r7, #28]
          break;
 8005e1a:	e02e      	b.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005e1c:	4b21      	ldr	r3, [pc, #132]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e28:	d129      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e36:	d122      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e38:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	0a1b      	lsrs	r3, r3, #8
 8005e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e42:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	fb03 f202 	mul.w	r2, r3, r2
 8005e4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	091b      	lsrs	r3, r3, #4
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	3301      	adds	r3, #1
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005e5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	0d5b      	lsrs	r3, r3, #21
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	3301      	adds	r3, #1
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	61fb      	str	r3, [r7, #28]
          break;
 8005e74:	e003      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
          break;
 8005e76:	bf00      	nop
 8005e78:	e00e      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005e7a:	bf00      	nop
 8005e7c:	e00c      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8005e7e:	bf00      	nop
        break;
 8005e80:	e00a      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e82:	bf00      	nop
 8005e84:	e008      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e86:	bf00      	nop
 8005e88:	e006      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e8a:	bf00      	nop
 8005e8c:	e004      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e8e:	bf00      	nop
 8005e90:	e002      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e92:	bf00      	nop
 8005e94:	e000      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8005e96:	bf00      	nop
    }
  }

  return(frequency);
 8005e98:	69fb      	ldr	r3, [r7, #28]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	08011910 	.word	0x08011910

08005eac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d010      	beq.n	8005ee4 <RCCEx_PLLSAI1_Config+0x38>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d00c      	beq.n	8005ee4 <RCCEx_PLLSAI1_Config+0x38>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d008      	beq.n	8005ee4 <RCCEx_PLLSAI1_Config+0x38>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d004      	beq.n	8005ee4 <RCCEx_PLLSAI1_Config+0x38>
 8005eda:	f640 3162 	movw	r1, #2914	@ 0xb62
 8005ede:	4882      	ldr	r0, [pc, #520]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x23c>)
 8005ee0:	f009 fb06 	bl	800f4f0 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <RCCEx_PLLSAI1_Config+0x48>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d904      	bls.n	8005efe <RCCEx_PLLSAI1_Config+0x52>
 8005ef4:	f640 3163 	movw	r1, #2915	@ 0xb63
 8005ef8:	487b      	ldr	r0, [pc, #492]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x23c>)
 8005efa:	f009 faf9 	bl	800f4f0 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b07      	cmp	r3, #7
 8005f04:	d903      	bls.n	8005f0e <RCCEx_PLLSAI1_Config+0x62>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f0c:	d904      	bls.n	8005f18 <RCCEx_PLLSAI1_Config+0x6c>
 8005f0e:	f640 3164 	movw	r1, #2916	@ 0xb64
 8005f12:	4875      	ldr	r0, [pc, #468]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x23c>)
 8005f14:	f009 faec 	bl	800f4f0 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10b      	bne.n	8005f3c <RCCEx_PLLSAI1_Config+0x90>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d105      	bne.n	8005f3c <RCCEx_PLLSAI1_Config+0x90>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <RCCEx_PLLSAI1_Config+0xa0>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <RCCEx_PLLSAI1_Config+0xaa>
 8005f4c:	f640 3165 	movw	r1, #2917	@ 0xb65
 8005f50:	4865      	ldr	r0, [pc, #404]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x23c>)
 8005f52:	f009 facd 	bl	800f4f0 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f56:	4b65      	ldr	r3, [pc, #404]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00e      	beq.n	8005f80 <RCCEx_PLLSAI1_Config+0xd4>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f62:	4b62      	ldr	r3, [pc, #392]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0203 	and.w	r2, r3, #3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d103      	bne.n	8005f7a <RCCEx_PLLSAI1_Config+0xce>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
       ||
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d142      	bne.n	8006000 <RCCEx_PLLSAI1_Config+0x154>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	73fb      	strb	r3, [r7, #15]
 8005f7e:	e03f      	b.n	8006000 <RCCEx_PLLSAI1_Config+0x154>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d018      	beq.n	8005fba <RCCEx_PLLSAI1_Config+0x10e>
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d825      	bhi.n	8005fd8 <RCCEx_PLLSAI1_Config+0x12c>
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d002      	beq.n	8005f96 <RCCEx_PLLSAI1_Config+0xea>
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d009      	beq.n	8005fa8 <RCCEx_PLLSAI1_Config+0xfc>
 8005f94:	e020      	b.n	8005fd8 <RCCEx_PLLSAI1_Config+0x12c>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f96:	4b55      	ldr	r3, [pc, #340]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d11d      	bne.n	8005fde <RCCEx_PLLSAI1_Config+0x132>
      {
        status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa6:	e01a      	b.n	8005fde <RCCEx_PLLSAI1_Config+0x132>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fa8:	4b50      	ldr	r3, [pc, #320]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d116      	bne.n	8005fe2 <RCCEx_PLLSAI1_Config+0x136>
      {
        status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb8:	e013      	b.n	8005fe2 <RCCEx_PLLSAI1_Config+0x136>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fba:	4b4c      	ldr	r3, [pc, #304]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10f      	bne.n	8005fe6 <RCCEx_PLLSAI1_Config+0x13a>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fc6:	4b49      	ldr	r3, [pc, #292]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <RCCEx_PLLSAI1_Config+0x13a>
        {
          status = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fd6:	e006      	b.n	8005fe6 <RCCEx_PLLSAI1_Config+0x13a>
    default:
      status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
      break;
 8005fdc:	e004      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0x13c>
      break;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0x13c>
      break;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0x13c>
      break;
 8005fe6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d108      	bne.n	8006000 <RCCEx_PLLSAI1_Config+0x154>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005fee:	4b3f      	ldr	r3, [pc, #252]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f023 0203 	bic.w	r2, r3, #3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	493c      	ldr	r1, [pc, #240]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f040 80c6 	bne.w	8006194 <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006008:	4b38      	ldr	r3, [pc, #224]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a37      	ldr	r2, [pc, #220]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 800600e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006014:	f7fa fb24 	bl	8000660 <HAL_GetTick>
 8006018:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800601a:	e009      	b.n	8006030 <RCCEx_PLLSAI1_Config+0x184>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800601c:	f7fa fb20 	bl	8000660 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d902      	bls.n	8006030 <RCCEx_PLLSAI1_Config+0x184>
      {
        status = HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	73fb      	strb	r3, [r7, #15]
        break;
 800602e:	e005      	b.n	800603c <RCCEx_PLLSAI1_Config+0x190>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006030:	4b2e      	ldr	r3, [pc, #184]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1ef      	bne.n	800601c <RCCEx_PLLSAI1_Config+0x170>
      }
    }

    if(status == HAL_OK)
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b00      	cmp	r3, #0
 8006040:	f040 80a8 	bne.w	8006194 <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d120      	bne.n	800608c <RCCEx_PLLSAI1_Config+0x1e0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d903      	bls.n	800605a <RCCEx_PLLSAI1_Config+0x1ae>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	2b1f      	cmp	r3, #31
 8006058:	d904      	bls.n	8006064 <RCCEx_PLLSAI1_Config+0x1b8>
 800605a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800605e:	4822      	ldr	r0, [pc, #136]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x23c>)
 8006060:	f009 fa46 	bl	800f4f0 <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006064:	4b21      	ldr	r3, [pc, #132]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	4b21      	ldr	r3, [pc, #132]	@ (80060f0 <RCCEx_PLLSAI1_Config+0x244>)
 800606a:	4013      	ands	r3, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6892      	ldr	r2, [r2, #8]
 8006070:	0211      	lsls	r1, r2, #8
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68d2      	ldr	r2, [r2, #12]
 8006076:	06d2      	lsls	r2, r2, #27
 8006078:	4311      	orrs	r1, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6852      	ldr	r2, [r2, #4]
 800607e:	3a01      	subs	r2, #1
 8006080:	0112      	lsls	r2, r2, #4
 8006082:	430a      	orrs	r2, r1
 8006084:	4919      	ldr	r1, [pc, #100]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 8006086:	4313      	orrs	r3, r2
 8006088:	610b      	str	r3, [r1, #16]
 800608a:	e05f      	b.n	800614c <RCCEx_PLLSAI1_Config+0x2a0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d132      	bne.n	80060f8 <RCCEx_PLLSAI1_Config+0x24c>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d010      	beq.n	80060bc <RCCEx_PLLSAI1_Config+0x210>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d00c      	beq.n	80060bc <RCCEx_PLLSAI1_Config+0x210>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d008      	beq.n	80060bc <RCCEx_PLLSAI1_Config+0x210>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d004      	beq.n	80060bc <RCCEx_PLLSAI1_Config+0x210>
 80060b2:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 80060b6:	480c      	ldr	r0, [pc, #48]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x23c>)
 80060b8:	f009 fa1a 	bl	800f4f0 <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060bc:	4b0b      	ldr	r3, [pc, #44]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	4b0c      	ldr	r3, [pc, #48]	@ (80060f4 <RCCEx_PLLSAI1_Config+0x248>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6892      	ldr	r2, [r2, #8]
 80060c8:	0211      	lsls	r1, r2, #8
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6912      	ldr	r2, [r2, #16]
 80060ce:	0852      	lsrs	r2, r2, #1
 80060d0:	3a01      	subs	r2, #1
 80060d2:	0552      	lsls	r2, r2, #21
 80060d4:	4311      	orrs	r1, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6852      	ldr	r2, [r2, #4]
 80060da:	3a01      	subs	r2, #1
 80060dc:	0112      	lsls	r2, r2, #4
 80060de:	430a      	orrs	r2, r1
 80060e0:	4902      	ldr	r1, [pc, #8]	@ (80060ec <RCCEx_PLLSAI1_Config+0x240>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	610b      	str	r3, [r1, #16]
 80060e6:	e031      	b.n	800614c <RCCEx_PLLSAI1_Config+0x2a0>
 80060e8:	080111a8 	.word	0x080111a8
 80060ec:	40021000 	.word	0x40021000
 80060f0:	07ff800f 	.word	0x07ff800f
 80060f4:	ff9f800f 	.word	0xff9f800f
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d010      	beq.n	8006122 <RCCEx_PLLSAI1_Config+0x276>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	2b04      	cmp	r3, #4
 8006106:	d00c      	beq.n	8006122 <RCCEx_PLLSAI1_Config+0x276>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	2b06      	cmp	r3, #6
 800610e:	d008      	beq.n	8006122 <RCCEx_PLLSAI1_Config+0x276>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d004      	beq.n	8006122 <RCCEx_PLLSAI1_Config+0x276>
 8006118:	f640 31ee 	movw	r1, #3054	@ 0xbee
 800611c:	4820      	ldr	r0, [pc, #128]	@ (80061a0 <RCCEx_PLLSAI1_Config+0x2f4>)
 800611e:	f009 f9e7 	bl	800f4f0 <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006122:	4b20      	ldr	r3, [pc, #128]	@ (80061a4 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	4b20      	ldr	r3, [pc, #128]	@ (80061a8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006128:	4013      	ands	r3, r2
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6892      	ldr	r2, [r2, #8]
 800612e:	0211      	lsls	r1, r2, #8
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6952      	ldr	r2, [r2, #20]
 8006134:	0852      	lsrs	r2, r2, #1
 8006136:	3a01      	subs	r2, #1
 8006138:	0652      	lsls	r2, r2, #25
 800613a:	4311      	orrs	r1, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6852      	ldr	r2, [r2, #4]
 8006140:	3a01      	subs	r2, #1
 8006142:	0112      	lsls	r2, r2, #4
 8006144:	430a      	orrs	r2, r1
 8006146:	4917      	ldr	r1, [pc, #92]	@ (80061a4 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006148:	4313      	orrs	r3, r2
 800614a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800614c:	4b15      	ldr	r3, [pc, #84]	@ (80061a4 <RCCEx_PLLSAI1_Config+0x2f8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a14      	ldr	r2, [pc, #80]	@ (80061a4 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006152:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006156:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fa fa82 	bl	8000660 <HAL_GetTick>
 800615c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800615e:	e009      	b.n	8006174 <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006160:	f7fa fa7e 	bl	8000660 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d902      	bls.n	8006174 <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	73fb      	strb	r3, [r7, #15]
          break;
 8006172:	e005      	b.n	8006180 <RCCEx_PLLSAI1_Config+0x2d4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006174:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ef      	beq.n	8006160 <RCCEx_PLLSAI1_Config+0x2b4>
        }
      }

      if(status == HAL_OK)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006186:	4b07      	ldr	r3, [pc, #28]	@ (80061a4 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	4905      	ldr	r1, [pc, #20]	@ (80061a4 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006190:	4313      	orrs	r3, r2
 8006192:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	080111a8 	.word	0x080111a8
 80061a4:	40021000 	.word	0x40021000
 80061a8:	f9ff800f 	.word	0xf9ff800f

080061ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d010      	beq.n	80061e4 <RCCEx_PLLSAI2_Config+0x38>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d00c      	beq.n	80061e4 <RCCEx_PLLSAI2_Config+0x38>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d008      	beq.n	80061e4 <RCCEx_PLLSAI2_Config+0x38>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d004      	beq.n	80061e4 <RCCEx_PLLSAI2_Config+0x38>
 80061da:	f640 412f 	movw	r1, #3119	@ 0xc2f
 80061de:	4882      	ldr	r0, [pc, #520]	@ (80063e8 <RCCEx_PLLSAI2_Config+0x23c>)
 80061e0:	f009 f986 	bl	800f4f0 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <RCCEx_PLLSAI2_Config+0x48>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d904      	bls.n	80061fe <RCCEx_PLLSAI2_Config+0x52>
 80061f4:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 80061f8:	487b      	ldr	r0, [pc, #492]	@ (80063e8 <RCCEx_PLLSAI2_Config+0x23c>)
 80061fa:	f009 f979 	bl	800f4f0 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b07      	cmp	r3, #7
 8006204:	d903      	bls.n	800620e <RCCEx_PLLSAI2_Config+0x62>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b7f      	cmp	r3, #127	@ 0x7f
 800620c:	d904      	bls.n	8006218 <RCCEx_PLLSAI2_Config+0x6c>
 800620e:	f640 4131 	movw	r1, #3121	@ 0xc31
 8006212:	4875      	ldr	r0, [pc, #468]	@ (80063e8 <RCCEx_PLLSAI2_Config+0x23c>)
 8006214:	f009 f96c 	bl	800f4f0 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <RCCEx_PLLSAI2_Config+0x90>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d105      	bne.n	800623c <RCCEx_PLLSAI2_Config+0x90>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <RCCEx_PLLSAI2_Config+0xa0>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8006244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d004      	beq.n	8006256 <RCCEx_PLLSAI2_Config+0xaa>
 800624c:	f640 4132 	movw	r1, #3122	@ 0xc32
 8006250:	4865      	ldr	r0, [pc, #404]	@ (80063e8 <RCCEx_PLLSAI2_Config+0x23c>)
 8006252:	f009 f94d 	bl	800f4f0 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006256:	4b65      	ldr	r3, [pc, #404]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00e      	beq.n	8006280 <RCCEx_PLLSAI2_Config+0xd4>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006262:	4b62      	ldr	r3, [pc, #392]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f003 0203 	and.w	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d103      	bne.n	800627a <RCCEx_PLLSAI2_Config+0xce>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
       ||
 8006276:	2b00      	cmp	r3, #0
 8006278:	d142      	bne.n	8006300 <RCCEx_PLLSAI2_Config+0x154>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
 800627e:	e03f      	b.n	8006300 <RCCEx_PLLSAI2_Config+0x154>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d018      	beq.n	80062ba <RCCEx_PLLSAI2_Config+0x10e>
 8006288:	2b03      	cmp	r3, #3
 800628a:	d825      	bhi.n	80062d8 <RCCEx_PLLSAI2_Config+0x12c>
 800628c:	2b01      	cmp	r3, #1
 800628e:	d002      	beq.n	8006296 <RCCEx_PLLSAI2_Config+0xea>
 8006290:	2b02      	cmp	r3, #2
 8006292:	d009      	beq.n	80062a8 <RCCEx_PLLSAI2_Config+0xfc>
 8006294:	e020      	b.n	80062d8 <RCCEx_PLLSAI2_Config+0x12c>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006296:	4b55      	ldr	r3, [pc, #340]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d11d      	bne.n	80062de <RCCEx_PLLSAI2_Config+0x132>
      {
        status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a6:	e01a      	b.n	80062de <RCCEx_PLLSAI2_Config+0x132>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062a8:	4b50      	ldr	r3, [pc, #320]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d116      	bne.n	80062e2 <RCCEx_PLLSAI2_Config+0x136>
      {
        status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b8:	e013      	b.n	80062e2 <RCCEx_PLLSAI2_Config+0x136>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062ba:	4b4c      	ldr	r3, [pc, #304]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10f      	bne.n	80062e6 <RCCEx_PLLSAI2_Config+0x13a>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062c6:	4b49      	ldr	r3, [pc, #292]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <RCCEx_PLLSAI2_Config+0x13a>
        {
          status = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062d6:	e006      	b.n	80062e6 <RCCEx_PLLSAI2_Config+0x13a>
    default:
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
      break;
 80062dc:	e004      	b.n	80062e8 <RCCEx_PLLSAI2_Config+0x13c>
      break;
 80062de:	bf00      	nop
 80062e0:	e002      	b.n	80062e8 <RCCEx_PLLSAI2_Config+0x13c>
      break;
 80062e2:	bf00      	nop
 80062e4:	e000      	b.n	80062e8 <RCCEx_PLLSAI2_Config+0x13c>
      break;
 80062e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d108      	bne.n	8006300 <RCCEx_PLLSAI2_Config+0x154>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80062ee:	4b3f      	ldr	r3, [pc, #252]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f023 0203 	bic.w	r2, r3, #3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	493c      	ldr	r1, [pc, #240]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f040 80c6 	bne.w	8006494 <RCCEx_PLLSAI2_Config+0x2e8>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006308:	4b38      	ldr	r3, [pc, #224]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a37      	ldr	r2, [pc, #220]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 800630e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006314:	f7fa f9a4 	bl	8000660 <HAL_GetTick>
 8006318:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800631a:	e009      	b.n	8006330 <RCCEx_PLLSAI2_Config+0x184>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800631c:	f7fa f9a0 	bl	8000660 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d902      	bls.n	8006330 <RCCEx_PLLSAI2_Config+0x184>
      {
        status = HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	73fb      	strb	r3, [r7, #15]
        break;
 800632e:	e005      	b.n	800633c <RCCEx_PLLSAI2_Config+0x190>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006330:	4b2e      	ldr	r3, [pc, #184]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1ef      	bne.n	800631c <RCCEx_PLLSAI2_Config+0x170>
      }
    }

    if(status == HAL_OK)
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 80a8 	bne.w	8006494 <RCCEx_PLLSAI2_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d120      	bne.n	800638c <RCCEx_PLLSAI2_Config+0x1e0>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d903      	bls.n	800635a <RCCEx_PLLSAI2_Config+0x1ae>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	2b1f      	cmp	r3, #31
 8006358:	d904      	bls.n	8006364 <RCCEx_PLLSAI2_Config+0x1b8>
 800635a:	f640 4185 	movw	r1, #3205	@ 0xc85
 800635e:	4822      	ldr	r0, [pc, #136]	@ (80063e8 <RCCEx_PLLSAI2_Config+0x23c>)
 8006360:	f009 f8c6 	bl	800f4f0 <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006364:	4b21      	ldr	r3, [pc, #132]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 8006366:	695a      	ldr	r2, [r3, #20]
 8006368:	4b21      	ldr	r3, [pc, #132]	@ (80063f0 <RCCEx_PLLSAI2_Config+0x244>)
 800636a:	4013      	ands	r3, r2
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6892      	ldr	r2, [r2, #8]
 8006370:	0211      	lsls	r1, r2, #8
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	68d2      	ldr	r2, [r2, #12]
 8006376:	06d2      	lsls	r2, r2, #27
 8006378:	4311      	orrs	r1, r2
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6852      	ldr	r2, [r2, #4]
 800637e:	3a01      	subs	r2, #1
 8006380:	0112      	lsls	r2, r2, #4
 8006382:	430a      	orrs	r2, r1
 8006384:	4919      	ldr	r1, [pc, #100]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 8006386:	4313      	orrs	r3, r2
 8006388:	614b      	str	r3, [r1, #20]
 800638a:	e05f      	b.n	800644c <RCCEx_PLLSAI2_Config+0x2a0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d132      	bne.n	80063f8 <RCCEx_PLLSAI2_Config+0x24c>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d010      	beq.n	80063bc <RCCEx_PLLSAI2_Config+0x210>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d00c      	beq.n	80063bc <RCCEx_PLLSAI2_Config+0x210>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b06      	cmp	r3, #6
 80063a8:	d008      	beq.n	80063bc <RCCEx_PLLSAI2_Config+0x210>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d004      	beq.n	80063bc <RCCEx_PLLSAI2_Config+0x210>
 80063b2:	f640 41aa 	movw	r1, #3242	@ 0xcaa
 80063b6:	480c      	ldr	r0, [pc, #48]	@ (80063e8 <RCCEx_PLLSAI2_Config+0x23c>)
 80063b8:	f009 f89a 	bl	800f4f0 <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063bc:	4b0b      	ldr	r3, [pc, #44]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 80063be:	695a      	ldr	r2, [r3, #20]
 80063c0:	4b0c      	ldr	r3, [pc, #48]	@ (80063f4 <RCCEx_PLLSAI2_Config+0x248>)
 80063c2:	4013      	ands	r3, r2
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6892      	ldr	r2, [r2, #8]
 80063c8:	0211      	lsls	r1, r2, #8
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6912      	ldr	r2, [r2, #16]
 80063ce:	0852      	lsrs	r2, r2, #1
 80063d0:	3a01      	subs	r2, #1
 80063d2:	0552      	lsls	r2, r2, #21
 80063d4:	4311      	orrs	r1, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6852      	ldr	r2, [r2, #4]
 80063da:	3a01      	subs	r2, #1
 80063dc:	0112      	lsls	r2, r2, #4
 80063de:	430a      	orrs	r2, r1
 80063e0:	4902      	ldr	r1, [pc, #8]	@ (80063ec <RCCEx_PLLSAI2_Config+0x240>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	614b      	str	r3, [r1, #20]
 80063e6:	e031      	b.n	800644c <RCCEx_PLLSAI2_Config+0x2a0>
 80063e8:	080111a8 	.word	0x080111a8
 80063ec:	40021000 	.word	0x40021000
 80063f0:	07ff800f 	.word	0x07ff800f
 80063f4:	ff9f800f 	.word	0xff9f800f
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d010      	beq.n	8006422 <RCCEx_PLLSAI2_Config+0x276>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	2b04      	cmp	r3, #4
 8006406:	d00c      	beq.n	8006422 <RCCEx_PLLSAI2_Config+0x276>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	2b06      	cmp	r3, #6
 800640e:	d008      	beq.n	8006422 <RCCEx_PLLSAI2_Config+0x276>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d004      	beq.n	8006422 <RCCEx_PLLSAI2_Config+0x276>
 8006418:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 800641c:	4820      	ldr	r0, [pc, #128]	@ (80064a0 <RCCEx_PLLSAI2_Config+0x2f4>)
 800641e:	f009 f867 	bl	800f4f0 <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006422:	4b20      	ldr	r3, [pc, #128]	@ (80064a4 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	4b20      	ldr	r3, [pc, #128]	@ (80064a8 <RCCEx_PLLSAI2_Config+0x2fc>)
 8006428:	4013      	ands	r3, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6892      	ldr	r2, [r2, #8]
 800642e:	0211      	lsls	r1, r2, #8
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6952      	ldr	r2, [r2, #20]
 8006434:	0852      	lsrs	r2, r2, #1
 8006436:	3a01      	subs	r2, #1
 8006438:	0652      	lsls	r2, r2, #25
 800643a:	4311      	orrs	r1, r2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6852      	ldr	r2, [r2, #4]
 8006440:	3a01      	subs	r2, #1
 8006442:	0112      	lsls	r2, r2, #4
 8006444:	430a      	orrs	r2, r1
 8006446:	4917      	ldr	r1, [pc, #92]	@ (80064a4 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006448:	4313      	orrs	r3, r2
 800644a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800644c:	4b15      	ldr	r3, [pc, #84]	@ (80064a4 <RCCEx_PLLSAI2_Config+0x2f8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a14      	ldr	r2, [pc, #80]	@ (80064a4 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006456:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006458:	f7fa f902 	bl	8000660 <HAL_GetTick>
 800645c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800645e:	e009      	b.n	8006474 <RCCEx_PLLSAI2_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006460:	f7fa f8fe 	bl	8000660 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d902      	bls.n	8006474 <RCCEx_PLLSAI2_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	73fb      	strb	r3, [r7, #15]
          break;
 8006472:	e005      	b.n	8006480 <RCCEx_PLLSAI2_Config+0x2d4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006474:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0ef      	beq.n	8006460 <RCCEx_PLLSAI2_Config+0x2b4>
        }
      }

      if(status == HAL_OK)
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <RCCEx_PLLSAI2_Config+0x2e8>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006486:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006488:	695a      	ldr	r2, [r3, #20]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	4905      	ldr	r1, [pc, #20]	@ (80064a4 <RCCEx_PLLSAI2_Config+0x2f8>)
 8006490:	4313      	orrs	r3, r2
 8006492:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	080111a8 	.word	0x080111a8
 80064a4:	40021000 	.word	0x40021000
 80064a8:	f9ff800f 	.word	0xf9ff800f

080064ac <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b089      	sub	sp, #36	@ 0x24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064c8:	d10b      	bne.n	80064e2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80064ca:	4b7e      	ldr	r3, [pc, #504]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064d0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80064d4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b60      	cmp	r3, #96	@ 0x60
 80064da:	d112      	bne.n	8006502 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80064dc:	4b7a      	ldr	r3, [pc, #488]	@ (80066c8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e00f      	b.n	8006502 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e8:	d10b      	bne.n	8006502 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80064ea:	4b76      	ldr	r3, [pc, #472]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064f4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064fc:	d101      	bne.n	8006502 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80064fe:	4b72      	ldr	r3, [pc, #456]	@ (80066c8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006500:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f040 80d6 	bne.w	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b40      	cmp	r3, #64	@ 0x40
 8006512:	d003      	beq.n	800651c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800651a:	d13b      	bne.n	8006594 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800651c:	4b69      	ldr	r3, [pc, #420]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006524:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006528:	f040 80c4 	bne.w	80066b4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800652c:	4b65      	ldr	r3, [pc, #404]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80bd 	beq.w	80066b4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800653a:	4b62      	ldr	r3, [pc, #392]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	091b      	lsrs	r3, r3, #4
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	3301      	adds	r3, #1
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800654e:	4b5d      	ldr	r3, [pc, #372]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	0a1b      	lsrs	r3, r3, #8
 8006554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006558:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800655a:	4b5a      	ldr	r3, [pc, #360]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	0edb      	lsrs	r3, r3, #27
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800656c:	4b55      	ldr	r3, [pc, #340]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006578:	2311      	movs	r3, #17
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	e001      	b.n	8006582 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800657e:	2307      	movs	r3, #7
 8006580:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	fb03 f202 	mul.w	r2, r3, r2
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006590:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006592:	e08f      	b.n	80066b4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d13a      	bne.n	8006610 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800659a:	4b4a      	ldr	r3, [pc, #296]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065a6:	f040 8086 	bne.w	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80065aa:	4b46      	ldr	r3, [pc, #280]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d07f      	beq.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80065b6:	4b43      	ldr	r3, [pc, #268]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	3301      	adds	r3, #1
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80065ca:	4b3e      	ldr	r3, [pc, #248]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	0a1b      	lsrs	r3, r3, #8
 80065d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065d4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80065d6:	4b3b      	ldr	r3, [pc, #236]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	0edb      	lsrs	r3, r3, #27
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80065e8:	4b36      	ldr	r3, [pc, #216]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80065f4:	2311      	movs	r3, #17
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	e001      	b.n	80065fe <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80065fa:	2307      	movs	r3, #7
 80065fc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	fb03 f202 	mul.w	r2, r3, r2
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	e052      	b.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	2b80      	cmp	r3, #128	@ 0x80
 8006614:	d003      	beq.n	800661e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800661c:	d109      	bne.n	8006632 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800661e:	4b29      	ldr	r3, [pc, #164]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800662a:	d144      	bne.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800662c:	4b27      	ldr	r3, [pc, #156]	@ (80066cc <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800662e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006630:	e041      	b.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b20      	cmp	r3, #32
 8006636:	d003      	beq.n	8006640 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663e:	d13a      	bne.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006640:	4b20      	ldr	r3, [pc, #128]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664c:	d133      	bne.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800664e:	4b1d      	ldr	r3, [pc, #116]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d02d      	beq.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800665a:	4b1a      	ldr	r3, [pc, #104]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	091b      	lsrs	r3, r3, #4
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	3301      	adds	r3, #1
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	fbb2 f3f3 	udiv	r3, r2, r3
 800666c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800666e:	4b15      	ldr	r3, [pc, #84]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	0a1b      	lsrs	r3, r3, #8
 8006674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006678:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800667a:	4b12      	ldr	r3, [pc, #72]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	0edb      	lsrs	r3, r3, #27
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800668c:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006698:	2311      	movs	r3, #17
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e001      	b.n	80066a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800669e:	2307      	movs	r3, #7
 80066a0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	fb03 f202 	mul.w	r2, r3, r2
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	e000      	b.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80066b4:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80066b6:	69fb      	ldr	r3, [r7, #28]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3724      	adds	r7, #36	@ 0x24
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	40021000 	.word	0x40021000
 80066c8:	001fff68 	.word	0x001fff68
 80066cc:	00f42400 	.word	0x00f42400

080066d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 80e2 	beq.w	80068a8 <HAL_RTC_Init+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a72      	ldr	r2, [pc, #456]	@ (80068b4 <HAL_RTC_Init+0x1e4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d003      	beq.n	80066f6 <HAL_RTC_Init+0x26>
 80066ee:	21fe      	movs	r1, #254	@ 0xfe
 80066f0:	4871      	ldr	r0, [pc, #452]	@ (80068b8 <HAL_RTC_Init+0x1e8>)
 80066f2:	f008 fefd 	bl	800f4f0 <assert_failed>
    assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b40      	cmp	r3, #64	@ 0x40
 80066fc:	d007      	beq.n	800670e <HAL_RTC_Init+0x3e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_RTC_Init+0x3e>
 8006706:	21ff      	movs	r1, #255	@ 0xff
 8006708:	486b      	ldr	r0, [pc, #428]	@ (80068b8 <HAL_RTC_Init+0x1e8>)
 800670a:	f008 fef1 	bl	800f4f0 <assert_failed>
    assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b7f      	cmp	r3, #127	@ 0x7f
 8006714:	d904      	bls.n	8006720 <HAL_RTC_Init+0x50>
 8006716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800671a:	4867      	ldr	r0, [pc, #412]	@ (80068b8 <HAL_RTC_Init+0x1e8>)
 800671c:	f008 fee8 	bl	800f4f0 <assert_failed>
    assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006728:	d304      	bcc.n	8006734 <HAL_RTC_Init+0x64>
 800672a:	f240 1101 	movw	r1, #257	@ 0x101
 800672e:	4862      	ldr	r0, [pc, #392]	@ (80068b8 <HAL_RTC_Init+0x1e8>)
 8006730:	f008 fede 	bl	800f4f0 <assert_failed>
    assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d013      	beq.n	8006764 <HAL_RTC_Init+0x94>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006744:	d00e      	beq.n	8006764 <HAL_RTC_Init+0x94>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800674e:	d009      	beq.n	8006764 <HAL_RTC_Init+0x94>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006758:	d004      	beq.n	8006764 <HAL_RTC_Init+0x94>
 800675a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800675e:	4856      	ldr	r0, [pc, #344]	@ (80068b8 <HAL_RTC_Init+0x1e8>)
 8006760:	f008 fec6 	bl	800f4f0 <assert_failed>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d008      	beq.n	800677e <HAL_RTC_Init+0xae>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d004      	beq.n	800677e <HAL_RTC_Init+0xae>
 8006774:	f240 1103 	movw	r1, #259	@ 0x103
 8006778:	484f      	ldr	r0, [pc, #316]	@ (80068b8 <HAL_RTC_Init+0x1e8>)
 800677a:	f008 feb9 	bl	800f4f0 <assert_failed>
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <HAL_RTC_Init+0xca>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800678e:	d004      	beq.n	800679a <HAL_RTC_Init+0xca>
 8006790:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8006794:	4848      	ldr	r0, [pc, #288]	@ (80068b8 <HAL_RTC_Init+0x1e8>)
 8006796:	f008 feab 	bl	800f4f0 <assert_failed>
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d008      	beq.n	80067b4 <HAL_RTC_Init+0xe4>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d004      	beq.n	80067b4 <HAL_RTC_Init+0xe4>
 80067aa:	f240 1105 	movw	r1, #261	@ 0x105
 80067ae:	4842      	ldr	r0, [pc, #264]	@ (80068b8 <HAL_RTC_Init+0x1e8>)
 80067b0:	f008 fe9e 	bl	800f4f0 <assert_failed>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <HAL_RTC_Init+0xfe>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f008 fec5 	bl	800f558 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b10      	cmp	r3, #16
 80067e2:	d058      	beq.n	8006896 <HAL_RTC_Init+0x1c6>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	22ca      	movs	r2, #202	@ 0xca
 80067ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2253      	movs	r2, #83	@ 0x53
 80067f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f949 	bl	8006a8c <RTC_EnterInitMode>
 80067fa:	4603      	mov	r3, r0
 80067fc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d127      	bne.n	8006854 <HAL_RTC_Init+0x184>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006816:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6899      	ldr	r1, [r3, #8]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	68d2      	ldr	r2, [r2, #12]
 800683e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6919      	ldr	r1, [r3, #16]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	041a      	lsls	r2, r3, #16
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f94d 	bl	8006af4 <RTC_ExitInitMode>
 800685a:	4603      	mov	r3, r0
 800685c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d113      	bne.n	800688c <HAL_RTC_Init+0x1bc>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0203 	bic.w	r2, r2, #3
 8006872:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69da      	ldr	r2, [r3, #28]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	22ff      	movs	r2, #255	@ 0xff
 8006892:	625a      	str	r2, [r3, #36]	@ 0x24
 8006894:	e001      	b.n	800689a <HAL_RTC_Init+0x1ca>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d103      	bne.n	80068a8 <HAL_RTC_Init+0x1d8>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	40002800 	.word	0x40002800
 80068b8:	080111e4 	.word	0x080111e4

080068bc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <HAL_RTC_GetTime+0x22>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d004      	beq.n	80068de <HAL_RTC_GetTime+0x22>
 80068d4:	f240 6121 	movw	r1, #1569	@ 0x621
 80068d8:	482c      	ldr	r0, [pc, #176]	@ (800698c <HAL_RTC_GetTime+0xd0>)
 80068da:	f008 fe09 	bl	800f4f0 <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006900:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006904:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006910:	b2da      	uxtb	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	0a1b      	lsrs	r3, r3, #8
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006920:	b2da      	uxtb	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800692e:	b2da      	uxtb	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	0d9b      	lsrs	r3, r3, #22
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	b2da      	uxtb	r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d11a      	bne.n	8006980 <HAL_RTC_GetTime+0xc4>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f90e 	bl	8006b70 <RTC_Bcd2ToByte>
 8006954:	4603      	mov	r3, r0
 8006956:	461a      	mov	r2, r3
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 f905 	bl	8006b70 <RTC_Bcd2ToByte>
 8006966:	4603      	mov	r3, r0
 8006968:	461a      	mov	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	789b      	ldrb	r3, [r3, #2]
 8006972:	4618      	mov	r0, r3
 8006974:	f000 f8fc 	bl	8006b70 <RTC_Bcd2ToByte>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	080111e4 	.word	0x080111e4

08006990 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <HAL_RTC_GetDate+0x22>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d004      	beq.n	80069b2 <HAL_RTC_GetDate+0x22>
 80069a8:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 80069ac:	4824      	ldr	r0, [pc, #144]	@ (8006a40 <HAL_RTC_GetDate+0xb0>)
 80069ae:	f008 fd9f 	bl	800f4f0 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80069bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80069c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	0c1b      	lsrs	r3, r3, #16
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	0b5b      	lsrs	r3, r3, #13
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d11a      	bne.n	8006a36 <HAL_RTC_GetDate+0xa6>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	78db      	ldrb	r3, [r3, #3]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 f8b3 	bl	8006b70 <RTC_Bcd2ToByte>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f8aa 	bl	8006b70 <RTC_Bcd2ToByte>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	789b      	ldrb	r3, [r3, #2]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f8a1 	bl	8006b70 <RTC_Bcd2ToByte>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	461a      	mov	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	080111e4 	.word	0x080111e4

08006a44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a0d      	ldr	r2, [pc, #52]	@ (8006a88 <HAL_RTC_WaitForSynchro+0x44>)
 8006a52:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006a54:	f7f9 fe04 	bl	8000660 <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a5a:	e009      	b.n	8006a70 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a5c:	f7f9 fe00 	bl	8000660 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a6a:	d901      	bls.n	8006a70 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e007      	b.n	8006a80 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ee      	beq.n	8006a5c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	0003ff5f 	.word	0x0003ff5f

08006a8c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d120      	bne.n	8006ae8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8006aae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006ab0:	f7f9 fdd6 	bl	8000660 <HAL_GetTick>
 8006ab4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ab6:	e00d      	b.n	8006ad4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006ab8:	f7f9 fdd2 	bl	8000660 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ac6:	d905      	bls.n	8006ad4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2203      	movs	r2, #3
 8006ad0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <RTC_EnterInitMode+0x5c>
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d1e7      	bne.n	8006ab8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006b00:	4b1a      	ldr	r3, [pc, #104]	@ (8006b6c <RTC_ExitInitMode+0x78>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	4a19      	ldr	r2, [pc, #100]	@ (8006b6c <RTC_ExitInitMode+0x78>)
 8006b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006b0c:	4b17      	ldr	r3, [pc, #92]	@ (8006b6c <RTC_ExitInitMode+0x78>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10c      	bne.n	8006b32 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ff93 	bl	8006a44 <HAL_RTC_WaitForSynchro>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01e      	beq.n	8006b62 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2203      	movs	r2, #3
 8006b28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	73fb      	strb	r3, [r7, #15]
 8006b30:	e017      	b.n	8006b62 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b32:	4b0e      	ldr	r3, [pc, #56]	@ (8006b6c <RTC_ExitInitMode+0x78>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	4a0d      	ldr	r2, [pc, #52]	@ (8006b6c <RTC_ExitInitMode+0x78>)
 8006b38:	f023 0320 	bic.w	r3, r3, #32
 8006b3c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ff80 	bl	8006a44 <HAL_RTC_WaitForSynchro>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2203      	movs	r2, #3
 8006b4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b56:	4b05      	ldr	r3, [pc, #20]	@ (8006b6c <RTC_ExitInitMode+0x78>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	4a04      	ldr	r2, [pc, #16]	@ (8006b6c <RTC_ExitInitMode+0x78>)
 8006b5c:	f043 0320 	orr.w	r3, r3, #32
 8006b60:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40002800 	.word	0x40002800

08006b70 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	0092      	lsls	r2, r2, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	4413      	add	r3, r2
 8006b96:	b2db      	uxtb	r3, r3
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	@ 0x28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e0d4      	b.n	8006d60 <HAL_SD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6b      	ldr	r2, [pc, #428]	@ (8006d68 <HAL_SD_Init+0x1c4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d004      	beq.n	8006bca <HAL_SD_Init+0x26>
 8006bc0:	f240 1173 	movw	r1, #371	@ 0x173
 8006bc4:	4869      	ldr	r0, [pc, #420]	@ (8006d6c <HAL_SD_Init+0x1c8>)
 8006bc6:	f008 fc93 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <HAL_SD_Init+0x42>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bda:	d004      	beq.n	8006be6 <HAL_SD_Init+0x42>
 8006bdc:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8006be0:	4862      	ldr	r0, [pc, #392]	@ (8006d6c <HAL_SD_Init+0x1c8>)
 8006be2:	f008 fc85 	bl	800f4f0 <assert_failed>
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <HAL_SD_Init+0x5e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bf6:	d004      	beq.n	8006c02 <HAL_SD_Init+0x5e>
 8006bf8:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8006bfc:	485b      	ldr	r0, [pc, #364]	@ (8006d6c <HAL_SD_Init+0x1c8>)
 8006bfe:	f008 fc77 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00e      	beq.n	8006c28 <HAL_SD_Init+0x84>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c12:	d009      	beq.n	8006c28 <HAL_SD_Init+0x84>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c1c:	d004      	beq.n	8006c28 <HAL_SD_Init+0x84>
 8006c1e:	f240 1179 	movw	r1, #377	@ 0x179
 8006c22:	4852      	ldr	r0, [pc, #328]	@ (8006d6c <HAL_SD_Init+0x1c8>)
 8006c24:	f008 fc64 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d009      	beq.n	8006c44 <HAL_SD_Init+0xa0>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c38:	d004      	beq.n	8006c44 <HAL_SD_Init+0xa0>
 8006c3a:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8006c3e:	484b      	ldr	r0, [pc, #300]	@ (8006d6c <HAL_SD_Init+0x1c8>)
 8006c40:	f008 fc56 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c4c:	d304      	bcc.n	8006c58 <HAL_SD_Init+0xb4>
 8006c4e:	f240 117b 	movw	r1, #379	@ 0x17b
 8006c52:	4846      	ldr	r0, [pc, #280]	@ (8006d6c <HAL_SD_Init+0x1c8>)
 8006c54:	f008 fc4c 	bl	800f4f0 <assert_failed>

  if(hsd->State == HAL_SD_STATE_RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d105      	bne.n	8006c70 <HAL_SD_Init+0xcc>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f008 fdac 	bl	800f7c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2203      	movs	r2, #3
 8006c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f879 	bl	8006d70 <HAL_SD_InitCard>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <HAL_SD_Init+0xe4>
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e06b      	b.n	8006d60 <HAL_SD_Init+0x1bc>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 ff9c 	bl	8007bcc <HAL_SD_GetCardStatus>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_SD_Init+0xfa>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e060      	b.n	8006d60 <HAL_SD_Init+0x1bc>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006c9e:	7e3b      	ldrb	r3, [r7, #24]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006ca4:	7e7b      	ldrb	r3, [r7, #25]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d10a      	bne.n	8006cc8 <HAL_SD_Init+0x124>
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d102      	bne.n	8006cbe <HAL_SD_Init+0x11a>
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <HAL_SD_Init+0x124>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006cc6:	e00b      	b.n	8006ce0 <HAL_SD_Init+0x13c>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d104      	bne.n	8006cda <HAL_SD_Init+0x136>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006cd8:	e002      	b.n	8006ce0 <HAL_SD_Init+0x13c>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 f852 	bl	8007d90 <HAL_SD_ConfigWideBusOperation>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_SD_Init+0x152>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e034      	b.n	8006d60 <HAL_SD_Init+0x1bc>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006cf6:	f7f9 fcb3 	bl	8000660 <HAL_GetTick>
 8006cfa:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006cfc:	e014      	b.n	8006d28 <HAL_SD_Init+0x184>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006cfe:	f7f9 fcaf 	bl	8000660 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d10c      	bne.n	8006d28 <HAL_SD_Init+0x184>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d14:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e01b      	b.n	8006d60 <HAL_SD_Init+0x1bc>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 f957 	bl	8007fdc <HAL_SD_GetCardState>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d1e4      	bne.n	8006cfe <HAL_SD_Init+0x15a>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 f828 	bl	8007d90 <HAL_SD_ConfigWideBusOperation>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <HAL_SD_Init+0x1a6>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e00a      	b.n	8006d60 <HAL_SD_Init+0x1bc>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3728      	adds	r7, #40	@ 0x28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	50062400 	.word	0x50062400
 8006d6c:	0801121c 	.word	0x0801121c

08006d70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d70:	b5b0      	push	{r4, r5, r7, lr}
 8006d72:	b08e      	sub	sp, #56	@ 0x38
 8006d74:	af04      	add	r7, sp, #16
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006d88:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006d8c:	f7fe f958 	bl	8005040 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d90:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d109      	bne.n	8006dac <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006da6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e079      	b.n	8006ea0 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dae:	0a1b      	lsrs	r3, r3, #8
 8006db0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ea8 <HAL_SD_InitCard+0x138>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	091b      	lsrs	r3, r3, #4
 8006db8:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d107      	bne.n	8006dd8 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0210 	orr.w	r2, r2, #16
 8006dd6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681d      	ldr	r5, [r3, #0]
 8006ddc:	466c      	mov	r4, sp
 8006dde:	f107 0314 	add.w	r3, r7, #20
 8006de2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006de6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006dea:	f107 0308 	add.w	r3, r7, #8
 8006dee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006df0:	4628      	mov	r0, r5
 8006df2:	f003 fd57 	bl	800a8a4 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f003 fdde 	bl	800a9bc <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006e0c:	4a27      	ldr	r2, [pc, #156]	@ (8006eac <HAL_SD_InitCard+0x13c>)
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e14:	3301      	adds	r3, #1
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7f9 fc2e 	bl	8000678 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 f9bd 	bl	800819c <SD_PowerON>
 8006e22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e02e      	b.n	8006ea0 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 f8ea 	bl	800801c <SD_InitCard>
 8006e48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e01b      	b.n	8006ea0 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006e70:	4618      	mov	r0, r3
 8006e72:	f003 fefb 	bl	800ac6c <SDMMC_CmdBlockLength>
 8006e76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00f      	beq.n	8006e9e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a0b      	ldr	r2, [pc, #44]	@ (8006eb0 <HAL_SD_InitCard+0x140>)
 8006e84:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3728      	adds	r7, #40	@ 0x28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ea8:	014f8b59 	.word	0x014f8b59
 8006eac:	00012110 	.word	0x00012110
 8006eb0:	1fe00fff 	.word	0x1fe00fff

08006eb4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b092      	sub	sp, #72	@ 0x48
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006ec2:	f7f9 fbcd 	bl	8000660 <HAL_GetTick>
 8006ec6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e170      	b.n	80071c8 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	f040 8163 	bne.w	80071ba <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006efa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	441a      	add	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d907      	bls.n	8006f18 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e157      	b.n	80071c8 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2200      	movs	r2, #0
 8006f26:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d002      	beq.n	8006f36 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	025b      	lsls	r3, r3, #9
 8006f34:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	025b      	lsls	r3, r3, #9
 8006f40:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f42:	2390      	movs	r3, #144	@ 0x90
 8006f44:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006f46:	2302      	movs	r3, #2
 8006f48:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f107 0214 	add.w	r2, r7, #20
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f003 fde7 	bl	800ab30 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f70:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d90a      	bls.n	8006f8e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f84:	4618      	mov	r0, r3
 8006f86:	f003 feb7 	bl	800acf8 <SDMMC_CmdReadMultiBlock>
 8006f8a:	6478      	str	r0, [r7, #68]	@ 0x44
 8006f8c:	e009      	b.n	8006fa2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f003 fe89 	bl	800acb2 <SDMMC_CmdReadSingleBlock>
 8006fa0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a88      	ldr	r2, [pc, #544]	@ (80071d0 <HAL_SD_ReadBlocks+0x31c>)
 8006fae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e0fc      	b.n	80071c8 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006fd2:	e061      	b.n	8007098 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d03c      	beq.n	800705c <HAL_SD_ReadBlocks+0x1a8>
 8006fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d039      	beq.n	800705c <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fec:	e033      	b.n	8007056 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f003 fcc4 	bl	800a980 <SDMMC_ReadFIFO>
 8006ff8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007000:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007004:	3301      	adds	r3, #1
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800700a:	3b01      	subs	r3, #1
 800700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800700e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007010:	0a1b      	lsrs	r3, r3, #8
 8007012:	b2da      	uxtb	r2, r3
 8007014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007016:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800701a:	3301      	adds	r3, #1
 800701c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800701e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007020:	3b01      	subs	r3, #1
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007026:	0c1b      	lsrs	r3, r3, #16
 8007028:	b2da      	uxtb	r2, r3
 800702a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800702e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007030:	3301      	adds	r3, #1
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007036:	3b01      	subs	r3, #1
 8007038:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800703a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703c:	0e1b      	lsrs	r3, r3, #24
 800703e:	b2da      	uxtb	r2, r3
 8007040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007042:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007046:	3301      	adds	r3, #1
 8007048:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800704a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800704c:	3b01      	subs	r3, #1
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8007050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007052:	3301      	adds	r3, #1
 8007054:	643b      	str	r3, [r7, #64]	@ 0x40
 8007056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007058:	2b07      	cmp	r3, #7
 800705a:	d9c8      	bls.n	8006fee <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800705c:	f7f9 fb00 	bl	8000660 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007068:	429a      	cmp	r2, r3
 800706a:	d902      	bls.n	8007072 <HAL_SD_ReadBlocks+0x1be>
 800706c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800706e:	2b00      	cmp	r3, #0
 8007070:	d112      	bne.n	8007098 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a56      	ldr	r2, [pc, #344]	@ (80071d0 <HAL_SD_ReadBlocks+0x31c>)
 8007078:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e097      	b.n	80071c8 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800709e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d096      	beq.n	8006fd4 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070b4:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d022      	beq.n	800710a <HAL_SD_ReadBlocks+0x256>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d91f      	bls.n	800710a <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d01b      	beq.n	800710a <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f003 fe78 	bl	800adcc <SDMMC_CmdStopTransfer>
 80070dc:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80070de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d012      	beq.n	800710a <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a39      	ldr	r2, [pc, #228]	@ (80071d0 <HAL_SD_ReadBlocks+0x31c>)
 80070ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070f2:	431a      	orrs	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e05e      	b.n	80071c8 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b00      	cmp	r3, #0
 8007116:	d012      	beq.n	800713e <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2c      	ldr	r2, [pc, #176]	@ (80071d0 <HAL_SD_ReadBlocks+0x31c>)
 800711e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007124:	f043 0208 	orr.w	r2, r3, #8
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e044      	b.n	80071c8 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d012      	beq.n	8007172 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1f      	ldr	r2, [pc, #124]	@ (80071d0 <HAL_SD_ReadBlocks+0x31c>)
 8007152:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007158:	f043 0202 	orr.w	r2, r3, #2
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e02a      	b.n	80071c8 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b00      	cmp	r3, #0
 800717e:	d012      	beq.n	80071a6 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a12      	ldr	r2, [pc, #72]	@ (80071d0 <HAL_SD_ReadBlocks+0x31c>)
 8007186:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718c:	f043 0220 	orr.w	r2, r3, #32
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e010      	b.n	80071c8 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a0a      	ldr	r2, [pc, #40]	@ (80071d4 <HAL_SD_ReadBlocks+0x320>)
 80071ac:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e006      	b.n	80071c8 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
  }
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3748      	adds	r7, #72	@ 0x48
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	1fe00fff 	.word	0x1fe00fff
 80071d4:	18000f3a 	.word	0x18000f3a

080071d8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b092      	sub	sp, #72	@ 0x48
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80071e6:	f7f9 fa3b 	bl	8000660 <HAL_GetTick>
 80071ea:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d107      	bne.n	800720a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e174      	b.n	80074f4 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b01      	cmp	r3, #1
 8007214:	f040 8167 	bne.w	80074e6 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800721e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	441a      	add	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007228:	429a      	cmp	r2, r3
 800722a:	d907      	bls.n	800723c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e15b      	b.n	80074f4 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2203      	movs	r2, #3
 8007240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2200      	movs	r2, #0
 800724a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007250:	2b01      	cmp	r3, #1
 8007252:	d002      	beq.n	800725a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007256:	025b      	lsls	r3, r3, #9
 8007258:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800725a:	f04f 33ff 	mov.w	r3, #4294967295
 800725e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	025b      	lsls	r3, r3, #9
 8007264:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007266:	2390      	movs	r3, #144	@ 0x90
 8007268:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800726a:	2300      	movs	r3, #0
 800726c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800726e:	2300      	movs	r3, #0
 8007270:	62bb      	str	r3, [r7, #40]	@ 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007272:	2300      	movs	r3, #0
 8007274:	62fb      	str	r3, [r7, #44]	@ 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f107 0218 	add.w	r2, r7, #24
 800727e:	4611      	mov	r1, r2
 8007280:	4618      	mov	r0, r3
 8007282:	f003 fc55 	bl	800ab30 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007294:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d90a      	bls.n	80072b2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80072a8:	4618      	mov	r0, r3
 80072aa:	f003 fd6b 	bl	800ad84 <SDMMC_CmdWriteMultiBlock>
 80072ae:	6478      	str	r0, [r7, #68]	@ 0x44
 80072b0:	e009      	b.n	80072c6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2210      	movs	r2, #16
 80072b6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80072be:	4618      	mov	r0, r3
 80072c0:	f003 fd3d 	bl	800ad3e <SDMMC_CmdWriteSingleBlock>
 80072c4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80072c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d012      	beq.n	80072f2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a8a      	ldr	r2, [pc, #552]	@ (80074fc <HAL_SD_WriteBlocks+0x324>)
 80072d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072da:	431a      	orrs	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e100      	b.n	80074f4 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80072f6:	e065      	b.n	80073c4 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d040      	beq.n	8007388 <HAL_SD_WriteBlocks+0x1b0>
 8007306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d03d      	beq.n	8007388 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800730c:	2300      	movs	r3, #0
 800730e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007310:	e037      	b.n	8007382 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8007312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731a:	3301      	adds	r3, #1
 800731c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800731e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007320:	3b01      	subs	r3, #1
 8007322:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	021a      	lsls	r2, r3, #8
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007332:	3301      	adds	r3, #1
 8007334:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007338:	3b01      	subs	r3, #1
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800733c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	041a      	lsls	r2, r3, #16
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734a:	3301      	adds	r3, #1
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800734e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007350:	3b01      	subs	r3, #1
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	061a      	lsls	r2, r3, #24
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	4313      	orrs	r3, r2
 800735e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007362:	3301      	adds	r3, #1
 8007364:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007368:	3b01      	subs	r3, #1
 800736a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f107 0214 	add.w	r2, r7, #20
 8007374:	4611      	mov	r1, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f003 fb0f 	bl	800a99a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800737c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800737e:	3301      	adds	r3, #1
 8007380:	643b      	str	r3, [r7, #64]	@ 0x40
 8007382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007384:	2b07      	cmp	r3, #7
 8007386:	d9c4      	bls.n	8007312 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007388:	f7f9 f96a 	bl	8000660 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007394:	429a      	cmp	r2, r3
 8007396:	d902      	bls.n	800739e <HAL_SD_WriteBlocks+0x1c6>
 8007398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800739a:	2b00      	cmp	r3, #0
 800739c:	d112      	bne.n	80073c4 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a56      	ldr	r2, [pc, #344]	@ (80074fc <HAL_SD_WriteBlocks+0x324>)
 80073a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ac:	431a      	orrs	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e097      	b.n	80074f4 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ca:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d092      	beq.n	80072f8 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073e0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d022      	beq.n	8007436 <HAL_SD_WriteBlocks+0x25e>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d91f      	bls.n	8007436 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d01b      	beq.n	8007436 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f003 fce2 	bl	800adcc <SDMMC_CmdStopTransfer>
 8007408:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800740a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800740c:	2b00      	cmp	r3, #0
 800740e:	d012      	beq.n	8007436 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a39      	ldr	r2, [pc, #228]	@ (80074fc <HAL_SD_WriteBlocks+0x324>)
 8007416:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800741c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741e:	431a      	orrs	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e05e      	b.n	80074f4 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b00      	cmp	r3, #0
 8007442:	d012      	beq.n	800746a <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a2c      	ldr	r2, [pc, #176]	@ (80074fc <HAL_SD_WriteBlocks+0x324>)
 800744a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007450:	f043 0208 	orr.w	r2, r3, #8
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e044      	b.n	80074f4 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d012      	beq.n	800749e <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1f      	ldr	r2, [pc, #124]	@ (80074fc <HAL_SD_WriteBlocks+0x324>)
 800747e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007484:	f043 0202 	orr.w	r2, r3, #2
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e02a      	b.n	80074f4 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a4:	f003 0310 	and.w	r3, r3, #16
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d012      	beq.n	80074d2 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a12      	ldr	r2, [pc, #72]	@ (80074fc <HAL_SD_WriteBlocks+0x324>)
 80074b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b8:	f043 0210 	orr.w	r2, r3, #16
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e010      	b.n	80074f4 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007500 <HAL_SD_WriteBlocks+0x328>)
 80074d8:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e006      	b.n	80074f4 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
  }
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3748      	adds	r7, #72	@ 0x48
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	1fe00fff 	.word	0x1fe00fff
 8007500:	18000f3a 	.word	0x18000f3a

08007504 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007510:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d008      	beq.n	8007532 <HAL_SD_IRQHandler+0x2e>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 f9a0 	bl	8008870 <SD_Read_IT>
 8007530:	e199      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 80ae 	beq.w	800769e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800754a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800755a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800755e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800756e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800757e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f003 0308 	and.w	r3, r3, #8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d038      	beq.n	80075fc <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d104      	bne.n	800759e <HAL_SD_IRQHandler+0x9a>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d011      	beq.n	80075c2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f003 fc12 	bl	800adcc <SDMMC_CmdStopTransfer>
 80075a8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d008      	beq.n	80075c2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f957 	bl	8007870 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a90      	ldr	r2, [pc, #576]	@ (8007808 <HAL_SD_IRQHandler+0x304>)
 80075c8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d104      	bne.n	80075ec <HAL_SD_IRQHandler+0xe8>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f007 f81f 	bl	800e630 <HAL_SD_RxCpltCallback>
 80075f2:	e138      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f007 f811 	bl	800e61c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80075fa:	e134      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 812f 	beq.w	8007866 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2200      	movs	r2, #0
 800760e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2200      	movs	r2, #0
 8007616:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2200      	movs	r2, #0
 800761e:	651a      	str	r2, [r3, #80]	@ 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d104      	bne.n	8007634 <HAL_SD_IRQHandler+0x130>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f003 0320 	and.w	r3, r3, #32
 8007630:	2b00      	cmp	r3, #0
 8007632:	d011      	beq.n	8007658 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	f003 fbc7 	bl	800adcc <SDMMC_CmdStopTransfer>
 800763e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d008      	beq.n	8007658 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f90c 	bl	8007870 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f003 0310 	and.w	r3, r3, #16
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <HAL_SD_IRQHandler+0x176>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f003 0320 	and.w	r3, r3, #32
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f006 ffce 	bl	800e61c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d105      	bne.n	8007696 <HAL_SD_IRQHandler+0x192>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 80e8 	beq.w	8007866 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f006 ffca 	bl	800e630 <HAL_SD_RxCpltCallback>
}
 800769c:	e0e3      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_SD_IRQHandler+0x1ba>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 f92b 	bl	8008912 <SD_Write_IT>
 80076bc:	e0d3      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c4:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 809f 	beq.w	800780c <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	f043 0202 	orr.w	r2, r3, #2
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fa:	f043 0208 	orr.w	r2, r3, #8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007708:	f003 0320 	and.w	r3, r3, #32
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007714:	f043 0220 	orr.w	r2, r3, #32
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007722:	f003 0310 	and.w	r3, r3, #16
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772e:	f043 0210 	orr.w	r2, r3, #16
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a33      	ldr	r2, [pc, #204]	@ (8007808 <HAL_SD_IRQHandler+0x304>)
 800773c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800774c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800775c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800776c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800777c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f003 fb22 	bl	800adcc <SDMMC_CmdStopTransfer>
 8007788:	4602      	mov	r2, r0
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077a2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077ac:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00a      	beq.n	80077ce <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f852 	bl	8007870 <HAL_SD_ErrorCallback>
}
 80077cc:	e04b      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d046      	beq.n	8007866 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d042      	beq.n	8007866 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80077ee:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2200      	movs	r2, #0
 80077f6:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_ErrorCallback(hsd);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f835 	bl	8007870 <HAL_SD_ErrorCallback>
}
 8007806:	e02e      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
 8007808:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d025      	beq.n	8007866 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007822:	639a      	str	r2, [r3, #56]	@ 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10c      	bne.n	800784c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 f8e6 	bl	8008a0e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8007842:	e010      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 f8ce 	bl	80089e6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800784a:	e00c      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 f8cf 	bl	80089fa <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800785c:	e003      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 f8b7 	bl	80089d2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8007864:	e7ff      	b.n	8007866 <HAL_SD_IRQHandler+0x362>
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop

08007870 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007892:	0f9b      	lsrs	r3, r3, #30
 8007894:	b2da      	uxtb	r2, r3
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800789e:	0e9b      	lsrs	r3, r3, #26
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b0:	0e1b      	lsrs	r3, r3, #24
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078c2:	0c1b      	lsrs	r3, r3, #16
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e4:	0d1b      	lsrs	r3, r3, #20
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007902:	0bdb      	lsrs	r3, r3, #15
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	b2da      	uxtb	r2, r3
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007914:	0b9b      	lsrs	r3, r3, #14
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	b2da      	uxtb	r2, r3
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007926:	0b5b      	lsrs	r3, r3, #13
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	b2da      	uxtb	r2, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007938:	0b1b      	lsrs	r3, r3, #12
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	b2da      	uxtb	r2, r3
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2200      	movs	r2, #0
 800794a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d163      	bne.n	8007a1c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007958:	009a      	lsls	r2, r3, #2
 800795a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800795e:	4013      	ands	r3, r2
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007964:	0f92      	lsrs	r2, r2, #30
 8007966:	431a      	orrs	r2, r3
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007970:	0edb      	lsrs	r3, r3, #27
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	b2da      	uxtb	r2, r3
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007982:	0e1b      	lsrs	r3, r3, #24
 8007984:	b2db      	uxtb	r3, r3
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	b2da      	uxtb	r2, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007994:	0d5b      	lsrs	r3, r3, #21
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	b2da      	uxtb	r2, r3
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079a6:	0c9b      	lsrs	r3, r3, #18
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079b8:	0bdb      	lsrs	r3, r3, #15
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	f003 0307 	and.w	r3, r3, #7
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	7e1b      	ldrb	r3, [r3, #24]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	3302      	adds	r3, #2
 80079dc:	2201      	movs	r2, #1
 80079de:	fa02 f303 	lsl.w	r3, r2, r3
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80079e6:	fb03 f202 	mul.w	r2, r3, r2
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	7a1b      	ldrb	r3, [r3, #8]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	2201      	movs	r2, #1
 80079fa:	409a      	lsls	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	651a      	str	r2, [r3, #80]	@ 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a08:	0a52      	lsrs	r2, r2, #9
 8007a0a:	fb03 f202 	mul.w	r2, r3, r2
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a18:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a1a:	e031      	b.n	8007a80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d11d      	bne.n	8007a60 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a28:	041b      	lsls	r3, r3, #16
 8007a2a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a32:	0c1b      	lsrs	r3, r3, #16
 8007a34:	431a      	orrs	r2, r3
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	029a      	lsls	r2, r3, #10
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 512U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a54:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a5e:	e00f      	b.n	8007a80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a58      	ldr	r2, [pc, #352]	@ (8007bc8 <HAL_SD_GetCardCSD+0x344>)
 8007a66:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e09d      	b.n	8007bbc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a84:	0b9b      	lsrs	r3, r3, #14
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a96:	09db      	lsrs	r3, r3, #7
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ab8:	0fdb      	lsrs	r3, r3, #31
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ac4:	0f5b      	lsrs	r3, r3, #29
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	f003 0303 	and.w	r3, r3, #3
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ad6:	0e9b      	lsrs	r3, r3, #26
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae8:	0d9b      	lsrs	r3, r3, #22
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007afa:	0d5b      	lsrs	r3, r3, #21
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b16:	0c1b      	lsrs	r3, r3, #16
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b2a:	0bdb      	lsrs	r3, r3, #15
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b3e:	0b9b      	lsrs	r3, r3, #14
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b52:	0b5b      	lsrs	r3, r3, #13
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b66:	0b1b      	lsrs	r3, r3, #12
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b7a:	0a9b      	lsrs	r3, r3, #10
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b8e:	0a1b      	lsrs	r3, r3, #8
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ba2:	085b      	lsrs	r3, r3, #1
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	1fe00fff 	.word	0x1fe00fff

08007bcc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b094      	sub	sp, #80	@ 0x50
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007bdc:	f107 0308 	add.w	r3, r7, #8
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fbe6 	bl	80083b4 <SD_SendSDStatus>
 8007be8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d011      	beq.n	8007c14 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8007d34 <HAL_SD_GetCardStatus+0x168>)
 8007bf6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007c12:	e070      	b.n	8007cf6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	099b      	lsrs	r3, r3, #6
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	0e1b      	lsrs	r3, r3, #24
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	4313      	orrs	r3, r2
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	061a      	lsls	r2, r3, #24
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c5a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	0a1b      	lsrs	r3, r3, #8
 8007c60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007c64:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	0e1b      	lsrs	r3, r3, #24
 8007c6a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	0a1b      	lsrs	r3, r3, #8
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	0d1b      	lsrs	r3, r3, #20
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f003 030f 	and.w	r3, r3, #15
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	0c1b      	lsrs	r3, r3, #16
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	0a9b      	lsrs	r3, r3, #10
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	0a1b      	lsrs	r3, r3, #8
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	091b      	lsrs	r3, r3, #4
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	0e1b      	lsrs	r3, r3, #24
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f002 ffb4 	bl	800ac6c <SDMMC_CmdBlockLength>
 8007d04:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00d      	beq.n	8007d28 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a08      	ldr	r2, [pc, #32]	@ (8007d34 <HAL_SD_GetCardStatus+0x168>)
 8007d12:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d18:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8007d28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3750      	adds	r7, #80	@ 0x50
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	1fe00fff 	.word	0x1fe00fff

08007d38 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007d90:	b5b0      	push	{r4, r5, r7, lr}
 8007d92:	b090      	sub	sp, #64	@ 0x40
 8007d94:	af04      	add	r7, sp, #16
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00c      	beq.n	8007dc0 <HAL_SD_ConfigWideBusOperation+0x30>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dac:	d008      	beq.n	8007dc0 <HAL_SD_ConfigWideBusOperation+0x30>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007db4:	d004      	beq.n	8007dc0 <HAL_SD_ConfigWideBusOperation+0x30>
 8007db6:	f640 214b 	movw	r1, #2635	@ 0xa4b
 8007dba:	4883      	ldr	r0, [pc, #524]	@ (8007fc8 <HAL_SD_ConfigWideBusOperation+0x238>)
 8007dbc:	f007 fb98 	bl	800f4f0 <assert_failed>

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2203      	movs	r2, #3
 8007dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d02e      	beq.n	8007e2e <HAL_SD_ConfigWideBusOperation+0x9e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dd6:	d106      	bne.n	8007de6 <HAL_SD_ConfigWideBusOperation+0x56>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007de4:	e029      	b.n	8007e3a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dec:	d10a      	bne.n	8007e04 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fbd8 	bl	80085a4 <SD_WideBus_Enable>
 8007df4:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e02:	e01a      	b.n	8007e3a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <HAL_SD_ConfigWideBusOperation+0x90>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fc15 	bl	800863a <SD_WideBus_Disable>
 8007e10:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e1e:	e00c      	b.n	8007e3a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e24:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e2c:	e005      	b.n	8007e3a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e32:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d007      	beq.n	8007e52 <HAL_SD_ConfigWideBusOperation+0xc2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a61      	ldr	r2, [pc, #388]	@ (8007fcc <HAL_SD_ConfigWideBusOperation+0x23c>)
 8007e48:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007e50:	e097      	b.n	8007f82 <HAL_SD_ConfigWideBusOperation+0x1f2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007e52:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007e56:	f7fd f8f3 	bl	8005040 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e5a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 8086 	beq.w	8007f70 <HAL_SD_ConfigWideBusOperation+0x1e0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	695a      	ldr	r2, [r3, #20]
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e80:	4953      	ldr	r1, [pc, #332]	@ (8007fd0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8007e82:	fba1 1303 	umull	r1, r3, r1, r3
 8007e86:	0e1b      	lsrs	r3, r3, #24
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d303      	bcc.n	8007e94 <HAL_SD_ConfigWideBusOperation+0x104>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	61fb      	str	r3, [r7, #28]
 8007e92:	e05a      	b.n	8007f4a <HAL_SD_ConfigWideBusOperation+0x1ba>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e9c:	d103      	bne.n	8007ea6 <HAL_SD_ConfigWideBusOperation+0x116>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	61fb      	str	r3, [r7, #28]
 8007ea4:	e051      	b.n	8007f4a <HAL_SD_ConfigWideBusOperation+0x1ba>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eae:	d126      	bne.n	8007efe <HAL_SD_ConfigWideBusOperation+0x16e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10e      	bne.n	8007ed6 <HAL_SD_ConfigWideBusOperation+0x146>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	4a46      	ldr	r2, [pc, #280]	@ (8007fd4 <HAL_SD_ConfigWideBusOperation+0x244>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d906      	bls.n	8007ece <HAL_SD_ConfigWideBusOperation+0x13e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec2:	4a43      	ldr	r2, [pc, #268]	@ (8007fd0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	0e5b      	lsrs	r3, r3, #25
 8007eca:	61fb      	str	r3, [r7, #28]
 8007ecc:	e03d      	b.n	8007f4a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	61fb      	str	r3, [r7, #28]
 8007ed4:	e039      	b.n	8007f4a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee2:	4a3c      	ldr	r2, [pc, #240]	@ (8007fd4 <HAL_SD_ConfigWideBusOperation+0x244>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d906      	bls.n	8007ef6 <HAL_SD_ConfigWideBusOperation+0x166>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	4a39      	ldr	r2, [pc, #228]	@ (8007fd0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8007eec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef0:	0e5b      	lsrs	r3, r3, #25
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	e029      	b.n	8007f4a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	61fb      	str	r3, [r7, #28]
 8007efc:	e025      	b.n	8007f4a <HAL_SD_ConfigWideBusOperation+0x1ba>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10e      	bne.n	8007f24 <HAL_SD_ConfigWideBusOperation+0x194>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f08:	4a33      	ldr	r2, [pc, #204]	@ (8007fd8 <HAL_SD_ConfigWideBusOperation+0x248>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d906      	bls.n	8007f1c <HAL_SD_ConfigWideBusOperation+0x18c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	4a2f      	ldr	r2, [pc, #188]	@ (8007fd0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8007f12:	fba2 2303 	umull	r2, r3, r2, r3
 8007f16:	0e1b      	lsrs	r3, r3, #24
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	e016      	b.n	8007f4a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	61fb      	str	r3, [r7, #28]
 8007f22:	e012      	b.n	8007f4a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f30:	4a29      	ldr	r2, [pc, #164]	@ (8007fd8 <HAL_SD_ConfigWideBusOperation+0x248>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d906      	bls.n	8007f44 <HAL_SD_ConfigWideBusOperation+0x1b4>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	4a25      	ldr	r2, [pc, #148]	@ (8007fd0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8007f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3e:	0e1b      	lsrs	r3, r3, #24
 8007f40:	61fb      	str	r3, [r7, #28]
 8007f42:	e002      	b.n	8007f4a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681d      	ldr	r5, [r3, #0]
 8007f54:	466c      	mov	r4, sp
 8007f56:	f107 0318 	add.w	r3, r7, #24
 8007f5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f62:	f107 030c 	add.w	r3, r7, #12
 8007f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f002 fc9b 	bl	800a8a4 <SDMMC_Init>
 8007f6e:	e008      	b.n	8007f82 <HAL_SD_ConfigWideBusOperation+0x1f2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f002 fe6e 	bl	800ac6c <SDMMC_CmdBlockLength>
 8007f90:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00c      	beq.n	8007fb2 <HAL_SD_ConfigWideBusOperation+0x222>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8007fcc <HAL_SD_ConfigWideBusOperation+0x23c>)
 8007f9e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007fba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3730      	adds	r7, #48	@ 0x30
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	0801121c 	.word	0x0801121c
 8007fcc:	1fe00fff 	.word	0x1fe00fff
 8007fd0:	55e63b89 	.word	0x55e63b89
 8007fd4:	02faf080 	.word	0x02faf080
 8007fd8:	017d7840 	.word	0x017d7840

08007fdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007fe8:	f107 030c 	add.w	r3, r7, #12
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fab0 	bl	8008554 <SD_SendStatus>
 8007ff4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	431a      	orrs	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	0a5b      	lsrs	r3, r3, #9
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008012:	693b      	ldr	r3, [r7, #16]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800801c:	b5b0      	push	{r4, r5, r7, lr}
 800801e:	b090      	sub	sp, #64	@ 0x40
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008024:	2301      	movs	r3, #1
 8008026:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4618      	mov	r0, r3
 800802e:	f002 fcd7 	bl	800a9e0 <SDMMC_GetPowerState>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008038:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800803c:	e0a9      	b.n	8008192 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008042:	2b03      	cmp	r3, #3
 8008044:	d02e      	beq.n	80080a4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f002 ffde 	bl	800b00c <SDMMC_CmdSendCID>
 8008050:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <SD_InitCard+0x40>
    {
      return errorstate;
 8008058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800805a:	e09a      	b.n	8008192 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2100      	movs	r1, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f002 fd40 	bl	800aae8 <SDMMC_GetResponse>
 8008068:	4602      	mov	r2, r0
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2104      	movs	r1, #4
 8008074:	4618      	mov	r0, r3
 8008076:	f002 fd37 	bl	800aae8 <SDMMC_GetResponse>
 800807a:	4602      	mov	r2, r0
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2108      	movs	r1, #8
 8008086:	4618      	mov	r0, r3
 8008088:	f002 fd2e 	bl	800aae8 <SDMMC_GetResponse>
 800808c:	4602      	mov	r2, r0
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	210c      	movs	r1, #12
 8008098:	4618      	mov	r0, r3
 800809a:	f002 fd25 	bl	800aae8 <SDMMC_GetResponse>
 800809e:	4602      	mov	r2, r0
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d00d      	beq.n	80080c8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f107 020e 	add.w	r2, r7, #14
 80080b4:	4611      	mov	r1, r2
 80080b6:	4618      	mov	r0, r3
 80080b8:	f002 ffe7 	bl	800b08a <SDMMC_CmdSetRelAdd>
 80080bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <SD_InitCard+0xac>
    {
      return errorstate;
 80080c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c6:	e064      	b.n	8008192 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d036      	beq.n	800813e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80080d0:	89fb      	ldrh	r3, [r7, #14]
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080e0:	041b      	lsls	r3, r3, #16
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f002 ffb0 	bl	800b04a <SDMMC_CmdSendCSD>
 80080ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <SD_InitCard+0xda>
    {
      return errorstate;
 80080f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f4:	e04d      	b.n	8008192 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2100      	movs	r1, #0
 80080fc:	4618      	mov	r0, r3
 80080fe:	f002 fcf3 	bl	800aae8 <SDMMC_GetResponse>
 8008102:	4602      	mov	r2, r0
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2104      	movs	r1, #4
 800810e:	4618      	mov	r0, r3
 8008110:	f002 fcea 	bl	800aae8 <SDMMC_GetResponse>
 8008114:	4602      	mov	r2, r0
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2108      	movs	r1, #8
 8008120:	4618      	mov	r0, r3
 8008122:	f002 fce1 	bl	800aae8 <SDMMC_GetResponse>
 8008126:	4602      	mov	r2, r0
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	210c      	movs	r1, #12
 8008132:	4618      	mov	r0, r3
 8008134:	f002 fcd8 	bl	800aae8 <SDMMC_GetResponse>
 8008138:	4602      	mov	r2, r0
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2104      	movs	r1, #4
 8008144:	4618      	mov	r0, r3
 8008146:	f002 fccf 	bl	800aae8 <SDMMC_GetResponse>
 800814a:	4603      	mov	r3, r0
 800814c:	0d1a      	lsrs	r2, r3, #20
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008152:	f107 0310 	add.w	r3, r7, #16
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff fb93 	bl	8007884 <HAL_SD_GetCardCSD>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008164:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008168:	e013      	b.n	8008192 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6819      	ldr	r1, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008172:	041b      	lsls	r3, r3, #16
 8008174:	2200      	movs	r2, #0
 8008176:	461c      	mov	r4, r3
 8008178:	4615      	mov	r5, r2
 800817a:	4622      	mov	r2, r4
 800817c:	462b      	mov	r3, r5
 800817e:	4608      	mov	r0, r1
 8008180:	f002 fe5a 	bl	800ae38 <SDMMC_CmdSelDesel>
 8008184:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <SD_InitCard+0x174>
  {
    return errorstate;
 800818c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800818e:	e000      	b.n	8008192 <SD_InitCard+0x176>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3740      	adds	r7, #64	@ 0x40
 8008196:	46bd      	mov	sp, r7
 8008198:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800819c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61fb      	str	r3, [r7, #28]
 80081ac:	2300      	movs	r3, #0
 80081ae:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80081b0:	f7f8 fa56 	bl	8000660 <HAL_GetTick>
 80081b4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f002 fe60 	bl	800ae80 <SDMMC_CmdGoIdleState>
 80081c0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <SD_PowerON+0x30>
  {
    return errorstate;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	e0ed      	b.n	80083a8 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f002 fe73 	bl	800aebc <SDMMC_CmdOperCond>
 80081d6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00d      	beq.n	80081fa <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f002 fe49 	bl	800ae80 <SDMMC_CmdGoIdleState>
 80081ee:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <SD_PowerON+0x64>
    {
      return errorstate;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	e0d6      	b.n	80083a8 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008204:	2b01      	cmp	r3, #1
 8008206:	d137      	bne.n	8008278 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f002 fe74 	bl	800aefc <SDMMC_CmdAppCommand>
 8008214:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d02d      	beq.n	8008278 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800821c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008220:	e0c2      	b.n	80083a8 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2100      	movs	r1, #0
 8008228:	4618      	mov	r0, r3
 800822a:	f002 fe67 	bl	800aefc <SDMMC_CmdAppCommand>
 800822e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <SD_PowerON+0x9e>
    {
      return errorstate;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	e0b6      	b.n	80083a8 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	495c      	ldr	r1, [pc, #368]	@ (80083b0 <SD_PowerON+0x214>)
 8008240:	4618      	mov	r0, r3
 8008242:	f002 fe7e 	bl	800af42 <SDMMC_CmdAppOperCommand>
 8008246:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800824e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008252:	e0a9      	b.n	80083a8 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2100      	movs	r1, #0
 800825a:	4618      	mov	r0, r3
 800825c:	f002 fc44 	bl	800aae8 <SDMMC_GetResponse>
 8008260:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	0fdb      	lsrs	r3, r3, #31
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <SD_PowerON+0xd2>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <SD_PowerON+0xd4>
 800826e:	2300      	movs	r3, #0
 8008270:	61bb      	str	r3, [r7, #24]

    count++;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3301      	adds	r3, #1
 8008276:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800827e:	4293      	cmp	r3, r2
 8008280:	d802      	bhi.n	8008288 <SD_PowerON+0xec>
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0cc      	beq.n	8008222 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800828e:	4293      	cmp	r3, r2
 8008290:	d902      	bls.n	8008298 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008292:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008296:	e087      	b.n	80083a8 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d07e      	beq.n	80083a0 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	63da      	str	r2, [r3, #60]	@ 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d17a      	bne.n	80083a6 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d075      	beq.n	80083a6 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082c0:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0208 	orr.w	r2, r2, #8
 80082d0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f002 ff3e 	bl	800b158 <SDMMC_CmdVoltageSwitch>
 80082dc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00c      	beq.n	80082fe <SD_PowerON+0x162>
        {
          return errorstate;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	e05f      	b.n	80083a8 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082e8:	f7f8 f9ba 	bl	8000660 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d102      	bne.n	80082fe <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80082f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80082fc:	e054      	b.n	80083a8 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008304:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008308:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800830c:	d1ec      	bne.n	80082e8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008316:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800831e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008326:	d002      	beq.n	800832e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008328:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800832c:	e03c      	b.n	80083a8 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800832e:	2001      	movs	r0, #1
 8008330:	f000 fb44 	bl	80089bc <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0204 	orr.w	r2, r2, #4
 8008342:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008344:	e00a      	b.n	800835c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008346:	f7f8 f98b 	bl	8000660 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008354:	d102      	bne.n	800835c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008356:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800835a:	e025      	b.n	80083a8 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008366:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800836a:	d1ec      	bne.n	8008346 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8008374:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800837c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008380:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008384:	d102      	bne.n	800838c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008386:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800838a:	e00d      	b.n	80083a8 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2213      	movs	r2, #19
 8008392:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f04f 32ff 	mov.w	r2, #4294967295
 800839c:	639a      	str	r2, [r3, #56]	@ 0x38
 800839e:	e002      	b.n	80083a6 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	c1100000 	.word	0xc1100000

080083b4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08c      	sub	sp, #48	@ 0x30
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80083be:	f7f8 f94f 	bl	8000660 <HAL_GetTick>
 80083c2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f002 fb8a 	bl	800aae8 <SDMMC_GetResponse>
 80083d4:	4603      	mov	r3, r0
 80083d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083de:	d102      	bne.n	80083e6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80083e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80083e4:	e0b0      	b.n	8008548 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2140      	movs	r1, #64	@ 0x40
 80083ec:	4618      	mov	r0, r3
 80083ee:	f002 fc3d 	bl	800ac6c <SDMMC_CmdBlockLength>
 80083f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	e0a0      	b.n	8008548 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800840e:	041b      	lsls	r3, r3, #16
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f002 fd72 	bl	800aefc <SDMMC_CmdAppCommand>
 8008418:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	e08d      	b.n	8008548 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800842c:	f04f 33ff 	mov.w	r3, #4294967295
 8008430:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008432:	2340      	movs	r3, #64	@ 0x40
 8008434:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008436:	2360      	movs	r3, #96	@ 0x60
 8008438:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800843a:	2302      	movs	r3, #2
 800843c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800843e:	2300      	movs	r3, #0
 8008440:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008442:	2301      	movs	r3, #1
 8008444:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f107 0208 	add.w	r2, r7, #8
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f002 fb6d 	bl	800ab30 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f002 fe5a 	bl	800b114 <SDMMC_CmdStatusRegister>
 8008460:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d02b      	beq.n	80084c0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	e069      	b.n	8008548 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800847a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d013      	beq.n	80084aa <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008482:	2300      	movs	r3, #0
 8008484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008486:	e00d      	b.n	80084a4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4618      	mov	r0, r3
 800848e:	f002 fa77 	bl	800a980 <SDMMC_ReadFIFO>
 8008492:	4602      	mov	r2, r0
 8008494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008496:	601a      	str	r2, [r3, #0]
        pData++;
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	3304      	adds	r3, #4
 800849c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for(count = 0U; count < 8U; count++)
 800849e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a0:	3301      	adds	r3, #1
 80084a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a6:	2b07      	cmp	r3, #7
 80084a8:	d9ee      	bls.n	8008488 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80084aa:	f7f8 f8d9 	bl	8000660 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b8:	d102      	bne.n	80084c0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80084ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80084be:	e043      	b.n	8008548 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084c6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0d2      	beq.n	8008474 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d4:	f003 0308 	and.w	r3, r3, #8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80084dc:	2308      	movs	r3, #8
 80084de:	e033      	b.n	8008548 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80084ee:	2302      	movs	r3, #2
 80084f0:	e02a      	b.n	8008548 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f8:	f003 0320 	and.w	r3, r3, #32
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d017      	beq.n	8008530 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008500:	2320      	movs	r3, #32
 8008502:	e021      	b.n	8008548 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4618      	mov	r0, r3
 800850a:	f002 fa39 	bl	800a980 <SDMMC_ReadFIFO>
 800850e:	4602      	mov	r2, r0
 8008510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008512:	601a      	str	r2, [r3, #0]
    pData++;
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	3304      	adds	r3, #4
 8008518:	62bb      	str	r3, [r7, #40]	@ 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800851a:	f7f8 f8a1 	bl	8000660 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008528:	d102      	bne.n	8008530 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800852a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800852e:	e00b      	b.n	8008548 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008536:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e2      	bne.n	8008504 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a03      	ldr	r2, [pc, #12]	@ (8008550 <SD_SendSDStatus+0x19c>)
 8008544:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3730      	adds	r7, #48	@ 0x30
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	18000f3a 	.word	0x18000f3a

08008554 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008564:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008568:	e018      	b.n	800859c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008572:	041b      	lsls	r3, r3, #16
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f002 fda9 	bl	800b0ce <SDMMC_CmdSendStatus>
 800857c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	e009      	b.n	800859c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f002 faaa 	bl	800aae8 <SDMMC_GetResponse>
 8008594:	4602      	mov	r2, r0
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	2300      	movs	r3, #0
 80085b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2100      	movs	r1, #0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f002 fa94 	bl	800aae8 <SDMMC_GetResponse>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085ca:	d102      	bne.n	80085d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80085cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80085d0:	e02f      	b.n	8008632 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80085d2:	f107 030c 	add.w	r3, r7, #12
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f879 	bl	80086d0 <SD_FindSCR>
 80085de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	e023      	b.n	8008632 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01c      	beq.n	800862e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085fc:	041b      	lsls	r3, r3, #16
 80085fe:	4619      	mov	r1, r3
 8008600:	4610      	mov	r0, r2
 8008602:	f002 fc7b 	bl	800aefc <SDMMC_CmdAppCommand>
 8008606:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	e00f      	b.n	8008632 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2102      	movs	r1, #2
 8008618:	4618      	mov	r0, r3
 800861a:	f002 fcb2 	bl	800af82 <SDMMC_CmdBusWidth>
 800861e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	e003      	b.n	8008632 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800862a:	2300      	movs	r3, #0
 800862c:	e001      	b.n	8008632 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800862e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b086      	sub	sp, #24
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	2300      	movs	r3, #0
 8008648:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2100      	movs	r1, #0
 8008650:	4618      	mov	r0, r3
 8008652:	f002 fa49 	bl	800aae8 <SDMMC_GetResponse>
 8008656:	4603      	mov	r3, r0
 8008658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800865c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008660:	d102      	bne.n	8008668 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008662:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008666:	e02f      	b.n	80086c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f82e 	bl	80086d0 <SD_FindSCR>
 8008674:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	e023      	b.n	80086c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01c      	beq.n	80086c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f002 fc30 	bl	800aefc <SDMMC_CmdAppCommand>
 800869c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	e00f      	b.n	80086c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2100      	movs	r1, #0
 80086ae:	4618      	mov	r0, r3
 80086b0:	f002 fc67 	bl	800af82 <SDMMC_CmdBusWidth>
 80086b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	e003      	b.n	80086c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	e001      	b.n	80086c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80086c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08e      	sub	sp, #56	@ 0x38
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80086da:	f7f7 ffc1 	bl	8000660 <HAL_GetTick>
 80086de:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80086e4:	2300      	movs	r3, #0
 80086e6:	60bb      	str	r3, [r7, #8]
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2108      	movs	r1, #8
 80086f6:	4618      	mov	r0, r3
 80086f8:	f002 fab8 	bl	800ac6c <SDMMC_CmdBlockLength>
 80086fc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008706:	e0ad      	b.n	8008864 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008710:	041b      	lsls	r3, r3, #16
 8008712:	4619      	mov	r1, r3
 8008714:	4610      	mov	r0, r2
 8008716:	f002 fbf1 	bl	800aefc <SDMMC_CmdAppCommand>
 800871a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800871c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008724:	e09e      	b.n	8008864 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008726:	f04f 33ff 	mov.w	r3, #4294967295
 800872a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800872c:	2308      	movs	r3, #8
 800872e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008730:	2330      	movs	r3, #48	@ 0x30
 8008732:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008734:	2302      	movs	r3, #2
 8008736:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008738:	2300      	movs	r3, #0
 800873a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800873c:	2301      	movs	r3, #1
 800873e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f107 0210 	add.w	r2, r7, #16
 8008748:	4611      	mov	r1, r2
 800874a:	4618      	mov	r0, r3
 800874c:	f002 f9f0 	bl	800ab30 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4618      	mov	r0, r3
 8008756:	f002 fc37 	bl	800afc8 <SDMMC_CmdSendSCR>
 800875a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	2b00      	cmp	r3, #0
 8008760:	d027      	beq.n	80087b2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008764:	e07e      	b.n	8008864 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800876c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d113      	bne.n	800879c <SD_FindSCR+0xcc>
 8008774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008776:	2b00      	cmp	r3, #0
 8008778:	d110      	bne.n	800879c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f002 f8fe 	bl	800a980 <SDMMC_ReadFIFO>
 8008784:	4603      	mov	r3, r0
 8008786:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	f002 f8f7 	bl	800a980 <SDMMC_ReadFIFO>
 8008792:	4603      	mov	r3, r0
 8008794:	60fb      	str	r3, [r7, #12]
      index++;
 8008796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008798:	3301      	adds	r3, #1
 800879a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800879c:	f7f7 ff60 	bl	8000660 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087aa:	d102      	bne.n	80087b2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80087ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80087b0:	e058      	b.n	8008864 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087b8:	f240 532a 	movw	r3, #1322	@ 0x52a
 80087bc:	4013      	ands	r3, r2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0d1      	beq.n	8008766 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087c8:	f003 0308 	and.w	r3, r3, #8
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2208      	movs	r2, #8
 80087d6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80087d8:	2308      	movs	r3, #8
 80087da:	e043      	b.n	8008864 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2202      	movs	r2, #2
 80087f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80087f2:	2302      	movs	r3, #2
 80087f4:	e036      	b.n	8008864 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087fc:	f003 0320 	and.w	r3, r3, #32
 8008800:	2b00      	cmp	r3, #0
 8008802:	d005      	beq.n	8008810 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2220      	movs	r2, #32
 800880a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800880c:	2320      	movs	r3, #32
 800880e:	e029      	b.n	8008864 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a15      	ldr	r2, [pc, #84]	@ (800886c <SD_FindSCR+0x19c>)
 8008816:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	061a      	lsls	r2, r3, #24
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008824:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	0a1b      	lsrs	r3, r3, #8
 800882a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800882e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	0e1b      	lsrs	r3, r3, #24
 8008834:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008838:	601a      	str	r2, [r3, #0]
    scr++;
 800883a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883c:	3304      	adds	r3, #4
 800883e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	061a      	lsls	r2, r3, #24
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	021b      	lsls	r3, r3, #8
 8008848:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800884c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	0a1b      	lsrs	r3, r3, #8
 8008852:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008856:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	0e1b      	lsrs	r3, r3, #24
 800885c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800885e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008860:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3738      	adds	r7, #56	@ 0x38
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	18000f3a 	.word	0x18000f3a

08008870 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008882:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d03f      	beq.n	800890a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800888a:	2300      	movs	r3, #0
 800888c:	617b      	str	r3, [r7, #20]
 800888e:	e033      	b.n	80088f8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4618      	mov	r0, r3
 8008896:	f002 f873 	bl	800a980 <SDMMC_ReadFIFO>
 800889a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3301      	adds	r3, #1
 80088be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	0c1b      	lsrs	r3, r3, #16
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3301      	adds	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	3b01      	subs	r3, #1
 80088da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	0e1b      	lsrs	r3, r3, #24
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3301      	adds	r3, #1
 80088ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	3301      	adds	r3, #1
 80088f6:	617b      	str	r3, [r7, #20]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2b07      	cmp	r3, #7
 80088fc:	d9c8      	bls.n	8008890 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800890a:	bf00      	nop
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b086      	sub	sp, #24
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008924:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d043      	beq.n	80089b4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800892c:	2300      	movs	r3, #0
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e037      	b.n	80089a2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3301      	adds	r3, #1
 800893c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	3b01      	subs	r3, #1
 8008942:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	021a      	lsls	r2, r3, #8
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	4313      	orrs	r3, r2
 800894e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3301      	adds	r3, #1
 8008954:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	3b01      	subs	r3, #1
 800895a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	041a      	lsls	r2, r3, #16
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	4313      	orrs	r3, r2
 8008966:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3301      	adds	r3, #1
 800896c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	3b01      	subs	r3, #1
 8008972:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	061a      	lsls	r2, r3, #24
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4313      	orrs	r3, r2
 800897e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	3b01      	subs	r3, #1
 800898a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f107 0208 	add.w	r2, r7, #8
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f001 ffff 	bl	800a99a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	3301      	adds	r3, #1
 80089a0:	617b      	str	r3, [r7, #20]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2b07      	cmp	r3, #7
 80089a6:	d9c4      	bls.n	8008932 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80089b4:	bf00      	nop
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 80089ee:	bf00      	nop
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
	...

08008a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e1dd      	b.n	8008df2 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a7b      	ldr	r2, [pc, #492]	@ (8008c28 <HAL_SPI_Init+0x204>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d00e      	beq.n	8008a5e <HAL_SPI_Init+0x3a>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a79      	ldr	r2, [pc, #484]	@ (8008c2c <HAL_SPI_Init+0x208>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d009      	beq.n	8008a5e <HAL_SPI_Init+0x3a>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a78      	ldr	r2, [pc, #480]	@ (8008c30 <HAL_SPI_Init+0x20c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d004      	beq.n	8008a5e <HAL_SPI_Init+0x3a>
 8008a54:	f240 1147 	movw	r1, #327	@ 0x147
 8008a58:	4876      	ldr	r0, [pc, #472]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008a5a:	f006 fd49 	bl	800f4f0 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <HAL_SPI_Init+0x56>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a6e:	d004      	beq.n	8008a7a <HAL_SPI_Init+0x56>
 8008a70:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8008a74:	486f      	ldr	r0, [pc, #444]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008a76:	f006 fd3b 	bl	800f4f0 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00e      	beq.n	8008aa0 <HAL_SPI_Init+0x7c>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a8a:	d009      	beq.n	8008aa0 <HAL_SPI_Init+0x7c>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a94:	d004      	beq.n	8008aa0 <HAL_SPI_Init+0x7c>
 8008a96:	f240 1149 	movw	r1, #329	@ 0x149
 8008a9a:	4866      	ldr	r0, [pc, #408]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008a9c:	f006 fd28 	bl	800f4f0 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008aa8:	d040      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8008ab2:	d03b      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8008abc:	d036      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ac6:	d031      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8008ad0:	d02c      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008ada:	d027      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8008ae4:	d022      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008aee:	d01d      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008af8:	d018      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008b02:	d013      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008b0c:	d00e      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b16:	d009      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b20:	d004      	beq.n	8008b2c <HAL_SPI_Init+0x108>
 8008b22:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8008b26:	4843      	ldr	r0, [pc, #268]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008b28:	f006 fce2 	bl	800f4f0 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b34:	d00d      	beq.n	8008b52 <HAL_SPI_Init+0x12e>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d009      	beq.n	8008b52 <HAL_SPI_Init+0x12e>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b46:	d004      	beq.n	8008b52 <HAL_SPI_Init+0x12e>
 8008b48:	f240 114b 	movw	r1, #331	@ 0x14b
 8008b4c:	4839      	ldr	r0, [pc, #228]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008b4e:	f006 fccf 	bl	800f4f0 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b56:	2b08      	cmp	r3, #8
 8008b58:	d008      	beq.n	8008b6c <HAL_SPI_Init+0x148>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d004      	beq.n	8008b6c <HAL_SPI_Init+0x148>
 8008b62:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8008b66:	4833      	ldr	r0, [pc, #204]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008b68:	f006 fcc2 	bl	800f4f0 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d020      	beq.n	8008bb6 <HAL_SPI_Init+0x192>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d01c      	beq.n	8008bb6 <HAL_SPI_Init+0x192>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	2b10      	cmp	r3, #16
 8008b82:	d018      	beq.n	8008bb6 <HAL_SPI_Init+0x192>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	2b18      	cmp	r3, #24
 8008b8a:	d014      	beq.n	8008bb6 <HAL_SPI_Init+0x192>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	2b20      	cmp	r3, #32
 8008b92:	d010      	beq.n	8008bb6 <HAL_SPI_Init+0x192>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	2b28      	cmp	r3, #40	@ 0x28
 8008b9a:	d00c      	beq.n	8008bb6 <HAL_SPI_Init+0x192>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	2b30      	cmp	r3, #48	@ 0x30
 8008ba2:	d008      	beq.n	8008bb6 <HAL_SPI_Init+0x192>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	2b38      	cmp	r3, #56	@ 0x38
 8008baa:	d004      	beq.n	8008bb6 <HAL_SPI_Init+0x192>
 8008bac:	f240 114d 	movw	r1, #333	@ 0x14d
 8008bb0:	4820      	ldr	r0, [pc, #128]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008bb2:	f006 fc9d 	bl	800f4f0 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d008      	beq.n	8008bd0 <HAL_SPI_Init+0x1ac>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	2b80      	cmp	r3, #128	@ 0x80
 8008bc4:	d004      	beq.n	8008bd0 <HAL_SPI_Init+0x1ac>
 8008bc6:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8008bca:	481a      	ldr	r0, [pc, #104]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008bcc:	f006 fc90 	bl	800f4f0 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d008      	beq.n	8008bea <HAL_SPI_Init+0x1c6>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bdc:	2b10      	cmp	r3, #16
 8008bde:	d004      	beq.n	8008bea <HAL_SPI_Init+0x1c6>
 8008be0:	f240 114f 	movw	r1, #335	@ 0x14f
 8008be4:	4813      	ldr	r0, [pc, #76]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008be6:	f006 fc83 	bl	800f4f0 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d151      	bne.n	8008c96 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d008      	beq.n	8008c0c <HAL_SPI_Init+0x1e8>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d004      	beq.n	8008c0c <HAL_SPI_Init+0x1e8>
 8008c02:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8008c06:	480b      	ldr	r0, [pc, #44]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008c08:	f006 fc72 	bl	800f4f0 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d011      	beq.n	8008c38 <HAL_SPI_Init+0x214>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d00d      	beq.n	8008c38 <HAL_SPI_Init+0x214>
 8008c1c:	f240 1153 	movw	r1, #339	@ 0x153
 8008c20:	4804      	ldr	r0, [pc, #16]	@ (8008c34 <HAL_SPI_Init+0x210>)
 8008c22:	f006 fc65 	bl	800f4f0 <assert_failed>
 8008c26:	e007      	b.n	8008c38 <HAL_SPI_Init+0x214>
 8008c28:	40013000 	.word	0x40013000
 8008c2c:	40003800 	.word	0x40003800
 8008c30:	40003c00 	.word	0x40003c00
 8008c34:	08011254 	.word	0x08011254

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c40:	d125      	bne.n	8008c8e <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d050      	beq.n	8008cec <HAL_SPI_Init+0x2c8>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	2b08      	cmp	r3, #8
 8008c50:	d04c      	beq.n	8008cec <HAL_SPI_Init+0x2c8>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	2b10      	cmp	r3, #16
 8008c58:	d048      	beq.n	8008cec <HAL_SPI_Init+0x2c8>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	2b18      	cmp	r3, #24
 8008c60:	d044      	beq.n	8008cec <HAL_SPI_Init+0x2c8>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	2b20      	cmp	r3, #32
 8008c68:	d040      	beq.n	8008cec <HAL_SPI_Init+0x2c8>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	2b28      	cmp	r3, #40	@ 0x28
 8008c70:	d03c      	beq.n	8008cec <HAL_SPI_Init+0x2c8>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	2b30      	cmp	r3, #48	@ 0x30
 8008c78:	d038      	beq.n	8008cec <HAL_SPI_Init+0x2c8>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	2b38      	cmp	r3, #56	@ 0x38
 8008c80:	d034      	beq.n	8008cec <HAL_SPI_Init+0x2c8>
 8008c82:	f240 1157 	movw	r1, #343	@ 0x157
 8008c86:	485d      	ldr	r0, [pc, #372]	@ (8008dfc <HAL_SPI_Init+0x3d8>)
 8008c88:	f006 fc32 	bl	800f4f0 <assert_failed>
 8008c8c:	e02e      	b.n	8008cec <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	61da      	str	r2, [r3, #28]
 8008c94:	e02a      	b.n	8008cec <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d020      	beq.n	8008ce0 <HAL_SPI_Init+0x2bc>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	2b08      	cmp	r3, #8
 8008ca4:	d01c      	beq.n	8008ce0 <HAL_SPI_Init+0x2bc>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	2b10      	cmp	r3, #16
 8008cac:	d018      	beq.n	8008ce0 <HAL_SPI_Init+0x2bc>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	2b18      	cmp	r3, #24
 8008cb4:	d014      	beq.n	8008ce0 <HAL_SPI_Init+0x2bc>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	2b20      	cmp	r3, #32
 8008cbc:	d010      	beq.n	8008ce0 <HAL_SPI_Init+0x2bc>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	2b28      	cmp	r3, #40	@ 0x28
 8008cc4:	d00c      	beq.n	8008ce0 <HAL_SPI_Init+0x2bc>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	2b30      	cmp	r3, #48	@ 0x30
 8008ccc:	d008      	beq.n	8008ce0 <HAL_SPI_Init+0x2bc>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	2b38      	cmp	r3, #56	@ 0x38
 8008cd4:	d004      	beq.n	8008ce0 <HAL_SPI_Init+0x2bc>
 8008cd6:	f240 1161 	movw	r1, #353	@ 0x161
 8008cda:	4848      	ldr	r0, [pc, #288]	@ (8008dfc <HAL_SPI_Init+0x3d8>)
 8008cdc:	f006 fc08 	bl	800f4f0 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d106      	bne.n	8008d0c <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f006 feba 	bl	800fa80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d2c:	d902      	bls.n	8008d34 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	e002      	b.n	8008d3a <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008d42:	d007      	beq.n	8008d54 <HAL_SPI_Init+0x330>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d4c:	d002      	beq.n	8008d54 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008d64:	431a      	orrs	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d96:	ea42 0103 	orr.w	r1, r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	0c1b      	lsrs	r3, r3, #16
 8008db0:	f003 0204 	and.w	r2, r3, #4
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db8:	f003 0310 	and.w	r3, r3, #16
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc2:	f003 0308 	and.w	r3, r3, #8
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008dd0:	ea42 0103 	orr.w	r1, r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	08011254 	.word	0x08011254

08008e00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08a      	sub	sp, #40	@ 0x28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d004      	beq.n	8008e24 <HAL_SPI_TransmitReceive+0x24>
 8008e1a:	f44f 619f 	mov.w	r1, #1272	@ 0x4f8
 8008e1e:	4887      	ldr	r0, [pc, #540]	@ (800903c <HAL_SPI_TransmitReceive+0x23c>)
 8008e20:	f006 fb66 	bl	800f4f0 <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e24:	f7f7 fc1c 	bl	8000660 <HAL_GetTick>
 8008e28:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e30:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008e38:	887b      	ldrh	r3, [r7, #2]
 8008e3a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008e3c:	887b      	ldrh	r3, [r7, #2]
 8008e3e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e40:	7ffb      	ldrb	r3, [r7, #31]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d00c      	beq.n	8008e60 <HAL_SPI_TransmitReceive+0x60>
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e4c:	d106      	bne.n	8008e5c <HAL_SPI_TransmitReceive+0x5c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d102      	bne.n	8008e5c <HAL_SPI_TransmitReceive+0x5c>
 8008e56:	7ffb      	ldrb	r3, [r7, #31]
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d001      	beq.n	8008e60 <HAL_SPI_TransmitReceive+0x60>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	e1f5      	b.n	800924c <HAL_SPI_TransmitReceive+0x44c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <HAL_SPI_TransmitReceive+0x72>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <HAL_SPI_TransmitReceive+0x72>
 8008e6c:	887b      	ldrh	r3, [r7, #2]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_SPI_TransmitReceive+0x76>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e1ea      	b.n	800924c <HAL_SPI_TransmitReceive+0x44c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d101      	bne.n	8008e84 <HAL_SPI_TransmitReceive+0x84>
 8008e80:	2302      	movs	r3, #2
 8008e82:	e1e3      	b.n	800924c <HAL_SPI_TransmitReceive+0x44c>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d003      	beq.n	8008ea0 <HAL_SPI_TransmitReceive+0xa0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2205      	movs	r2, #5
 8008e9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	887a      	ldrh	r2, [r7, #2]
 8008eb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	887a      	ldrh	r2, [r7, #2]
 8008eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	887a      	ldrh	r2, [r7, #2]
 8008ec6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	887a      	ldrh	r2, [r7, #2]
 8008ecc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ee2:	d802      	bhi.n	8008eea <HAL_SPI_TransmitReceive+0xea>
 8008ee4:	8abb      	ldrh	r3, [r7, #20]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d908      	bls.n	8008efc <HAL_SPI_TransmitReceive+0xfc>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	e007      	b.n	8008f0c <HAL_SPI_TransmitReceive+0x10c>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f0a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f16:	2b40      	cmp	r3, #64	@ 0x40
 8008f18:	d007      	beq.n	8008f2a <HAL_SPI_TransmitReceive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008f32:	f240 8085 	bls.w	8009040 <HAL_SPI_TransmitReceive+0x240>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <HAL_SPI_TransmitReceive+0x144>
 8008f3e:	8afb      	ldrh	r3, [r7, #22]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d16f      	bne.n	8009024 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f48:	881a      	ldrh	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f54:	1c9a      	adds	r2, r3, #2
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	3b01      	subs	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f68:	e05c      	b.n	8009024 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d11b      	bne.n	8008fb0 <HAL_SPI_TransmitReceive+0x1b0>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d016      	beq.n	8008fb0 <HAL_SPI_TransmitReceive+0x1b0>
 8008f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d113      	bne.n	8008fb0 <HAL_SPI_TransmitReceive+0x1b0>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f8c:	881a      	ldrh	r2, [r3, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f98:	1c9a      	adds	r2, r3, #2
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d11c      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x1f8>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d016      	beq.n	8008ff8 <HAL_SPI_TransmitReceive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd4:	b292      	uxth	r2, r2
 8008fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fdc:	1c9a      	adds	r2, r3, #2
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	3b01      	subs	r3, #1
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ff8:	f7f7 fb32 	bl	8000660 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009004:	429a      	cmp	r2, r3
 8009006:	d80d      	bhi.n	8009024 <HAL_SPI_TransmitReceive+0x224>
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900e:	d009      	beq.n	8009024 <HAL_SPI_TransmitReceive+0x224>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e113      	b.n	800924c <HAL_SPI_TransmitReceive+0x44c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d19d      	bne.n	8008f6a <HAL_SPI_TransmitReceive+0x16a>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d197      	bne.n	8008f6a <HAL_SPI_TransmitReceive+0x16a>
 800903a:	e0e7      	b.n	800920c <HAL_SPI_TransmitReceive+0x40c>
 800903c:	08011254 	.word	0x08011254
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <HAL_SPI_TransmitReceive+0x250>
 8009048:	8afb      	ldrh	r3, [r7, #22]
 800904a:	2b01      	cmp	r3, #1
 800904c:	f040 80d1 	bne.w	80091f2 <HAL_SPI_TransmitReceive+0x3f2>
    {
      if (hspi->TxXferCount > 1U)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009054:	b29b      	uxth	r3, r3
 8009056:	2b01      	cmp	r3, #1
 8009058:	d912      	bls.n	8009080 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800905e:	881a      	ldrh	r2, [r3, #0]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906a:	1c9a      	adds	r2, r3, #2
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009074:	b29b      	uxth	r3, r3
 8009076:	3b02      	subs	r3, #2
 8009078:	b29a      	uxth	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800907e:	e0b8      	b.n	80091f2 <HAL_SPI_TransmitReceive+0x3f2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	330c      	adds	r3, #12
 800908a:	7812      	ldrb	r2, [r2, #0]
 800908c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800909c:	b29b      	uxth	r3, r3
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090a6:	e0a4      	b.n	80091f2 <HAL_SPI_TransmitReceive+0x3f2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d134      	bne.n	8009120 <HAL_SPI_TransmitReceive+0x320>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d02f      	beq.n	8009120 <HAL_SPI_TransmitReceive+0x320>
 80090c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d12c      	bne.n	8009120 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d912      	bls.n	80090f6 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d4:	881a      	ldrh	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e0:	1c9a      	adds	r2, r3, #2
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	3b02      	subs	r3, #2
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80090f4:	e012      	b.n	800911c <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	330c      	adds	r3, #12
 8009100:	7812      	ldrb	r2, [r2, #0]
 8009102:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009112:	b29b      	uxth	r3, r3
 8009114:	3b01      	subs	r3, #1
 8009116:	b29a      	uxth	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b01      	cmp	r3, #1
 800912c:	d148      	bne.n	80091c0 <HAL_SPI_TransmitReceive+0x3c0>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009134:	b29b      	uxth	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d042      	beq.n	80091c0 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009140:	b29b      	uxth	r3, r3
 8009142:	2b01      	cmp	r3, #1
 8009144:	d923      	bls.n	800918e <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009150:	b292      	uxth	r2, r2
 8009152:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009158:	1c9a      	adds	r2, r3, #2
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b02      	subs	r3, #2
 8009168:	b29a      	uxth	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009176:	b29b      	uxth	r3, r3
 8009178:	2b01      	cmp	r3, #1
 800917a:	d81f      	bhi.n	80091bc <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800918a:	605a      	str	r2, [r3, #4]
 800918c:	e016      	b.n	80091bc <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f103 020c 	add.w	r2, r3, #12
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919a:	7812      	ldrb	r2, [r2, #0]
 800919c:	b2d2      	uxtb	r2, r2
 800919e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091bc:	2301      	movs	r3, #1
 80091be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80091c0:	f7f7 fa4e 	bl	8000660 <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d803      	bhi.n	80091d8 <HAL_SPI_TransmitReceive+0x3d8>
 80091d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d102      	bne.n	80091de <HAL_SPI_TransmitReceive+0x3de>
 80091d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d109      	bne.n	80091f2 <HAL_SPI_TransmitReceive+0x3f2>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e02c      	b.n	800924c <HAL_SPI_TransmitReceive+0x44c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f47f af55 	bne.w	80090a8 <HAL_SPI_TransmitReceive+0x2a8>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009204:	b29b      	uxth	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	f47f af4e 	bne.w	80090a8 <HAL_SPI_TransmitReceive+0x2a8>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800920c:	6a3a      	ldr	r2, [r7, #32]
 800920e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f93d 	bl	8009490 <SPI_EndRxTxTransaction>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d008      	beq.n	800922e <HAL_SPI_TransmitReceive+0x42e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2220      	movs	r2, #32
 8009220:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e00e      	b.n	800924c <HAL_SPI_TransmitReceive+0x44c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <HAL_SPI_TransmitReceive+0x44a>
  {
    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e000      	b.n	800924c <HAL_SPI_TransmitReceive+0x44c>
  }
  else
  {
    return HAL_OK;
 800924a:	2300      	movs	r3, #0
  }
}
 800924c:	4618      	mov	r0, r3
 800924e:	3728      	adds	r7, #40	@ 0x28
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b088      	sub	sp, #32
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	4613      	mov	r3, r2
 8009262:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009264:	f7f7 f9fc 	bl	8000660 <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926c:	1a9b      	subs	r3, r3, r2
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	4413      	add	r3, r2
 8009272:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009274:	f7f7 f9f4 	bl	8000660 <HAL_GetTick>
 8009278:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800927a:	4b39      	ldr	r3, [pc, #228]	@ (8009360 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	015b      	lsls	r3, r3, #5
 8009280:	0d1b      	lsrs	r3, r3, #20
 8009282:	69fa      	ldr	r2, [r7, #28]
 8009284:	fb02 f303 	mul.w	r3, r2, r3
 8009288:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800928a:	e054      	b.n	8009336 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009292:	d050      	beq.n	8009336 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009294:	f7f7 f9e4 	bl	8000660 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d902      	bls.n	80092aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d13d      	bne.n	8009326 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092c2:	d111      	bne.n	80092e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092cc:	d004      	beq.n	80092d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092d6:	d107      	bne.n	80092e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092f0:	d10f      	bne.n	8009312 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e017      	b.n	8009356 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	3b01      	subs	r3, #1
 8009334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689a      	ldr	r2, [r3, #8]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4013      	ands	r3, r2
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	429a      	cmp	r2, r3
 8009344:	bf0c      	ite	eq
 8009346:	2301      	moveq	r3, #1
 8009348:	2300      	movne	r3, #0
 800934a:	b2db      	uxtb	r3, r3
 800934c:	461a      	mov	r2, r3
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	429a      	cmp	r2, r3
 8009352:	d19b      	bne.n	800928c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3720      	adds	r7, #32
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20000008 	.word	0x20000008

08009364 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08a      	sub	sp, #40	@ 0x28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009376:	f7f7 f973 	bl	8000660 <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	1a9b      	subs	r3, r3, r2
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	4413      	add	r3, r2
 8009384:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009386:	f7f7 f96b 	bl	8000660 <HAL_GetTick>
 800938a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	330c      	adds	r3, #12
 8009392:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009394:	4b3d      	ldr	r3, [pc, #244]	@ (800948c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	00da      	lsls	r2, r3, #3
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	0d1b      	lsrs	r3, r3, #20
 80093a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a6:	fb02 f303 	mul.w	r3, r2, r3
 80093aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80093ac:	e060      	b.n	8009470 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093b4:	d107      	bne.n	80093c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093cc:	d050      	beq.n	8009470 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093ce:	f7f7 f947 	bl	8000660 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093da:	429a      	cmp	r2, r3
 80093dc:	d902      	bls.n	80093e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80093de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d13d      	bne.n	8009460 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093fc:	d111      	bne.n	8009422 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009406:	d004      	beq.n	8009412 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009410:	d107      	bne.n	8009422 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009420:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800942a:	d10f      	bne.n	800944c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800944a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e010      	b.n	8009482 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d101      	bne.n	800946a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	3b01      	subs	r3, #1
 800946e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689a      	ldr	r2, [r3, #8]
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	4013      	ands	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	429a      	cmp	r2, r3
 800947e:	d196      	bne.n	80093ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3728      	adds	r7, #40	@ 0x28
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20000008 	.word	0x20000008

08009490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f7ff ff5b 	bl	8009364 <SPI_WaitFifoStateUntilTimeout>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094b8:	f043 0220 	orr.w	r2, r3, #32
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e027      	b.n	8009514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2200      	movs	r2, #0
 80094cc:	2180      	movs	r1, #128	@ 0x80
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f7ff fec0 	bl	8009254 <SPI_WaitFlagStateUntilTimeout>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094de:	f043 0220 	orr.w	r2, r3, #32
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e014      	b.n	8009514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7ff ff34 	bl	8009364 <SPI_WaitFifoStateUntilTimeout>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d007      	beq.n	8009512 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009506:	f043 0220 	orr.w	r2, r3, #32
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e000      	b.n	8009514 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e08d      	b.n	800964a <HAL_UART_Init+0x12e>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d023      	beq.n	800957e <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a46      	ldr	r2, [pc, #280]	@ (8009654 <HAL_UART_Init+0x138>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d041      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a44      	ldr	r2, [pc, #272]	@ (8009658 <HAL_UART_Init+0x13c>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d03c      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a43      	ldr	r2, [pc, #268]	@ (800965c <HAL_UART_Init+0x140>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d037      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a41      	ldr	r2, [pc, #260]	@ (8009660 <HAL_UART_Init+0x144>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d032      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a40      	ldr	r2, [pc, #256]	@ (8009664 <HAL_UART_Init+0x148>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d02d      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a3e      	ldr	r2, [pc, #248]	@ (8009668 <HAL_UART_Init+0x14c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d028      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 8009572:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8009576:	483d      	ldr	r0, [pc, #244]	@ (800966c <HAL_UART_Init+0x150>)
 8009578:	f005 ffba 	bl	800f4f0 <assert_failed>
 800957c:	e022      	b.n	80095c4 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a34      	ldr	r2, [pc, #208]	@ (8009654 <HAL_UART_Init+0x138>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d01d      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a32      	ldr	r2, [pc, #200]	@ (8009658 <HAL_UART_Init+0x13c>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d018      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a31      	ldr	r2, [pc, #196]	@ (800965c <HAL_UART_Init+0x140>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d013      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a2f      	ldr	r2, [pc, #188]	@ (8009660 <HAL_UART_Init+0x144>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d00e      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a2e      	ldr	r2, [pc, #184]	@ (8009664 <HAL_UART_Init+0x148>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d009      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a2c      	ldr	r2, [pc, #176]	@ (8009668 <HAL_UART_Init+0x14c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d004      	beq.n	80095c4 <HAL_UART_Init+0xa8>
 80095ba:	f240 1157 	movw	r1, #343	@ 0x157
 80095be:	482b      	ldr	r0, [pc, #172]	@ (800966c <HAL_UART_Init+0x150>)
 80095c0:	f005 ff96 	bl	800f4f0 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d106      	bne.n	80095dc <HAL_UART_Init+0xc0>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f006 fc96 	bl	800ff08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2224      	movs	r2, #36	@ 0x24
 80095e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 0201 	bic.w	r2, r2, #1
 80095f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <HAL_UART_Init+0xe6>
  {
    UART_AdvFeatureConfig(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fca5 	bl	8009f4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f8c2 	bl	800978c <UART_SetConfig>
 8009608:	4603      	mov	r3, r0
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <HAL_UART_Init+0xf6>
  {
    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e01b      	b.n	800964a <HAL_UART_Init+0x12e>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009620:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009630:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f042 0201 	orr.w	r2, r2, #1
 8009640:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fde2 	bl	800a20c <UART_CheckIdleState>
 8009648:	4603      	mov	r3, r0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	40013800 	.word	0x40013800
 8009658:	40004400 	.word	0x40004400
 800965c:	40004800 	.word	0x40004800
 8009660:	40004c00 	.word	0x40004c00
 8009664:	40005000 	.word	0x40005000
 8009668:	40008000 	.word	0x40008000
 800966c:	0801128c 	.word	0x0801128c

08009670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08a      	sub	sp, #40	@ 0x28
 8009674:	af02      	add	r7, sp, #8
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	4613      	mov	r3, r2
 800967e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009686:	2b20      	cmp	r3, #32
 8009688:	d17b      	bne.n	8009782 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <HAL_UART_Transmit+0x26>
 8009690:	88fb      	ldrh	r3, [r7, #6]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e074      	b.n	8009784 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2221      	movs	r2, #33	@ 0x21
 80096a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096aa:	f7f6 ffd9 	bl	8000660 <HAL_GetTick>
 80096ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	88fa      	ldrh	r2, [r7, #6]
 80096b4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	88fa      	ldrh	r2, [r7, #6]
 80096bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096c8:	d108      	bne.n	80096dc <HAL_UART_Transmit+0x6c>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d104      	bne.n	80096dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	61bb      	str	r3, [r7, #24]
 80096da:	e003      	b.n	80096e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80096e4:	e030      	b.n	8009748 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	2200      	movs	r2, #0
 80096ee:	2180      	movs	r1, #128	@ 0x80
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 fe35 	bl	800a360 <UART_WaitOnFlagUntilTimeout>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d005      	beq.n	8009708 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2220      	movs	r2, #32
 8009700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	e03d      	b.n	8009784 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10b      	bne.n	8009726 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	881a      	ldrh	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800971a:	b292      	uxth	r2, r2
 800971c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	3302      	adds	r3, #2
 8009722:	61bb      	str	r3, [r7, #24]
 8009724:	e007      	b.n	8009736 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	781a      	ldrb	r2, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	3301      	adds	r3, #1
 8009734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800973c:	b29b      	uxth	r3, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800974e:	b29b      	uxth	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1c8      	bne.n	80096e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	2200      	movs	r2, #0
 800975c:	2140      	movs	r1, #64	@ 0x40
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 fdfe 	bl	800a360 <UART_WaitOnFlagUntilTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d005      	beq.n	8009776 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2220      	movs	r2, #32
 800976e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e006      	b.n	8009784 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2220      	movs	r2, #32
 800977a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	e000      	b.n	8009784 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009782:	2302      	movs	r3, #2
  }
}
 8009784:	4618      	mov	r0, r3
 8009786:	3720      	adds	r7, #32
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800978c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009790:	b08c      	sub	sp, #48	@ 0x30
 8009792:	af00      	add	r7, sp, #0
 8009794:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	4a17      	ldr	r2, [pc, #92]	@ (8009800 <UART_SetConfig+0x74>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d904      	bls.n	80097b0 <UART_SetConfig+0x24>
 80097a6:	f640 4158 	movw	r1, #3160	@ 0xc58
 80097aa:	4816      	ldr	r0, [pc, #88]	@ (8009804 <UART_SetConfig+0x78>)
 80097ac:	f005 fea0 	bl	800f4f0 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097b8:	d00d      	beq.n	80097d6 <UART_SetConfig+0x4a>
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <UART_SetConfig+0x4a>
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ca:	d004      	beq.n	80097d6 <UART_SetConfig+0x4a>
 80097cc:	f640 4159 	movw	r1, #3161	@ 0xc59
 80097d0:	480c      	ldr	r0, [pc, #48]	@ (8009804 <UART_SetConfig+0x78>)
 80097d2:	f005 fe8d 	bl	800f4f0 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a0b      	ldr	r2, [pc, #44]	@ (8009808 <UART_SetConfig+0x7c>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d115      	bne.n	800980c <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d037      	beq.n	8009858 <UART_SetConfig+0xcc>
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097f0:	d032      	beq.n	8009858 <UART_SetConfig+0xcc>
 80097f2:	f640 415c 	movw	r1, #3164	@ 0xc5c
 80097f6:	4803      	ldr	r0, [pc, #12]	@ (8009804 <UART_SetConfig+0x78>)
 80097f8:	f005 fe7a 	bl	800f4f0 <assert_failed>
 80097fc:	e02c      	b.n	8009858 <UART_SetConfig+0xcc>
 80097fe:	bf00      	nop
 8009800:	00e4e1c0 	.word	0x00e4e1c0
 8009804:	0801128c 	.word	0x0801128c
 8009808:	40008000 	.word	0x40008000
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009814:	d012      	beq.n	800983c <UART_SetConfig+0xb0>
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00e      	beq.n	800983c <UART_SetConfig+0xb0>
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009826:	d009      	beq.n	800983c <UART_SetConfig+0xb0>
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009830:	d004      	beq.n	800983c <UART_SetConfig+0xb0>
 8009832:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8009836:	489e      	ldr	r0, [pc, #632]	@ (8009ab0 <UART_SetConfig+0x324>)
 8009838:	f005 fe5a 	bl	800f4f0 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d009      	beq.n	8009858 <UART_SetConfig+0xcc>
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800984c:	d004      	beq.n	8009858 <UART_SetConfig+0xcc>
 800984e:	f640 4161 	movw	r1, #3169	@ 0xc61
 8009852:	4897      	ldr	r0, [pc, #604]	@ (8009ab0 <UART_SetConfig+0x324>)
 8009854:	f005 fe4c 	bl	800f4f0 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00e      	beq.n	800987e <UART_SetConfig+0xf2>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009868:	d009      	beq.n	800987e <UART_SetConfig+0xf2>
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009872:	d004      	beq.n	800987e <UART_SetConfig+0xf2>
 8009874:	f640 4164 	movw	r1, #3172	@ 0xc64
 8009878:	488d      	ldr	r0, [pc, #564]	@ (8009ab0 <UART_SetConfig+0x324>)
 800987a:	f005 fe39 	bl	800f4f0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	f023 030c 	bic.w	r3, r3, #12
 8009886:	2b00      	cmp	r3, #0
 8009888:	d103      	bne.n	8009892 <UART_SetConfig+0x106>
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d104      	bne.n	800989c <UART_SetConfig+0x110>
 8009892:	f640 4165 	movw	r1, #3173	@ 0xc65
 8009896:	4886      	ldr	r0, [pc, #536]	@ (8009ab0 <UART_SetConfig+0x324>)
 8009898:	f005 fe2a 	bl	800f4f0 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d013      	beq.n	80098cc <UART_SetConfig+0x140>
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ac:	d00e      	beq.n	80098cc <UART_SetConfig+0x140>
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098b6:	d009      	beq.n	80098cc <UART_SetConfig+0x140>
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098c0:	d004      	beq.n	80098cc <UART_SetConfig+0x140>
 80098c2:	f640 4166 	movw	r1, #3174	@ 0xc66
 80098c6:	487a      	ldr	r0, [pc, #488]	@ (8009ab0 <UART_SetConfig+0x324>)
 80098c8:	f005 fe12 	bl	800f4f0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	69db      	ldr	r3, [r3, #28]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d009      	beq.n	80098e8 <UART_SetConfig+0x15c>
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098dc:	d004      	beq.n	80098e8 <UART_SetConfig+0x15c>
 80098de:	f640 4167 	movw	r1, #3175	@ 0xc67
 80098e2:	4873      	ldr	r0, [pc, #460]	@ (8009ab0 <UART_SetConfig+0x324>)
 80098e4:	f005 fe04 	bl	800f4f0 <assert_failed>
#if defined(USART_PRESC_PRESCALER)
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d030      	beq.n	8009952 <UART_SetConfig+0x1c6>
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d02c      	beq.n	8009952 <UART_SetConfig+0x1c6>
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d028      	beq.n	8009952 <UART_SetConfig+0x1c6>
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009904:	2b03      	cmp	r3, #3
 8009906:	d024      	beq.n	8009952 <UART_SetConfig+0x1c6>
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800990c:	2b04      	cmp	r3, #4
 800990e:	d020      	beq.n	8009952 <UART_SetConfig+0x1c6>
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009914:	2b05      	cmp	r3, #5
 8009916:	d01c      	beq.n	8009952 <UART_SetConfig+0x1c6>
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991c:	2b06      	cmp	r3, #6
 800991e:	d018      	beq.n	8009952 <UART_SetConfig+0x1c6>
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009924:	2b07      	cmp	r3, #7
 8009926:	d014      	beq.n	8009952 <UART_SetConfig+0x1c6>
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800992c:	2b08      	cmp	r3, #8
 800992e:	d010      	beq.n	8009952 <UART_SetConfig+0x1c6>
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009934:	2b09      	cmp	r3, #9
 8009936:	d00c      	beq.n	8009952 <UART_SetConfig+0x1c6>
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993c:	2b0a      	cmp	r3, #10
 800993e:	d008      	beq.n	8009952 <UART_SetConfig+0x1c6>
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009944:	2b0b      	cmp	r3, #11
 8009946:	d004      	beq.n	8009952 <UART_SetConfig+0x1c6>
 8009948:	f640 4169 	movw	r1, #3177	@ 0xc69
 800994c:	4858      	ldr	r0, [pc, #352]	@ (8009ab0 <UART_SetConfig+0x324>)
 800994e:	f005 fdcf 	bl	800f4f0 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	431a      	orrs	r2, r3
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	431a      	orrs	r2, r3
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	4313      	orrs	r3, r2
 8009968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	4b50      	ldr	r3, [pc, #320]	@ (8009ab4 <UART_SetConfig+0x328>)
 8009972:	4013      	ands	r3, r2
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	6812      	ldr	r2, [r2, #0]
 8009978:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800997a:	430b      	orrs	r3, r1
 800997c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	68da      	ldr	r2, [r3, #12]
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a46      	ldr	r2, [pc, #280]	@ (8009ab8 <UART_SetConfig+0x32c>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d004      	beq.n	80099ae <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099aa:	4313      	orrs	r3, r2
 80099ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80099b8:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099c2:	430b      	orrs	r3, r1
 80099c4:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099cc:	f023 010f 	bic.w	r1, r3, #15
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	430a      	orrs	r2, r1
 80099da:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a36      	ldr	r2, [pc, #216]	@ (8009abc <UART_SetConfig+0x330>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d126      	bne.n	8009a34 <UART_SetConfig+0x2a8>
 80099e6:	4b36      	ldr	r3, [pc, #216]	@ (8009ac0 <UART_SetConfig+0x334>)
 80099e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ec:	f003 0303 	and.w	r3, r3, #3
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d81b      	bhi.n	8009a2c <UART_SetConfig+0x2a0>
 80099f4:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <UART_SetConfig+0x270>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009a1d 	.word	0x08009a1d
 8009a04:	08009a15 	.word	0x08009a15
 8009a08:	08009a25 	.word	0x08009a25
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a12:	e112      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009a14:	2302      	movs	r3, #2
 8009a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a1a:	e10e      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009a1c:	2304      	movs	r3, #4
 8009a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a22:	e10a      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009a24:	2308      	movs	r3, #8
 8009a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2a:	e106      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a32:	e102      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a22      	ldr	r2, [pc, #136]	@ (8009ac4 <UART_SetConfig+0x338>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d144      	bne.n	8009ac8 <UART_SetConfig+0x33c>
 8009a3e:	4b20      	ldr	r3, [pc, #128]	@ (8009ac0 <UART_SetConfig+0x334>)
 8009a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a44:	f003 030c 	and.w	r3, r3, #12
 8009a48:	2b0c      	cmp	r3, #12
 8009a4a:	d82d      	bhi.n	8009aa8 <UART_SetConfig+0x31c>
 8009a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a54 <UART_SetConfig+0x2c8>)
 8009a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a52:	bf00      	nop
 8009a54:	08009a89 	.word	0x08009a89
 8009a58:	08009aa9 	.word	0x08009aa9
 8009a5c:	08009aa9 	.word	0x08009aa9
 8009a60:	08009aa9 	.word	0x08009aa9
 8009a64:	08009a99 	.word	0x08009a99
 8009a68:	08009aa9 	.word	0x08009aa9
 8009a6c:	08009aa9 	.word	0x08009aa9
 8009a70:	08009aa9 	.word	0x08009aa9
 8009a74:	08009a91 	.word	0x08009a91
 8009a78:	08009aa9 	.word	0x08009aa9
 8009a7c:	08009aa9 	.word	0x08009aa9
 8009a80:	08009aa9 	.word	0x08009aa9
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a8e:	e0d4      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009a90:	2302      	movs	r3, #2
 8009a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a96:	e0d0      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a9e:	e0cc      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aa6:	e0c8      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aae:	e0c4      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009ab0:	0801128c 	.word	0x0801128c
 8009ab4:	cfff69f3 	.word	0xcfff69f3
 8009ab8:	40008000 	.word	0x40008000
 8009abc:	40013800 	.word	0x40013800
 8009ac0:	40021000 	.word	0x40021000
 8009ac4:	40004400 	.word	0x40004400
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4aa9      	ldr	r2, [pc, #676]	@ (8009d74 <UART_SetConfig+0x5e8>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d125      	bne.n	8009b1e <UART_SetConfig+0x392>
 8009ad2:	4ba9      	ldr	r3, [pc, #676]	@ (8009d78 <UART_SetConfig+0x5ec>)
 8009ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009adc:	2b30      	cmp	r3, #48	@ 0x30
 8009ade:	d016      	beq.n	8009b0e <UART_SetConfig+0x382>
 8009ae0:	2b30      	cmp	r3, #48	@ 0x30
 8009ae2:	d818      	bhi.n	8009b16 <UART_SetConfig+0x38a>
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d00a      	beq.n	8009afe <UART_SetConfig+0x372>
 8009ae8:	2b20      	cmp	r3, #32
 8009aea:	d814      	bhi.n	8009b16 <UART_SetConfig+0x38a>
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <UART_SetConfig+0x36a>
 8009af0:	2b10      	cmp	r3, #16
 8009af2:	d008      	beq.n	8009b06 <UART_SetConfig+0x37a>
 8009af4:	e00f      	b.n	8009b16 <UART_SetConfig+0x38a>
 8009af6:	2300      	movs	r3, #0
 8009af8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009afc:	e09d      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009afe:	2302      	movs	r3, #2
 8009b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b04:	e099      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009b06:	2304      	movs	r3, #4
 8009b08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b0c:	e095      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009b0e:	2308      	movs	r3, #8
 8009b10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b14:	e091      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009b16:	2310      	movs	r3, #16
 8009b18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b1c:	e08d      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a96      	ldr	r2, [pc, #600]	@ (8009d7c <UART_SetConfig+0x5f0>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d125      	bne.n	8009b74 <UART_SetConfig+0x3e8>
 8009b28:	4b93      	ldr	r3, [pc, #588]	@ (8009d78 <UART_SetConfig+0x5ec>)
 8009b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b34:	d016      	beq.n	8009b64 <UART_SetConfig+0x3d8>
 8009b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b38:	d818      	bhi.n	8009b6c <UART_SetConfig+0x3e0>
 8009b3a:	2b80      	cmp	r3, #128	@ 0x80
 8009b3c:	d00a      	beq.n	8009b54 <UART_SetConfig+0x3c8>
 8009b3e:	2b80      	cmp	r3, #128	@ 0x80
 8009b40:	d814      	bhi.n	8009b6c <UART_SetConfig+0x3e0>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <UART_SetConfig+0x3c0>
 8009b46:	2b40      	cmp	r3, #64	@ 0x40
 8009b48:	d008      	beq.n	8009b5c <UART_SetConfig+0x3d0>
 8009b4a:	e00f      	b.n	8009b6c <UART_SetConfig+0x3e0>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b52:	e072      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009b54:	2302      	movs	r3, #2
 8009b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b5a:	e06e      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b62:	e06a      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009b64:	2308      	movs	r3, #8
 8009b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b6a:	e066      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b72:	e062      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a81      	ldr	r2, [pc, #516]	@ (8009d80 <UART_SetConfig+0x5f4>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d12a      	bne.n	8009bd4 <UART_SetConfig+0x448>
 8009b7e:	4b7e      	ldr	r3, [pc, #504]	@ (8009d78 <UART_SetConfig+0x5ec>)
 8009b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b8c:	d01a      	beq.n	8009bc4 <UART_SetConfig+0x438>
 8009b8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b92:	d81b      	bhi.n	8009bcc <UART_SetConfig+0x440>
 8009b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b98:	d00c      	beq.n	8009bb4 <UART_SetConfig+0x428>
 8009b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b9e:	d815      	bhi.n	8009bcc <UART_SetConfig+0x440>
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <UART_SetConfig+0x420>
 8009ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ba8:	d008      	beq.n	8009bbc <UART_SetConfig+0x430>
 8009baa:	e00f      	b.n	8009bcc <UART_SetConfig+0x440>
 8009bac:	2300      	movs	r3, #0
 8009bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bb2:	e042      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bba:	e03e      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009bbc:	2304      	movs	r3, #4
 8009bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bc2:	e03a      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009bc4:	2308      	movs	r3, #8
 8009bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bca:	e036      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009bcc:	2310      	movs	r3, #16
 8009bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bd2:	e032      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8009d84 <UART_SetConfig+0x5f8>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d12a      	bne.n	8009c34 <UART_SetConfig+0x4a8>
 8009bde:	4b66      	ldr	r3, [pc, #408]	@ (8009d78 <UART_SetConfig+0x5ec>)
 8009be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009be8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bec:	d01a      	beq.n	8009c24 <UART_SetConfig+0x498>
 8009bee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bf2:	d81b      	bhi.n	8009c2c <UART_SetConfig+0x4a0>
 8009bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bf8:	d00c      	beq.n	8009c14 <UART_SetConfig+0x488>
 8009bfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bfe:	d815      	bhi.n	8009c2c <UART_SetConfig+0x4a0>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d003      	beq.n	8009c0c <UART_SetConfig+0x480>
 8009c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c08:	d008      	beq.n	8009c1c <UART_SetConfig+0x490>
 8009c0a:	e00f      	b.n	8009c2c <UART_SetConfig+0x4a0>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c12:	e012      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009c14:	2302      	movs	r3, #2
 8009c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c1a:	e00e      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c22:	e00a      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009c24:	2308      	movs	r3, #8
 8009c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c2a:	e006      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c32:	e002      	b.n	8009c3a <UART_SetConfig+0x4ae>
 8009c34:	2310      	movs	r3, #16
 8009c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a51      	ldr	r2, [pc, #324]	@ (8009d84 <UART_SetConfig+0x5f8>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	f040 80a5 	bne.w	8009d90 <UART_SetConfig+0x604>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c4a:	2b08      	cmp	r3, #8
 8009c4c:	d823      	bhi.n	8009c96 <UART_SetConfig+0x50a>
 8009c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c54 <UART_SetConfig+0x4c8>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c79 	.word	0x08009c79
 8009c58:	08009c97 	.word	0x08009c97
 8009c5c:	08009c81 	.word	0x08009c81
 8009c60:	08009c97 	.word	0x08009c97
 8009c64:	08009c87 	.word	0x08009c87
 8009c68:	08009c97 	.word	0x08009c97
 8009c6c:	08009c97 	.word	0x08009c97
 8009c70:	08009c97 	.word	0x08009c97
 8009c74:	08009c8f 	.word	0x08009c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c78:	f7fa fb60 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8009c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c7e:	e010      	b.n	8009ca2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c80:	4b41      	ldr	r3, [pc, #260]	@ (8009d88 <UART_SetConfig+0x5fc>)
 8009c82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c84:	e00d      	b.n	8009ca2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c86:	f7fa fac1 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8009c8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c8c:	e009      	b.n	8009ca2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c94:	e005      	b.n	8009ca2 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ca0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 8137 	beq.w	8009f18 <UART_SetConfig+0x78c>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cae:	4a37      	ldr	r2, [pc, #220]	@ (8009d8c <UART_SetConfig+0x600>)
 8009cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cbc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	4413      	add	r3, r2
 8009cc8:	69ba      	ldr	r2, [r7, #24]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d305      	bcc.n	8009cda <UART_SetConfig+0x54e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cd4:	69ba      	ldr	r2, [r7, #24]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d903      	bls.n	8009ce2 <UART_SetConfig+0x556>
      {
        ret = HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ce0:	e11a      	b.n	8009f18 <UART_SetConfig+0x78c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	60bb      	str	r3, [r7, #8]
 8009ce8:	60fa      	str	r2, [r7, #12]
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cee:	4a27      	ldr	r2, [pc, #156]	@ (8009d8c <UART_SetConfig+0x600>)
 8009cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	603b      	str	r3, [r7, #0]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d04:	f7f6 facc 	bl	80002a0 <__aeabi_uldivmod>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4619      	mov	r1, r3
 8009d10:	f04f 0200 	mov.w	r2, #0
 8009d14:	f04f 0300 	mov.w	r3, #0
 8009d18:	020b      	lsls	r3, r1, #8
 8009d1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d1e:	0202      	lsls	r2, r0, #8
 8009d20:	6979      	ldr	r1, [r7, #20]
 8009d22:	6849      	ldr	r1, [r1, #4]
 8009d24:	0849      	lsrs	r1, r1, #1
 8009d26:	2000      	movs	r0, #0
 8009d28:	460c      	mov	r4, r1
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	eb12 0804 	adds.w	r8, r2, r4
 8009d30:	eb43 0905 	adc.w	r9, r3, r5
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	469a      	mov	sl, r3
 8009d3c:	4693      	mov	fp, r2
 8009d3e:	4652      	mov	r2, sl
 8009d40:	465b      	mov	r3, fp
 8009d42:	4640      	mov	r0, r8
 8009d44:	4649      	mov	r1, r9
 8009d46:	f7f6 faab 	bl	80002a0 <__aeabi_uldivmod>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4613      	mov	r3, r2
 8009d50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d58:	d308      	bcc.n	8009d6c <UART_SetConfig+0x5e0>
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d60:	d204      	bcs.n	8009d6c <UART_SetConfig+0x5e0>
        {
          huart->Instance->BRR = usartdiv;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6a3a      	ldr	r2, [r7, #32]
 8009d68:	60da      	str	r2, [r3, #12]
 8009d6a:	e0d5      	b.n	8009f18 <UART_SetConfig+0x78c>
        }
        else
        {
          ret = HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d72:	e0d1      	b.n	8009f18 <UART_SetConfig+0x78c>
 8009d74:	40004800 	.word	0x40004800
 8009d78:	40021000 	.word	0x40021000
 8009d7c:	40004c00 	.word	0x40004c00
 8009d80:	40005000 	.word	0x40005000
 8009d84:	40008000 	.word	0x40008000
 8009d88:	00f42400 	.word	0x00f42400
 8009d8c:	0801147c 	.word	0x0801147c
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d98:	d166      	bne.n	8009e68 <UART_SetConfig+0x6dc>
  {
    switch (clocksource)
 8009d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d9e:	2b08      	cmp	r3, #8
 8009da0:	d827      	bhi.n	8009df2 <UART_SetConfig+0x666>
 8009da2:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <UART_SetConfig+0x61c>)
 8009da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da8:	08009dcd 	.word	0x08009dcd
 8009dac:	08009dd5 	.word	0x08009dd5
 8009db0:	08009ddd 	.word	0x08009ddd
 8009db4:	08009df3 	.word	0x08009df3
 8009db8:	08009de3 	.word	0x08009de3
 8009dbc:	08009df3 	.word	0x08009df3
 8009dc0:	08009df3 	.word	0x08009df3
 8009dc4:	08009df3 	.word	0x08009df3
 8009dc8:	08009deb 	.word	0x08009deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dcc:	f7fa fab6 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8009dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dd2:	e014      	b.n	8009dfe <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dd4:	f7fa fac8 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 8009dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dda:	e010      	b.n	8009dfe <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ddc:	4b59      	ldr	r3, [pc, #356]	@ (8009f44 <UART_SetConfig+0x7b8>)
 8009dde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009de0:	e00d      	b.n	8009dfe <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009de2:	f7fa fa13 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8009de6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009de8:	e009      	b.n	8009dfe <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009df0:	e005      	b.n	8009dfe <UART_SetConfig+0x672>
      default:
        pclk = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 8089 	beq.w	8009f18 <UART_SetConfig+0x78c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0a:	4a4f      	ldr	r2, [pc, #316]	@ (8009f48 <UART_SetConfig+0x7bc>)
 8009e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e10:	461a      	mov	r2, r3
 8009e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e18:	005a      	lsls	r2, r3, #1
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	085b      	lsrs	r3, r3, #1
 8009e20:	441a      	add	r2, r3
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e2a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	2b0f      	cmp	r3, #15
 8009e30:	d916      	bls.n	8009e60 <UART_SetConfig+0x6d4>
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e38:	d212      	bcs.n	8009e60 <UART_SetConfig+0x6d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	f023 030f 	bic.w	r3, r3, #15
 8009e42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	085b      	lsrs	r3, r3, #1
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	f003 0307 	and.w	r3, r3, #7
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	8bfb      	ldrh	r3, [r7, #30]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	8bfa      	ldrh	r2, [r7, #30]
 8009e5c:	60da      	str	r2, [r3, #12]
 8009e5e:	e05b      	b.n	8009f18 <UART_SetConfig+0x78c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e66:	e057      	b.n	8009f18 <UART_SetConfig+0x78c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d828      	bhi.n	8009ec2 <UART_SetConfig+0x736>
 8009e70:	a201      	add	r2, pc, #4	@ (adr r2, 8009e78 <UART_SetConfig+0x6ec>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009e9d 	.word	0x08009e9d
 8009e7c:	08009ea5 	.word	0x08009ea5
 8009e80:	08009ead 	.word	0x08009ead
 8009e84:	08009ec3 	.word	0x08009ec3
 8009e88:	08009eb3 	.word	0x08009eb3
 8009e8c:	08009ec3 	.word	0x08009ec3
 8009e90:	08009ec3 	.word	0x08009ec3
 8009e94:	08009ec3 	.word	0x08009ec3
 8009e98:	08009ebb 	.word	0x08009ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e9c:	f7fa fa4e 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8009ea0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ea2:	e014      	b.n	8009ece <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ea4:	f7fa fa60 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 8009ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009eaa:	e010      	b.n	8009ece <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009eac:	4b25      	ldr	r3, [pc, #148]	@ (8009f44 <UART_SetConfig+0x7b8>)
 8009eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009eb0:	e00d      	b.n	8009ece <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eb2:	f7fa f9ab 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8009eb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009eb8:	e009      	b.n	8009ece <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ec0:	e005      	b.n	8009ece <UART_SetConfig+0x742>
      default:
        pclk = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d021      	beq.n	8009f18 <UART_SetConfig+0x78c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8009f48 <UART_SetConfig+0x7bc>)
 8009eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	085b      	lsrs	r3, r3, #1
 8009eec:	441a      	add	r2, r3
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	2b0f      	cmp	r3, #15
 8009efc:	d909      	bls.n	8009f12 <UART_SetConfig+0x786>
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f04:	d205      	bcs.n	8009f12 <UART_SetConfig+0x786>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60da      	str	r2, [r3, #12]
 8009f10:	e002      	b.n	8009f18 <UART_SetConfig+0x78c>
      }
      else
      {
        ret = HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2200      	movs	r2, #0
 8009f32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3730      	adds	r7, #48	@ 0x30
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f42:	bf00      	nop
 8009f44:	00f42400 	.word	0x00f42400
 8009f48:	0801147c 	.word	0x0801147c

08009f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f58:	2bff      	cmp	r3, #255	@ 0xff
 8009f5a:	d904      	bls.n	8009f66 <UART_AdvFeatureConfig+0x1a>
 8009f5c:	f640 514d 	movw	r1, #3405	@ 0xd4d
 8009f60:	4891      	ldr	r0, [pc, #580]	@ (800a1a8 <UART_AdvFeatureConfig+0x25c>)
 8009f62:	f005 fac5 	bl	800f4f0 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6a:	f003 0308 	and.w	r3, r3, #8
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d018      	beq.n	8009fa4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d009      	beq.n	8009f8e <UART_AdvFeatureConfig+0x42>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f82:	d004      	beq.n	8009f8e <UART_AdvFeatureConfig+0x42>
 8009f84:	f640 5152 	movw	r1, #3410	@ 0xd52
 8009f88:	4887      	ldr	r0, [pc, #540]	@ (800a1a8 <UART_AdvFeatureConfig+0x25c>)
 8009f8a:	f005 fab1 	bl	800f4f0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d018      	beq.n	8009fe2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d009      	beq.n	8009fcc <UART_AdvFeatureConfig+0x80>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fc0:	d004      	beq.n	8009fcc <UART_AdvFeatureConfig+0x80>
 8009fc2:	f640 5159 	movw	r1, #3417	@ 0xd59
 8009fc6:	4878      	ldr	r0, [pc, #480]	@ (800a1a8 <UART_AdvFeatureConfig+0x25c>)
 8009fc8:	f005 fa92 	bl	800f4f0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d018      	beq.n	800a020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d009      	beq.n	800a00a <UART_AdvFeatureConfig+0xbe>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ffe:	d004      	beq.n	800a00a <UART_AdvFeatureConfig+0xbe>
 800a000:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800a004:	4868      	ldr	r0, [pc, #416]	@ (800a1a8 <UART_AdvFeatureConfig+0x25c>)
 800a006:	f005 fa73 	bl	800f4f0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	430a      	orrs	r2, r1
 800a01e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a024:	f003 0304 	and.w	r3, r3, #4
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d018      	beq.n	800a05e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a030:	2b00      	cmp	r3, #0
 800a032:	d009      	beq.n	800a048 <UART_AdvFeatureConfig+0xfc>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a038:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a03c:	d004      	beq.n	800a048 <UART_AdvFeatureConfig+0xfc>
 800a03e:	f640 5167 	movw	r1, #3431	@ 0xd67
 800a042:	4859      	ldr	r0, [pc, #356]	@ (800a1a8 <UART_AdvFeatureConfig+0x25c>)
 800a044:	f005 fa54 	bl	800f4f0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a062:	f003 0310 	and.w	r3, r3, #16
 800a066:	2b00      	cmp	r3, #0
 800a068:	d018      	beq.n	800a09c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <UART_AdvFeatureConfig+0x13a>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a07a:	d004      	beq.n	800a086 <UART_AdvFeatureConfig+0x13a>
 800a07c:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800a080:	4849      	ldr	r0, [pc, #292]	@ (800a1a8 <UART_AdvFeatureConfig+0x25c>)
 800a082:	f005 fa35 	bl	800f4f0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	430a      	orrs	r2, r1
 800a09a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a0:	f003 0320 	and.w	r3, r3, #32
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d018      	beq.n	800a0da <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d009      	beq.n	800a0c4 <UART_AdvFeatureConfig+0x178>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0b8:	d004      	beq.n	800a0c4 <UART_AdvFeatureConfig+0x178>
 800a0ba:	f640 5175 	movw	r1, #3445	@ 0xd75
 800a0be:	483a      	ldr	r0, [pc, #232]	@ (800a1a8 <UART_AdvFeatureConfig+0x25c>)
 800a0c0:	f005 fa16 	bl	800f4f0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d06c      	beq.n	800a1c0 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a30      	ldr	r2, [pc, #192]	@ (800a1ac <UART_AdvFeatureConfig+0x260>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d018      	beq.n	800a122 <UART_AdvFeatureConfig+0x1d6>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a2e      	ldr	r2, [pc, #184]	@ (800a1b0 <UART_AdvFeatureConfig+0x264>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d013      	beq.n	800a122 <UART_AdvFeatureConfig+0x1d6>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a2d      	ldr	r2, [pc, #180]	@ (800a1b4 <UART_AdvFeatureConfig+0x268>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d00e      	beq.n	800a122 <UART_AdvFeatureConfig+0x1d6>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a2b      	ldr	r2, [pc, #172]	@ (800a1b8 <UART_AdvFeatureConfig+0x26c>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d009      	beq.n	800a122 <UART_AdvFeatureConfig+0x1d6>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a2a      	ldr	r2, [pc, #168]	@ (800a1bc <UART_AdvFeatureConfig+0x270>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d004      	beq.n	800a122 <UART_AdvFeatureConfig+0x1d6>
 800a118:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800a11c:	4822      	ldr	r0, [pc, #136]	@ (800a1a8 <UART_AdvFeatureConfig+0x25c>)
 800a11e:	f005 f9e7 	bl	800f4f0 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <UART_AdvFeatureConfig+0x1f2>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a12e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a132:	d004      	beq.n	800a13e <UART_AdvFeatureConfig+0x1f2>
 800a134:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800a138:	481b      	ldr	r0, [pc, #108]	@ (800a1a8 <UART_AdvFeatureConfig+0x25c>)
 800a13a:	f005 f9d9 	bl	800f4f0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a15c:	d130      	bne.n	800a1c0 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a162:	2b00      	cmp	r3, #0
 800a164:	d013      	beq.n	800a18e <UART_AdvFeatureConfig+0x242>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a16a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a16e:	d00e      	beq.n	800a18e <UART_AdvFeatureConfig+0x242>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a178:	d009      	beq.n	800a18e <UART_AdvFeatureConfig+0x242>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a17e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a182:	d004      	beq.n	800a18e <UART_AdvFeatureConfig+0x242>
 800a184:	f640 5182 	movw	r1, #3458	@ 0xd82
 800a188:	4807      	ldr	r0, [pc, #28]	@ (800a1a8 <UART_AdvFeatureConfig+0x25c>)
 800a18a:	f005 f9b1 	bl	800f4f0 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	605a      	str	r2, [r3, #4]
 800a1a4:	e00c      	b.n	800a1c0 <UART_AdvFeatureConfig+0x274>
 800a1a6:	bf00      	nop
 800a1a8:	0801128c 	.word	0x0801128c
 800a1ac:	40013800 	.word	0x40013800
 800a1b0:	40004400 	.word	0x40004400
 800a1b4:	40004800 	.word	0x40004800
 800a1b8:	40004c00 	.word	0x40004c00
 800a1bc:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d018      	beq.n	800a1fe <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d009      	beq.n	800a1e8 <UART_AdvFeatureConfig+0x29c>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a1dc:	d004      	beq.n	800a1e8 <UART_AdvFeatureConfig+0x29c>
 800a1de:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800a1e2:	4809      	ldr	r0, [pc, #36]	@ (800a208 <UART_AdvFeatureConfig+0x2bc>)
 800a1e4:	f005 f984 	bl	800f4f0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	605a      	str	r2, [r3, #4]
  }
}
 800a1fe:	bf00      	nop
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	0801128c 	.word	0x0801128c

0800a20c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b098      	sub	sp, #96	@ 0x60
 800a210:	af02      	add	r7, sp, #8
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a21c:	f7f6 fa20 	bl	8000660 <HAL_GetTick>
 800a220:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0308 	and.w	r3, r3, #8
 800a22c:	2b08      	cmp	r3, #8
 800a22e:	d12f      	bne.n	800a290 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a230:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a238:	2200      	movs	r2, #0
 800a23a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f88e 	bl	800a360 <UART_WaitOnFlagUntilTimeout>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d022      	beq.n	800a290 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a25a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a25e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	461a      	mov	r2, r3
 800a266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a268:	647b      	str	r3, [r7, #68]	@ 0x44
 800a26a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a26e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e6      	bne.n	800a24a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2220      	movs	r2, #32
 800a280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e063      	b.n	800a358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0304 	and.w	r3, r3, #4
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d149      	bne.n	800a332 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a29e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f857 	bl	800a360 <UART_WaitOnFlagUntilTimeout>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d03c      	beq.n	800a332 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	e853 3f00 	ldrex	r3, [r3]
 800a2c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2de:	e841 2300 	strex	r3, r2, [r1]
 800a2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1e6      	bne.n	800a2b8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3308      	adds	r3, #8
 800a308:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a30a:	61fa      	str	r2, [r7, #28]
 800a30c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	69b9      	ldr	r1, [r7, #24]
 800a310:	69fa      	ldr	r2, [r7, #28]
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	617b      	str	r3, [r7, #20]
   return(result);
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e5      	bne.n	800a2ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2220      	movs	r2, #32
 800a322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e012      	b.n	800a358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2220      	movs	r2, #32
 800a336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3758      	adds	r7, #88	@ 0x58
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	603b      	str	r3, [r7, #0]
 800a36c:	4613      	mov	r3, r2
 800a36e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a370:	e04f      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a378:	d04b      	beq.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a37a:	f7f6 f971 	bl	8000660 <HAL_GetTick>
 800a37e:	4602      	mov	r2, r0
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	69ba      	ldr	r2, [r7, #24]
 800a386:	429a      	cmp	r2, r3
 800a388:	d302      	bcc.n	800a390 <UART_WaitOnFlagUntilTimeout+0x30>
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e04e      	b.n	800a432 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0304 	and.w	r3, r3, #4
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d037      	beq.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b80      	cmp	r3, #128	@ 0x80
 800a3a6:	d034      	beq.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2b40      	cmp	r3, #64	@ 0x40
 800a3ac:	d031      	beq.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	f003 0308 	and.w	r3, r3, #8
 800a3b8:	2b08      	cmp	r3, #8
 800a3ba:	d110      	bne.n	800a3de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2208      	movs	r2, #8
 800a3c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 f838 	bl	800a43a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2208      	movs	r2, #8
 800a3ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e029      	b.n	800a432 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3ec:	d111      	bne.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 f81e 	bl	800a43a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2220      	movs	r2, #32
 800a402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e00f      	b.n	800a432 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69da      	ldr	r2, [r3, #28]
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	4013      	ands	r3, r2
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	429a      	cmp	r2, r3
 800a420:	bf0c      	ite	eq
 800a422:	2301      	moveq	r3, #1
 800a424:	2300      	movne	r3, #0
 800a426:	b2db      	uxtb	r3, r3
 800a428:	461a      	mov	r2, r3
 800a42a:	79fb      	ldrb	r3, [r7, #7]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d0a0      	beq.n	800a372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b095      	sub	sp, #84	@ 0x54
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44a:	e853 3f00 	ldrex	r3, [r3]
 800a44e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a452:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a460:	643b      	str	r3, [r7, #64]	@ 0x40
 800a462:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a464:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a466:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a468:	e841 2300 	strex	r3, r2, [r1]
 800a46c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e6      	bne.n	800a442 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3308      	adds	r3, #8
 800a47a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	e853 3f00 	ldrex	r3, [r3]
 800a482:	61fb      	str	r3, [r7, #28]
   return(result);
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3308      	adds	r3, #8
 800a496:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a498:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a49a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a49e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e3      	bne.n	800a474 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d118      	bne.n	800a4e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	e853 3f00 	ldrex	r3, [r3]
 800a4c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	f023 0310 	bic.w	r3, r3, #16
 800a4c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4d2:	61bb      	str	r3, [r7, #24]
 800a4d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d6:	6979      	ldr	r1, [r7, #20]
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	e841 2300 	strex	r3, r2, [r1]
 800a4de:	613b      	str	r3, [r7, #16]
   return(result);
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e6      	bne.n	800a4b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2220      	movs	r2, #32
 800a4ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a4fa:	bf00      	nop
 800a4fc:	3754      	adds	r7, #84	@ 0x54
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
	...

0800a508 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a29      	ldr	r2, [pc, #164]	@ (800a5bc <HAL_UARTEx_DisableFifoMode+0xb4>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d01d      	beq.n	800a556 <HAL_UARTEx_DisableFifoMode+0x4e>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a28      	ldr	r2, [pc, #160]	@ (800a5c0 <HAL_UARTEx_DisableFifoMode+0xb8>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d018      	beq.n	800a556 <HAL_UARTEx_DisableFifoMode+0x4e>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a26      	ldr	r2, [pc, #152]	@ (800a5c4 <HAL_UARTEx_DisableFifoMode+0xbc>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d013      	beq.n	800a556 <HAL_UARTEx_DisableFifoMode+0x4e>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a25      	ldr	r2, [pc, #148]	@ (800a5c8 <HAL_UARTEx_DisableFifoMode+0xc0>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d00e      	beq.n	800a556 <HAL_UARTEx_DisableFifoMode+0x4e>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a23      	ldr	r2, [pc, #140]	@ (800a5cc <HAL_UARTEx_DisableFifoMode+0xc4>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d009      	beq.n	800a556 <HAL_UARTEx_DisableFifoMode+0x4e>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a22      	ldr	r2, [pc, #136]	@ (800a5d0 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d004      	beq.n	800a556 <HAL_UARTEx_DisableFifoMode+0x4e>
 800a54c:	f240 216b 	movw	r1, #619	@ 0x26b
 800a550:	4820      	ldr	r0, [pc, #128]	@ (800a5d4 <HAL_UARTEx_DisableFifoMode+0xcc>)
 800a552:	f004 ffcd 	bl	800f4f0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_UARTEx_DisableFifoMode+0x5c>
 800a560:	2302      	movs	r3, #2
 800a562:	e027      	b.n	800a5b4 <HAL_UARTEx_DisableFifoMode+0xac>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2224      	movs	r2, #36	@ 0x24
 800a570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f022 0201 	bic.w	r2, r2, #1
 800a58a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a592:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	40013800 	.word	0x40013800
 800a5c0:	40004400 	.word	0x40004400
 800a5c4:	40004800 	.word	0x40004800
 800a5c8:	40004c00 	.word	0x40004c00
 800a5cc:	40005000 	.word	0x40005000
 800a5d0:	40008000 	.word	0x40008000
 800a5d4:	080112c8 	.word	0x080112c8

0800a5d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a3b      	ldr	r2, [pc, #236]	@ (800a6d4 <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d01d      	beq.n	800a628 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a39      	ldr	r2, [pc, #228]	@ (800a6d8 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d018      	beq.n	800a628 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a38      	ldr	r2, [pc, #224]	@ (800a6dc <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d013      	beq.n	800a628 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a36      	ldr	r2, [pc, #216]	@ (800a6e0 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d00e      	beq.n	800a628 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a35      	ldr	r2, [pc, #212]	@ (800a6e4 <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d009      	beq.n	800a628 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a33      	ldr	r2, [pc, #204]	@ (800a6e8 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d004      	beq.n	800a628 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a61e:	f240 2199 	movw	r1, #665	@ 0x299
 800a622:	4832      	ldr	r0, [pc, #200]	@ (800a6ec <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800a624:	f004 ff64 	bl	800f4f0 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d018      	beq.n	800a660 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a634:	d014      	beq.n	800a660 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a63c:	d010      	beq.n	800a660 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a644:	d00c      	beq.n	800a660 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a64c:	d008      	beq.n	800a660 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 800a654:	d004      	beq.n	800a660 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a656:	f240 219a 	movw	r1, #666	@ 0x29a
 800a65a:	4824      	ldr	r0, [pc, #144]	@ (800a6ec <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800a65c:	f004 ff48 	bl	800f4f0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a666:	2b01      	cmp	r3, #1
 800a668:	d101      	bne.n	800a66e <HAL_UARTEx_SetTxFifoThreshold+0x96>
 800a66a:	2302      	movs	r3, #2
 800a66c:	e02d      	b.n	800a6ca <HAL_UARTEx_SetTxFifoThreshold+0xf2>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2224      	movs	r2, #36	@ 0x24
 800a67a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f022 0201 	bic.w	r2, r2, #1
 800a694:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f8ac 	bl	800a808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2220      	movs	r2, #32
 800a6bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	40013800 	.word	0x40013800
 800a6d8:	40004400 	.word	0x40004400
 800a6dc:	40004800 	.word	0x40004800
 800a6e0:	40004c00 	.word	0x40004c00
 800a6e4:	40005000 	.word	0x40005000
 800a6e8:	40008000 	.word	0x40008000
 800a6ec:	080112c8 	.word	0x080112c8

0800a6f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a3b      	ldr	r2, [pc, #236]	@ (800a7ec <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d01d      	beq.n	800a740 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a39      	ldr	r2, [pc, #228]	@ (800a7f0 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d018      	beq.n	800a740 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a38      	ldr	r2, [pc, #224]	@ (800a7f4 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d013      	beq.n	800a740 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a36      	ldr	r2, [pc, #216]	@ (800a7f8 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d00e      	beq.n	800a740 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a35      	ldr	r2, [pc, #212]	@ (800a7fc <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d009      	beq.n	800a740 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a33      	ldr	r2, [pc, #204]	@ (800a800 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d004      	beq.n	800a740 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a736:	f240 21ca 	movw	r1, #714	@ 0x2ca
 800a73a:	4832      	ldr	r0, [pc, #200]	@ (800a804 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800a73c:	f004 fed8 	bl	800f4f0 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d018      	beq.n	800a778 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a74c:	d014      	beq.n	800a778 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a754:	d010      	beq.n	800a778 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800a75c:	d00c      	beq.n	800a778 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a764:	d008      	beq.n	800a778 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 800a76c:	d004      	beq.n	800a778 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a76e:	f240 21cb 	movw	r1, #715	@ 0x2cb
 800a772:	4824      	ldr	r0, [pc, #144]	@ (800a804 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800a774:	f004 febc 	bl	800f4f0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d101      	bne.n	800a786 <HAL_UARTEx_SetRxFifoThreshold+0x96>
 800a782:	2302      	movs	r3, #2
 800a784:	e02d      	b.n	800a7e2 <HAL_UARTEx_SetRxFifoThreshold+0xf2>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2224      	movs	r2, #36	@ 0x24
 800a792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f022 0201 	bic.w	r2, r2, #1
 800a7ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f820 	bl	800a808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	40013800 	.word	0x40013800
 800a7f0:	40004400 	.word	0x40004400
 800a7f4:	40004800 	.word	0x40004800
 800a7f8:	40004c00 	.word	0x40004c00
 800a7fc:	40005000 	.word	0x40005000
 800a800:	40008000 	.word	0x40008000
 800a804:	080112c8 	.word	0x080112c8

0800a808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a814:	2b00      	cmp	r3, #0
 800a816:	d108      	bne.n	800a82a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a828:	e031      	b.n	800a88e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a82a:	2308      	movs	r3, #8
 800a82c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a82e:	2308      	movs	r3, #8
 800a830:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	0e5b      	lsrs	r3, r3, #25
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f003 0307 	and.w	r3, r3, #7
 800a840:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	0f5b      	lsrs	r3, r3, #29
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	f003 0307 	and.w	r3, r3, #7
 800a850:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	7b3a      	ldrb	r2, [r7, #12]
 800a856:	4911      	ldr	r1, [pc, #68]	@ (800a89c <UARTEx_SetNbDataToProcess+0x94>)
 800a858:	5c8a      	ldrb	r2, [r1, r2]
 800a85a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a85e:	7b3a      	ldrb	r2, [r7, #12]
 800a860:	490f      	ldr	r1, [pc, #60]	@ (800a8a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a862:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a864:	fb93 f3f2 	sdiv	r3, r3, r2
 800a868:	b29a      	uxth	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	7b7a      	ldrb	r2, [r7, #13]
 800a874:	4909      	ldr	r1, [pc, #36]	@ (800a89c <UARTEx_SetNbDataToProcess+0x94>)
 800a876:	5c8a      	ldrb	r2, [r1, r2]
 800a878:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a87c:	7b7a      	ldrb	r2, [r7, #13]
 800a87e:	4908      	ldr	r1, [pc, #32]	@ (800a8a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a880:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a882:	fb93 f3f2 	sdiv	r3, r3, r2
 800a886:	b29a      	uxth	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a88e:	bf00      	nop
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	08011494 	.word	0x08011494
 800a8a0:	0801149c 	.word	0x0801149c

0800a8a4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	f107 001c 	add.w	r0, r7, #28
 800a8b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a2d      	ldr	r2, [pc, #180]	@ (800a974 <SDMMC_Init+0xd0>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d003      	beq.n	800a8ca <SDMMC_Init+0x26>
 800a8c2:	21dc      	movs	r1, #220	@ 0xdc
 800a8c4:	482c      	ldr	r0, [pc, #176]	@ (800a978 <SDMMC_Init+0xd4>)
 800a8c6:	f004 fe13 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d007      	beq.n	800a8e0 <SDMMC_Init+0x3c>
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8d6:	d003      	beq.n	800a8e0 <SDMMC_Init+0x3c>
 800a8d8:	21dd      	movs	r1, #221	@ 0xdd
 800a8da:	4827      	ldr	r0, [pc, #156]	@ (800a978 <SDMMC_Init+0xd4>)
 800a8dc:	f004 fe08 	bl	800f4f0 <assert_failed>
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d007      	beq.n	800a8f6 <SDMMC_Init+0x52>
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8ec:	d003      	beq.n	800a8f6 <SDMMC_Init+0x52>
 800a8ee:	21e1      	movs	r1, #225	@ 0xe1
 800a8f0:	4821      	ldr	r0, [pc, #132]	@ (800a978 <SDMMC_Init+0xd4>)
 800a8f2:	f004 fdfd 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00b      	beq.n	800a914 <SDMMC_Init+0x70>
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a902:	d007      	beq.n	800a914 <SDMMC_Init+0x70>
 800a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a90a:	d003      	beq.n	800a914 <SDMMC_Init+0x70>
 800a90c:	21e2      	movs	r1, #226	@ 0xe2
 800a90e:	481a      	ldr	r0, [pc, #104]	@ (800a978 <SDMMC_Init+0xd4>)
 800a910:	f004 fdee 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800a914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a916:	2b00      	cmp	r3, #0
 800a918:	d007      	beq.n	800a92a <SDMMC_Init+0x86>
 800a91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a920:	d003      	beq.n	800a92a <SDMMC_Init+0x86>
 800a922:	21e3      	movs	r1, #227	@ 0xe3
 800a924:	4814      	ldr	r0, [pc, #80]	@ (800a978 <SDMMC_Init+0xd4>)
 800a926:	f004 fde3 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800a92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a930:	d303      	bcc.n	800a93a <SDMMC_Init+0x96>
 800a932:	21e4      	movs	r1, #228	@ 0xe4
 800a934:	4810      	ldr	r0, [pc, #64]	@ (800a978 <SDMMC_Init+0xd4>)
 800a936:	f004 fddb 	bl	800f4f0 <assert_failed>

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a93a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a93c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a93e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      |\
 800a942:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             |\
 800a946:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl |\
 800a94a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	4b09      	ldr	r3, [pc, #36]	@ (800a97c <SDMMC_Init+0xd8>)
 800a958:	4013      	ands	r3, r2
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	431a      	orrs	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a96e:	b004      	add	sp, #16
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	50062400 	.word	0x50062400
 800a978:	08011304 	.word	0x08011304
 800a97c:	ffc02c00 	.word	0xffc02c00

0800a980 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a98e:	4618      	mov	r0, r3
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b083      	sub	sp, #12
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f043 0203 	orr.w	r2, r3, #3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a9d0:	2002      	movs	r0, #2
 800a9d2:	f7f5 fe51 	bl	8000678 <HAL_Delay>

  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0303 	and.w	r3, r3, #3
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	2b3f      	cmp	r3, #63	@ 0x3f
 800aa10:	d904      	bls.n	800aa1c <SDMMC_SendCommand+0x20>
 800aa12:	f240 1187 	movw	r1, #391	@ 0x187
 800aa16:	482b      	ldr	r0, [pc, #172]	@ (800aac4 <SDMMC_SendCommand+0xc8>)
 800aa18:	f004 fd6a 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00e      	beq.n	800aa42 <SDMMC_SendCommand+0x46>
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa2c:	d009      	beq.n	800aa42 <SDMMC_SendCommand+0x46>
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa36:	d004      	beq.n	800aa42 <SDMMC_SendCommand+0x46>
 800aa38:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800aa3c:	4821      	ldr	r0, [pc, #132]	@ (800aac4 <SDMMC_SendCommand+0xc8>)
 800aa3e:	f004 fd57 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00e      	beq.n	800aa68 <SDMMC_SendCommand+0x6c>
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa52:	d009      	beq.n	800aa68 <SDMMC_SendCommand+0x6c>
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa5c:	d004      	beq.n	800aa68 <SDMMC_SendCommand+0x6c>
 800aa5e:	f240 1189 	movw	r1, #393	@ 0x189
 800aa62:	4818      	ldr	r0, [pc, #96]	@ (800aac4 <SDMMC_SendCommand+0xc8>)
 800aa64:	f004 fd44 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d009      	beq.n	800aa84 <SDMMC_SendCommand+0x88>
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa78:	d004      	beq.n	800aa84 <SDMMC_SendCommand+0x88>
 800aa7a:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 800aa7e:	4811      	ldr	r0, [pc, #68]	@ (800aac4 <SDMMC_SendCommand+0xc8>)
 800aa80:	f004 fd36 	bl	800f4f0 <assert_failed>

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa94:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aa9a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aaa0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68da      	ldr	r2, [r3, #12]
 800aaac:	4b06      	ldr	r3, [pc, #24]	@ (800aac8 <SDMMC_SendCommand+0xcc>)
 800aaae:	4013      	ands	r3, r2
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	431a      	orrs	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	08011304 	.word	0x08011304
 800aac8:	fffee0c0 	.word	0xfffee0c0

0800aacc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	b2db      	uxtb	r3, r3
}
 800aada:	4618      	mov	r0, r3
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
	...

0800aae8 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00d      	beq.n	800ab14 <SDMMC_GetResponse+0x2c>
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d00a      	beq.n	800ab14 <SDMMC_GetResponse+0x2c>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b08      	cmp	r3, #8
 800ab02:	d007      	beq.n	800ab14 <SDMMC_GetResponse+0x2c>
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2b0c      	cmp	r3, #12
 800ab08:	d004      	beq.n	800ab14 <SDMMC_GetResponse+0x2c>
 800ab0a:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 800ab0e:	4807      	ldr	r0, [pc, #28]	@ (800ab2c <SDMMC_GetResponse+0x44>)
 800ab10:	f004 fcee 	bl	800f4f0 <assert_failed>

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3314      	adds	r3, #20
 800ab18:	461a      	mov	r2, r3
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	08011304 	.word	0x08011304

0800ab30 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab46:	d304      	bcc.n	800ab52 <SDMMC_ConfigData+0x22>
 800ab48:	f240 11cb 	movw	r1, #459	@ 0x1cb
 800ab4c:	4846      	ldr	r0, [pc, #280]	@ (800ac68 <SDMMC_ConfigData+0x138>)
 800ab4e:	f004 fccf 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d03c      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	2b10      	cmp	r3, #16
 800ab60:	d038      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	2b20      	cmp	r3, #32
 800ab68:	d034      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	2b30      	cmp	r3, #48	@ 0x30
 800ab70:	d030      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	2b40      	cmp	r3, #64	@ 0x40
 800ab78:	d02c      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	2b50      	cmp	r3, #80	@ 0x50
 800ab80:	d028      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	2b60      	cmp	r3, #96	@ 0x60
 800ab88:	d024      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	2b70      	cmp	r3, #112	@ 0x70
 800ab90:	d020      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	2b80      	cmp	r3, #128	@ 0x80
 800ab98:	d01c      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	2b90      	cmp	r3, #144	@ 0x90
 800aba0:	d018      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	2ba0      	cmp	r3, #160	@ 0xa0
 800aba8:	d014      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	2bb0      	cmp	r3, #176	@ 0xb0
 800abb0:	d010      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	2bc0      	cmp	r3, #192	@ 0xc0
 800abb8:	d00c      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	2bd0      	cmp	r3, #208	@ 0xd0
 800abc0:	d008      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	2be0      	cmp	r3, #224	@ 0xe0
 800abc8:	d004      	beq.n	800abd4 <SDMMC_ConfigData+0xa4>
 800abca:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 800abce:	4826      	ldr	r0, [pc, #152]	@ (800ac68 <SDMMC_ConfigData+0x138>)
 800abd0:	f004 fc8e 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d008      	beq.n	800abee <SDMMC_ConfigData+0xbe>
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d004      	beq.n	800abee <SDMMC_ConfigData+0xbe>
 800abe4:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800abe8:	481f      	ldr	r0, [pc, #124]	@ (800ac68 <SDMMC_ConfigData+0x138>)
 800abea:	f004 fc81 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d008      	beq.n	800ac08 <SDMMC_ConfigData+0xd8>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	2b08      	cmp	r3, #8
 800abfc:	d004      	beq.n	800ac08 <SDMMC_ConfigData+0xd8>
 800abfe:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 800ac02:	4819      	ldr	r0, [pc, #100]	@ (800ac68 <SDMMC_ConfigData+0x138>)
 800ac04:	f004 fc74 	bl	800f4f0 <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d008      	beq.n	800ac22 <SDMMC_ConfigData+0xf2>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d004      	beq.n	800ac22 <SDMMC_ConfigData+0xf2>
 800ac18:	f240 11cf 	movw	r1, #463	@ 0x1cf
 800ac1c:	4812      	ldr	r0, [pc, #72]	@ (800ac68 <SDMMC_ConfigData+0x138>)
 800ac1e:	f004 fc67 	bl	800f4f0 <assert_failed>

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac3a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ac40:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ac46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	431a      	orrs	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0

}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	08011304 	.word	0x08011304

0800ac6c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac7a:	2310      	movs	r3, #16
 800ac7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac84:	2300      	movs	r3, #0
 800ac86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac8e:	f107 0308 	add.w	r3, r7, #8
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7ff feb1 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac9e:	2110      	movs	r1, #16
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fa7b 	bl	800b19c <SDMMC_GetCmdResp1>
 800aca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aca8:	69fb      	ldr	r3, [r7, #28]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3720      	adds	r7, #32
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b088      	sub	sp, #32
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800acc0:	2311      	movs	r3, #17
 800acc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800acc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acca:	2300      	movs	r3, #0
 800accc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800acd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acd4:	f107 0308 	add.w	r3, r7, #8
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff fe8e 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ace0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ace4:	2111      	movs	r1, #17
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fa58 	bl	800b19c <SDMMC_GetCmdResp1>
 800acec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acee:	69fb      	ldr	r3, [r7, #28]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3720      	adds	r7, #32
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ad06:	2312      	movs	r3, #18
 800ad08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad10:	2300      	movs	r3, #0
 800ad12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad1a:	f107 0308 	add.w	r3, r7, #8
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff fe6b 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad2a:	2112      	movs	r1, #18
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fa35 	bl	800b19c <SDMMC_GetCmdResp1>
 800ad32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad34:	69fb      	ldr	r3, [r7, #28]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3720      	adds	r7, #32
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b088      	sub	sp, #32
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
 800ad46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad4c:	2318      	movs	r3, #24
 800ad4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad56:	2300      	movs	r3, #0
 800ad58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad60:	f107 0308 	add.w	r3, r7, #8
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff fe48 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad70:	2118      	movs	r1, #24
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fa12 	bl	800b19c <SDMMC_GetCmdResp1>
 800ad78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3720      	adds	r7, #32
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b088      	sub	sp, #32
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad92:	2319      	movs	r3, #25
 800ad94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ada0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ada4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ada6:	f107 0308 	add.w	r3, r7, #8
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff fe25 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800adb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adb6:	2119      	movs	r1, #25
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f9ef 	bl	800b19c <SDMMC_GetCmdResp1>
 800adbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adc0:	69fb      	ldr	r3, [r7, #28]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3720      	adds	r7, #32
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
	...

0800adcc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800add8:	230c      	movs	r3, #12
 800adda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800addc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ade0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ade2:	2300      	movs	r3, #0
 800ade4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ade6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800adea:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae04:	f107 0308 	add.w	r3, r7, #8
 800ae08:	4619      	mov	r1, r3
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff fdf6 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ae10:	4a08      	ldr	r2, [pc, #32]	@ (800ae34 <SDMMC_CmdStopTransfer+0x68>)
 800ae12:	210c      	movs	r1, #12
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f9c1 	bl	800b19c <SDMMC_GetCmdResp1>
 800ae1a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800ae28:	69fb      	ldr	r3, [r7, #28]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3720      	adds	r7, #32
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	05f5e100 	.word	0x05f5e100

0800ae38 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b08a      	sub	sp, #40	@ 0x28
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae48:	2307      	movs	r3, #7
 800ae4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae50:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae52:	2300      	movs	r3, #0
 800ae54:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae5a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae5c:	f107 0310 	add.w	r3, r7, #16
 800ae60:	4619      	mov	r1, r3
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7ff fdca 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae6c:	2107      	movs	r1, #7
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 f994 	bl	800b19c <SDMMC_GetCmdResp1>
 800ae74:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800ae76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3728      	adds	r7, #40	@ 0x28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae90:	2300      	movs	r3, #0
 800ae92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae94:	2300      	movs	r3, #0
 800ae96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae9e:	f107 0308 	add.w	r3, r7, #8
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7ff fda9 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fbb8 	bl	800b620 <SDMMC_GetCmdError>
 800aeb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeb2:	69fb      	ldr	r3, [r7, #28]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3720      	adds	r7, #32
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b088      	sub	sp, #32
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aec4:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800aec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aeca:	2308      	movs	r3, #8
 800aecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aedc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aede:	f107 0308 	add.w	r3, r7, #8
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff fd89 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fb4a 	bl	800b584 <SDMMC_GetCmdResp7>
 800aef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef2:	69fb      	ldr	r3, [r7, #28]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3720      	adds	r7, #32
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800af0a:	2337      	movs	r3, #55	@ 0x37
 800af0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af14:	2300      	movs	r3, #0
 800af16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff fd69 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af2e:	2137      	movs	r1, #55	@ 0x37
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f933 	bl	800b19c <SDMMC_GetCmdResp1>
 800af36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af38:	69fb      	ldr	r3, [r7, #28]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3720      	adds	r7, #32
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b088      	sub	sp, #32
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af50:	2329      	movs	r3, #41	@ 0x29
 800af52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af5a:	2300      	movs	r3, #0
 800af5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af64:	f107 0308 	add.w	r3, r7, #8
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff fd46 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fa4f 	bl	800b414 <SDMMC_GetCmdResp3>
 800af76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af78:	69fb      	ldr	r3, [r7, #28]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3720      	adds	r7, #32
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b088      	sub	sp, #32
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af90:	2306      	movs	r3, #6
 800af92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afa4:	f107 0308 	add.w	r3, r7, #8
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7ff fd26 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800afb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afb4:	2106      	movs	r1, #6
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f8f0 	bl	800b19c <SDMMC_GetCmdResp1>
 800afbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afbe:	69fb      	ldr	r3, [r7, #28]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3720      	adds	r7, #32
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800afd4:	2333      	movs	r3, #51	@ 0x33
 800afd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afe8:	f107 0308 	add.w	r3, r7, #8
 800afec:	4619      	mov	r1, r3
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff fd04 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800aff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aff8:	2133      	movs	r1, #51	@ 0x33
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f8ce 	bl	800b19c <SDMMC_GetCmdResp1>
 800b000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b002:	69fb      	ldr	r3, [r7, #28]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3720      	adds	r7, #32
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b014:	2300      	movs	r3, #0
 800b016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b018:	2302      	movs	r3, #2
 800b01a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b01c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b026:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b02a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b02c:	f107 0308 	add.w	r3, r7, #8
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fce2 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f9a1 	bl	800b380 <SDMMC_GetCmdResp2>
 800b03e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b040:	69fb      	ldr	r3, [r7, #28]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3720      	adds	r7, #32
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b088      	sub	sp, #32
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b058:	2309      	movs	r3, #9
 800b05a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b05c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b060:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b062:	2300      	movs	r3, #0
 800b064:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b06a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b06c:	f107 0308 	add.w	r3, r7, #8
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff fcc2 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f981 	bl	800b380 <SDMMC_GetCmdResp2>
 800b07e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b080:	69fb      	ldr	r3, [r7, #28]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3720      	adds	r7, #32
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b088      	sub	sp, #32
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b098:	2303      	movs	r3, #3
 800b09a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b09c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0ac:	f107 0308 	add.w	r3, r7, #8
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff fca2 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	2103      	movs	r1, #3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f9e9 	bl	800b494 <SDMMC_GetCmdResp6>
 800b0c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3720      	adds	r7, #32
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b088      	sub	sp, #32
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0dc:	230d      	movs	r3, #13
 800b0de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0f0:	f107 0308 	add.w	r3, r7, #8
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff fc80 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b100:	210d      	movs	r1, #13
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f84a 	bl	800b19c <SDMMC_GetCmdResp1>
 800b108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b10a:	69fb      	ldr	r3, [r7, #28]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3720      	adds	r7, #32
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b11c:	2300      	movs	r3, #0
 800b11e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b120:	230d      	movs	r3, #13
 800b122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b12a:	2300      	movs	r3, #0
 800b12c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b12e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b134:	f107 0308 	add.w	r3, r7, #8
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff fc5e 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b140:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b144:	210d      	movs	r1, #13
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f828 	bl	800b19c <SDMMC_GetCmdResp1>
 800b14c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b14e:	69fb      	ldr	r3, [r7, #28]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3720      	adds	r7, #32
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b160:	2300      	movs	r3, #0
 800b162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b164:	230b      	movs	r3, #11
 800b166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b16c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b16e:	2300      	movs	r3, #0
 800b170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b176:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b178:	f107 0308 	add.w	r3, r7, #8
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff fc3c 	bl	800a9fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b184:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b188:	210b      	movs	r1, #11
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f806 	bl	800b19c <SDMMC_GetCmdResp1>
 800b190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b192:	69fb      	ldr	r3, [r7, #28]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3720      	adds	r7, #32
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b1aa:	4b70      	ldr	r3, [pc, #448]	@ (800b36c <SDMMC_GetCmdResp1+0x1d0>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a70      	ldr	r2, [pc, #448]	@ (800b370 <SDMMC_GetCmdResp1+0x1d4>)
 800b1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b4:	0a5a      	lsrs	r2, r3, #9
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	fb02 f303 	mul.w	r3, r2, r3
 800b1bc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	1e5a      	subs	r2, r3, #1
 800b1c2:	61fa      	str	r2, [r7, #28]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d102      	bne.n	800b1ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b1cc:	e0c9      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1d2:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	4b67      	ldr	r3, [pc, #412]	@ (800b374 <SDMMC_GetCmdResp1+0x1d8>)
 800b1d8:	4013      	ands	r3, r2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0ef      	beq.n	800b1be <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1ea      	bne.n	800b1be <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1ec:	f003 0304 	and.w	r3, r3, #4
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d004      	beq.n	800b1fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2204      	movs	r2, #4
 800b1f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1fa:	2304      	movs	r3, #4
 800b1fc:	e0b1      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d004      	beq.n	800b214 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2201      	movs	r2, #1
 800b20e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b210:	2301      	movs	r3, #1
 800b212:	e0a6      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	4a58      	ldr	r2, [pc, #352]	@ (800b378 <SDMMC_GetCmdResp1+0x1dc>)
 800b218:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f7ff fc56 	bl	800aacc <SDMMC_GetCommandResponse>
 800b220:	4603      	mov	r3, r0
 800b222:	461a      	mov	r2, r3
 800b224:	7afb      	ldrb	r3, [r7, #11]
 800b226:	4293      	cmp	r3, r2
 800b228:	d001      	beq.n	800b22e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e099      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b22e:	2100      	movs	r1, #0
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f7ff fc59 	bl	800aae8 <SDMMC_GetResponse>
 800b236:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	4b50      	ldr	r3, [pc, #320]	@ (800b37c <SDMMC_GetCmdResp1+0x1e0>)
 800b23c:	4013      	ands	r3, r2
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d101      	bne.n	800b246 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b242:	2300      	movs	r3, #0
 800b244:	e08d      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	da02      	bge.n	800b252 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b24c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b250:	e087      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b25c:	2340      	movs	r3, #64	@ 0x40
 800b25e:	e080      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b26a:	2380      	movs	r3, #128	@ 0x80
 800b26c:	e079      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b27c:	e071      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b28c:	e069      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b29c:	e061      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b2a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b2ac:	e059      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2bc:	e051      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b2cc:	e049      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b2dc:	e041      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2ec:	e039      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b2f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b2fc:	e031      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d002      	beq.n	800b30e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b308:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b30c:	e029      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b318:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b31c:	e021      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b328:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b32c:	e019      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b338:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b33c:	e011      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b348:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b34c:	e009      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f003 0308 	and.w	r3, r3, #8
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b358:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b35c:	e001      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b35e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b362:	4618      	mov	r0, r3
 800b364:	3720      	adds	r7, #32
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20000008 	.word	0x20000008
 800b370:	10624dd3 	.word	0x10624dd3
 800b374:	00200045 	.word	0x00200045
 800b378:	002000c5 	.word	0x002000c5
 800b37c:	fdffe008 	.word	0xfdffe008

0800b380 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b388:	4b1f      	ldr	r3, [pc, #124]	@ (800b408 <SDMMC_GetCmdResp2+0x88>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a1f      	ldr	r2, [pc, #124]	@ (800b40c <SDMMC_GetCmdResp2+0x8c>)
 800b38e:	fba2 2303 	umull	r2, r3, r2, r3
 800b392:	0a5b      	lsrs	r3, r3, #9
 800b394:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b398:	fb02 f303 	mul.w	r3, r2, r3
 800b39c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	1e5a      	subs	r2, r3, #1
 800b3a2:	60fa      	str	r2, [r7, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d102      	bne.n	800b3ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3ac:	e026      	b.n	800b3fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d0ef      	beq.n	800b39e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1ea      	bne.n	800b39e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d004      	beq.n	800b3de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2204      	movs	r2, #4
 800b3d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3da:	2304      	movs	r3, #4
 800b3dc:	e00e      	b.n	800b3fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3e2:	f003 0301 	and.w	r3, r3, #1
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d004      	beq.n	800b3f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e003      	b.n	800b3fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a06      	ldr	r2, [pc, #24]	@ (800b410 <SDMMC_GetCmdResp2+0x90>)
 800b3f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	20000008 	.word	0x20000008
 800b40c:	10624dd3 	.word	0x10624dd3
 800b410:	002000c5 	.word	0x002000c5

0800b414 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b41c:	4b1a      	ldr	r3, [pc, #104]	@ (800b488 <SDMMC_GetCmdResp3+0x74>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a1a      	ldr	r2, [pc, #104]	@ (800b48c <SDMMC_GetCmdResp3+0x78>)
 800b422:	fba2 2303 	umull	r2, r3, r2, r3
 800b426:	0a5b      	lsrs	r3, r3, #9
 800b428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b42c:	fb02 f303 	mul.w	r3, r2, r3
 800b430:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	1e5a      	subs	r2, r3, #1
 800b436:	60fa      	str	r2, [r7, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d102      	bne.n	800b442 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b43c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b440:	e01b      	b.n	800b47a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b446:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0ef      	beq.n	800b432 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1ea      	bne.n	800b432 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b460:	f003 0304 	and.w	r3, r3, #4
 800b464:	2b00      	cmp	r3, #0
 800b466:	d004      	beq.n	800b472 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2204      	movs	r2, #4
 800b46c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b46e:	2304      	movs	r3, #4
 800b470:	e003      	b.n	800b47a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a06      	ldr	r2, [pc, #24]	@ (800b490 <SDMMC_GetCmdResp3+0x7c>)
 800b476:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	20000008 	.word	0x20000008
 800b48c:	10624dd3 	.word	0x10624dd3
 800b490:	002000c5 	.word	0x002000c5

0800b494 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	460b      	mov	r3, r1
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4a2:	4b35      	ldr	r3, [pc, #212]	@ (800b578 <SDMMC_GetCmdResp6+0xe4>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a35      	ldr	r2, [pc, #212]	@ (800b57c <SDMMC_GetCmdResp6+0xe8>)
 800b4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ac:	0a5b      	lsrs	r3, r3, #9
 800b4ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4b2:	fb02 f303 	mul.w	r3, r2, r3
 800b4b6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	1e5a      	subs	r2, r3, #1
 800b4bc:	61fa      	str	r2, [r7, #28]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d102      	bne.n	800b4c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b4c6:	e052      	b.n	800b56e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d0ef      	beq.n	800b4b8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1ea      	bne.n	800b4b8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4e6:	f003 0304 	and.w	r3, r3, #4
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d004      	beq.n	800b4f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2204      	movs	r2, #4
 800b4f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4f4:	2304      	movs	r3, #4
 800b4f6:	e03a      	b.n	800b56e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d004      	beq.n	800b50e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2201      	movs	r2, #1
 800b508:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e02f      	b.n	800b56e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f7ff fadc 	bl	800aacc <SDMMC_GetCommandResponse>
 800b514:	4603      	mov	r3, r0
 800b516:	461a      	mov	r2, r3
 800b518:	7afb      	ldrb	r3, [r7, #11]
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d001      	beq.n	800b522 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b51e:	2301      	movs	r3, #1
 800b520:	e025      	b.n	800b56e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	4a16      	ldr	r2, [pc, #88]	@ (800b580 <SDMMC_GetCmdResp6+0xec>)
 800b526:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b528:	2100      	movs	r1, #0
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f7ff fadc 	bl	800aae8 <SDMMC_GetResponse>
 800b530:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d106      	bne.n	800b54a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	0c1b      	lsrs	r3, r3, #16
 800b540:	b29a      	uxth	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b546:	2300      	movs	r3, #0
 800b548:	e011      	b.n	800b56e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b558:	e009      	b.n	800b56e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b568:	e001      	b.n	800b56e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b56a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3720      	adds	r7, #32
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	20000008 	.word	0x20000008
 800b57c:	10624dd3 	.word	0x10624dd3
 800b580:	002000c5 	.word	0x002000c5

0800b584 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b58c:	4b22      	ldr	r3, [pc, #136]	@ (800b618 <SDMMC_GetCmdResp7+0x94>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a22      	ldr	r2, [pc, #136]	@ (800b61c <SDMMC_GetCmdResp7+0x98>)
 800b592:	fba2 2303 	umull	r2, r3, r2, r3
 800b596:	0a5b      	lsrs	r3, r3, #9
 800b598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b59c:	fb02 f303 	mul.w	r3, r2, r3
 800b5a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	1e5a      	subs	r2, r3, #1
 800b5a6:	60fa      	str	r2, [r7, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d102      	bne.n	800b5b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b5b0:	e02c      	b.n	800b60c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d0ef      	beq.n	800b5a2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1ea      	bne.n	800b5a2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5d0:	f003 0304 	and.w	r3, r3, #4
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d004      	beq.n	800b5e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2204      	movs	r2, #4
 800b5dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5de:	2304      	movs	r3, #4
 800b5e0:	e014      	b.n	800b60c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5e6:	f003 0301 	and.w	r3, r3, #1
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d004      	beq.n	800b5f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e009      	b.n	800b60c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2240      	movs	r2, #64	@ 0x40
 800b608:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b60a:	2300      	movs	r3, #0

}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	20000008 	.word	0x20000008
 800b61c:	10624dd3 	.word	0x10624dd3

0800b620 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b628:	4b11      	ldr	r3, [pc, #68]	@ (800b670 <SDMMC_GetCmdError+0x50>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a11      	ldr	r2, [pc, #68]	@ (800b674 <SDMMC_GetCmdError+0x54>)
 800b62e:	fba2 2303 	umull	r2, r3, r2, r3
 800b632:	0a5b      	lsrs	r3, r3, #9
 800b634:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b638:	fb02 f303 	mul.w	r3, r2, r3
 800b63c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	1e5a      	subs	r2, r3, #1
 800b642:	60fa      	str	r2, [r7, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d102      	bne.n	800b64e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b648:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b64c:	e009      	b.n	800b662 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0f1      	beq.n	800b63e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a06      	ldr	r2, [pc, #24]	@ (800b678 <SDMMC_GetCmdError+0x58>)
 800b65e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	20000008 	.word	0x20000008
 800b674:	10624dd3 	.word	0x10624dd3
 800b678:	002000c5 	.word	0x002000c5

0800b67c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	4a08      	ldr	r2, [pc, #32]	@ (800b6ac <disk_status+0x30>)
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	4413      	add	r3, r2
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	79fa      	ldrb	r2, [r7, #7]
 800b694:	4905      	ldr	r1, [pc, #20]	@ (800b6ac <disk_status+0x30>)
 800b696:	440a      	add	r2, r1
 800b698:	7a12      	ldrb	r2, [r2, #8]
 800b69a:	4610      	mov	r0, r2
 800b69c:	4798      	blx	r3
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	200000d4 	.word	0x200000d4

0800b6b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b6be:	79fb      	ldrb	r3, [r7, #7]
 800b6c0:	4a0d      	ldr	r2, [pc, #52]	@ (800b6f8 <disk_initialize+0x48>)
 800b6c2:	5cd3      	ldrb	r3, [r2, r3]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d111      	bne.n	800b6ec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b6c8:	79fb      	ldrb	r3, [r7, #7]
 800b6ca:	4a0b      	ldr	r2, [pc, #44]	@ (800b6f8 <disk_initialize+0x48>)
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b6d0:	79fb      	ldrb	r3, [r7, #7]
 800b6d2:	4a09      	ldr	r2, [pc, #36]	@ (800b6f8 <disk_initialize+0x48>)
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	79fa      	ldrb	r2, [r7, #7]
 800b6de:	4906      	ldr	r1, [pc, #24]	@ (800b6f8 <disk_initialize+0x48>)
 800b6e0:	440a      	add	r2, r1
 800b6e2:	7a12      	ldrb	r2, [r2, #8]
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	4798      	blx	r3
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	200000d4 	.word	0x200000d4

0800b6fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b6fc:	b590      	push	{r4, r7, lr}
 800b6fe:	b087      	sub	sp, #28
 800b700:	af00      	add	r7, sp, #0
 800b702:	60b9      	str	r1, [r7, #8]
 800b704:	607a      	str	r2, [r7, #4]
 800b706:	603b      	str	r3, [r7, #0]
 800b708:	4603      	mov	r3, r0
 800b70a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	4a0a      	ldr	r2, [pc, #40]	@ (800b738 <disk_read+0x3c>)
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	689c      	ldr	r4, [r3, #8]
 800b718:	7bfb      	ldrb	r3, [r7, #15]
 800b71a:	4a07      	ldr	r2, [pc, #28]	@ (800b738 <disk_read+0x3c>)
 800b71c:	4413      	add	r3, r2
 800b71e:	7a18      	ldrb	r0, [r3, #8]
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	68b9      	ldr	r1, [r7, #8]
 800b726:	47a0      	blx	r4
 800b728:	4603      	mov	r3, r0
 800b72a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	371c      	adds	r7, #28
 800b732:	46bd      	mov	sp, r7
 800b734:	bd90      	pop	{r4, r7, pc}
 800b736:	bf00      	nop
 800b738:	200000d4 	.word	0x200000d4

0800b73c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b73c:	b590      	push	{r4, r7, lr}
 800b73e:	b087      	sub	sp, #28
 800b740:	af00      	add	r7, sp, #0
 800b742:	60b9      	str	r1, [r7, #8]
 800b744:	607a      	str	r2, [r7, #4]
 800b746:	603b      	str	r3, [r7, #0]
 800b748:	4603      	mov	r3, r0
 800b74a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b74c:	7bfb      	ldrb	r3, [r7, #15]
 800b74e:	4a0a      	ldr	r2, [pc, #40]	@ (800b778 <disk_write+0x3c>)
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	68dc      	ldr	r4, [r3, #12]
 800b758:	7bfb      	ldrb	r3, [r7, #15]
 800b75a:	4a07      	ldr	r2, [pc, #28]	@ (800b778 <disk_write+0x3c>)
 800b75c:	4413      	add	r3, r2
 800b75e:	7a18      	ldrb	r0, [r3, #8]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	68b9      	ldr	r1, [r7, #8]
 800b766:	47a0      	blx	r4
 800b768:	4603      	mov	r3, r0
 800b76a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	bd90      	pop	{r4, r7, pc}
 800b776:	bf00      	nop
 800b778:	200000d4 	.word	0x200000d4

0800b77c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	603a      	str	r2, [r7, #0]
 800b786:	71fb      	strb	r3, [r7, #7]
 800b788:	460b      	mov	r3, r1
 800b78a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	4a09      	ldr	r2, [pc, #36]	@ (800b7b4 <disk_ioctl+0x38>)
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	4413      	add	r3, r2
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	79fa      	ldrb	r2, [r7, #7]
 800b79a:	4906      	ldr	r1, [pc, #24]	@ (800b7b4 <disk_ioctl+0x38>)
 800b79c:	440a      	add	r2, r1
 800b79e:	7a10      	ldrb	r0, [r2, #8]
 800b7a0:	79b9      	ldrb	r1, [r7, #6]
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	4798      	blx	r3
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	73fb      	strb	r3, [r7, #15]
  return res;
 800b7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	200000d4 	.word	0x200000d4

0800b7b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b7c8:	89fb      	ldrh	r3, [r7, #14]
 800b7ca:	021b      	lsls	r3, r3, #8
 800b7cc:	b21a      	sxth	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	b21b      	sxth	r3, r3
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	b21b      	sxth	r3, r3
 800b7d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b7da:	89fb      	ldrh	r3, [r7, #14]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3714      	adds	r7, #20
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	3303      	adds	r3, #3
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	3202      	adds	r2, #2
 800b800:	7812      	ldrb	r2, [r2, #0]
 800b802:	4313      	orrs	r3, r2
 800b804:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	021b      	lsls	r3, r3, #8
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	3201      	adds	r2, #1
 800b80e:	7812      	ldrb	r2, [r2, #0]
 800b810:	4313      	orrs	r3, r2
 800b812:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	021b      	lsls	r3, r3, #8
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	7812      	ldrb	r2, [r2, #0]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]
	return rv;
 800b820:	68fb      	ldr	r3, [r7, #12]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b82e:	b480      	push	{r7}
 800b830:	b083      	sub	sp, #12
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	460b      	mov	r3, r1
 800b838:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	887a      	ldrh	r2, [r7, #2]
 800b842:	b2d2      	uxtb	r2, r2
 800b844:	701a      	strb	r2, [r3, #0]
 800b846:	887b      	ldrh	r3, [r7, #2]
 800b848:	0a1b      	lsrs	r3, r3, #8
 800b84a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	1c5a      	adds	r2, r3, #1
 800b850:	607a      	str	r2, [r7, #4]
 800b852:	887a      	ldrh	r2, [r7, #2]
 800b854:	b2d2      	uxtb	r2, r2
 800b856:	701a      	strb	r2, [r3, #0]
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	1c5a      	adds	r2, r3, #1
 800b872:	607a      	str	r2, [r7, #4]
 800b874:	683a      	ldr	r2, [r7, #0]
 800b876:	b2d2      	uxtb	r2, r2
 800b878:	701a      	strb	r2, [r3, #0]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	0a1b      	lsrs	r3, r3, #8
 800b87e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	607a      	str	r2, [r7, #4]
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	b2d2      	uxtb	r2, r2
 800b88a:	701a      	strb	r2, [r3, #0]
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	0a1b      	lsrs	r3, r3, #8
 800b890:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	1c5a      	adds	r2, r3, #1
 800b896:	607a      	str	r2, [r7, #4]
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	b2d2      	uxtb	r2, r2
 800b89c:	701a      	strb	r2, [r3, #0]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	0a1b      	lsrs	r3, r3, #8
 800b8a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	1c5a      	adds	r2, r3, #1
 800b8a8:	607a      	str	r2, [r7, #4]
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	b2d2      	uxtb	r2, r2
 800b8ae:	701a      	strb	r2, [r3, #0]
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b8bc:	b480      	push	{r7}
 800b8be:	b087      	sub	sp, #28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00d      	beq.n	800b8f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	1c53      	adds	r3, r2, #1
 800b8da:	613b      	str	r3, [r7, #16]
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	1c59      	adds	r1, r3, #1
 800b8e0:	6179      	str	r1, [r7, #20]
 800b8e2:	7812      	ldrb	r2, [r2, #0]
 800b8e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	607b      	str	r3, [r7, #4]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1f1      	bne.n	800b8d6 <mem_cpy+0x1a>
	}
}
 800b8f2:	bf00      	nop
 800b8f4:	371c      	adds	r7, #28
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b8fe:	b480      	push	{r7}
 800b900:	b087      	sub	sp, #28
 800b902:	af00      	add	r7, sp, #0
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	60b9      	str	r1, [r7, #8]
 800b908:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	1c5a      	adds	r2, r3, #1
 800b912:	617a      	str	r2, [r7, #20]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	b2d2      	uxtb	r2, r2
 800b918:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	607b      	str	r3, [r7, #4]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1f3      	bne.n	800b90e <mem_set+0x10>
}
 800b926:	bf00      	nop
 800b928:	bf00      	nop
 800b92a:	371c      	adds	r7, #28
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b934:	b480      	push	{r7}
 800b936:	b089      	sub	sp, #36	@ 0x24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	61fb      	str	r3, [r7, #28]
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	1c5a      	adds	r2, r3, #1
 800b950:	61fa      	str	r2, [r7, #28]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	4619      	mov	r1, r3
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	1c5a      	adds	r2, r3, #1
 800b95a:	61ba      	str	r2, [r7, #24]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	1acb      	subs	r3, r1, r3
 800b960:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	3b01      	subs	r3, #1
 800b966:	607b      	str	r3, [r7, #4]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d002      	beq.n	800b974 <mem_cmp+0x40>
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d0eb      	beq.n	800b94c <mem_cmp+0x18>

	return r;
 800b974:	697b      	ldr	r3, [r7, #20]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3724      	adds	r7, #36	@ 0x24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b982:	b480      	push	{r7}
 800b984:	b083      	sub	sp, #12
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b98c:	e002      	b.n	800b994 <chk_chr+0x12>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	3301      	adds	r3, #1
 800b992:	607b      	str	r3, [r7, #4]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d005      	beq.n	800b9a8 <chk_chr+0x26>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d1f2      	bne.n	800b98e <chk_chr+0xc>
	return *str;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60bb      	str	r3, [r7, #8]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	60fb      	str	r3, [r7, #12]
 800b9ca:	e029      	b.n	800ba20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b9cc:	4a27      	ldr	r2, [pc, #156]	@ (800ba6c <chk_lock+0xb4>)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	011b      	lsls	r3, r3, #4
 800b9d2:	4413      	add	r3, r2
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d01d      	beq.n	800ba16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9da:	4a24      	ldr	r2, [pc, #144]	@ (800ba6c <chk_lock+0xb4>)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	011b      	lsls	r3, r3, #4
 800b9e0:	4413      	add	r3, r2
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d116      	bne.n	800ba1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b9ec:	4a1f      	ldr	r2, [pc, #124]	@ (800ba6c <chk_lock+0xb4>)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	011b      	lsls	r3, r3, #4
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d10c      	bne.n	800ba1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ba00:	4a1a      	ldr	r2, [pc, #104]	@ (800ba6c <chk_lock+0xb4>)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	011b      	lsls	r3, r3, #4
 800ba06:	4413      	add	r3, r2
 800ba08:	3308      	adds	r3, #8
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d102      	bne.n	800ba1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ba14:	e007      	b.n	800ba26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ba16:	2301      	movs	r3, #1
 800ba18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	60fb      	str	r3, [r7, #12]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d9d2      	bls.n	800b9cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d109      	bne.n	800ba40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d102      	bne.n	800ba38 <chk_lock+0x80>
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d101      	bne.n	800ba3c <chk_lock+0x84>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	e010      	b.n	800ba5e <chk_lock+0xa6>
 800ba3c:	2312      	movs	r3, #18
 800ba3e:	e00e      	b.n	800ba5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d108      	bne.n	800ba58 <chk_lock+0xa0>
 800ba46:	4a09      	ldr	r2, [pc, #36]	@ (800ba6c <chk_lock+0xb4>)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	011b      	lsls	r3, r3, #4
 800ba4c:	4413      	add	r3, r2
 800ba4e:	330c      	adds	r3, #12
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba56:	d101      	bne.n	800ba5c <chk_lock+0xa4>
 800ba58:	2310      	movs	r3, #16
 800ba5a:	e000      	b.n	800ba5e <chk_lock+0xa6>
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	200000b4 	.word	0x200000b4

0800ba70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba76:	2300      	movs	r3, #0
 800ba78:	607b      	str	r3, [r7, #4]
 800ba7a:	e002      	b.n	800ba82 <enq_lock+0x12>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	607b      	str	r3, [r7, #4]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d806      	bhi.n	800ba96 <enq_lock+0x26>
 800ba88:	4a09      	ldr	r2, [pc, #36]	@ (800bab0 <enq_lock+0x40>)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	011b      	lsls	r3, r3, #4
 800ba8e:	4413      	add	r3, r2
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1f2      	bne.n	800ba7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	bf14      	ite	ne
 800ba9c:	2301      	movne	r3, #1
 800ba9e:	2300      	moveq	r3, #0
 800baa0:	b2db      	uxtb	r3, r3
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	200000b4 	.word	0x200000b4

0800bab4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800babe:	2300      	movs	r3, #0
 800bac0:	60fb      	str	r3, [r7, #12]
 800bac2:	e01f      	b.n	800bb04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bac4:	4a41      	ldr	r2, [pc, #260]	@ (800bbcc <inc_lock+0x118>)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	4413      	add	r3, r2
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d113      	bne.n	800bafe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bad6:	4a3d      	ldr	r2, [pc, #244]	@ (800bbcc <inc_lock+0x118>)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	011b      	lsls	r3, r3, #4
 800badc:	4413      	add	r3, r2
 800bade:	3304      	adds	r3, #4
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d109      	bne.n	800bafe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800baea:	4a38      	ldr	r2, [pc, #224]	@ (800bbcc <inc_lock+0x118>)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	011b      	lsls	r3, r3, #4
 800baf0:	4413      	add	r3, r2
 800baf2:	3308      	adds	r3, #8
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d006      	beq.n	800bb0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3301      	adds	r3, #1
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d9dc      	bls.n	800bac4 <inc_lock+0x10>
 800bb0a:	e000      	b.n	800bb0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bb0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d132      	bne.n	800bb7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bb14:	2300      	movs	r3, #0
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	e002      	b.n	800bb20 <inc_lock+0x6c>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	60fb      	str	r3, [r7, #12]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d806      	bhi.n	800bb34 <inc_lock+0x80>
 800bb26:	4a29      	ldr	r2, [pc, #164]	@ (800bbcc <inc_lock+0x118>)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	011b      	lsls	r3, r3, #4
 800bb2c:	4413      	add	r3, r2
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d1f2      	bne.n	800bb1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d101      	bne.n	800bb3e <inc_lock+0x8a>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e040      	b.n	800bbc0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	4922      	ldr	r1, [pc, #136]	@ (800bbcc <inc_lock+0x118>)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	011b      	lsls	r3, r3, #4
 800bb48:	440b      	add	r3, r1
 800bb4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	689a      	ldr	r2, [r3, #8]
 800bb50:	491e      	ldr	r1, [pc, #120]	@ (800bbcc <inc_lock+0x118>)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	011b      	lsls	r3, r3, #4
 800bb56:	440b      	add	r3, r1
 800bb58:	3304      	adds	r3, #4
 800bb5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	695a      	ldr	r2, [r3, #20]
 800bb60:	491a      	ldr	r1, [pc, #104]	@ (800bbcc <inc_lock+0x118>)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	011b      	lsls	r3, r3, #4
 800bb66:	440b      	add	r3, r1
 800bb68:	3308      	adds	r3, #8
 800bb6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bb6c:	4a17      	ldr	r2, [pc, #92]	@ (800bbcc <inc_lock+0x118>)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	011b      	lsls	r3, r3, #4
 800bb72:	4413      	add	r3, r2
 800bb74:	330c      	adds	r3, #12
 800bb76:	2200      	movs	r2, #0
 800bb78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d009      	beq.n	800bb94 <inc_lock+0xe0>
 800bb80:	4a12      	ldr	r2, [pc, #72]	@ (800bbcc <inc_lock+0x118>)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	011b      	lsls	r3, r3, #4
 800bb86:	4413      	add	r3, r2
 800bb88:	330c      	adds	r3, #12
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <inc_lock+0xe0>
 800bb90:	2300      	movs	r3, #0
 800bb92:	e015      	b.n	800bbc0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d108      	bne.n	800bbac <inc_lock+0xf8>
 800bb9a:	4a0c      	ldr	r2, [pc, #48]	@ (800bbcc <inc_lock+0x118>)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	4413      	add	r3, r2
 800bba2:	330c      	adds	r3, #12
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	3301      	adds	r3, #1
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	e001      	b.n	800bbb0 <inc_lock+0xfc>
 800bbac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bbb0:	4906      	ldr	r1, [pc, #24]	@ (800bbcc <inc_lock+0x118>)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	011b      	lsls	r3, r3, #4
 800bbb6:	440b      	add	r3, r1
 800bbb8:	330c      	adds	r3, #12
 800bbba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3301      	adds	r3, #1
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	200000b4 	.word	0x200000b4

0800bbd0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	607b      	str	r3, [r7, #4]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d825      	bhi.n	800bc30 <dec_lock+0x60>
		n = Files[i].ctr;
 800bbe4:	4a17      	ldr	r2, [pc, #92]	@ (800bc44 <dec_lock+0x74>)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	011b      	lsls	r3, r3, #4
 800bbea:	4413      	add	r3, r2
 800bbec:	330c      	adds	r3, #12
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bbf2:	89fb      	ldrh	r3, [r7, #14]
 800bbf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbf8:	d101      	bne.n	800bbfe <dec_lock+0x2e>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bbfe:	89fb      	ldrh	r3, [r7, #14]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <dec_lock+0x3a>
 800bc04:	89fb      	ldrh	r3, [r7, #14]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bc0a:	4a0e      	ldr	r2, [pc, #56]	@ (800bc44 <dec_lock+0x74>)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	011b      	lsls	r3, r3, #4
 800bc10:	4413      	add	r3, r2
 800bc12:	330c      	adds	r3, #12
 800bc14:	89fa      	ldrh	r2, [r7, #14]
 800bc16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bc18:	89fb      	ldrh	r3, [r7, #14]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d105      	bne.n	800bc2a <dec_lock+0x5a>
 800bc1e:	4a09      	ldr	r2, [pc, #36]	@ (800bc44 <dec_lock+0x74>)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	011b      	lsls	r3, r3, #4
 800bc24:	4413      	add	r3, r2
 800bc26:	2200      	movs	r2, #0
 800bc28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	737b      	strb	r3, [r7, #13]
 800bc2e:	e001      	b.n	800bc34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bc30:	2302      	movs	r3, #2
 800bc32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bc34:	7b7b      	ldrb	r3, [r7, #13]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	200000b4 	.word	0x200000b4

0800bc48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bc50:	2300      	movs	r3, #0
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	e010      	b.n	800bc78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bc56:	4a0d      	ldr	r2, [pc, #52]	@ (800bc8c <clear_lock+0x44>)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	011b      	lsls	r3, r3, #4
 800bc5c:	4413      	add	r3, r2
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d105      	bne.n	800bc72 <clear_lock+0x2a>
 800bc66:	4a09      	ldr	r2, [pc, #36]	@ (800bc8c <clear_lock+0x44>)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	011b      	lsls	r3, r3, #4
 800bc6c:	4413      	add	r3, r2
 800bc6e:	2200      	movs	r2, #0
 800bc70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3301      	adds	r3, #1
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d9eb      	bls.n	800bc56 <clear_lock+0xe>
	}
}
 800bc7e:	bf00      	nop
 800bc80:	bf00      	nop
 800bc82:	3714      	adds	r7, #20
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	200000b4 	.word	0x200000b4

0800bc90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	78db      	ldrb	r3, [r3, #3]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d034      	beq.n	800bd0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	7858      	ldrb	r0, [r3, #1]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	697a      	ldr	r2, [r7, #20]
 800bcb8:	f7ff fd40 	bl	800b73c <disk_write>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	73fb      	strb	r3, [r7, #15]
 800bcc6:	e022      	b.n	800bd0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	1ad2      	subs	r2, r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d217      	bcs.n	800bd0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	789b      	ldrb	r3, [r3, #2]
 800bce2:	613b      	str	r3, [r7, #16]
 800bce4:	e010      	b.n	800bd08 <sync_window+0x78>
					wsect += fs->fsize;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	69db      	ldr	r3, [r3, #28]
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	4413      	add	r3, r2
 800bcee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	7858      	ldrb	r0, [r3, #1]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	f7ff fd1d 	bl	800b73c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	613b      	str	r3, [r7, #16]
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d8eb      	bhi.n	800bce6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d01b      	beq.n	800bd68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7ff ffad 	bl	800bc90 <sync_window>
 800bd36:	4603      	mov	r3, r0
 800bd38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d113      	bne.n	800bd68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	7858      	ldrb	r0, [r3, #1]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	f7ff fcd5 	bl	800b6fc <disk_read>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d004      	beq.n	800bd62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bd58:	f04f 33ff 	mov.w	r3, #4294967295
 800bd5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7ff ff87 	bl	800bc90 <sync_window>
 800bd82:	4603      	mov	r3, r0
 800bd84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d158      	bne.n	800be3e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d148      	bne.n	800be26 <sync_fs+0xb2>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	791b      	ldrb	r3, [r3, #4]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d144      	bne.n	800be26 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3334      	adds	r3, #52	@ 0x34
 800bda0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bda4:	2100      	movs	r1, #0
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff fda9 	bl	800b8fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	3334      	adds	r3, #52	@ 0x34
 800bdb0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bdb4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fd38 	bl	800b82e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	3334      	adds	r3, #52	@ 0x34
 800bdc2:	4921      	ldr	r1, [pc, #132]	@ (800be48 <sync_fs+0xd4>)
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff fd4d 	bl	800b864 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	3334      	adds	r3, #52	@ 0x34
 800bdce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bdd2:	491e      	ldr	r1, [pc, #120]	@ (800be4c <sync_fs+0xd8>)
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7ff fd45 	bl	800b864 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	3334      	adds	r3, #52	@ 0x34
 800bdde:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	4619      	mov	r1, r3
 800bde8:	4610      	mov	r0, r2
 800bdea:	f7ff fd3b 	bl	800b864 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	3334      	adds	r3, #52	@ 0x34
 800bdf2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	f7ff fd31 	bl	800b864 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a1b      	ldr	r3, [r3, #32]
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	7858      	ldrb	r0, [r3, #1]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be1a:	2301      	movs	r3, #1
 800be1c:	f7ff fc8e 	bl	800b73c <disk_write>
			fs->fsi_flag = 0;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	785b      	ldrb	r3, [r3, #1]
 800be2a:	2200      	movs	r2, #0
 800be2c:	2100      	movs	r1, #0
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff fca4 	bl	800b77c <disk_ioctl>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <sync_fs+0xca>
 800be3a:	2301      	movs	r3, #1
 800be3c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800be3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3710      	adds	r7, #16
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	41615252 	.word	0x41615252
 800be4c:	61417272 	.word	0x61417272

0800be50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	3b02      	subs	r3, #2
 800be5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	3b02      	subs	r3, #2
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d301      	bcc.n	800be70 <clust2sect+0x20>
 800be6c:	2300      	movs	r3, #0
 800be6e:	e008      	b.n	800be82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	895b      	ldrh	r3, [r3, #10]
 800be74:	461a      	mov	r2, r3
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	fb03 f202 	mul.w	r2, r3, r2
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be80:	4413      	add	r3, r2
}
 800be82:	4618      	mov	r0, r3
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b086      	sub	sp, #24
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d904      	bls.n	800beae <get_fat+0x20>
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d302      	bcc.n	800beb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800beae:	2301      	movs	r3, #1
 800beb0:	617b      	str	r3, [r7, #20]
 800beb2:	e08e      	b.n	800bfd2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800beb4:	f04f 33ff 	mov.w	r3, #4294967295
 800beb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d061      	beq.n	800bf86 <get_fat+0xf8>
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	dc7b      	bgt.n	800bfbe <get_fat+0x130>
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d002      	beq.n	800bed0 <get_fat+0x42>
 800beca:	2b02      	cmp	r3, #2
 800becc:	d041      	beq.n	800bf52 <get_fat+0xc4>
 800bece:	e076      	b.n	800bfbe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	60fb      	str	r3, [r7, #12]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	085b      	lsrs	r3, r3, #1
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4413      	add	r3, r2
 800bedc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	0a5b      	lsrs	r3, r3, #9
 800bee6:	4413      	add	r3, r2
 800bee8:	4619      	mov	r1, r3
 800beea:	6938      	ldr	r0, [r7, #16]
 800beec:	f7ff ff14 	bl	800bd18 <move_window>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d166      	bne.n	800bfc4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	1c5a      	adds	r2, r3, #1
 800befa:	60fa      	str	r2, [r7, #12]
 800befc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	4413      	add	r3, r2
 800bf04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bf08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	0a5b      	lsrs	r3, r3, #9
 800bf12:	4413      	add	r3, r2
 800bf14:	4619      	mov	r1, r3
 800bf16:	6938      	ldr	r0, [r7, #16]
 800bf18:	f7ff fefe 	bl	800bd18 <move_window>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d152      	bne.n	800bfc8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bf30:	021b      	lsls	r3, r3, #8
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <get_fat+0xba>
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	091b      	lsrs	r3, r3, #4
 800bf46:	e002      	b.n	800bf4e <get_fat+0xc0>
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf4e:	617b      	str	r3, [r7, #20]
			break;
 800bf50:	e03f      	b.n	800bfd2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	0a1b      	lsrs	r3, r3, #8
 800bf5a:	4413      	add	r3, r2
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6938      	ldr	r0, [r7, #16]
 800bf60:	f7ff feda 	bl	800bd18 <move_window>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d130      	bne.n	800bfcc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bf78:	4413      	add	r3, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7ff fc1c 	bl	800b7b8 <ld_word>
 800bf80:	4603      	mov	r3, r0
 800bf82:	617b      	str	r3, [r7, #20]
			break;
 800bf84:	e025      	b.n	800bfd2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	09db      	lsrs	r3, r3, #7
 800bf8e:	4413      	add	r3, r2
 800bf90:	4619      	mov	r1, r3
 800bf92:	6938      	ldr	r0, [r7, #16]
 800bf94:	f7ff fec0 	bl	800bd18 <move_window>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d118      	bne.n	800bfd0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bfac:	4413      	add	r3, r2
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff fc1a 	bl	800b7e8 <ld_dword>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bfba:	617b      	str	r3, [r7, #20]
			break;
 800bfbc:	e009      	b.n	800bfd2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	617b      	str	r3, [r7, #20]
 800bfc2:	e006      	b.n	800bfd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfc4:	bf00      	nop
 800bfc6:	e004      	b.n	800bfd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfc8:	bf00      	nop
 800bfca:	e002      	b.n	800bfd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bfcc:	bf00      	nop
 800bfce:	e000      	b.n	800bfd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bfd0:	bf00      	nop
		}
	}

	return val;
 800bfd2:	697b      	ldr	r3, [r7, #20]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bfdc:	b590      	push	{r4, r7, lr}
 800bfde:	b089      	sub	sp, #36	@ 0x24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bfe8:	2302      	movs	r3, #2
 800bfea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	f240 80d9 	bls.w	800c1a6 <put_fat+0x1ca>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	f080 80d3 	bcs.w	800c1a6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b03      	cmp	r3, #3
 800c006:	f000 8096 	beq.w	800c136 <put_fat+0x15a>
 800c00a:	2b03      	cmp	r3, #3
 800c00c:	f300 80cb 	bgt.w	800c1a6 <put_fat+0x1ca>
 800c010:	2b01      	cmp	r3, #1
 800c012:	d002      	beq.n	800c01a <put_fat+0x3e>
 800c014:	2b02      	cmp	r3, #2
 800c016:	d06e      	beq.n	800c0f6 <put_fat+0x11a>
 800c018:	e0c5      	b.n	800c1a6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	61bb      	str	r3, [r7, #24]
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	085b      	lsrs	r3, r3, #1
 800c022:	69ba      	ldr	r2, [r7, #24]
 800c024:	4413      	add	r3, r2
 800c026:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	0a5b      	lsrs	r3, r3, #9
 800c030:	4413      	add	r3, r2
 800c032:	4619      	mov	r1, r3
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff fe6f 	bl	800bd18 <move_window>
 800c03a:	4603      	mov	r3, r0
 800c03c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c03e:	7ffb      	ldrb	r3, [r7, #31]
 800c040:	2b00      	cmp	r3, #0
 800c042:	f040 80a9 	bne.w	800c198 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	1c59      	adds	r1, r3, #1
 800c050:	61b9      	str	r1, [r7, #24]
 800c052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c056:	4413      	add	r3, r2
 800c058:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00d      	beq.n	800c080 <put_fat+0xa4>
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	b25b      	sxtb	r3, r3
 800c06a:	f003 030f 	and.w	r3, r3, #15
 800c06e:	b25a      	sxtb	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	b2db      	uxtb	r3, r3
 800c074:	011b      	lsls	r3, r3, #4
 800c076:	b25b      	sxtb	r3, r3
 800c078:	4313      	orrs	r3, r2
 800c07a:	b25b      	sxtb	r3, r3
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	e001      	b.n	800c084 <put_fat+0xa8>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	b2db      	uxtb	r3, r3
 800c084:	697a      	ldr	r2, [r7, #20]
 800c086:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2201      	movs	r2, #1
 800c08c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	0a5b      	lsrs	r3, r3, #9
 800c096:	4413      	add	r3, r2
 800c098:	4619      	mov	r1, r3
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f7ff fe3c 	bl	800bd18 <move_window>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0a4:	7ffb      	ldrb	r3, [r7, #31]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d178      	bne.n	800c19c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b6:	4413      	add	r3, r2
 800c0b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d003      	beq.n	800c0cc <put_fat+0xf0>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	091b      	lsrs	r3, r3, #4
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	e00e      	b.n	800c0ea <put_fat+0x10e>
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	b25b      	sxtb	r3, r3
 800c0d2:	f023 030f 	bic.w	r3, r3, #15
 800c0d6:	b25a      	sxtb	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	0a1b      	lsrs	r3, r3, #8
 800c0dc:	b25b      	sxtb	r3, r3
 800c0de:	f003 030f 	and.w	r3, r3, #15
 800c0e2:	b25b      	sxtb	r3, r3
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	b25b      	sxtb	r3, r3
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	697a      	ldr	r2, [r7, #20]
 800c0ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	70da      	strb	r2, [r3, #3]
			break;
 800c0f4:	e057      	b.n	800c1a6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	0a1b      	lsrs	r3, r3, #8
 800c0fe:	4413      	add	r3, r2
 800c100:	4619      	mov	r1, r3
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f7ff fe08 	bl	800bd18 <move_window>
 800c108:	4603      	mov	r3, r0
 800c10a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c10c:	7ffb      	ldrb	r3, [r7, #31]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d146      	bne.n	800c1a0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	005b      	lsls	r3, r3, #1
 800c11c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c120:	4413      	add	r3, r2
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	b292      	uxth	r2, r2
 800c126:	4611      	mov	r1, r2
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff fb80 	bl	800b82e <st_word>
			fs->wflag = 1;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2201      	movs	r2, #1
 800c132:	70da      	strb	r2, [r3, #3]
			break;
 800c134:	e037      	b.n	800c1a6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	09db      	lsrs	r3, r3, #7
 800c13e:	4413      	add	r3, r2
 800c140:	4619      	mov	r1, r3
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f7ff fde8 	bl	800bd18 <move_window>
 800c148:	4603      	mov	r3, r0
 800c14a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c14c:	7ffb      	ldrb	r3, [r7, #31]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d128      	bne.n	800c1a4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c166:	4413      	add	r3, r2
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff fb3d 	bl	800b7e8 <ld_dword>
 800c16e:	4603      	mov	r3, r0
 800c170:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c174:	4323      	orrs	r3, r4
 800c176:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c186:	4413      	add	r3, r2
 800c188:	6879      	ldr	r1, [r7, #4]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7ff fb6a 	bl	800b864 <st_dword>
			fs->wflag = 1;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	70da      	strb	r2, [r3, #3]
			break;
 800c196:	e006      	b.n	800c1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c198:	bf00      	nop
 800c19a:	e004      	b.n	800c1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c19c:	bf00      	nop
 800c19e:	e002      	b.n	800c1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c1a0:	bf00      	nop
 800c1a2:	e000      	b.n	800c1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c1a4:	bf00      	nop
		}
	}
	return res;
 800c1a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3724      	adds	r7, #36	@ 0x24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd90      	pop	{r4, r7, pc}

0800c1b0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d904      	bls.n	800c1d6 <remove_chain+0x26>
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d301      	bcc.n	800c1da <remove_chain+0x2a>
 800c1d6:	2302      	movs	r3, #2
 800c1d8:	e04b      	b.n	800c272 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00c      	beq.n	800c1fa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	69b8      	ldr	r0, [r7, #24]
 800c1e8:	f7ff fef8 	bl	800bfdc <put_fat>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c1f0:	7ffb      	ldrb	r3, [r7, #31]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <remove_chain+0x4a>
 800c1f6:	7ffb      	ldrb	r3, [r7, #31]
 800c1f8:	e03b      	b.n	800c272 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c1fa:	68b9      	ldr	r1, [r7, #8]
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f7ff fe46 	bl	800be8e <get_fat>
 800c202:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d031      	beq.n	800c26e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d101      	bne.n	800c214 <remove_chain+0x64>
 800c210:	2302      	movs	r3, #2
 800c212:	e02e      	b.n	800c272 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21a:	d101      	bne.n	800c220 <remove_chain+0x70>
 800c21c:	2301      	movs	r3, #1
 800c21e:	e028      	b.n	800c272 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c220:	2200      	movs	r2, #0
 800c222:	68b9      	ldr	r1, [r7, #8]
 800c224:	69b8      	ldr	r0, [r7, #24]
 800c226:	f7ff fed9 	bl	800bfdc <put_fat>
 800c22a:	4603      	mov	r3, r0
 800c22c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c22e:	7ffb      	ldrb	r3, [r7, #31]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d001      	beq.n	800c238 <remove_chain+0x88>
 800c234:	7ffb      	ldrb	r3, [r7, #31]
 800c236:	e01c      	b.n	800c272 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	695a      	ldr	r2, [r3, #20]
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	3b02      	subs	r3, #2
 800c242:	429a      	cmp	r2, r3
 800c244:	d20b      	bcs.n	800c25e <remove_chain+0xae>
			fs->free_clst++;
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	695b      	ldr	r3, [r3, #20]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	791b      	ldrb	r3, [r3, #4]
 800c254:	f043 0301 	orr.w	r3, r3, #1
 800c258:	b2da      	uxtb	r2, r3
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d3c6      	bcc.n	800c1fa <remove_chain+0x4a>
 800c26c:	e000      	b.n	800c270 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c26e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3720      	adds	r7, #32
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b088      	sub	sp, #32
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10d      	bne.n	800c2ac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d004      	beq.n	800c2a6 <create_chain+0x2c>
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	69ba      	ldr	r2, [r7, #24]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d31b      	bcc.n	800c2de <create_chain+0x64>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	61bb      	str	r3, [r7, #24]
 800c2aa:	e018      	b.n	800c2de <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff fded 	bl	800be8e <get_fat>
 800c2b4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d801      	bhi.n	800c2c0 <create_chain+0x46>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e070      	b.n	800c3a2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c6:	d101      	bne.n	800c2cc <create_chain+0x52>
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	e06a      	b.n	800c3a2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d201      	bcs.n	800c2da <create_chain+0x60>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	e063      	b.n	800c3a2 <create_chain+0x128>
		scl = clst;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	699b      	ldr	r3, [r3, #24]
 800c2ec:	69fa      	ldr	r2, [r7, #28]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d307      	bcc.n	800c302 <create_chain+0x88>
				ncl = 2;
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c2f6:	69fa      	ldr	r2, [r7, #28]
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d901      	bls.n	800c302 <create_chain+0x88>
 800c2fe:	2300      	movs	r3, #0
 800c300:	e04f      	b.n	800c3a2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c302:	69f9      	ldr	r1, [r7, #28]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff fdc2 	bl	800be8e <get_fat>
 800c30a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00e      	beq.n	800c330 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2b01      	cmp	r3, #1
 800c316:	d003      	beq.n	800c320 <create_chain+0xa6>
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31e:	d101      	bne.n	800c324 <create_chain+0xaa>
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	e03e      	b.n	800c3a2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c324:	69fa      	ldr	r2, [r7, #28]
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d1da      	bne.n	800c2e2 <create_chain+0x68>
 800c32c:	2300      	movs	r3, #0
 800c32e:	e038      	b.n	800c3a2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c330:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c332:	f04f 32ff 	mov.w	r2, #4294967295
 800c336:	69f9      	ldr	r1, [r7, #28]
 800c338:	6938      	ldr	r0, [r7, #16]
 800c33a:	f7ff fe4f 	bl	800bfdc <put_fat>
 800c33e:	4603      	mov	r3, r0
 800c340:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c342:	7dfb      	ldrb	r3, [r7, #23]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d109      	bne.n	800c35c <create_chain+0xe2>
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d006      	beq.n	800c35c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c34e:	69fa      	ldr	r2, [r7, #28]
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6938      	ldr	r0, [r7, #16]
 800c354:	f7ff fe42 	bl	800bfdc <put_fat>
 800c358:	4603      	mov	r3, r0
 800c35a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c35c:	7dfb      	ldrb	r3, [r7, #23]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d116      	bne.n	800c390 <create_chain+0x116>
		fs->last_clst = ncl;
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	69fa      	ldr	r2, [r7, #28]
 800c366:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	695a      	ldr	r2, [r3, #20]
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	699b      	ldr	r3, [r3, #24]
 800c370:	3b02      	subs	r3, #2
 800c372:	429a      	cmp	r2, r3
 800c374:	d804      	bhi.n	800c380 <create_chain+0x106>
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	1e5a      	subs	r2, r3, #1
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	791b      	ldrb	r3, [r3, #4]
 800c384:	f043 0301 	orr.w	r3, r3, #1
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	711a      	strb	r2, [r3, #4]
 800c38e:	e007      	b.n	800c3a0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c390:	7dfb      	ldrb	r3, [r7, #23]
 800c392:	2b01      	cmp	r3, #1
 800c394:	d102      	bne.n	800c39c <create_chain+0x122>
 800c396:	f04f 33ff 	mov.w	r3, #4294967295
 800c39a:	e000      	b.n	800c39e <create_chain+0x124>
 800c39c:	2301      	movs	r3, #1
 800c39e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c3a0:	69fb      	ldr	r3, [r7, #28]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3720      	adds	r7, #32
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c3aa:	b480      	push	{r7}
 800c3ac:	b087      	sub	sp, #28
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3be:	3304      	adds	r3, #4
 800c3c0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	0a5b      	lsrs	r3, r3, #9
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	8952      	ldrh	r2, [r2, #10]
 800c3ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	1d1a      	adds	r2, r3, #4
 800c3d4:	613a      	str	r2, [r7, #16]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d101      	bne.n	800c3e4 <clmt_clust+0x3a>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e010      	b.n	800c406 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d307      	bcc.n	800c3fc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	617b      	str	r3, [r7, #20]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	3304      	adds	r3, #4
 800c3f8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3fa:	e7e9      	b.n	800c3d0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c3fc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	4413      	add	r3, r2
}
 800c406:	4618      	mov	r0, r3
 800c408:	371c      	adds	r7, #28
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b086      	sub	sp, #24
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c428:	d204      	bcs.n	800c434 <dir_sdi+0x22>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	f003 031f 	and.w	r3, r3, #31
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c434:	2302      	movs	r3, #2
 800c436:	e063      	b.n	800c500 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	683a      	ldr	r2, [r7, #0]
 800c43c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d106      	bne.n	800c458 <dir_sdi+0x46>
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d902      	bls.n	800c458 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c456:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10c      	bne.n	800c478 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	095b      	lsrs	r3, r3, #5
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	8912      	ldrh	r2, [r2, #8]
 800c466:	4293      	cmp	r3, r2
 800c468:	d301      	bcc.n	800c46e <dir_sdi+0x5c>
 800c46a:	2302      	movs	r3, #2
 800c46c:	e048      	b.n	800c500 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	61da      	str	r2, [r3, #28]
 800c476:	e029      	b.n	800c4cc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	895b      	ldrh	r3, [r3, #10]
 800c47c:	025b      	lsls	r3, r3, #9
 800c47e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c480:	e019      	b.n	800c4b6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6979      	ldr	r1, [r7, #20]
 800c486:	4618      	mov	r0, r3
 800c488:	f7ff fd01 	bl	800be8e <get_fat>
 800c48c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c494:	d101      	bne.n	800c49a <dir_sdi+0x88>
 800c496:	2301      	movs	r3, #1
 800c498:	e032      	b.n	800c500 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d904      	bls.n	800c4aa <dir_sdi+0x98>
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	699b      	ldr	r3, [r3, #24]
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d301      	bcc.n	800c4ae <dir_sdi+0x9c>
 800c4aa:	2302      	movs	r3, #2
 800c4ac:	e028      	b.n	800c500 <dir_sdi+0xee>
			ofs -= csz;
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d2e1      	bcs.n	800c482 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c4be:	6979      	ldr	r1, [r7, #20]
 800c4c0:	6938      	ldr	r0, [r7, #16]
 800c4c2:	f7ff fcc5 	bl	800be50 <clust2sect>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	69db      	ldr	r3, [r3, #28]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <dir_sdi+0xcc>
 800c4da:	2302      	movs	r3, #2
 800c4dc:	e010      	b.n	800c500 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	69da      	ldr	r2, [r3, #28]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	0a5b      	lsrs	r3, r3, #9
 800c4e6:	441a      	add	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f8:	441a      	add	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	695b      	ldr	r3, [r3, #20]
 800c51c:	3320      	adds	r3, #32
 800c51e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d003      	beq.n	800c530 <dir_next+0x28>
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c52e:	d301      	bcc.n	800c534 <dir_next+0x2c>
 800c530:	2304      	movs	r3, #4
 800c532:	e0aa      	b.n	800c68a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f040 8098 	bne.w	800c670 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	69db      	ldr	r3, [r3, #28]
 800c544:	1c5a      	adds	r2, r3, #1
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10b      	bne.n	800c56a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	095b      	lsrs	r3, r3, #5
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	8912      	ldrh	r2, [r2, #8]
 800c55a:	4293      	cmp	r3, r2
 800c55c:	f0c0 8088 	bcc.w	800c670 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	61da      	str	r2, [r3, #28]
 800c566:	2304      	movs	r3, #4
 800c568:	e08f      	b.n	800c68a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	0a5b      	lsrs	r3, r3, #9
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	8952      	ldrh	r2, [r2, #10]
 800c572:	3a01      	subs	r2, #1
 800c574:	4013      	ands	r3, r2
 800c576:	2b00      	cmp	r3, #0
 800c578:	d17a      	bne.n	800c670 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	4619      	mov	r1, r3
 800c582:	4610      	mov	r0, r2
 800c584:	f7ff fc83 	bl	800be8e <get_fat>
 800c588:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d801      	bhi.n	800c594 <dir_next+0x8c>
 800c590:	2302      	movs	r3, #2
 800c592:	e07a      	b.n	800c68a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59a:	d101      	bne.n	800c5a0 <dir_next+0x98>
 800c59c:	2301      	movs	r3, #1
 800c59e:	e074      	b.n	800c68a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	699b      	ldr	r3, [r3, #24]
 800c5a4:	697a      	ldr	r2, [r7, #20]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d358      	bcc.n	800c65c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d104      	bne.n	800c5ba <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	61da      	str	r2, [r3, #28]
 800c5b6:	2304      	movs	r3, #4
 800c5b8:	e067      	b.n	800c68a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	4610      	mov	r0, r2
 800c5c4:	f7ff fe59 	bl	800c27a <create_chain>
 800c5c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <dir_next+0xcc>
 800c5d0:	2307      	movs	r3, #7
 800c5d2:	e05a      	b.n	800c68a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d101      	bne.n	800c5de <dir_next+0xd6>
 800c5da:	2302      	movs	r3, #2
 800c5dc:	e055      	b.n	800c68a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e4:	d101      	bne.n	800c5ea <dir_next+0xe2>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e04f      	b.n	800c68a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f7ff fb50 	bl	800bc90 <sync_window>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <dir_next+0xf2>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e047      	b.n	800c68a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3334      	adds	r3, #52	@ 0x34
 800c5fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c602:	2100      	movs	r1, #0
 800c604:	4618      	mov	r0, r3
 800c606:	f7ff f97a 	bl	800b8fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c60a:	2300      	movs	r3, #0
 800c60c:	613b      	str	r3, [r7, #16]
 800c60e:	6979      	ldr	r1, [r7, #20]
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f7ff fc1d 	bl	800be50 <clust2sect>
 800c616:	4602      	mov	r2, r0
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	631a      	str	r2, [r3, #48]	@ 0x30
 800c61c:	e012      	b.n	800c644 <dir_next+0x13c>
						fs->wflag = 1;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2201      	movs	r2, #1
 800c622:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f7ff fb33 	bl	800bc90 <sync_window>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <dir_next+0x12c>
 800c630:	2301      	movs	r3, #1
 800c632:	e02a      	b.n	800c68a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	3301      	adds	r3, #1
 800c638:	613b      	str	r3, [r7, #16]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	631a      	str	r2, [r3, #48]	@ 0x30
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	895b      	ldrh	r3, [r3, #10]
 800c648:	461a      	mov	r2, r3
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d3e6      	bcc.n	800c61e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	1ad2      	subs	r2, r2, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c662:	6979      	ldr	r1, [r7, #20]
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f7ff fbf3 	bl	800be50 <clust2sect>
 800c66a:	4602      	mov	r2, r0
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c682:	441a      	add	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3718      	adds	r7, #24
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c692:	b580      	push	{r7, lr}
 800c694:	b086      	sub	sp, #24
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7ff feb4 	bl	800c412 <dir_sdi>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c6ae:	7dfb      	ldrb	r3, [r7, #23]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d12b      	bne.n	800c70c <dir_alloc+0x7a>
		n = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	69db      	ldr	r3, [r3, #28]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7ff fb2a 	bl	800bd18 <move_window>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d11d      	bne.n	800c70a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	2be5      	cmp	r3, #229	@ 0xe5
 800c6d6:	d004      	beq.n	800c6e2 <dir_alloc+0x50>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a1b      	ldr	r3, [r3, #32]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d107      	bne.n	800c6f2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	613b      	str	r3, [r7, #16]
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d102      	bne.n	800c6f6 <dir_alloc+0x64>
 800c6f0:	e00c      	b.n	800c70c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c6f6:	2101      	movs	r1, #1
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7ff ff05 	bl	800c508 <dir_next>
 800c6fe:	4603      	mov	r3, r0
 800c700:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c702:	7dfb      	ldrb	r3, [r7, #23]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d0d7      	beq.n	800c6b8 <dir_alloc+0x26>
 800c708:	e000      	b.n	800c70c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c70a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c70c:	7dfb      	ldrb	r3, [r7, #23]
 800c70e:	2b04      	cmp	r3, #4
 800c710:	d101      	bne.n	800c716 <dir_alloc+0x84>
 800c712:	2307      	movs	r3, #7
 800c714:	75fb      	strb	r3, [r7, #23]
	return res;
 800c716:	7dfb      	ldrb	r3, [r7, #23]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3718      	adds	r7, #24
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	331a      	adds	r3, #26
 800c72e:	4618      	mov	r0, r3
 800c730:	f7ff f842 	bl	800b7b8 <ld_word>
 800c734:	4603      	mov	r3, r0
 800c736:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b03      	cmp	r3, #3
 800c73e:	d109      	bne.n	800c754 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	3314      	adds	r3, #20
 800c744:	4618      	mov	r0, r3
 800c746:	f7ff f837 	bl	800b7b8 <ld_word>
 800c74a:	4603      	mov	r3, r0
 800c74c:	041b      	lsls	r3, r3, #16
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	4313      	orrs	r3, r2
 800c752:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c754:	68fb      	ldr	r3, [r7, #12]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	60f8      	str	r0, [r7, #12]
 800c766:	60b9      	str	r1, [r7, #8]
 800c768:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	331a      	adds	r3, #26
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	b292      	uxth	r2, r2
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f7ff f85a 	bl	800b82e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	2b03      	cmp	r3, #3
 800c780:	d109      	bne.n	800c796 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	f103 0214 	add.w	r2, r3, #20
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	0c1b      	lsrs	r3, r3, #16
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	4619      	mov	r1, r3
 800c790:	4610      	mov	r0, r2
 800c792:	f7ff f84c 	bl	800b82e <st_word>
	}
}
 800c796:	bf00      	nop
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
	...

0800c7a0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c7a0:	b590      	push	{r4, r7, lr}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	331a      	adds	r3, #26
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7ff f802 	bl	800b7b8 <ld_word>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <cmp_lfn+0x1e>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e059      	b.n	800c872 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7c6:	1e5a      	subs	r2, r3, #1
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	005b      	lsls	r3, r3, #1
 800c7cc:	4413      	add	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	81fb      	strh	r3, [r7, #14]
 800c7d8:	2300      	movs	r3, #0
 800c7da:	613b      	str	r3, [r7, #16]
 800c7dc:	e033      	b.n	800c846 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c7de:	4a27      	ldr	r2, [pc, #156]	@ (800c87c <cmp_lfn+0xdc>)
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fe ffe3 	bl	800b7b8 <ld_word>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c7f6:	89fb      	ldrh	r3, [r7, #14]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d01a      	beq.n	800c832 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	2bfe      	cmp	r3, #254	@ 0xfe
 800c800:	d812      	bhi.n	800c828 <cmp_lfn+0x88>
 800c802:	89bb      	ldrh	r3, [r7, #12]
 800c804:	4618      	mov	r0, r3
 800c806:	f001 fdff 	bl	800e408 <ff_wtoupper>
 800c80a:	4603      	mov	r3, r0
 800c80c:	461c      	mov	r4, r3
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	617a      	str	r2, [r7, #20]
 800c814:	005b      	lsls	r3, r3, #1
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	4413      	add	r3, r2
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f001 fdf3 	bl	800e408 <ff_wtoupper>
 800c822:	4603      	mov	r3, r0
 800c824:	429c      	cmp	r4, r3
 800c826:	d001      	beq.n	800c82c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c828:	2300      	movs	r3, #0
 800c82a:	e022      	b.n	800c872 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c82c:	89bb      	ldrh	r3, [r7, #12]
 800c82e:	81fb      	strh	r3, [r7, #14]
 800c830:	e006      	b.n	800c840 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c832:	89bb      	ldrh	r3, [r7, #12]
 800c834:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c838:	4293      	cmp	r3, r2
 800c83a:	d001      	beq.n	800c840 <cmp_lfn+0xa0>
 800c83c:	2300      	movs	r3, #0
 800c83e:	e018      	b.n	800c872 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	3301      	adds	r3, #1
 800c844:	613b      	str	r3, [r7, #16]
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	2b0c      	cmp	r3, #12
 800c84a:	d9c8      	bls.n	800c7de <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00b      	beq.n	800c870 <cmp_lfn+0xd0>
 800c858:	89fb      	ldrh	r3, [r7, #14]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d008      	beq.n	800c870 <cmp_lfn+0xd0>
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	4413      	add	r3, r2
 800c866:	881b      	ldrh	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <cmp_lfn+0xd0>
 800c86c:	2300      	movs	r3, #0
 800c86e:	e000      	b.n	800c872 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c870:	2301      	movs	r3, #1
}
 800c872:	4618      	mov	r0, r3
 800c874:	371c      	adds	r7, #28
 800c876:	46bd      	mov	sp, r7
 800c878:	bd90      	pop	{r4, r7, pc}
 800c87a:	bf00      	nop
 800c87c:	08011524 	.word	0x08011524

0800c880 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b088      	sub	sp, #32
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	4611      	mov	r1, r2
 800c88c:	461a      	mov	r2, r3
 800c88e:	460b      	mov	r3, r1
 800c890:	71fb      	strb	r3, [r7, #7]
 800c892:	4613      	mov	r3, r2
 800c894:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	330d      	adds	r3, #13
 800c89a:	79ba      	ldrb	r2, [r7, #6]
 800c89c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	330b      	adds	r3, #11
 800c8a2:	220f      	movs	r2, #15
 800c8a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	330c      	adds	r3, #12
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	331a      	adds	r3, #26
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7fe ffba 	bl	800b82e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c8ba:	79fb      	ldrb	r3, [r7, #7]
 800c8bc:	1e5a      	subs	r2, r3, #1
 800c8be:	4613      	mov	r3, r2
 800c8c0:	005b      	lsls	r3, r3, #1
 800c8c2:	4413      	add	r3, r2
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	4413      	add	r3, r2
 800c8c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	82fb      	strh	r3, [r7, #22]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c8d2:	8afb      	ldrh	r3, [r7, #22]
 800c8d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d007      	beq.n	800c8ec <put_lfn+0x6c>
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	61fa      	str	r2, [r7, #28]
 800c8e2:	005b      	lsls	r3, r3, #1
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	881b      	ldrh	r3, [r3, #0]
 800c8ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c8ec:	4a17      	ldr	r2, [pc, #92]	@ (800c94c <put_lfn+0xcc>)
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	8afa      	ldrh	r2, [r7, #22]
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fe ff95 	bl	800b82e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c904:	8afb      	ldrh	r3, [r7, #22]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d102      	bne.n	800c910 <put_lfn+0x90>
 800c90a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c90e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	3301      	adds	r3, #1
 800c914:	61bb      	str	r3, [r7, #24]
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	2b0c      	cmp	r3, #12
 800c91a:	d9da      	bls.n	800c8d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c91c:	8afb      	ldrh	r3, [r7, #22]
 800c91e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c922:	4293      	cmp	r3, r2
 800c924:	d006      	beq.n	800c934 <put_lfn+0xb4>
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	005b      	lsls	r3, r3, #1
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	4413      	add	r3, r2
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d103      	bne.n	800c93c <put_lfn+0xbc>
 800c934:	79fb      	ldrb	r3, [r7, #7]
 800c936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c93a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	79fa      	ldrb	r2, [r7, #7]
 800c940:	701a      	strb	r2, [r3, #0]
}
 800c942:	bf00      	nop
 800c944:	3720      	adds	r7, #32
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	08011524 	.word	0x08011524

0800c950 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b08c      	sub	sp, #48	@ 0x30
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c95e:	220b      	movs	r2, #11
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f7fe ffaa 	bl	800b8bc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	2b05      	cmp	r3, #5
 800c96c:	d92b      	bls.n	800c9c6 <gen_numname+0x76>
		sr = seq;
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c972:	e022      	b.n	800c9ba <gen_numname+0x6a>
			wc = *lfn++;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	1c9a      	adds	r2, r3, #2
 800c978:	607a      	str	r2, [r7, #4]
 800c97a:	881b      	ldrh	r3, [r3, #0]
 800c97c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c97e:	2300      	movs	r3, #0
 800c980:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c982:	e017      	b.n	800c9b4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	005a      	lsls	r2, r3, #1
 800c988:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c98a:	f003 0301 	and.w	r3, r3, #1
 800c98e:	4413      	add	r3, r2
 800c990:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c992:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c994:	085b      	lsrs	r3, r3, #1
 800c996:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d005      	beq.n	800c9ae <gen_numname+0x5e>
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800c9a8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800c9ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b6:	2b0f      	cmp	r3, #15
 800c9b8:	d9e4      	bls.n	800c984 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1d8      	bne.n	800c974 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c9c6:	2307      	movs	r3, #7
 800c9c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	f003 030f 	and.w	r3, r3, #15
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	3330      	adds	r3, #48	@ 0x30
 800c9d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800c9da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c9de:	2b39      	cmp	r3, #57	@ 0x39
 800c9e0:	d904      	bls.n	800c9ec <gen_numname+0x9c>
 800c9e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c9e6:	3307      	adds	r3, #7
 800c9e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ee:	1e5a      	subs	r2, r3, #1
 800c9f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c9f2:	3330      	adds	r3, #48	@ 0x30
 800c9f4:	443b      	add	r3, r7
 800c9f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c9fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	091b      	lsrs	r3, r3, #4
 800ca02:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1df      	bne.n	800c9ca <gen_numname+0x7a>
	ns[i] = '~';
 800ca0a:	f107 0214 	add.w	r2, r7, #20
 800ca0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca10:	4413      	add	r3, r2
 800ca12:	227e      	movs	r2, #126	@ 0x7e
 800ca14:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ca16:	2300      	movs	r3, #0
 800ca18:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca1a:	e002      	b.n	800ca22 <gen_numname+0xd2>
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca1e:	3301      	adds	r3, #1
 800ca20:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d205      	bcs.n	800ca36 <gen_numname+0xe6>
 800ca2a:	68fa      	ldr	r2, [r7, #12]
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2e:	4413      	add	r3, r2
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	2b20      	cmp	r3, #32
 800ca34:	d1f2      	bne.n	800ca1c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca38:	2b07      	cmp	r3, #7
 800ca3a:	d807      	bhi.n	800ca4c <gen_numname+0xfc>
 800ca3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ca42:	3330      	adds	r3, #48	@ 0x30
 800ca44:	443b      	add	r3, r7
 800ca46:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ca4a:	e000      	b.n	800ca4e <gen_numname+0xfe>
 800ca4c:	2120      	movs	r1, #32
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca50:	1c5a      	adds	r2, r3, #1
 800ca52:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	4413      	add	r3, r2
 800ca58:	460a      	mov	r2, r1
 800ca5a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5e:	2b07      	cmp	r3, #7
 800ca60:	d9e9      	bls.n	800ca36 <gen_numname+0xe6>
}
 800ca62:	bf00      	nop
 800ca64:	bf00      	nop
 800ca66:	3730      	adds	r7, #48	@ 0x30
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ca74:	2300      	movs	r3, #0
 800ca76:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ca78:	230b      	movs	r3, #11
 800ca7a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	0852      	lsrs	r2, r2, #1
 800ca82:	01db      	lsls	r3, r3, #7
 800ca84:	4313      	orrs	r3, r2
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	1c59      	adds	r1, r3, #1
 800ca8c:	6079      	str	r1, [r7, #4]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	4413      	add	r3, r2
 800ca92:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	60bb      	str	r3, [r7, #8]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1ed      	bne.n	800ca7c <sum_sfn+0x10>
	return sum;
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr

0800caae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b086      	sub	sp, #24
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cabc:	2100      	movs	r1, #0
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7ff fca7 	bl	800c412 <dir_sdi>
 800cac4:	4603      	mov	r3, r0
 800cac6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cac8:	7dfb      	ldrb	r3, [r7, #23]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <dir_find+0x24>
 800cace:	7dfb      	ldrb	r3, [r7, #23]
 800cad0:	e0a9      	b.n	800cc26 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cad2:	23ff      	movs	r3, #255	@ 0xff
 800cad4:	753b      	strb	r3, [r7, #20]
 800cad6:	7d3b      	ldrb	r3, [r7, #20]
 800cad8:	757b      	strb	r3, [r7, #21]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f04f 32ff 	mov.w	r2, #4294967295
 800cae0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	4619      	mov	r1, r3
 800cae8:	6938      	ldr	r0, [r7, #16]
 800caea:	f7ff f915 	bl	800bd18 <move_window>
 800caee:	4603      	mov	r3, r0
 800caf0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800caf2:	7dfb      	ldrb	r3, [r7, #23]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f040 8090 	bne.w	800cc1a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a1b      	ldr	r3, [r3, #32]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb02:	7dbb      	ldrb	r3, [r7, #22]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d102      	bne.n	800cb0e <dir_find+0x60>
 800cb08:	2304      	movs	r3, #4
 800cb0a:	75fb      	strb	r3, [r7, #23]
 800cb0c:	e08a      	b.n	800cc24 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a1b      	ldr	r3, [r3, #32]
 800cb12:	330b      	adds	r3, #11
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb1a:	73fb      	strb	r3, [r7, #15]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	7bfa      	ldrb	r2, [r7, #15]
 800cb20:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cb22:	7dbb      	ldrb	r3, [r7, #22]
 800cb24:	2be5      	cmp	r3, #229	@ 0xe5
 800cb26:	d007      	beq.n	800cb38 <dir_find+0x8a>
 800cb28:	7bfb      	ldrb	r3, [r7, #15]
 800cb2a:	f003 0308 	and.w	r3, r3, #8
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d009      	beq.n	800cb46 <dir_find+0x98>
 800cb32:	7bfb      	ldrb	r3, [r7, #15]
 800cb34:	2b0f      	cmp	r3, #15
 800cb36:	d006      	beq.n	800cb46 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb38:	23ff      	movs	r3, #255	@ 0xff
 800cb3a:	757b      	strb	r3, [r7, #21]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb42:	631a      	str	r2, [r3, #48]	@ 0x30
 800cb44:	e05e      	b.n	800cc04 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
 800cb48:	2b0f      	cmp	r3, #15
 800cb4a:	d136      	bne.n	800cbba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cb52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d154      	bne.n	800cc04 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cb5a:	7dbb      	ldrb	r3, [r7, #22]
 800cb5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00d      	beq.n	800cb80 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6a1b      	ldr	r3, [r3, #32]
 800cb68:	7b5b      	ldrb	r3, [r3, #13]
 800cb6a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cb6c:	7dbb      	ldrb	r3, [r7, #22]
 800cb6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb72:	75bb      	strb	r3, [r7, #22]
 800cb74:	7dbb      	ldrb	r3, [r7, #22]
 800cb76:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	695a      	ldr	r2, [r3, #20]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cb80:	7dba      	ldrb	r2, [r7, #22]
 800cb82:	7d7b      	ldrb	r3, [r7, #21]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d115      	bne.n	800cbb4 <dir_find+0x106>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6a1b      	ldr	r3, [r3, #32]
 800cb8c:	330d      	adds	r3, #13
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	7d3a      	ldrb	r2, [r7, #20]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d10e      	bne.n	800cbb4 <dir_find+0x106>
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	68da      	ldr	r2, [r3, #12]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4610      	mov	r0, r2
 800cba2:	f7ff fdfd 	bl	800c7a0 <cmp_lfn>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d003      	beq.n	800cbb4 <dir_find+0x106>
 800cbac:	7d7b      	ldrb	r3, [r7, #21]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	e000      	b.n	800cbb6 <dir_find+0x108>
 800cbb4:	23ff      	movs	r3, #255	@ 0xff
 800cbb6:	757b      	strb	r3, [r7, #21]
 800cbb8:	e024      	b.n	800cc04 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cbba:	7d7b      	ldrb	r3, [r7, #21]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d109      	bne.n	800cbd4 <dir_find+0x126>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a1b      	ldr	r3, [r3, #32]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7ff ff51 	bl	800ca6c <sum_sfn>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	461a      	mov	r2, r3
 800cbce:	7d3b      	ldrb	r3, [r7, #20]
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d024      	beq.n	800cc1e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cbda:	f003 0301 	and.w	r3, r3, #1
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d10a      	bne.n	800cbf8 <dir_find+0x14a>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a18      	ldr	r0, [r3, #32]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	3324      	adds	r3, #36	@ 0x24
 800cbea:	220b      	movs	r2, #11
 800cbec:	4619      	mov	r1, r3
 800cbee:	f7fe fea1 	bl	800b934 <mem_cmp>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d014      	beq.n	800cc22 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cbf8:	23ff      	movs	r3, #255	@ 0xff
 800cbfa:	757b      	strb	r3, [r7, #21]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cc02:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cc04:	2100      	movs	r1, #0
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7ff fc7e 	bl	800c508 <dir_next>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc10:	7dfb      	ldrb	r3, [r7, #23]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f43f af65 	beq.w	800cae2 <dir_find+0x34>
 800cc18:	e004      	b.n	800cc24 <dir_find+0x176>
		if (res != FR_OK) break;
 800cc1a:	bf00      	nop
 800cc1c:	e002      	b.n	800cc24 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc1e:	bf00      	nop
 800cc20:	e000      	b.n	800cc24 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc22:	bf00      	nop

	return res;
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3718      	adds	r7, #24
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
	...

0800cc30 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08c      	sub	sp, #48	@ 0x30
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cc44:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d001      	beq.n	800cc50 <dir_register+0x20>
 800cc4c:	2306      	movs	r3, #6
 800cc4e:	e0e0      	b.n	800ce12 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cc50:	2300      	movs	r3, #0
 800cc52:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc54:	e002      	b.n	800cc5c <dir_register+0x2c>
 800cc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc58:	3301      	adds	r3, #1
 800cc5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	68da      	ldr	r2, [r3, #12]
 800cc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	4413      	add	r3, r2
 800cc66:	881b      	ldrh	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1f4      	bne.n	800cc56 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800cc72:	f107 030c 	add.w	r3, r7, #12
 800cc76:	220c      	movs	r2, #12
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fe fe1f 	bl	800b8bc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
 800cc80:	f003 0301 	and.w	r3, r3, #1
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d032      	beq.n	800ccee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2240      	movs	r2, #64	@ 0x40
 800cc8c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800cc90:	2301      	movs	r3, #1
 800cc92:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc94:	e016      	b.n	800ccc4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	68da      	ldr	r2, [r3, #12]
 800cca0:	f107 010c 	add.w	r1, r7, #12
 800cca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca6:	f7ff fe53 	bl	800c950 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7ff feff 	bl	800caae <dir_find>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800ccb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d106      	bne.n	800cccc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ccbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc6:	2b63      	cmp	r3, #99	@ 0x63
 800ccc8:	d9e5      	bls.n	800cc96 <dir_register+0x66>
 800ccca:	e000      	b.n	800ccce <dir_register+0x9e>
			if (res != FR_OK) break;
 800cccc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ccce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd0:	2b64      	cmp	r3, #100	@ 0x64
 800ccd2:	d101      	bne.n	800ccd8 <dir_register+0xa8>
 800ccd4:	2307      	movs	r3, #7
 800ccd6:	e09c      	b.n	800ce12 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ccd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ccdc:	2b04      	cmp	r3, #4
 800ccde:	d002      	beq.n	800cce6 <dir_register+0xb6>
 800cce0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cce4:	e095      	b.n	800ce12 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cce6:	7dfa      	ldrb	r2, [r7, #23]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
 800ccf0:	f003 0302 	and.w	r3, r3, #2
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d007      	beq.n	800cd08 <dir_register+0xd8>
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfa:	330c      	adds	r3, #12
 800ccfc:	4a47      	ldr	r2, [pc, #284]	@ (800ce1c <dir_register+0x1ec>)
 800ccfe:	fba2 2303 	umull	r2, r3, r2, r3
 800cd02:	089b      	lsrs	r3, r3, #2
 800cd04:	3301      	adds	r3, #1
 800cd06:	e000      	b.n	800cd0a <dir_register+0xda>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cd0c:	6a39      	ldr	r1, [r7, #32]
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff fcbf 	bl	800c692 <dir_alloc>
 800cd14:	4603      	mov	r3, r0
 800cd16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cd1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d148      	bne.n	800cdb4 <dir_register+0x184>
 800cd22:	6a3b      	ldr	r3, [r7, #32]
 800cd24:	3b01      	subs	r3, #1
 800cd26:	623b      	str	r3, [r7, #32]
 800cd28:	6a3b      	ldr	r3, [r7, #32]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d042      	beq.n	800cdb4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	695a      	ldr	r2, [r3, #20]
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	015b      	lsls	r3, r3, #5
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	4619      	mov	r1, r3
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7ff fb69 	bl	800c412 <dir_sdi>
 800cd40:	4603      	mov	r3, r0
 800cd42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800cd46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d132      	bne.n	800cdb4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	3324      	adds	r3, #36	@ 0x24
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff fe8a 	bl	800ca6c <sum_sfn>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	69db      	ldr	r3, [r3, #28]
 800cd60:	4619      	mov	r1, r3
 800cd62:	69f8      	ldr	r0, [r7, #28]
 800cd64:	f7fe ffd8 	bl	800bd18 <move_window>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800cd6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d11d      	bne.n	800cdb2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	68d8      	ldr	r0, [r3, #12]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a19      	ldr	r1, [r3, #32]
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	7efb      	ldrb	r3, [r7, #27]
 800cd84:	f7ff fd7c 	bl	800c880 <put_lfn>
				fs->wflag = 1;
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cd8e:	2100      	movs	r1, #0
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7ff fbb9 	bl	800c508 <dir_next>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800cd9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d107      	bne.n	800cdb4 <dir_register+0x184>
 800cda4:	6a3b      	ldr	r3, [r7, #32]
 800cda6:	3b01      	subs	r3, #1
 800cda8:	623b      	str	r3, [r7, #32]
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1d5      	bne.n	800cd5c <dir_register+0x12c>
 800cdb0:	e000      	b.n	800cdb4 <dir_register+0x184>
				if (res != FR_OK) break;
 800cdb2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cdb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d128      	bne.n	800ce0e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	69f8      	ldr	r0, [r7, #28]
 800cdc4:	f7fe ffa8 	bl	800bd18 <move_window>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800cdce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d11b      	bne.n	800ce0e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	2220      	movs	r2, #32
 800cddc:	2100      	movs	r1, #0
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fe fd8d 	bl	800b8fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6a18      	ldr	r0, [r3, #32]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	3324      	adds	r3, #36	@ 0x24
 800cdec:	220b      	movs	r2, #11
 800cdee:	4619      	mov	r1, r3
 800cdf0:	f7fe fd64 	bl	800b8bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a1b      	ldr	r3, [r3, #32]
 800cdfe:	330c      	adds	r3, #12
 800ce00:	f002 0218 	and.w	r2, r2, #24
 800ce04:	b2d2      	uxtb	r2, r2
 800ce06:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ce0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3730      	adds	r7, #48	@ 0x30
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	4ec4ec4f 	.word	0x4ec4ec4f

0800ce20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b08a      	sub	sp, #40	@ 0x28
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	613b      	str	r3, [r7, #16]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	2300      	movs	r3, #0
 800ce3a:	617b      	str	r3, [r7, #20]
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	61ba      	str	r2, [r7, #24]
 800ce46:	693a      	ldr	r2, [r7, #16]
 800ce48:	4413      	add	r3, r2
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ce4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce50:	2b1f      	cmp	r3, #31
 800ce52:	d940      	bls.n	800ced6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ce54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce56:	2b2f      	cmp	r3, #47	@ 0x2f
 800ce58:	d006      	beq.n	800ce68 <create_name+0x48>
 800ce5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce5c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ce5e:	d110      	bne.n	800ce82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ce60:	e002      	b.n	800ce68 <create_name+0x48>
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	3301      	adds	r3, #1
 800ce66:	61bb      	str	r3, [r7, #24]
 800ce68:	693a      	ldr	r2, [r7, #16]
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b2f      	cmp	r3, #47	@ 0x2f
 800ce72:	d0f6      	beq.n	800ce62 <create_name+0x42>
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	4413      	add	r3, r2
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ce7e:	d0f0      	beq.n	800ce62 <create_name+0x42>
			break;
 800ce80:	e02a      	b.n	800ced8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	2bfe      	cmp	r3, #254	@ 0xfe
 800ce86:	d901      	bls.n	800ce8c <create_name+0x6c>
 800ce88:	2306      	movs	r3, #6
 800ce8a:	e17d      	b.n	800d188 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ce8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ce92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce94:	2101      	movs	r1, #1
 800ce96:	4618      	mov	r0, r3
 800ce98:	f001 fa7a 	bl	800e390 <ff_convert>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cea0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d101      	bne.n	800ceaa <create_name+0x8a>
 800cea6:	2306      	movs	r3, #6
 800cea8:	e16e      	b.n	800d188 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ceaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ceac:	2b7f      	cmp	r3, #127	@ 0x7f
 800ceae:	d809      	bhi.n	800cec4 <create_name+0xa4>
 800ceb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	488d      	ldr	r0, [pc, #564]	@ (800d0ec <create_name+0x2cc>)
 800ceb6:	f7fe fd64 	bl	800b982 <chk_chr>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d001      	beq.n	800cec4 <create_name+0xa4>
 800cec0:	2306      	movs	r3, #6
 800cec2:	e161      	b.n	800d188 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	1c5a      	adds	r2, r3, #1
 800cec8:	617a      	str	r2, [r7, #20]
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	4413      	add	r3, r2
 800ced0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ced2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ced4:	e7b4      	b.n	800ce40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ced6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	441a      	add	r2, r3
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cee4:	2b1f      	cmp	r3, #31
 800cee6:	d801      	bhi.n	800ceec <create_name+0xcc>
 800cee8:	2304      	movs	r3, #4
 800ceea:	e000      	b.n	800ceee <create_name+0xce>
 800ceec:	2300      	movs	r3, #0
 800ceee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cef2:	e011      	b.n	800cf18 <create_name+0xf8>
		w = lfn[di - 1];
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cefa:	3b01      	subs	r3, #1
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	4413      	add	r3, r2
 800cf02:	881b      	ldrh	r3, [r3, #0]
 800cf04:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800cf06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf08:	2b20      	cmp	r3, #32
 800cf0a:	d002      	beq.n	800cf12 <create_name+0xf2>
 800cf0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf10:	d106      	bne.n	800cf20 <create_name+0x100>
		di--;
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	3b01      	subs	r3, #1
 800cf16:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1ea      	bne.n	800cef4 <create_name+0xd4>
 800cf1e:	e000      	b.n	800cf22 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cf20:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	4413      	add	r3, r2
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d101      	bne.n	800cf38 <create_name+0x118>
 800cf34:	2306      	movs	r3, #6
 800cf36:	e127      	b.n	800d188 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	3324      	adds	r3, #36	@ 0x24
 800cf3c:	220b      	movs	r2, #11
 800cf3e:	2120      	movs	r1, #32
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fe fcdc 	bl	800b8fe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cf46:	2300      	movs	r3, #0
 800cf48:	61bb      	str	r3, [r7, #24]
 800cf4a:	e002      	b.n	800cf52 <create_name+0x132>
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	61bb      	str	r3, [r7, #24]
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	4413      	add	r3, r2
 800cf5a:	881b      	ldrh	r3, [r3, #0]
 800cf5c:	2b20      	cmp	r3, #32
 800cf5e:	d0f5      	beq.n	800cf4c <create_name+0x12c>
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	4413      	add	r3, r2
 800cf68:	881b      	ldrh	r3, [r3, #0]
 800cf6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf6c:	d0ee      	beq.n	800cf4c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d009      	beq.n	800cf88 <create_name+0x168>
 800cf74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf78:	f043 0303 	orr.w	r3, r3, #3
 800cf7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cf80:	e002      	b.n	800cf88 <create_name+0x168>
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	3b01      	subs	r3, #1
 800cf86:	617b      	str	r3, [r7, #20]
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d009      	beq.n	800cfa2 <create_name+0x182>
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cf94:	3b01      	subs	r3, #1
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfa0:	d1ef      	bne.n	800cf82 <create_name+0x162>

	i = b = 0; ni = 8;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	623b      	str	r3, [r7, #32]
 800cfac:	2308      	movs	r3, #8
 800cfae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	1c5a      	adds	r2, r3, #1
 800cfb4:	61ba      	str	r2, [r7, #24]
 800cfb6:	005b      	lsls	r3, r3, #1
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	4413      	add	r3, r2
 800cfbc:	881b      	ldrh	r3, [r3, #0]
 800cfbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cfc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 8090 	beq.w	800d0e8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cfc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cfca:	2b20      	cmp	r3, #32
 800cfcc:	d006      	beq.n	800cfdc <create_name+0x1bc>
 800cfce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cfd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfd2:	d10a      	bne.n	800cfea <create_name+0x1ca>
 800cfd4:	69ba      	ldr	r2, [r7, #24]
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d006      	beq.n	800cfea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfe0:	f043 0303 	orr.w	r3, r3, #3
 800cfe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cfe8:	e07d      	b.n	800d0e6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cfea:	6a3a      	ldr	r2, [r7, #32]
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d203      	bcs.n	800cffa <create_name+0x1da>
 800cff2:	69ba      	ldr	r2, [r7, #24]
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d123      	bne.n	800d042 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	2b0b      	cmp	r3, #11
 800cffe:	d106      	bne.n	800d00e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d004:	f043 0303 	orr.w	r3, r3, #3
 800d008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d00c:	e075      	b.n	800d0fa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d00e:	69ba      	ldr	r2, [r7, #24]
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	429a      	cmp	r2, r3
 800d014:	d005      	beq.n	800d022 <create_name+0x202>
 800d016:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d01a:	f043 0303 	orr.w	r3, r3, #3
 800d01e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d022:	69ba      	ldr	r2, [r7, #24]
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	429a      	cmp	r2, r3
 800d028:	d866      	bhi.n	800d0f8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	61bb      	str	r3, [r7, #24]
 800d02e:	2308      	movs	r3, #8
 800d030:	623b      	str	r3, [r7, #32]
 800d032:	230b      	movs	r3, #11
 800d034:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d036:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d040:	e051      	b.n	800d0e6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d044:	2b7f      	cmp	r3, #127	@ 0x7f
 800d046:	d914      	bls.n	800d072 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d04a:	2100      	movs	r1, #0
 800d04c:	4618      	mov	r0, r3
 800d04e:	f001 f99f 	bl	800e390 <ff_convert>
 800d052:	4603      	mov	r3, r0
 800d054:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d004      	beq.n	800d066 <create_name+0x246>
 800d05c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d05e:	3b80      	subs	r3, #128	@ 0x80
 800d060:	4a23      	ldr	r2, [pc, #140]	@ (800d0f0 <create_name+0x2d0>)
 800d062:	5cd3      	ldrb	r3, [r2, r3]
 800d064:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d066:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d06a:	f043 0302 	orr.w	r3, r3, #2
 800d06e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d074:	2b00      	cmp	r3, #0
 800d076:	d007      	beq.n	800d088 <create_name+0x268>
 800d078:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d07a:	4619      	mov	r1, r3
 800d07c:	481d      	ldr	r0, [pc, #116]	@ (800d0f4 <create_name+0x2d4>)
 800d07e:	f7fe fc80 	bl	800b982 <chk_chr>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d008      	beq.n	800d09a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d088:	235f      	movs	r3, #95	@ 0x5f
 800d08a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d08c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d090:	f043 0303 	orr.w	r3, r3, #3
 800d094:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d098:	e01b      	b.n	800d0d2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d09a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d09c:	2b40      	cmp	r3, #64	@ 0x40
 800d09e:	d909      	bls.n	800d0b4 <create_name+0x294>
 800d0a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0a2:	2b5a      	cmp	r3, #90	@ 0x5a
 800d0a4:	d806      	bhi.n	800d0b4 <create_name+0x294>
					b |= 2;
 800d0a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d0aa:	f043 0302 	orr.w	r3, r3, #2
 800d0ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d0b2:	e00e      	b.n	800d0d2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d0b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0b6:	2b60      	cmp	r3, #96	@ 0x60
 800d0b8:	d90b      	bls.n	800d0d2 <create_name+0x2b2>
 800d0ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0bc:	2b7a      	cmp	r3, #122	@ 0x7a
 800d0be:	d808      	bhi.n	800d0d2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d0c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d0c4:	f043 0301 	orr.w	r3, r3, #1
 800d0c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d0cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0ce:	3b20      	subs	r3, #32
 800d0d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	1c5a      	adds	r2, r3, #1
 800d0d6:	623a      	str	r2, [r7, #32]
 800d0d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d0da:	b2d1      	uxtb	r1, r2
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	4413      	add	r3, r2
 800d0e0:	460a      	mov	r2, r1
 800d0e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d0e6:	e763      	b.n	800cfb0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d0e8:	bf00      	nop
 800d0ea:	e006      	b.n	800d0fa <create_name+0x2da>
 800d0ec:	08011340 	.word	0x08011340
 800d0f0:	080114a4 	.word	0x080114a4
 800d0f4:	0801134c 	.word	0x0801134c
			if (si > di) break;			/* No extension */
 800d0f8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d100:	2be5      	cmp	r3, #229	@ 0xe5
 800d102:	d103      	bne.n	800d10c <create_name+0x2ec>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2205      	movs	r2, #5
 800d108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	2b08      	cmp	r3, #8
 800d110:	d104      	bne.n	800d11c <create_name+0x2fc>
 800d112:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d11c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d120:	f003 030c 	and.w	r3, r3, #12
 800d124:	2b0c      	cmp	r3, #12
 800d126:	d005      	beq.n	800d134 <create_name+0x314>
 800d128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d12c:	f003 0303 	and.w	r3, r3, #3
 800d130:	2b03      	cmp	r3, #3
 800d132:	d105      	bne.n	800d140 <create_name+0x320>
 800d134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d138:	f043 0302 	orr.w	r3, r3, #2
 800d13c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d144:	f003 0302 	and.w	r3, r3, #2
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d117      	bne.n	800d17c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d14c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d150:	f003 0303 	and.w	r3, r3, #3
 800d154:	2b01      	cmp	r3, #1
 800d156:	d105      	bne.n	800d164 <create_name+0x344>
 800d158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d15c:	f043 0310 	orr.w	r3, r3, #16
 800d160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d164:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d168:	f003 030c 	and.w	r3, r3, #12
 800d16c:	2b04      	cmp	r3, #4
 800d16e:	d105      	bne.n	800d17c <create_name+0x35c>
 800d170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d174:	f043 0308 	orr.w	r3, r3, #8
 800d178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d182:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800d186:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3728      	adds	r7, #40	@ 0x28
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d1a4:	e002      	b.n	800d1ac <follow_path+0x1c>
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	603b      	str	r3, [r7, #0]
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d1b2:	d0f8      	beq.n	800d1a6 <follow_path+0x16>
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d1ba:	d0f4      	beq.n	800d1a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	2b1f      	cmp	r3, #31
 800d1c8:	d80a      	bhi.n	800d1e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2280      	movs	r2, #128	@ 0x80
 800d1ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff f91c 	bl	800c412 <dir_sdi>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	75fb      	strb	r3, [r7, #23]
 800d1de:	e043      	b.n	800d268 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d1e0:	463b      	mov	r3, r7
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f7ff fe1b 	bl	800ce20 <create_name>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d1ee:	7dfb      	ldrb	r3, [r7, #23]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d134      	bne.n	800d25e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff fc5a 	bl	800caae <dir_find>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d204:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d206:	7dfb      	ldrb	r3, [r7, #23]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00a      	beq.n	800d222 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d20c:	7dfb      	ldrb	r3, [r7, #23]
 800d20e:	2b04      	cmp	r3, #4
 800d210:	d127      	bne.n	800d262 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d212:	7afb      	ldrb	r3, [r7, #11]
 800d214:	f003 0304 	and.w	r3, r3, #4
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d122      	bne.n	800d262 <follow_path+0xd2>
 800d21c:	2305      	movs	r3, #5
 800d21e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d220:	e01f      	b.n	800d262 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d222:	7afb      	ldrb	r3, [r7, #11]
 800d224:	f003 0304 	and.w	r3, r3, #4
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d11c      	bne.n	800d266 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	799b      	ldrb	r3, [r3, #6]
 800d230:	f003 0310 	and.w	r3, r3, #16
 800d234:	2b00      	cmp	r3, #0
 800d236:	d102      	bne.n	800d23e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d238:	2305      	movs	r3, #5
 800d23a:	75fb      	strb	r3, [r7, #23]
 800d23c:	e014      	b.n	800d268 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	695b      	ldr	r3, [r3, #20]
 800d248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d24c:	4413      	add	r3, r2
 800d24e:	4619      	mov	r1, r3
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f7ff fa65 	bl	800c720 <ld_clust>
 800d256:	4602      	mov	r2, r0
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d25c:	e7c0      	b.n	800d1e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800d25e:	bf00      	nop
 800d260:	e002      	b.n	800d268 <follow_path+0xd8>
				break;
 800d262:	bf00      	nop
 800d264:	e000      	b.n	800d268 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d266:	bf00      	nop
			}
		}
	}

	return res;
 800d268:	7dfb      	ldrb	r3, [r7, #23]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3718      	adds	r7, #24
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d272:	b480      	push	{r7}
 800d274:	b087      	sub	sp, #28
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d27a:	f04f 33ff 	mov.w	r3, #4294967295
 800d27e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d031      	beq.n	800d2ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	617b      	str	r3, [r7, #20]
 800d28e:	e002      	b.n	800d296 <get_ldnumber+0x24>
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	3301      	adds	r3, #1
 800d294:	617b      	str	r3, [r7, #20]
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	2b1f      	cmp	r3, #31
 800d29c:	d903      	bls.n	800d2a6 <get_ldnumber+0x34>
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	2b3a      	cmp	r3, #58	@ 0x3a
 800d2a4:	d1f4      	bne.n	800d290 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	2b3a      	cmp	r3, #58	@ 0x3a
 800d2ac:	d11c      	bne.n	800d2e8 <get_ldnumber+0x76>
			tp = *path;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	1c5a      	adds	r2, r3, #1
 800d2b8:	60fa      	str	r2, [r7, #12]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	3b30      	subs	r3, #48	@ 0x30
 800d2be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2b09      	cmp	r3, #9
 800d2c4:	d80e      	bhi.n	800d2e4 <get_ldnumber+0x72>
 800d2c6:	68fa      	ldr	r2, [r7, #12]
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d10a      	bne.n	800d2e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d107      	bne.n	800d2e4 <get_ldnumber+0x72>
					vol = (int)i;
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	617b      	str	r3, [r7, #20]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	e002      	b.n	800d2ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d2ec:	693b      	ldr	r3, [r7, #16]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	371c      	adds	r7, #28
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
	...

0800d2fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	70da      	strb	r2, [r3, #3]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f04f 32ff 	mov.w	r2, #4294967295
 800d312:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7fe fcfe 	bl	800bd18 <move_window>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <check_fs+0x2a>
 800d322:	2304      	movs	r3, #4
 800d324:	e038      	b.n	800d398 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	3334      	adds	r3, #52	@ 0x34
 800d32a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fe fa42 	bl	800b7b8 <ld_word>
 800d334:	4603      	mov	r3, r0
 800d336:	461a      	mov	r2, r3
 800d338:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d001      	beq.n	800d344 <check_fs+0x48>
 800d340:	2303      	movs	r3, #3
 800d342:	e029      	b.n	800d398 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d34a:	2be9      	cmp	r3, #233	@ 0xe9
 800d34c:	d009      	beq.n	800d362 <check_fs+0x66>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d354:	2beb      	cmp	r3, #235	@ 0xeb
 800d356:	d11e      	bne.n	800d396 <check_fs+0x9a>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d35e:	2b90      	cmp	r3, #144	@ 0x90
 800d360:	d119      	bne.n	800d396 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	3334      	adds	r3, #52	@ 0x34
 800d366:	3336      	adds	r3, #54	@ 0x36
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fe fa3d 	bl	800b7e8 <ld_dword>
 800d36e:	4603      	mov	r3, r0
 800d370:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d374:	4a0a      	ldr	r2, [pc, #40]	@ (800d3a0 <check_fs+0xa4>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d101      	bne.n	800d37e <check_fs+0x82>
 800d37a:	2300      	movs	r3, #0
 800d37c:	e00c      	b.n	800d398 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	3334      	adds	r3, #52	@ 0x34
 800d382:	3352      	adds	r3, #82	@ 0x52
 800d384:	4618      	mov	r0, r3
 800d386:	f7fe fa2f 	bl	800b7e8 <ld_dword>
 800d38a:	4603      	mov	r3, r0
 800d38c:	4a05      	ldr	r2, [pc, #20]	@ (800d3a4 <check_fs+0xa8>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d101      	bne.n	800d396 <check_fs+0x9a>
 800d392:	2300      	movs	r3, #0
 800d394:	e000      	b.n	800d398 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d396:	2302      	movs	r3, #2
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	00544146 	.word	0x00544146
 800d3a4:	33544146 	.word	0x33544146

0800d3a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b096      	sub	sp, #88	@ 0x58
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f7ff ff58 	bl	800d272 <get_ldnumber>
 800d3c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	da01      	bge.n	800d3ce <find_volume+0x26>
 800d3ca:	230b      	movs	r3, #11
 800d3cc:	e22d      	b.n	800d82a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d3ce:	4aa1      	ldr	r2, [pc, #644]	@ (800d654 <find_volume+0x2ac>)
 800d3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d101      	bne.n	800d3e2 <find_volume+0x3a>
 800d3de:	230c      	movs	r3, #12
 800d3e0:	e223      	b.n	800d82a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d3e8:	79fb      	ldrb	r3, [r7, #7]
 800d3ea:	f023 0301 	bic.w	r3, r3, #1
 800d3ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01a      	beq.n	800d42e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3fa:	785b      	ldrb	r3, [r3, #1]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe f93d 	bl	800b67c <disk_status>
 800d402:	4603      	mov	r3, r0
 800d404:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d408:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d40c:	f003 0301 	and.w	r3, r3, #1
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10c      	bne.n	800d42e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d414:	79fb      	ldrb	r3, [r7, #7]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d007      	beq.n	800d42a <find_volume+0x82>
 800d41a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d41e:	f003 0304 	and.w	r3, r3, #4
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d426:	230a      	movs	r3, #10
 800d428:	e1ff      	b.n	800d82a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d42a:	2300      	movs	r3, #0
 800d42c:	e1fd      	b.n	800d82a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d430:	2200      	movs	r2, #0
 800d432:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d436:	b2da      	uxtb	r2, r3
 800d438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43e:	785b      	ldrb	r3, [r3, #1]
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe f935 	bl	800b6b0 <disk_initialize>
 800d446:	4603      	mov	r3, r0
 800d448:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d44c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d450:	f003 0301 	and.w	r3, r3, #1
 800d454:	2b00      	cmp	r3, #0
 800d456:	d001      	beq.n	800d45c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d458:	2303      	movs	r3, #3
 800d45a:	e1e6      	b.n	800d82a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d45c:	79fb      	ldrb	r3, [r7, #7]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d007      	beq.n	800d472 <find_volume+0xca>
 800d462:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d466:	f003 0304 	and.w	r3, r3, #4
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d46e:	230a      	movs	r3, #10
 800d470:	e1db      	b.n	800d82a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d476:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d478:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d47a:	f7ff ff3f 	bl	800d2fc <check_fs>
 800d47e:	4603      	mov	r3, r0
 800d480:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d484:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d488:	2b02      	cmp	r3, #2
 800d48a:	d149      	bne.n	800d520 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d48c:	2300      	movs	r3, #0
 800d48e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d490:	e01e      	b.n	800d4d0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d494:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d49a:	011b      	lsls	r3, r3, #4
 800d49c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d4a0:	4413      	add	r3, r2
 800d4a2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d006      	beq.n	800d4bc <find_volume+0x114>
 800d4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b0:	3308      	adds	r3, #8
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe f998 	bl	800b7e8 <ld_dword>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	e000      	b.n	800d4be <find_volume+0x116>
 800d4bc:	2200      	movs	r2, #0
 800d4be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	3358      	adds	r3, #88	@ 0x58
 800d4c4:	443b      	add	r3, r7
 800d4c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d4ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4d2:	2b03      	cmp	r3, #3
 800d4d4:	d9dd      	bls.n	800d492 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d4da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <find_volume+0x13e>
 800d4e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d4e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	3358      	adds	r3, #88	@ 0x58
 800d4ec:	443b      	add	r3, r7
 800d4ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d4f2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d4f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d005      	beq.n	800d506 <find_volume+0x15e>
 800d4fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d4fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d4fe:	f7ff fefd 	bl	800d2fc <check_fs>
 800d502:	4603      	mov	r3, r0
 800d504:	e000      	b.n	800d508 <find_volume+0x160>
 800d506:	2303      	movs	r3, #3
 800d508:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d50c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d510:	2b01      	cmp	r3, #1
 800d512:	d905      	bls.n	800d520 <find_volume+0x178>
 800d514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d516:	3301      	adds	r3, #1
 800d518:	643b      	str	r3, [r7, #64]	@ 0x40
 800d51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d51c:	2b03      	cmp	r3, #3
 800d51e:	d9e2      	bls.n	800d4e6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d520:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d524:	2b04      	cmp	r3, #4
 800d526:	d101      	bne.n	800d52c <find_volume+0x184>
 800d528:	2301      	movs	r3, #1
 800d52a:	e17e      	b.n	800d82a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d52c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d530:	2b01      	cmp	r3, #1
 800d532:	d901      	bls.n	800d538 <find_volume+0x190>
 800d534:	230d      	movs	r3, #13
 800d536:	e178      	b.n	800d82a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d53a:	3334      	adds	r3, #52	@ 0x34
 800d53c:	330b      	adds	r3, #11
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fe f93a 	bl	800b7b8 <ld_word>
 800d544:	4603      	mov	r3, r0
 800d546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d54a:	d001      	beq.n	800d550 <find_volume+0x1a8>
 800d54c:	230d      	movs	r3, #13
 800d54e:	e16c      	b.n	800d82a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d552:	3334      	adds	r3, #52	@ 0x34
 800d554:	3316      	adds	r3, #22
 800d556:	4618      	mov	r0, r3
 800d558:	f7fe f92e 	bl	800b7b8 <ld_word>
 800d55c:	4603      	mov	r3, r0
 800d55e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d562:	2b00      	cmp	r3, #0
 800d564:	d106      	bne.n	800d574 <find_volume+0x1cc>
 800d566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d568:	3334      	adds	r3, #52	@ 0x34
 800d56a:	3324      	adds	r3, #36	@ 0x24
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fe f93b 	bl	800b7e8 <ld_dword>
 800d572:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d576:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d578:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d57c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d582:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d586:	789b      	ldrb	r3, [r3, #2]
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d005      	beq.n	800d598 <find_volume+0x1f0>
 800d58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58e:	789b      	ldrb	r3, [r3, #2]
 800d590:	2b02      	cmp	r3, #2
 800d592:	d001      	beq.n	800d598 <find_volume+0x1f0>
 800d594:	230d      	movs	r3, #13
 800d596:	e148      	b.n	800d82a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59a:	789b      	ldrb	r3, [r3, #2]
 800d59c:	461a      	mov	r2, r3
 800d59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5a0:	fb02 f303 	mul.w	r3, r2, r3
 800d5a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5b4:	895b      	ldrh	r3, [r3, #10]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d008      	beq.n	800d5cc <find_volume+0x224>
 800d5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5bc:	895b      	ldrh	r3, [r3, #10]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c2:	895b      	ldrh	r3, [r3, #10]
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	4013      	ands	r3, r2
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d001      	beq.n	800d5d0 <find_volume+0x228>
 800d5cc:	230d      	movs	r3, #13
 800d5ce:	e12c      	b.n	800d82a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d2:	3334      	adds	r3, #52	@ 0x34
 800d5d4:	3311      	adds	r3, #17
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe f8ee 	bl	800b7b8 <ld_word>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	461a      	mov	r2, r3
 800d5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e6:	891b      	ldrh	r3, [r3, #8]
 800d5e8:	f003 030f 	and.w	r3, r3, #15
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d001      	beq.n	800d5f6 <find_volume+0x24e>
 800d5f2:	230d      	movs	r3, #13
 800d5f4:	e119      	b.n	800d82a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f8:	3334      	adds	r3, #52	@ 0x34
 800d5fa:	3313      	adds	r3, #19
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fe f8db 	bl	800b7b8 <ld_word>
 800d602:	4603      	mov	r3, r0
 800d604:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d106      	bne.n	800d61a <find_volume+0x272>
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	3334      	adds	r3, #52	@ 0x34
 800d610:	3320      	adds	r3, #32
 800d612:	4618      	mov	r0, r3
 800d614:	f7fe f8e8 	bl	800b7e8 <ld_dword>
 800d618:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d61c:	3334      	adds	r3, #52	@ 0x34
 800d61e:	330e      	adds	r3, #14
 800d620:	4618      	mov	r0, r3
 800d622:	f7fe f8c9 	bl	800b7b8 <ld_word>
 800d626:	4603      	mov	r3, r0
 800d628:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d62a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d101      	bne.n	800d634 <find_volume+0x28c>
 800d630:	230d      	movs	r3, #13
 800d632:	e0fa      	b.n	800d82a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d634:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d638:	4413      	add	r3, r2
 800d63a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d63c:	8912      	ldrh	r2, [r2, #8]
 800d63e:	0912      	lsrs	r2, r2, #4
 800d640:	b292      	uxth	r2, r2
 800d642:	4413      	add	r3, r2
 800d644:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d204      	bcs.n	800d658 <find_volume+0x2b0>
 800d64e:	230d      	movs	r3, #13
 800d650:	e0eb      	b.n	800d82a <find_volume+0x482>
 800d652:	bf00      	nop
 800d654:	200000ac 	.word	0x200000ac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d660:	8952      	ldrh	r2, [r2, #10]
 800d662:	fbb3 f3f2 	udiv	r3, r3, r2
 800d666:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <find_volume+0x2ca>
 800d66e:	230d      	movs	r3, #13
 800d670:	e0db      	b.n	800d82a <find_volume+0x482>
		fmt = FS_FAT32;
 800d672:	2303      	movs	r3, #3
 800d674:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d67e:	4293      	cmp	r3, r2
 800d680:	d802      	bhi.n	800d688 <find_volume+0x2e0>
 800d682:	2302      	movs	r3, #2
 800d684:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d68e:	4293      	cmp	r3, r2
 800d690:	d802      	bhi.n	800d698 <find_volume+0x2f0>
 800d692:	2301      	movs	r3, #1
 800d694:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69a:	1c9a      	adds	r2, r3, #2
 800d69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d6a4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d6a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d6a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6aa:	441a      	add	r2, r3
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ae:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d6b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b4:	441a      	add	r2, r3
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800d6ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6be:	2b03      	cmp	r3, #3
 800d6c0:	d11e      	bne.n	800d700 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c4:	3334      	adds	r3, #52	@ 0x34
 800d6c6:	332a      	adds	r3, #42	@ 0x2a
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fe f875 	bl	800b7b8 <ld_word>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d001      	beq.n	800d6d8 <find_volume+0x330>
 800d6d4:	230d      	movs	r3, #13
 800d6d6:	e0a8      	b.n	800d82a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6da:	891b      	ldrh	r3, [r3, #8]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <find_volume+0x33c>
 800d6e0:	230d      	movs	r3, #13
 800d6e2:	e0a2      	b.n	800d82a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e6:	3334      	adds	r3, #52	@ 0x34
 800d6e8:	332c      	adds	r3, #44	@ 0x2c
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe f87c 	bl	800b7e8 <ld_dword>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6fe:	e01f      	b.n	800d740 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d702:	891b      	ldrh	r3, [r3, #8]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d101      	bne.n	800d70c <find_volume+0x364>
 800d708:	230d      	movs	r3, #13
 800d70a:	e08e      	b.n	800d82a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d712:	441a      	add	r2, r3
 800d714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d716:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d718:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d103      	bne.n	800d728 <find_volume+0x380>
 800d720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	005b      	lsls	r3, r3, #1
 800d726:	e00a      	b.n	800d73e <find_volume+0x396>
 800d728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72a:	699a      	ldr	r2, [r3, #24]
 800d72c:	4613      	mov	r3, r2
 800d72e:	005b      	lsls	r3, r3, #1
 800d730:	4413      	add	r3, r2
 800d732:	085a      	lsrs	r2, r3, #1
 800d734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	f003 0301 	and.w	r3, r3, #1
 800d73c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d73e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d742:	69da      	ldr	r2, [r3, #28]
 800d744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d746:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d74a:	0a5b      	lsrs	r3, r3, #9
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d201      	bcs.n	800d754 <find_volume+0x3ac>
 800d750:	230d      	movs	r3, #13
 800d752:	e06a      	b.n	800d82a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d756:	f04f 32ff 	mov.w	r2, #4294967295
 800d75a:	615a      	str	r2, [r3, #20]
 800d75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75e:	695a      	ldr	r2, [r3, #20]
 800d760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d762:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d766:	2280      	movs	r2, #128	@ 0x80
 800d768:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d76a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d149      	bne.n	800d806 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d774:	3334      	adds	r3, #52	@ 0x34
 800d776:	3330      	adds	r3, #48	@ 0x30
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fe f81d 	bl	800b7b8 <ld_word>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b01      	cmp	r3, #1
 800d782:	d140      	bne.n	800d806 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d786:	3301      	adds	r3, #1
 800d788:	4619      	mov	r1, r3
 800d78a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d78c:	f7fe fac4 	bl	800bd18 <move_window>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d137      	bne.n	800d806 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d798:	2200      	movs	r2, #0
 800d79a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79e:	3334      	adds	r3, #52	@ 0x34
 800d7a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fe f807 	bl	800b7b8 <ld_word>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d127      	bne.n	800d806 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b8:	3334      	adds	r3, #52	@ 0x34
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fe f814 	bl	800b7e8 <ld_dword>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	4a1c      	ldr	r2, [pc, #112]	@ (800d834 <find_volume+0x48c>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d11e      	bne.n	800d806 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ca:	3334      	adds	r3, #52	@ 0x34
 800d7cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fe f809 	bl	800b7e8 <ld_dword>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	4a17      	ldr	r2, [pc, #92]	@ (800d838 <find_volume+0x490>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d113      	bne.n	800d806 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e0:	3334      	adds	r3, #52	@ 0x34
 800d7e2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7fd fffe 	bl	800b7e8 <ld_dword>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f4:	3334      	adds	r3, #52	@ 0x34
 800d7f6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7fd fff4 	bl	800b7e8 <ld_dword>
 800d800:	4602      	mov	r2, r0
 800d802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d804:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d808:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d80c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d80e:	4b0b      	ldr	r3, [pc, #44]	@ (800d83c <find_volume+0x494>)
 800d810:	881b      	ldrh	r3, [r3, #0]
 800d812:	3301      	adds	r3, #1
 800d814:	b29a      	uxth	r2, r3
 800d816:	4b09      	ldr	r3, [pc, #36]	@ (800d83c <find_volume+0x494>)
 800d818:	801a      	strh	r2, [r3, #0]
 800d81a:	4b08      	ldr	r3, [pc, #32]	@ (800d83c <find_volume+0x494>)
 800d81c:	881a      	ldrh	r2, [r3, #0]
 800d81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d820:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d822:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d824:	f7fe fa10 	bl	800bc48 <clear_lock>
#endif
	return FR_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3758      	adds	r7, #88	@ 0x58
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	41615252 	.word	0x41615252
 800d838:	61417272 	.word	0x61417272
 800d83c:	200000b0 	.word	0x200000b0

0800d840 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d84a:	2309      	movs	r3, #9
 800d84c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d01c      	beq.n	800d88e <validate+0x4e>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d018      	beq.n	800d88e <validate+0x4e>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d013      	beq.n	800d88e <validate+0x4e>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	889a      	ldrh	r2, [r3, #4]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	88db      	ldrh	r3, [r3, #6]
 800d870:	429a      	cmp	r2, r3
 800d872:	d10c      	bne.n	800d88e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	785b      	ldrb	r3, [r3, #1]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fd fefe 	bl	800b67c <disk_status>
 800d880:	4603      	mov	r3, r0
 800d882:	f003 0301 	and.w	r3, r3, #1
 800d886:	2b00      	cmp	r3, #0
 800d888:	d101      	bne.n	800d88e <validate+0x4e>
			res = FR_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d88e:	7bfb      	ldrb	r3, [r7, #15]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d102      	bne.n	800d89a <validate+0x5a>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	e000      	b.n	800d89c <validate+0x5c>
 800d89a:	2300      	movs	r3, #0
 800d89c:	683a      	ldr	r2, [r7, #0]
 800d89e:	6013      	str	r3, [r2, #0]
	return res;
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
	...

0800d8ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b088      	sub	sp, #32
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d8be:	f107 0310 	add.w	r3, r7, #16
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7ff fcd5 	bl	800d272 <get_ldnumber>
 800d8c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	da01      	bge.n	800d8d4 <f_mount+0x28>
 800d8d0:	230b      	movs	r3, #11
 800d8d2:	e02b      	b.n	800d92c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d8d4:	4a17      	ldr	r2, [pc, #92]	@ (800d934 <f_mount+0x88>)
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d005      	beq.n	800d8f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d8e4:	69b8      	ldr	r0, [r7, #24]
 800d8e6:	f7fe f9af 	bl	800bc48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	490d      	ldr	r1, [pc, #52]	@ (800d934 <f_mount+0x88>)
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <f_mount+0x66>
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d001      	beq.n	800d916 <f_mount+0x6a>
 800d912:	2300      	movs	r3, #0
 800d914:	e00a      	b.n	800d92c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d916:	f107 010c 	add.w	r1, r7, #12
 800d91a:	f107 0308 	add.w	r3, r7, #8
 800d91e:	2200      	movs	r2, #0
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff fd41 	bl	800d3a8 <find_volume>
 800d926:	4603      	mov	r3, r0
 800d928:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3720      	adds	r7, #32
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	200000ac 	.word	0x200000ac

0800d938 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800d93e:	af00      	add	r7, sp, #0
 800d940:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800d944:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800d948:	6018      	str	r0, [r3, #0]
 800d94a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800d94e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800d952:	6019      	str	r1, [r3, #0]
 800d954:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800d958:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800d95c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d95e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800d962:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d101      	bne.n	800d970 <f_open+0x38>
 800d96c:	2309      	movs	r3, #9
 800d96e:	e291      	b.n	800de94 <f_open+0x55c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d970:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800d974:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800d978:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800d97c:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800d980:	7812      	ldrb	r2, [r2, #0]
 800d982:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d986:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800d988:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800d98c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800d990:	781a      	ldrb	r2, [r3, #0]
 800d992:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 800d996:	f107 0308 	add.w	r3, r7, #8
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7ff fd04 	bl	800d3a8 <find_volume>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 800d9a6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f040 8265 	bne.w	800de7a <f_open+0x542>
		dj.obj.fs = fs;
 800d9b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800d9b4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 800d9b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800d9bc:	f107 0214 	add.w	r2, r7, #20
 800d9c0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d9c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800d9c6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff fbdc 	bl	800d190 <follow_path>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d9de:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d11c      	bne.n	800da20 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d9e6:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800d9ea:	b25b      	sxtb	r3, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	da03      	bge.n	800d9f8 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800d9f0:	2306      	movs	r3, #6
 800d9f2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800d9f6:	e013      	b.n	800da20 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d9f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800d9fc:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b01      	cmp	r3, #1
 800da04:	bf8c      	ite	hi
 800da06:	2301      	movhi	r3, #1
 800da08:	2300      	movls	r3, #0
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	461a      	mov	r2, r3
 800da0e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800da12:	4611      	mov	r1, r2
 800da14:	4618      	mov	r0, r3
 800da16:	f7fd ffcf 	bl	800b9b8 <chk_lock>
 800da1a:	4603      	mov	r3, r0
 800da1c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800da20:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800da24:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	f003 031c 	and.w	r3, r3, #28
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f000 80a7 	beq.w	800db82 <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 800da34:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d01f      	beq.n	800da7c <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800da3c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800da40:	2b04      	cmp	r3, #4
 800da42:	d10e      	bne.n	800da62 <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800da44:	f7fe f814 	bl	800ba70 <enq_lock>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d006      	beq.n	800da5c <f_open+0x124>
 800da4e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800da52:	4618      	mov	r0, r3
 800da54:	f7ff f8ec 	bl	800cc30 <dir_register>
 800da58:	4603      	mov	r3, r0
 800da5a:	e000      	b.n	800da5e <f_open+0x126>
 800da5c:	2312      	movs	r3, #18
 800da5e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800da62:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800da66:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800da6a:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800da6e:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800da72:	7812      	ldrb	r2, [r2, #0]
 800da74:	f042 0208 	orr.w	r2, r2, #8
 800da78:	701a      	strb	r2, [r3, #0]
 800da7a:	e015      	b.n	800daa8 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800da7c:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800da80:	f003 0311 	and.w	r3, r3, #17
 800da84:	2b00      	cmp	r3, #0
 800da86:	d003      	beq.n	800da90 <f_open+0x158>
					res = FR_DENIED;
 800da88:	2307      	movs	r3, #7
 800da8a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800da8e:	e00b      	b.n	800daa8 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800da90:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800da94:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	f003 0304 	and.w	r3, r3, #4
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d002      	beq.n	800daa8 <f_open+0x170>
 800daa2:	2308      	movs	r3, #8
 800daa4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800daa8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800daac:	2b00      	cmp	r3, #0
 800daae:	f040 8088 	bne.w	800dbc2 <f_open+0x28a>
 800dab2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dab6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	f003 0308 	and.w	r3, r3, #8
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d07e      	beq.n	800dbc2 <f_open+0x28a>
				dw = GET_FATTIME();
 800dac4:	f000 ffde 	bl	800ea84 <get_fattime>
 800dac8:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dacc:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800dad0:	330e      	adds	r3, #14
 800dad2:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fd fec4 	bl	800b864 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dadc:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800dae0:	3316      	adds	r3, #22
 800dae2:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fd febc 	bl	800b864 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800daec:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800daf0:	330b      	adds	r3, #11
 800daf2:	2220      	movs	r2, #32
 800daf4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800daf6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800dafa:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800dafe:	4611      	mov	r1, r2
 800db00:	4618      	mov	r0, r3
 800db02:	f7fe fe0d 	bl	800c720 <ld_clust>
 800db06:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800db0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800db0e:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800db12:	2200      	movs	r2, #0
 800db14:	4618      	mov	r0, r3
 800db16:	f7fe fe22 	bl	800c75e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800db1a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800db1e:	331c      	adds	r3, #28
 800db20:	2100      	movs	r1, #0
 800db22:	4618      	mov	r0, r3
 800db24:	f7fd fe9e 	bl	800b864 <st_dword>
					fs->wflag = 1;
 800db28:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800db2c:	2201      	movs	r2, #1
 800db2e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800db30:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800db34:	2b00      	cmp	r3, #0
 800db36:	d044      	beq.n	800dbc2 <f_open+0x28a>
						dw = fs->winsect;
 800db38:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800db3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db3e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800db42:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800db46:	2200      	movs	r2, #0
 800db48:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fe fb2f 	bl	800c1b0 <remove_chain>
 800db52:	4603      	mov	r3, r0
 800db54:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 800db58:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d130      	bne.n	800dbc2 <f_open+0x28a>
							res = move_window(fs, dw);
 800db60:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800db64:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fe f8d5 	bl	800bd18 <move_window>
 800db6e:	4603      	mov	r3, r0
 800db70:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800db74:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800db78:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800db7c:	3a01      	subs	r2, #1
 800db7e:	611a      	str	r2, [r3, #16]
 800db80:	e01f      	b.n	800dbc2 <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800db82:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800db86:	2b00      	cmp	r3, #0
 800db88:	d11b      	bne.n	800dbc2 <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800db8a:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800db8e:	f003 0310 	and.w	r3, r3, #16
 800db92:	2b00      	cmp	r3, #0
 800db94:	d003      	beq.n	800db9e <f_open+0x266>
					res = FR_NO_FILE;
 800db96:	2304      	movs	r3, #4
 800db98:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800db9c:	e011      	b.n	800dbc2 <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800db9e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dba2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	f003 0302 	and.w	r3, r3, #2
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d008      	beq.n	800dbc2 <f_open+0x28a>
 800dbb0:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800dbb4:	f003 0301 	and.w	r3, r3, #1
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <f_open+0x28a>
						res = FR_DENIED;
 800dbbc:	2307      	movs	r3, #7
 800dbbe:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800dbc2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d148      	bne.n	800dc5c <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dbca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dbce:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	f003 0308 	and.w	r3, r3, #8
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d00b      	beq.n	800dbf4 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 800dbdc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dbe0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800dbe4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800dbe8:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800dbec:	7812      	ldrb	r2, [r2, #0]
 800dbee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dbf2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dbf4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800dbf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dbfa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dbfe:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800dc06:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800dc0a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dc0e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc16:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dc1a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	bf8c      	ite	hi
 800dc24:	2301      	movhi	r3, #1
 800dc26:	2300      	movls	r3, #0
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800dc30:	4611      	mov	r1, r2
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fd ff3e 	bl	800bab4 <inc_lock>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dc3e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dc46:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dc4a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	691b      	ldr	r3, [r3, #16]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d102      	bne.n	800dc5c <f_open+0x324>
 800dc56:	2302      	movs	r3, #2
 800dc58:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dc5c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f040 810a 	bne.w	800de7a <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dc66:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800dc6a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800dc6e:	4611      	mov	r1, r2
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fe fd55 	bl	800c720 <ld_clust>
 800dc76:	4602      	mov	r2, r0
 800dc78:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dc7c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dc84:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800dc88:	331c      	adds	r3, #28
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fd fdac 	bl	800b7e8 <ld_dword>
 800dc90:	4602      	mov	r2, r0
 800dc92:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dc96:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dc9e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dca2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dcac:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800dcb0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dcb4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dcbc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800dcc0:	88da      	ldrh	r2, [r3, #6]
 800dcc2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dcc6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dcce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dcd2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800dcdc:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800dce0:	7812      	ldrb	r2, [r2, #0]
 800dce2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dce4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dce8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dcf2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dcf6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dd00:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dd04:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dd0e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dd12:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	3330      	adds	r3, #48	@ 0x30
 800dd1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd1e:	2100      	movs	r1, #0
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7fd fdec 	bl	800b8fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dd26:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dd2a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	f003 0320 	and.w	r3, r3, #32
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f000 80a0 	beq.w	800de7a <f_open+0x542>
 800dd3a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dd3e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 8097 	beq.w	800de7a <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dd4c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dd50:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68da      	ldr	r2, [r3, #12]
 800dd58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dd5c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dd64:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800dd68:	895b      	ldrh	r3, [r3, #10]
 800dd6a:	025b      	lsls	r3, r3, #9
 800dd6c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dd70:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dd74:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	689b      	ldr	r3, [r3, #8]
 800dd7c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd80:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dd84:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800dd90:	e021      	b.n	800ddd6 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 800dd92:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800dd96:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fe f874 	bl	800be8e <get_fat>
 800dda6:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800ddaa:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d802      	bhi.n	800ddb8 <f_open+0x480>
 800ddb2:	2302      	movs	r3, #2
 800ddb4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ddb8:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800ddbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddc0:	d102      	bne.n	800ddc8 <f_open+0x490>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ddc8:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800ddcc:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800ddd6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d105      	bne.n	800ddea <f_open+0x4b2>
 800ddde:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800dde2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d8d3      	bhi.n	800dd92 <f_open+0x45a>
				}
				fp->clust = clst;
 800ddea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ddee:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800ddf8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ddfa:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d13b      	bne.n	800de7a <f_open+0x542>
 800de02:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800de06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d035      	beq.n	800de7a <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800de0e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800de12:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800de16:	4618      	mov	r0, r3
 800de18:	f7fe f81a 	bl	800be50 <clust2sect>
 800de1c:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 800de20:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800de24:	2b00      	cmp	r3, #0
 800de26:	d103      	bne.n	800de30 <f_open+0x4f8>
						res = FR_INT_ERR;
 800de28:	2302      	movs	r3, #2
 800de2a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800de2e:	e024      	b.n	800de7a <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800de30:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800de34:	0a5a      	lsrs	r2, r3, #9
 800de36:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800de3a:	441a      	add	r2, r3
 800de3c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800de40:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800de48:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800de4c:	7858      	ldrb	r0, [r3, #1]
 800de4e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800de52:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de5c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800de60:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6a1a      	ldr	r2, [r3, #32]
 800de68:	2301      	movs	r3, #1
 800de6a:	f7fd fc47 	bl	800b6fc <disk_read>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d002      	beq.n	800de7a <f_open+0x542>
 800de74:	2301      	movs	r3, #1
 800de76:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800de7a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d006      	beq.n	800de90 <f_open+0x558>
 800de82:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800de86:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2200      	movs	r2, #0
 800de8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800de90:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 800de94:	4618      	mov	r0, r3
 800de96:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b08c      	sub	sp, #48	@ 0x30
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	60f8      	str	r0, [r7, #12]
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
 800deaa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	2200      	movs	r2, #0
 800deb4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f107 0210 	add.w	r2, r7, #16
 800debc:	4611      	mov	r1, r2
 800debe:	4618      	mov	r0, r3
 800dec0:	f7ff fcbe 	bl	800d840 <validate>
 800dec4:	4603      	mov	r3, r0
 800dec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800deca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d107      	bne.n	800dee2 <f_write+0x44>
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	7d5b      	ldrb	r3, [r3, #21]
 800ded6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800deda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d002      	beq.n	800dee8 <f_write+0x4a>
 800dee2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dee6:	e14b      	b.n	800e180 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	7d1b      	ldrb	r3, [r3, #20]
 800deec:	f003 0302 	and.w	r3, r3, #2
 800def0:	2b00      	cmp	r3, #0
 800def2:	d101      	bne.n	800def8 <f_write+0x5a>
 800def4:	2307      	movs	r3, #7
 800def6:	e143      	b.n	800e180 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	699a      	ldr	r2, [r3, #24]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	441a      	add	r2, r3
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	699b      	ldr	r3, [r3, #24]
 800df04:	429a      	cmp	r2, r3
 800df06:	f080 812d 	bcs.w	800e164 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	699b      	ldr	r3, [r3, #24]
 800df0e:	43db      	mvns	r3, r3
 800df10:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800df12:	e127      	b.n	800e164 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	699b      	ldr	r3, [r3, #24]
 800df18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f040 80e3 	bne.w	800e0e8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	699b      	ldr	r3, [r3, #24]
 800df26:	0a5b      	lsrs	r3, r3, #9
 800df28:	693a      	ldr	r2, [r7, #16]
 800df2a:	8952      	ldrh	r2, [r2, #10]
 800df2c:	3a01      	subs	r2, #1
 800df2e:	4013      	ands	r3, r2
 800df30:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d143      	bne.n	800dfc0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10c      	bne.n	800df5a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800df46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d11a      	bne.n	800df82 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2100      	movs	r1, #0
 800df50:	4618      	mov	r0, r3
 800df52:	f7fe f992 	bl	800c27a <create_chain>
 800df56:	62b8      	str	r0, [r7, #40]	@ 0x28
 800df58:	e013      	b.n	800df82 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d007      	beq.n	800df72 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	699b      	ldr	r3, [r3, #24]
 800df66:	4619      	mov	r1, r3
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f7fe fa1e 	bl	800c3aa <clmt_clust>
 800df6e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800df70:	e007      	b.n	800df82 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	69db      	ldr	r3, [r3, #28]
 800df78:	4619      	mov	r1, r3
 800df7a:	4610      	mov	r0, r2
 800df7c:	f7fe f97d 	bl	800c27a <create_chain>
 800df80:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800df82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df84:	2b00      	cmp	r3, #0
 800df86:	f000 80f2 	beq.w	800e16e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800df8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d104      	bne.n	800df9a <f_write+0xfc>
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2202      	movs	r2, #2
 800df94:	755a      	strb	r2, [r3, #21]
 800df96:	2302      	movs	r3, #2
 800df98:	e0f2      	b.n	800e180 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfa0:	d104      	bne.n	800dfac <f_write+0x10e>
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	755a      	strb	r2, [r3, #21]
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e0e9      	b.n	800e180 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfb0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d102      	bne.n	800dfc0 <f_write+0x122>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfbe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	7d1b      	ldrb	r3, [r3, #20]
 800dfc4:	b25b      	sxtb	r3, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	da18      	bge.n	800dffc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	7858      	ldrb	r0, [r3, #1]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6a1a      	ldr	r2, [r3, #32]
 800dfd8:	2301      	movs	r3, #1
 800dfda:	f7fd fbaf 	bl	800b73c <disk_write>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d004      	beq.n	800dfee <f_write+0x150>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	755a      	strb	r2, [r3, #21]
 800dfea:	2301      	movs	r3, #1
 800dfec:	e0c8      	b.n	800e180 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	7d1b      	ldrb	r3, [r3, #20]
 800dff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dffc:	693a      	ldr	r2, [r7, #16]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	69db      	ldr	r3, [r3, #28]
 800e002:	4619      	mov	r1, r3
 800e004:	4610      	mov	r0, r2
 800e006:	f7fd ff23 	bl	800be50 <clust2sect>
 800e00a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d104      	bne.n	800e01c <f_write+0x17e>
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2202      	movs	r2, #2
 800e016:	755a      	strb	r2, [r3, #21]
 800e018:	2302      	movs	r3, #2
 800e01a:	e0b1      	b.n	800e180 <f_write+0x2e2>
			sect += csect;
 800e01c:	697a      	ldr	r2, [r7, #20]
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	4413      	add	r3, r2
 800e022:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	0a5b      	lsrs	r3, r3, #9
 800e028:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e02a:	6a3b      	ldr	r3, [r7, #32]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d03c      	beq.n	800e0aa <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e030:	69ba      	ldr	r2, [r7, #24]
 800e032:	6a3b      	ldr	r3, [r7, #32]
 800e034:	4413      	add	r3, r2
 800e036:	693a      	ldr	r2, [r7, #16]
 800e038:	8952      	ldrh	r2, [r2, #10]
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d905      	bls.n	800e04a <f_write+0x1ac>
					cc = fs->csize - csect;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	895b      	ldrh	r3, [r3, #10]
 800e042:	461a      	mov	r2, r3
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	7858      	ldrb	r0, [r3, #1]
 800e04e:	6a3b      	ldr	r3, [r7, #32]
 800e050:	697a      	ldr	r2, [r7, #20]
 800e052:	69f9      	ldr	r1, [r7, #28]
 800e054:	f7fd fb72 	bl	800b73c <disk_write>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d004      	beq.n	800e068 <f_write+0x1ca>
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2201      	movs	r2, #1
 800e062:	755a      	strb	r2, [r3, #21]
 800e064:	2301      	movs	r3, #1
 800e066:	e08b      	b.n	800e180 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6a1a      	ldr	r2, [r3, #32]
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	6a3a      	ldr	r2, [r7, #32]
 800e072:	429a      	cmp	r2, r3
 800e074:	d915      	bls.n	800e0a2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6a1a      	ldr	r2, [r3, #32]
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	025b      	lsls	r3, r3, #9
 800e086:	69fa      	ldr	r2, [r7, #28]
 800e088:	4413      	add	r3, r2
 800e08a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e08e:	4619      	mov	r1, r3
 800e090:	f7fd fc14 	bl	800b8bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	7d1b      	ldrb	r3, [r3, #20]
 800e098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e0a2:	6a3b      	ldr	r3, [r7, #32]
 800e0a4:	025b      	lsls	r3, r3, #9
 800e0a6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e0a8:	e03f      	b.n	800e12a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6a1b      	ldr	r3, [r3, #32]
 800e0ae:	697a      	ldr	r2, [r7, #20]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d016      	beq.n	800e0e2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	699a      	ldr	r2, [r3, #24]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d210      	bcs.n	800e0e2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	7858      	ldrb	r0, [r3, #1]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	697a      	ldr	r2, [r7, #20]
 800e0ce:	f7fd fb15 	bl	800b6fc <disk_read>
 800e0d2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d004      	beq.n	800e0e2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	755a      	strb	r2, [r3, #21]
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e04e      	b.n	800e180 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	697a      	ldr	r2, [r7, #20]
 800e0e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	699b      	ldr	r3, [r3, #24]
 800e0ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0f0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e0f4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e0f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d901      	bls.n	800e102 <f_write+0x264>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	699b      	ldr	r3, [r3, #24]
 800e10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e110:	4413      	add	r3, r2
 800e112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e114:	69f9      	ldr	r1, [r7, #28]
 800e116:	4618      	mov	r0, r3
 800e118:	f7fd fbd0 	bl	800b8bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	7d1b      	ldrb	r3, [r3, #20]
 800e120:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e124:	b2da      	uxtb	r2, r3
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e12a:	69fa      	ldr	r2, [r7, #28]
 800e12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12e:	4413      	add	r3, r2
 800e130:	61fb      	str	r3, [r7, #28]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	699a      	ldr	r2, [r3, #24]
 800e136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e138:	441a      	add	r2, r3
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	619a      	str	r2, [r3, #24]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	68da      	ldr	r2, [r3, #12]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	699b      	ldr	r3, [r3, #24]
 800e146:	429a      	cmp	r2, r3
 800e148:	bf38      	it	cc
 800e14a:	461a      	movcc	r2, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	60da      	str	r2, [r3, #12]
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e156:	441a      	add	r2, r3
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	601a      	str	r2, [r3, #0]
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	f47f aed4 	bne.w	800df14 <f_write+0x76>
 800e16c:	e000      	b.n	800e170 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e16e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	7d1b      	ldrb	r3, [r3, #20]
 800e174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3730      	adds	r7, #48	@ 0x30
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b086      	sub	sp, #24
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f107 0208 	add.w	r2, r7, #8
 800e196:	4611      	mov	r1, r2
 800e198:	4618      	mov	r0, r3
 800e19a:	f7ff fb51 	bl	800d840 <validate>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e1a2:	7dfb      	ldrb	r3, [r7, #23]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d168      	bne.n	800e27a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	7d1b      	ldrb	r3, [r3, #20]
 800e1ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d062      	beq.n	800e27a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	7d1b      	ldrb	r3, [r3, #20]
 800e1b8:	b25b      	sxtb	r3, r3
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	da15      	bge.n	800e1ea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	7858      	ldrb	r0, [r3, #1]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6a1a      	ldr	r2, [r3, #32]
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	f7fd fab5 	bl	800b73c <disk_write>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <f_sync+0x54>
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e04f      	b.n	800e27c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	7d1b      	ldrb	r3, [r3, #20]
 800e1e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e1ea:	f000 fc4b 	bl	800ea84 <get_fattime>
 800e1ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e1f0:	68ba      	ldr	r2, [r7, #8]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	f7fd fd8d 	bl	800bd18 <move_window>
 800e1fe:	4603      	mov	r3, r0
 800e200:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e202:	7dfb      	ldrb	r3, [r7, #23]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d138      	bne.n	800e27a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e20c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	330b      	adds	r3, #11
 800e212:	781a      	ldrb	r2, [r3, #0]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	330b      	adds	r3, #11
 800e218:	f042 0220 	orr.w	r2, r2, #32
 800e21c:	b2d2      	uxtb	r2, r2
 800e21e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6818      	ldr	r0, [r3, #0]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	461a      	mov	r2, r3
 800e22a:	68f9      	ldr	r1, [r7, #12]
 800e22c:	f7fe fa97 	bl	800c75e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f103 021c 	add.w	r2, r3, #28
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	4619      	mov	r1, r3
 800e23c:	4610      	mov	r0, r2
 800e23e:	f7fd fb11 	bl	800b864 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	3316      	adds	r3, #22
 800e246:	6939      	ldr	r1, [r7, #16]
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fd fb0b 	bl	800b864 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	3312      	adds	r3, #18
 800e252:	2100      	movs	r1, #0
 800e254:	4618      	mov	r0, r3
 800e256:	f7fd faea 	bl	800b82e <st_word>
					fs->wflag = 1;
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	2201      	movs	r2, #1
 800e25e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	4618      	mov	r0, r3
 800e264:	f7fd fd86 	bl	800bd74 <sync_fs>
 800e268:	4603      	mov	r3, r0
 800e26a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	7d1b      	ldrb	r3, [r3, #20]
 800e270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e274:	b2da      	uxtb	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e27a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3718      	adds	r7, #24
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7ff ff7b 	bl	800e188 <f_sync>
 800e292:	4603      	mov	r3, r0
 800e294:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e296:	7bfb      	ldrb	r3, [r7, #15]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d118      	bne.n	800e2ce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f107 0208 	add.w	r2, r7, #8
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7ff facb 	bl	800d840 <validate>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e2ae:	7bfb      	ldrb	r3, [r7, #15]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10c      	bne.n	800e2ce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fd fc89 	bl	800bbd0 <dec_lock>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e2c2:	7bfb      	ldrb	r3, [r7, #15]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d102      	bne.n	800e2ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b087      	sub	sp, #28
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e2ee:	4b1f      	ldr	r3, [pc, #124]	@ (800e36c <FATFS_LinkDriverEx+0x94>)
 800e2f0:	7a5b      	ldrb	r3, [r3, #9]
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d131      	bne.n	800e35c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e2f8:	4b1c      	ldr	r3, [pc, #112]	@ (800e36c <FATFS_LinkDriverEx+0x94>)
 800e2fa:	7a5b      	ldrb	r3, [r3, #9]
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	461a      	mov	r2, r3
 800e300:	4b1a      	ldr	r3, [pc, #104]	@ (800e36c <FATFS_LinkDriverEx+0x94>)
 800e302:	2100      	movs	r1, #0
 800e304:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e306:	4b19      	ldr	r3, [pc, #100]	@ (800e36c <FATFS_LinkDriverEx+0x94>)
 800e308:	7a5b      	ldrb	r3, [r3, #9]
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	4a17      	ldr	r2, [pc, #92]	@ (800e36c <FATFS_LinkDriverEx+0x94>)
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	68fa      	ldr	r2, [r7, #12]
 800e314:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e316:	4b15      	ldr	r3, [pc, #84]	@ (800e36c <FATFS_LinkDriverEx+0x94>)
 800e318:	7a5b      	ldrb	r3, [r3, #9]
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	461a      	mov	r2, r3
 800e31e:	4b13      	ldr	r3, [pc, #76]	@ (800e36c <FATFS_LinkDriverEx+0x94>)
 800e320:	4413      	add	r3, r2
 800e322:	79fa      	ldrb	r2, [r7, #7]
 800e324:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e326:	4b11      	ldr	r3, [pc, #68]	@ (800e36c <FATFS_LinkDriverEx+0x94>)
 800e328:	7a5b      	ldrb	r3, [r3, #9]
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	1c5a      	adds	r2, r3, #1
 800e32e:	b2d1      	uxtb	r1, r2
 800e330:	4a0e      	ldr	r2, [pc, #56]	@ (800e36c <FATFS_LinkDriverEx+0x94>)
 800e332:	7251      	strb	r1, [r2, #9]
 800e334:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e336:	7dbb      	ldrb	r3, [r7, #22]
 800e338:	3330      	adds	r3, #48	@ 0x30
 800e33a:	b2da      	uxtb	r2, r3
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	3301      	adds	r3, #1
 800e344:	223a      	movs	r2, #58	@ 0x3a
 800e346:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	3302      	adds	r3, #2
 800e34c:	222f      	movs	r2, #47	@ 0x2f
 800e34e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	3303      	adds	r3, #3
 800e354:	2200      	movs	r2, #0
 800e356:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	371c      	adds	r7, #28
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop
 800e36c:	200000d4 	.word	0x200000d4

0800e370 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e37a:	2200      	movs	r2, #0
 800e37c:	6839      	ldr	r1, [r7, #0]
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7ff ffaa 	bl	800e2d8 <FATFS_LinkDriverEx>
 800e384:	4603      	mov	r3, r0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
	...

0800e390 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e390:	b480      	push	{r7}
 800e392:	b085      	sub	sp, #20
 800e394:	af00      	add	r7, sp, #0
 800e396:	4603      	mov	r3, r0
 800e398:	6039      	str	r1, [r7, #0]
 800e39a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e39c:	88fb      	ldrh	r3, [r7, #6]
 800e39e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e3a0:	d802      	bhi.n	800e3a8 <ff_convert+0x18>
		c = chr;
 800e3a2:	88fb      	ldrh	r3, [r7, #6]
 800e3a4:	81fb      	strh	r3, [r7, #14]
 800e3a6:	e025      	b.n	800e3f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00b      	beq.n	800e3c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e3ae:	88fb      	ldrh	r3, [r7, #6]
 800e3b0:	2bff      	cmp	r3, #255	@ 0xff
 800e3b2:	d805      	bhi.n	800e3c0 <ff_convert+0x30>
 800e3b4:	88fb      	ldrh	r3, [r7, #6]
 800e3b6:	3b80      	subs	r3, #128	@ 0x80
 800e3b8:	4a12      	ldr	r2, [pc, #72]	@ (800e404 <ff_convert+0x74>)
 800e3ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3be:	e000      	b.n	800e3c2 <ff_convert+0x32>
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	81fb      	strh	r3, [r7, #14]
 800e3c4:	e016      	b.n	800e3f4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	81fb      	strh	r3, [r7, #14]
 800e3ca:	e009      	b.n	800e3e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e3cc:	89fb      	ldrh	r3, [r7, #14]
 800e3ce:	4a0d      	ldr	r2, [pc, #52]	@ (800e404 <ff_convert+0x74>)
 800e3d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3d4:	88fa      	ldrh	r2, [r7, #6]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d006      	beq.n	800e3e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e3da:	89fb      	ldrh	r3, [r7, #14]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	81fb      	strh	r3, [r7, #14]
 800e3e0:	89fb      	ldrh	r3, [r7, #14]
 800e3e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e3e4:	d9f2      	bls.n	800e3cc <ff_convert+0x3c>
 800e3e6:	e000      	b.n	800e3ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e3e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e3ea:	89fb      	ldrh	r3, [r7, #14]
 800e3ec:	3380      	adds	r3, #128	@ 0x80
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e3f4:	89fb      	ldrh	r3, [r7, #14]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3714      	adds	r7, #20
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	08011534 	.word	0x08011534

0800e408 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e408:	b480      	push	{r7}
 800e40a:	b087      	sub	sp, #28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	4603      	mov	r3, r0
 800e410:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e412:	88fb      	ldrh	r3, [r7, #6]
 800e414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e418:	d201      	bcs.n	800e41e <ff_wtoupper+0x16>
 800e41a:	4b3e      	ldr	r3, [pc, #248]	@ (800e514 <ff_wtoupper+0x10c>)
 800e41c:	e000      	b.n	800e420 <ff_wtoupper+0x18>
 800e41e:	4b3e      	ldr	r3, [pc, #248]	@ (800e518 <ff_wtoupper+0x110>)
 800e420:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	1c9a      	adds	r2, r3, #2
 800e426:	617a      	str	r2, [r7, #20]
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e42c:	8a7b      	ldrh	r3, [r7, #18]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d068      	beq.n	800e504 <ff_wtoupper+0xfc>
 800e432:	88fa      	ldrh	r2, [r7, #6]
 800e434:	8a7b      	ldrh	r3, [r7, #18]
 800e436:	429a      	cmp	r2, r3
 800e438:	d364      	bcc.n	800e504 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	1c9a      	adds	r2, r3, #2
 800e43e:	617a      	str	r2, [r7, #20]
 800e440:	881b      	ldrh	r3, [r3, #0]
 800e442:	823b      	strh	r3, [r7, #16]
 800e444:	8a3b      	ldrh	r3, [r7, #16]
 800e446:	0a1b      	lsrs	r3, r3, #8
 800e448:	81fb      	strh	r3, [r7, #14]
 800e44a:	8a3b      	ldrh	r3, [r7, #16]
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e450:	88fa      	ldrh	r2, [r7, #6]
 800e452:	8a79      	ldrh	r1, [r7, #18]
 800e454:	8a3b      	ldrh	r3, [r7, #16]
 800e456:	440b      	add	r3, r1
 800e458:	429a      	cmp	r2, r3
 800e45a:	da49      	bge.n	800e4f0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e45c:	89fb      	ldrh	r3, [r7, #14]
 800e45e:	2b08      	cmp	r3, #8
 800e460:	d84f      	bhi.n	800e502 <ff_wtoupper+0xfa>
 800e462:	a201      	add	r2, pc, #4	@ (adr r2, 800e468 <ff_wtoupper+0x60>)
 800e464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e468:	0800e48d 	.word	0x0800e48d
 800e46c:	0800e49f 	.word	0x0800e49f
 800e470:	0800e4b5 	.word	0x0800e4b5
 800e474:	0800e4bd 	.word	0x0800e4bd
 800e478:	0800e4c5 	.word	0x0800e4c5
 800e47c:	0800e4cd 	.word	0x0800e4cd
 800e480:	0800e4d5 	.word	0x0800e4d5
 800e484:	0800e4dd 	.word	0x0800e4dd
 800e488:	0800e4e5 	.word	0x0800e4e5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e48c:	88fa      	ldrh	r2, [r7, #6]
 800e48e:	8a7b      	ldrh	r3, [r7, #18]
 800e490:	1ad3      	subs	r3, r2, r3
 800e492:	005b      	lsls	r3, r3, #1
 800e494:	697a      	ldr	r2, [r7, #20]
 800e496:	4413      	add	r3, r2
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	80fb      	strh	r3, [r7, #6]
 800e49c:	e027      	b.n	800e4ee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e49e:	88fa      	ldrh	r2, [r7, #6]
 800e4a0:	8a7b      	ldrh	r3, [r7, #18]
 800e4a2:	1ad3      	subs	r3, r2, r3
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	f003 0301 	and.w	r3, r3, #1
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	88fa      	ldrh	r2, [r7, #6]
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	80fb      	strh	r3, [r7, #6]
 800e4b2:	e01c      	b.n	800e4ee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e4b4:	88fb      	ldrh	r3, [r7, #6]
 800e4b6:	3b10      	subs	r3, #16
 800e4b8:	80fb      	strh	r3, [r7, #6]
 800e4ba:	e018      	b.n	800e4ee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e4bc:	88fb      	ldrh	r3, [r7, #6]
 800e4be:	3b20      	subs	r3, #32
 800e4c0:	80fb      	strh	r3, [r7, #6]
 800e4c2:	e014      	b.n	800e4ee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e4c4:	88fb      	ldrh	r3, [r7, #6]
 800e4c6:	3b30      	subs	r3, #48	@ 0x30
 800e4c8:	80fb      	strh	r3, [r7, #6]
 800e4ca:	e010      	b.n	800e4ee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e4cc:	88fb      	ldrh	r3, [r7, #6]
 800e4ce:	3b1a      	subs	r3, #26
 800e4d0:	80fb      	strh	r3, [r7, #6]
 800e4d2:	e00c      	b.n	800e4ee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e4d4:	88fb      	ldrh	r3, [r7, #6]
 800e4d6:	3308      	adds	r3, #8
 800e4d8:	80fb      	strh	r3, [r7, #6]
 800e4da:	e008      	b.n	800e4ee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e4dc:	88fb      	ldrh	r3, [r7, #6]
 800e4de:	3b50      	subs	r3, #80	@ 0x50
 800e4e0:	80fb      	strh	r3, [r7, #6]
 800e4e2:	e004      	b.n	800e4ee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e4e4:	88fb      	ldrh	r3, [r7, #6]
 800e4e6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800e4ea:	80fb      	strh	r3, [r7, #6]
 800e4ec:	bf00      	nop
			}
			break;
 800e4ee:	e008      	b.n	800e502 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e4f0:	89fb      	ldrh	r3, [r7, #14]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d195      	bne.n	800e422 <ff_wtoupper+0x1a>
 800e4f6:	8a3b      	ldrh	r3, [r7, #16]
 800e4f8:	005b      	lsls	r3, r3, #1
 800e4fa:	697a      	ldr	r2, [r7, #20]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e500:	e78f      	b.n	800e422 <ff_wtoupper+0x1a>
			break;
 800e502:	bf00      	nop
	}

	return chr;
 800e504:	88fb      	ldrh	r3, [r7, #6]
}
 800e506:	4618      	mov	r0, r3
 800e508:	371c      	adds	r7, #28
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop
 800e514:	08011634 	.word	0x08011634
 800e518:	08011828 	.word	0x08011828

0800e51c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e522:	2300      	movs	r3, #0
 800e524:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e526:	f000 f89b 	bl	800e660 <BSP_SD_IsDetected>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d001      	beq.n	800e534 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e530:	2302      	movs	r3, #2
 800e532:	e012      	b.n	800e55a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e534:	480b      	ldr	r0, [pc, #44]	@ (800e564 <BSP_SD_Init+0x48>)
 800e536:	f7f8 fb35 	bl	8006ba4 <HAL_SD_Init>
 800e53a:	4603      	mov	r3, r0
 800e53c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e53e:	79fb      	ldrb	r3, [r7, #7]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d109      	bne.n	800e558 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e544:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800e548:	4806      	ldr	r0, [pc, #24]	@ (800e564 <BSP_SD_Init+0x48>)
 800e54a:	f7f9 fc21 	bl	8007d90 <HAL_SD_ConfigWideBusOperation>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e554:	2301      	movs	r3, #1
 800e556:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e558:	79fb      	ldrb	r3, [r7, #7]
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3708      	adds	r7, #8
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	2000f6c0 	.word	0x2000f6c0

0800e568 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b088      	sub	sp, #32
 800e56c:	af02      	add	r7, sp, #8
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	607a      	str	r2, [r7, #4]
 800e574:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e576:	2300      	movs	r3, #0
 800e578:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	9300      	str	r3, [sp, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	68ba      	ldr	r2, [r7, #8]
 800e582:	68f9      	ldr	r1, [r7, #12]
 800e584:	4806      	ldr	r0, [pc, #24]	@ (800e5a0 <BSP_SD_ReadBlocks+0x38>)
 800e586:	f7f8 fc95 	bl	8006eb4 <HAL_SD_ReadBlocks>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d001      	beq.n	800e594 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e590:	2301      	movs	r3, #1
 800e592:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e594:	7dfb      	ldrb	r3, [r7, #23]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	2000f6c0 	.word	0x2000f6c0

0800e5a4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b088      	sub	sp, #32
 800e5a8:	af02      	add	r7, sp, #8
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
 800e5b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	68f9      	ldr	r1, [r7, #12]
 800e5c0:	4806      	ldr	r0, [pc, #24]	@ (800e5dc <BSP_SD_WriteBlocks+0x38>)
 800e5c2:	f7f8 fe09 	bl	80071d8 <HAL_SD_WriteBlocks>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3718      	adds	r7, #24
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	2000f6c0 	.word	0x2000f6c0

0800e5e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e5e4:	4805      	ldr	r0, [pc, #20]	@ (800e5fc <BSP_SD_GetCardState+0x1c>)
 800e5e6:	f7f9 fcf9 	bl	8007fdc <HAL_SD_GetCardState>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b04      	cmp	r3, #4
 800e5ee:	bf14      	ite	ne
 800e5f0:	2301      	movne	r3, #1
 800e5f2:	2300      	moveq	r3, #0
 800e5f4:	b2db      	uxtb	r3, r3
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	2000f6c0 	.word	0x2000f6c0

0800e600 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e608:	6879      	ldr	r1, [r7, #4]
 800e60a:	4803      	ldr	r0, [pc, #12]	@ (800e618 <BSP_SD_GetCardInfo+0x18>)
 800e60c:	f7f9 fb94 	bl	8007d38 <HAL_SD_GetCardInfo>
}
 800e610:	bf00      	nop
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	2000f6c0 	.word	0x2000f6c0

0800e61c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e624:	f000 f80e 	bl	800e644 <BSP_SD_WriteCpltCallback>
}
 800e628:	bf00      	nop
 800e62a:	3708      	adds	r7, #8
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e638:	f000 f80b 	bl	800e652 <BSP_SD_ReadCpltCallback>
}
 800e63c:	bf00      	nop
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800e644:	b480      	push	{r7}
 800e646:	af00      	add	r7, sp, #0

}
 800e648:	bf00      	nop
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr

0800e652 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800e652:	b480      	push	{r7}
 800e654:	af00      	add	r7, sp, #0

}
 800e656:	bf00      	nop
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr

0800e660 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e666:	2301      	movs	r3, #1
 800e668:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e66a:	f000 fa13 	bl	800ea94 <BSP_PlatformIsDetected>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d101      	bne.n	800e678 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e674:	2300      	movs	r3, #0
 800e676:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e678:	79fb      	ldrb	r3, [r7, #7]
 800e67a:	b2db      	uxtb	r3, r3
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800e688:	4b2c      	ldr	r3, [pc, #176]	@ (800e73c <MX_DFSDM1_Init+0xb8>)
 800e68a:	4a2d      	ldr	r2, [pc, #180]	@ (800e740 <MX_DFSDM1_Init+0xbc>)
 800e68c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800e68e:	4b2b      	ldr	r3, [pc, #172]	@ (800e73c <MX_DFSDM1_Init+0xb8>)
 800e690:	2200      	movs	r2, #0
 800e692:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800e694:	4b29      	ldr	r3, [pc, #164]	@ (800e73c <MX_DFSDM1_Init+0xb8>)
 800e696:	2201      	movs	r2, #1
 800e698:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800e69a:	4b28      	ldr	r3, [pc, #160]	@ (800e73c <MX_DFSDM1_Init+0xb8>)
 800e69c:	2201      	movs	r2, #1
 800e69e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800e6a0:	4b26      	ldr	r3, [pc, #152]	@ (800e73c <MX_DFSDM1_Init+0xb8>)
 800e6a2:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800e6a6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 68;
 800e6a8:	4b24      	ldr	r3, [pc, #144]	@ (800e73c <MX_DFSDM1_Init+0xb8>)
 800e6aa:	2244      	movs	r2, #68	@ 0x44
 800e6ac:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800e6ae:	4b23      	ldr	r3, [pc, #140]	@ (800e73c <MX_DFSDM1_Init+0xb8>)
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800e6b4:	4821      	ldr	r0, [pc, #132]	@ (800e73c <MX_DFSDM1_Init+0xb8>)
 800e6b6:	f7f2 fb0b 	bl	8000cd0 <HAL_DFSDM_FilterInit>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d001      	beq.n	800e6c4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800e6c0:	f000 ff10 	bl	800f4e4 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800e6c4:	4b1f      	ldr	r3, [pc, #124]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e6c6:	4a20      	ldr	r2, [pc, #128]	@ (800e748 <MX_DFSDM1_Init+0xc4>)
 800e6c8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 800e6ca:	4b1e      	ldr	r3, [pc, #120]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800e6d0:	4b1c      	ldr	r3, [pc, #112]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 40;
 800e6d6:	4b1b      	ldr	r3, [pc, #108]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e6d8:	2228      	movs	r2, #40	@ 0x28
 800e6da:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800e6dc:	4b19      	ldr	r3, [pc, #100]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800e6e2:	4b18      	ldr	r3, [pc, #96]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800e6e8:	4b16      	ldr	r3, [pc, #88]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800e6ee:	4b15      	ldr	r3, [pc, #84]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800e6f4:	4b13      	ldr	r3, [pc, #76]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e6f6:	2204      	movs	r2, #4
 800e6f8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800e6fa:	4b12      	ldr	r3, [pc, #72]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800e700:	4b10      	ldr	r3, [pc, #64]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e702:	2201      	movs	r2, #1
 800e704:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800e706:	4b0f      	ldr	r3, [pc, #60]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e708:	2200      	movs	r2, #0
 800e70a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800e70c:	4b0d      	ldr	r3, [pc, #52]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e70e:	2200      	movs	r2, #0
 800e710:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800e712:	480c      	ldr	r0, [pc, #48]	@ (800e744 <MX_DFSDM1_Init+0xc0>)
 800e714:	f7f2 f914 	bl	8000940 <HAL_DFSDM_ChannelInit>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d001      	beq.n	800e722 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800e71e:	f000 fee1 	bl	800f4e4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800e722:	2201      	movs	r2, #1
 800e724:	2101      	movs	r1, #1
 800e726:	4805      	ldr	r0, [pc, #20]	@ (800e73c <MX_DFSDM1_Init+0xb8>)
 800e728:	f7f2 fcb4 	bl	8001094 <HAL_DFSDM_FilterConfigRegChannel>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d001      	beq.n	800e736 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800e732:	f000 fed7 	bl	800f4e4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800e736:	bf00      	nop
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	200000e0 	.word	0x200000e0
 800e740:	40016100 	.word	0x40016100
 800e744:	20000134 	.word	0x20000134
 800e748:	40016000 	.word	0x40016000

0800e74c <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b0b0      	sub	sp, #192	@ 0xc0
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e754:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800e758:	2200      	movs	r2, #0
 800e75a:	601a      	str	r2, [r3, #0]
 800e75c:	605a      	str	r2, [r3, #4]
 800e75e:	609a      	str	r2, [r3, #8]
 800e760:	60da      	str	r2, [r3, #12]
 800e762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e764:	f107 0314 	add.w	r3, r7, #20
 800e768:	2298      	movs	r2, #152	@ 0x98
 800e76a:	2100      	movs	r1, #0
 800e76c:	4618      	mov	r0, r3
 800e76e:	f001 fea1 	bl	80104b4 <memset>
  if(DFSDM1_Init == 0)
 800e772:	4b55      	ldr	r3, [pc, #340]	@ (800e8c8 <HAL_DFSDM_FilterMspInit+0x17c>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d16c      	bne.n	800e854 <HAL_DFSDM_FilterMspInit+0x108>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800e77a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800e77e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800e780:	2300      	movs	r3, #0
 800e782:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e786:	f107 0314 	add.w	r3, r7, #20
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7f5 fec2 	bl	8004514 <HAL_RCCEx_PeriphCLKConfig>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d001      	beq.n	800e79a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800e796:	f000 fea5 	bl	800f4e4 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800e79a:	4b4c      	ldr	r3, [pc, #304]	@ (800e8cc <HAL_DFSDM_FilterMspInit+0x180>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	4a4a      	ldr	r2, [pc, #296]	@ (800e8cc <HAL_DFSDM_FilterMspInit+0x180>)
 800e7a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800e7a4:	4b49      	ldr	r3, [pc, #292]	@ (800e8cc <HAL_DFSDM_FilterMspInit+0x180>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d10b      	bne.n	800e7c4 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800e7ac:	4b48      	ldr	r3, [pc, #288]	@ (800e8d0 <HAL_DFSDM_FilterMspInit+0x184>)
 800e7ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e7b0:	4a47      	ldr	r2, [pc, #284]	@ (800e8d0 <HAL_DFSDM_FilterMspInit+0x184>)
 800e7b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e7b6:	6613      	str	r3, [r2, #96]	@ 0x60
 800e7b8:	4b45      	ldr	r3, [pc, #276]	@ (800e8d0 <HAL_DFSDM_FilterMspInit+0x184>)
 800e7ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e7bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e7c0:	613b      	str	r3, [r7, #16]
 800e7c2:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e7c4:	4b42      	ldr	r3, [pc, #264]	@ (800e8d0 <HAL_DFSDM_FilterMspInit+0x184>)
 800e7c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7c8:	4a41      	ldr	r2, [pc, #260]	@ (800e8d0 <HAL_DFSDM_FilterMspInit+0x184>)
 800e7ca:	f043 0302 	orr.w	r3, r3, #2
 800e7ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e7d0:	4b3f      	ldr	r3, [pc, #252]	@ (800e8d0 <HAL_DFSDM_FilterMspInit+0x184>)
 800e7d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7d4:	f003 0302 	and.w	r3, r3, #2
 800e7d8:	60fb      	str	r3, [r7, #12]
 800e7da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e7dc:	4b3c      	ldr	r3, [pc, #240]	@ (800e8d0 <HAL_DFSDM_FilterMspInit+0x184>)
 800e7de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7e0:	4a3b      	ldr	r2, [pc, #236]	@ (800e8d0 <HAL_DFSDM_FilterMspInit+0x184>)
 800e7e2:	f043 0310 	orr.w	r3, r3, #16
 800e7e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e7e8:	4b39      	ldr	r3, [pc, #228]	@ (800e8d0 <HAL_DFSDM_FilterMspInit+0x184>)
 800e7ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7ec:	f003 0310 	and.w	r3, r3, #16
 800e7f0:	60bb      	str	r3, [r7, #8]
 800e7f2:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PB1     ------> DFSDM1_DATIN0
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e7f4:	2302      	movs	r3, #2
 800e7f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7fa:	2302      	movs	r3, #2
 800e7fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e800:	2300      	movs	r3, #0
 800e802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e806:	2300      	movs	r3, #0
 800e808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800e80c:	2306      	movs	r3, #6
 800e80e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e812:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800e816:	4619      	mov	r1, r3
 800e818:	482e      	ldr	r0, [pc, #184]	@ (800e8d4 <HAL_DFSDM_FilterMspInit+0x188>)
 800e81a:	f7f3 faaf 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e81e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e826:	2302      	movs	r3, #2
 800e828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e82c:	2300      	movs	r3, #0
 800e82e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e832:	2300      	movs	r3, #0
 800e834:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800e838:	2306      	movs	r3, #6
 800e83a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e83e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800e842:	4619      	mov	r1, r3
 800e844:	4824      	ldr	r0, [pc, #144]	@ (800e8d8 <HAL_DFSDM_FilterMspInit+0x18c>)
 800e846:	f7f3 fa99 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800e84a:	4b1f      	ldr	r3, [pc, #124]	@ (800e8c8 <HAL_DFSDM_FilterMspInit+0x17c>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	3301      	adds	r3, #1
 800e850:	4a1d      	ldr	r2, [pc, #116]	@ (800e8c8 <HAL_DFSDM_FilterMspInit+0x17c>)
 800e852:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a20      	ldr	r2, [pc, #128]	@ (800e8dc <HAL_DFSDM_FilterMspInit+0x190>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d130      	bne.n	800e8c0 <HAL_DFSDM_FilterMspInit+0x174>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 800e85e:	4b20      	ldr	r3, [pc, #128]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e860:	4a20      	ldr	r2, [pc, #128]	@ (800e8e4 <HAL_DFSDM_FilterMspInit+0x198>)
 800e862:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800e864:	4b1e      	ldr	r3, [pc, #120]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e866:	2256      	movs	r2, #86	@ 0x56
 800e868:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e86a:	4b1d      	ldr	r3, [pc, #116]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e86c:	2200      	movs	r2, #0
 800e86e:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800e870:	4b1b      	ldr	r3, [pc, #108]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e872:	2200      	movs	r2, #0
 800e874:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800e876:	4b1a      	ldr	r3, [pc, #104]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e878:	2280      	movs	r2, #128	@ 0x80
 800e87a:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e87c:	4b18      	ldr	r3, [pc, #96]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e87e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e882:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e884:	4b16      	ldr	r3, [pc, #88]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e88a:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800e88c:	4b14      	ldr	r3, [pc, #80]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e88e:	2220      	movs	r2, #32
 800e890:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800e892:	4b13      	ldr	r3, [pc, #76]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e894:	2200      	movs	r2, #0
 800e896:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800e898:	4811      	ldr	r0, [pc, #68]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e89a:	f7f2 feaf 	bl	80015fc <HAL_DMA_Init>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d001      	beq.n	800e8a8 <HAL_DFSDM_FilterMspInit+0x15c>
    {
      Error_Handler();
 800e8a4:	f000 fe1e 	bl	800f4e4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4a0d      	ldr	r2, [pc, #52]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e8ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e8ae:	4a0c      	ldr	r2, [pc, #48]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4a0a      	ldr	r2, [pc, #40]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e8b8:	629a      	str	r2, [r3, #40]	@ 0x28
 800e8ba:	4a09      	ldr	r2, [pc, #36]	@ (800e8e0 <HAL_DFSDM_FilterMspInit+0x194>)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 800e8c0:	bf00      	nop
 800e8c2:	37c0      	adds	r7, #192	@ 0xc0
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	200001d0 	.word	0x200001d0
 800e8cc:	200001cc 	.word	0x200001cc
 800e8d0:	40021000 	.word	0x40021000
 800e8d4:	48000400 	.word	0x48000400
 800e8d8:	48001000 	.word	0x48001000
 800e8dc:	40016100 	.word	0x40016100
 800e8e0:	2000016c 	.word	0x2000016c
 800e8e4:	40020008 	.word	0x40020008

0800e8e8 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b0b0      	sub	sp, #192	@ 0xc0
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	601a      	str	r2, [r3, #0]
 800e8f8:	605a      	str	r2, [r3, #4]
 800e8fa:	609a      	str	r2, [r3, #8]
 800e8fc:	60da      	str	r2, [r3, #12]
 800e8fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e900:	f107 0314 	add.w	r3, r7, #20
 800e904:	2298      	movs	r2, #152	@ 0x98
 800e906:	2100      	movs	r1, #0
 800e908:	4618      	mov	r0, r3
 800e90a:	f001 fdd3 	bl	80104b4 <memset>
  if(DFSDM1_Init == 0)
 800e90e:	4b3a      	ldr	r3, [pc, #232]	@ (800e9f8 <HAL_DFSDM_ChannelMspInit+0x110>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d16c      	bne.n	800e9f0 <HAL_DFSDM_ChannelMspInit+0x108>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800e916:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800e91a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e922:	f107 0314 	add.w	r3, r7, #20
 800e926:	4618      	mov	r0, r3
 800e928:	f7f5 fdf4 	bl	8004514 <HAL_RCCEx_PeriphCLKConfig>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d001      	beq.n	800e936 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800e932:	f000 fdd7 	bl	800f4e4 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800e936:	4b31      	ldr	r3, [pc, #196]	@ (800e9fc <HAL_DFSDM_ChannelMspInit+0x114>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	3301      	adds	r3, #1
 800e93c:	4a2f      	ldr	r2, [pc, #188]	@ (800e9fc <HAL_DFSDM_ChannelMspInit+0x114>)
 800e93e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800e940:	4b2e      	ldr	r3, [pc, #184]	@ (800e9fc <HAL_DFSDM_ChannelMspInit+0x114>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2b01      	cmp	r3, #1
 800e946:	d10b      	bne.n	800e960 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800e948:	4b2d      	ldr	r3, [pc, #180]	@ (800ea00 <HAL_DFSDM_ChannelMspInit+0x118>)
 800e94a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e94c:	4a2c      	ldr	r2, [pc, #176]	@ (800ea00 <HAL_DFSDM_ChannelMspInit+0x118>)
 800e94e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e952:	6613      	str	r3, [r2, #96]	@ 0x60
 800e954:	4b2a      	ldr	r3, [pc, #168]	@ (800ea00 <HAL_DFSDM_ChannelMspInit+0x118>)
 800e956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e95c:	613b      	str	r3, [r7, #16]
 800e95e:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e960:	4b27      	ldr	r3, [pc, #156]	@ (800ea00 <HAL_DFSDM_ChannelMspInit+0x118>)
 800e962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e964:	4a26      	ldr	r2, [pc, #152]	@ (800ea00 <HAL_DFSDM_ChannelMspInit+0x118>)
 800e966:	f043 0302 	orr.w	r3, r3, #2
 800e96a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e96c:	4b24      	ldr	r3, [pc, #144]	@ (800ea00 <HAL_DFSDM_ChannelMspInit+0x118>)
 800e96e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e970:	f003 0302 	and.w	r3, r3, #2
 800e974:	60fb      	str	r3, [r7, #12]
 800e976:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e978:	4b21      	ldr	r3, [pc, #132]	@ (800ea00 <HAL_DFSDM_ChannelMspInit+0x118>)
 800e97a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e97c:	4a20      	ldr	r2, [pc, #128]	@ (800ea00 <HAL_DFSDM_ChannelMspInit+0x118>)
 800e97e:	f043 0310 	orr.w	r3, r3, #16
 800e982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e984:	4b1e      	ldr	r3, [pc, #120]	@ (800ea00 <HAL_DFSDM_ChannelMspInit+0x118>)
 800e986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e988:	f003 0310 	and.w	r3, r3, #16
 800e98c:	60bb      	str	r3, [r7, #8]
 800e98e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PB1     ------> DFSDM1_DATIN0
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e990:	2302      	movs	r3, #2
 800e992:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e996:	2302      	movs	r3, #2
 800e998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e99c:	2300      	movs	r3, #0
 800e99e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800e9a8:	2306      	movs	r3, #6
 800e9aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9ae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	4813      	ldr	r0, [pc, #76]	@ (800ea04 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800e9b6:	f7f3 f9e1 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e9ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e9be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9c2:	2302      	movs	r3, #2
 800e9c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800e9d4:	2306      	movs	r3, #6
 800e9d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e9da:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800e9de:	4619      	mov	r1, r3
 800e9e0:	4809      	ldr	r0, [pc, #36]	@ (800ea08 <HAL_DFSDM_ChannelMspInit+0x120>)
 800e9e2:	f7f3 f9cb 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800e9e6:	4b04      	ldr	r3, [pc, #16]	@ (800e9f8 <HAL_DFSDM_ChannelMspInit+0x110>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	4a02      	ldr	r2, [pc, #8]	@ (800e9f8 <HAL_DFSDM_ChannelMspInit+0x110>)
 800e9ee:	6013      	str	r3, [r2, #0]
  }
}
 800e9f0:	bf00      	nop
 800e9f2:	37c0      	adds	r7, #192	@ 0xc0
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	200001d0 	.word	0x200001d0
 800e9fc:	200001cc 	.word	0x200001cc
 800ea00:	40021000 	.word	0x40021000
 800ea04:	48000400 	.word	0x48000400
 800ea08:	48001000 	.word	0x48001000

0800ea0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800ea12:	4b12      	ldr	r3, [pc, #72]	@ (800ea5c <MX_DMA_Init+0x50>)
 800ea14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea16:	4a11      	ldr	r2, [pc, #68]	@ (800ea5c <MX_DMA_Init+0x50>)
 800ea18:	f043 0304 	orr.w	r3, r3, #4
 800ea1c:	6493      	str	r3, [r2, #72]	@ 0x48
 800ea1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ea5c <MX_DMA_Init+0x50>)
 800ea20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea22:	f003 0304 	and.w	r3, r3, #4
 800ea26:	607b      	str	r3, [r7, #4]
 800ea28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ea2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ea5c <MX_DMA_Init+0x50>)
 800ea2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea2e:	4a0b      	ldr	r2, [pc, #44]	@ (800ea5c <MX_DMA_Init+0x50>)
 800ea30:	f043 0301 	orr.w	r3, r3, #1
 800ea34:	6493      	str	r3, [r2, #72]	@ 0x48
 800ea36:	4b09      	ldr	r3, [pc, #36]	@ (800ea5c <MX_DMA_Init+0x50>)
 800ea38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea3a:	f003 0301 	and.w	r3, r3, #1
 800ea3e:	603b      	str	r3, [r7, #0]
 800ea40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800ea42:	2200      	movs	r2, #0
 800ea44:	2100      	movs	r1, #0
 800ea46:	200b      	movs	r0, #11
 800ea48:	f7f1 ff2a 	bl	80008a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800ea4c:	200b      	movs	r0, #11
 800ea4e:	f7f1 ff53 	bl	80008f8 <HAL_NVIC_EnableIRQ>

}
 800ea52:	bf00      	nop
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	40021000 	.word	0x40021000

0800ea60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ea64:	4904      	ldr	r1, [pc, #16]	@ (800ea78 <MX_FATFS_Init+0x18>)
 800ea66:	4805      	ldr	r0, [pc, #20]	@ (800ea7c <MX_FATFS_Init+0x1c>)
 800ea68:	f7ff fc82 	bl	800e370 <FATFS_LinkDriver>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461a      	mov	r2, r3
 800ea70:	4b03      	ldr	r3, [pc, #12]	@ (800ea80 <MX_FATFS_Init+0x20>)
 800ea72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ea74:	bf00      	nop
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	200001d8 	.word	0x200001d8
 800ea7c:	080118e4 	.word	0x080118e4
 800ea80:	200001d4 	.word	0x200001d4

0800ea84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ea84:	b480      	push	{r7}
 800ea86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ea88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ea9e:	2120      	movs	r1, #32
 800eaa0:	4806      	ldr	r0, [pc, #24]	@ (800eabc <BSP_PlatformIsDetected+0x28>)
 800eaa2:	f7f3 fbe9 	bl	8002278 <HAL_GPIO_ReadPin>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800eaac:	2300      	movs	r3, #0
 800eaae:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800eab0:	79fb      	ldrb	r3, [r7, #7]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	48000c00 	.word	0x48000c00

0800eac0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08e      	sub	sp, #56	@ 0x38
 800eac4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eaca:	2200      	movs	r2, #0
 800eacc:	601a      	str	r2, [r3, #0]
 800eace:	605a      	str	r2, [r3, #4]
 800ead0:	609a      	str	r2, [r3, #8]
 800ead2:	60da      	str	r2, [r3, #12]
 800ead4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ead6:	4b94      	ldr	r3, [pc, #592]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800ead8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eada:	4a93      	ldr	r2, [pc, #588]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eadc:	f043 0310 	orr.w	r3, r3, #16
 800eae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eae2:	4b91      	ldr	r3, [pc, #580]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eae6:	f003 0310 	and.w	r3, r3, #16
 800eaea:	623b      	str	r3, [r7, #32]
 800eaec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800eaee:	4b8e      	ldr	r3, [pc, #568]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eaf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eaf2:	4a8d      	ldr	r2, [pc, #564]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eaf4:	f043 0304 	orr.w	r3, r3, #4
 800eaf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eafa:	4b8b      	ldr	r3, [pc, #556]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eafc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eafe:	f003 0304 	and.w	r3, r3, #4
 800eb02:	61fb      	str	r3, [r7, #28]
 800eb04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800eb06:	4b88      	ldr	r3, [pc, #544]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb0a:	4a87      	ldr	r2, [pc, #540]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb0c:	f043 0320 	orr.w	r3, r3, #32
 800eb10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eb12:	4b85      	ldr	r3, [pc, #532]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb16:	f003 0320 	and.w	r3, r3, #32
 800eb1a:	61bb      	str	r3, [r7, #24]
 800eb1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800eb1e:	4b82      	ldr	r3, [pc, #520]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb22:	4a81      	ldr	r2, [pc, #516]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eb2a:	4b7f      	ldr	r3, [pc, #508]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb32:	617b      	str	r3, [r7, #20]
 800eb34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb36:	4b7c      	ldr	r3, [pc, #496]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb3a:	4a7b      	ldr	r2, [pc, #492]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb3c:	f043 0301 	orr.w	r3, r3, #1
 800eb40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eb42:	4b79      	ldr	r3, [pc, #484]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb46:	f003 0301 	and.w	r3, r3, #1
 800eb4a:	613b      	str	r3, [r7, #16]
 800eb4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb4e:	4b76      	ldr	r3, [pc, #472]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb52:	4a75      	ldr	r2, [pc, #468]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb54:	f043 0302 	orr.w	r3, r3, #2
 800eb58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eb5a:	4b73      	ldr	r3, [pc, #460]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb5e:	f003 0302 	and.w	r3, r3, #2
 800eb62:	60fb      	str	r3, [r7, #12]
 800eb64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800eb66:	4b70      	ldr	r3, [pc, #448]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb6a:	4a6f      	ldr	r2, [pc, #444]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eb72:	4b6d      	ldr	r3, [pc, #436]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb7a:	60bb      	str	r3, [r7, #8]
 800eb7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800eb7e:	4b6a      	ldr	r3, [pc, #424]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb82:	4a69      	ldr	r2, [pc, #420]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb84:	f043 0308 	orr.w	r3, r3, #8
 800eb88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eb8a:	4b67      	ldr	r3, [pc, #412]	@ (800ed28 <MX_GPIO_Init+0x268>)
 800eb8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb8e:	f003 0308 	and.w	r3, r3, #8
 800eb92:	607b      	str	r3, [r7, #4]
 800eb94:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800eb96:	f7f4 fbdb 	bl	8003350 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|INT_OUT_Pin, GPIO_PIN_RESET);
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	2139      	movs	r1, #57	@ 0x39
 800eb9e:	4863      	ldr	r0, [pc, #396]	@ (800ed2c <MX_GPIO_Init+0x26c>)
 800eba0:	f7f3 fb8a 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin|SPI1_CS2_Pin, GPIO_PIN_SET);
 800eba4:	2201      	movs	r2, #1
 800eba6:	2130      	movs	r1, #48	@ 0x30
 800eba8:	4861      	ldr	r0, [pc, #388]	@ (800ed30 <MX_GPIO_Init+0x270>)
 800ebaa:	f7f3 fb85 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ebb4:	485f      	ldr	r0, [pc, #380]	@ (800ed34 <MX_GPIO_Init+0x274>)
 800ebb6:	f7f3 fb7f 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_DETECT_POL_GPIO_Port, SD_DETECT_POL_Pin, GPIO_PIN_RESET);
 800ebba:	2200      	movs	r2, #0
 800ebbc:	2110      	movs	r1, #16
 800ebbe:	485e      	ldr	r0, [pc, #376]	@ (800ed38 <MX_GPIO_Init+0x278>)
 800ebc0:	f7f3 fb7a 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE6 PE7 PE8
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800ebc4:	f64f 53c6 	movw	r3, #64966	@ 0xfdc6
 800ebc8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ebca:	2303      	movs	r3, #3
 800ebcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ebd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	4854      	ldr	r0, [pc, #336]	@ (800ed2c <MX_GPIO_Init+0x26c>)
 800ebda:	f7f3 f8cf 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|INT_OUT_Pin;
 800ebde:	2339      	movs	r3, #57	@ 0x39
 800ebe0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ebea:	2300      	movs	r3, #0
 800ebec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ebee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	484d      	ldr	r0, [pc, #308]	@ (800ed2c <MX_GPIO_Init+0x26c>)
 800ebf6:	f7f3 f8c1 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800ebfa:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 800ebfe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec00:	2303      	movs	r3, #3
 800ec02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec04:	2300      	movs	r3, #0
 800ec06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ec08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	4848      	ldr	r0, [pc, #288]	@ (800ed30 <MX_GPIO_Init+0x270>)
 800ec10:	f7f3 f8b4 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800ec14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ec18:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ec22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec26:	4619      	mov	r1, r3
 800ec28:	4844      	ldr	r0, [pc, #272]	@ (800ed3c <MX_GPIO_Init+0x27c>)
 800ec2a:	f7f3 f8a7 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 800ec2e:	f649 1313 	movw	r3, #39187	@ 0x9913
 800ec32:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec34:	2303      	movs	r3, #3
 800ec36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec40:	4619      	mov	r1, r3
 800ec42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ec46:	f7f3 f899 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin|SPI1_CS2_Pin;
 800ec4a:	2330      	movs	r3, #48	@ 0x30
 800ec4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ec4e:	2301      	movs	r3, #1
 800ec50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec52:	2300      	movs	r3, #0
 800ec54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec56:	2300      	movs	r3, #0
 800ec58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ec5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec5e:	4619      	mov	r1, r3
 800ec60:	4833      	ldr	r0, [pc, #204]	@ (800ed30 <MX_GPIO_Init+0x270>)
 800ec62:	f7f3 f88b 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800ec66:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 800ec6a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec6c:	2303      	movs	r3, #3
 800ec6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec70:	2300      	movs	r3, #0
 800ec72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec78:	4619      	mov	r1, r3
 800ec7a:	482e      	ldr	r0, [pc, #184]	@ (800ed34 <MX_GPIO_Init+0x274>)
 800ec7c:	f7f3 f87e 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800ec80:	f24e 13ff 	movw	r3, #57855	@ 0xe1ff
 800ec84:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec86:	2303      	movs	r3, #3
 800ec88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ec8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec92:	4619      	mov	r1, r3
 800ec94:	482a      	ldr	r0, [pc, #168]	@ (800ed40 <MX_GPIO_Init+0x280>)
 800ec96:	f7f3 f871 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800ec9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ec9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eca0:	2301      	movs	r3, #1
 800eca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eca4:	2300      	movs	r3, #0
 800eca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800ecac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	4820      	ldr	r0, [pc, #128]	@ (800ed34 <MX_GPIO_Init+0x274>)
 800ecb4:	f7f3 f862 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD3 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800ecb8:	f64f 73cb 	movw	r3, #65483	@ 0xffcb
 800ecbc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ecbe:	2303      	movs	r3, #3
 800ecc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ecc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecca:	4619      	mov	r1, r3
 800eccc:	481a      	ldr	r0, [pc, #104]	@ (800ed38 <MX_GPIO_Init+0x278>)
 800ecce:	f7f3 f855 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_POL_Pin;
 800ecd2:	2310      	movs	r3, #16
 800ecd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecde:	2300      	movs	r3, #0
 800ece0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SD_DETECT_POL_GPIO_Port, &GPIO_InitStruct);
 800ece2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ece6:	4619      	mov	r1, r3
 800ece8:	4813      	ldr	r0, [pc, #76]	@ (800ed38 <MX_GPIO_Init+0x278>)
 800ecea:	f7f3 f847 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800ecee:	2320      	movs	r3, #32
 800ecf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800ecfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecfe:	4619      	mov	r1, r3
 800ed00:	480d      	ldr	r0, [pc, #52]	@ (800ed38 <MX_GPIO_Init+0x278>)
 800ed02:	f7f3 f83b 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ed06:	2308      	movs	r3, #8
 800ed08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ed0a:	2303      	movs	r3, #3
 800ed0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ed12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ed16:	4619      	mov	r1, r3
 800ed18:	480a      	ldr	r0, [pc, #40]	@ (800ed44 <MX_GPIO_Init+0x284>)
 800ed1a:	f7f3 f82f 	bl	8001d7c <HAL_GPIO_Init>

}
 800ed1e:	bf00      	nop
 800ed20:	3738      	adds	r7, #56	@ 0x38
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	40021000 	.word	0x40021000
 800ed2c:	48001000 	.word	0x48001000
 800ed30:	48000800 	.word	0x48000800
 800ed34:	48000400 	.word	0x48000400
 800ed38:	48000c00 	.word	0x48000c00
 800ed3c:	48001400 	.word	0x48001400
 800ed40:	48001800 	.word	0x48001800
 800ed44:	48001c00 	.word	0x48001c00

0800ed48 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800ed4c:	4b1b      	ldr	r3, [pc, #108]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed4e:	4a1c      	ldr	r2, [pc, #112]	@ (800edc0 <MX_I2C2_Init+0x78>)
 800ed50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 800ed52:	4b1a      	ldr	r3, [pc, #104]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed54:	4a1b      	ldr	r2, [pc, #108]	@ (800edc4 <MX_I2C2_Init+0x7c>)
 800ed56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800ed58:	4b18      	ldr	r3, [pc, #96]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ed5e:	4b17      	ldr	r3, [pc, #92]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed60:	2201      	movs	r2, #1
 800ed62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ed64:	4b15      	ldr	r3, [pc, #84]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed66:	2200      	movs	r2, #0
 800ed68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800ed6a:	4b14      	ldr	r3, [pc, #80]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ed70:	4b12      	ldr	r3, [pc, #72]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed72:	2200      	movs	r2, #0
 800ed74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ed76:	4b11      	ldr	r3, [pc, #68]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed78:	2200      	movs	r2, #0
 800ed7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ed7c:	4b0f      	ldr	r3, [pc, #60]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed7e:	2200      	movs	r2, #0
 800ed80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800ed82:	480e      	ldr	r0, [pc, #56]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed84:	f7f3 fac4 	bl	8002310 <HAL_I2C_Init>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800ed8e:	f000 fba9 	bl	800f4e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ed92:	2100      	movs	r1, #0
 800ed94:	4809      	ldr	r0, [pc, #36]	@ (800edbc <MX_I2C2_Init+0x74>)
 800ed96:	f7f4 f8e7 	bl	8002f68 <HAL_I2CEx_ConfigAnalogFilter>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d001      	beq.n	800eda4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800eda0:	f000 fba0 	bl	800f4e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800eda4:	2100      	movs	r1, #0
 800eda6:	4805      	ldr	r0, [pc, #20]	@ (800edbc <MX_I2C2_Init+0x74>)
 800eda8:	f7f4 f954 	bl	8003054 <HAL_I2CEx_ConfigDigitalFilter>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d001      	beq.n	800edb6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800edb2:	f000 fb97 	bl	800f4e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800edb6:	bf00      	nop
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	20000640 	.word	0x20000640
 800edc0:	40005800 	.word	0x40005800
 800edc4:	30a175ab 	.word	0x30a175ab

0800edc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b0b0      	sub	sp, #192	@ 0xc0
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800edd0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800edd4:	2200      	movs	r2, #0
 800edd6:	601a      	str	r2, [r3, #0]
 800edd8:	605a      	str	r2, [r3, #4]
 800edda:	609a      	str	r2, [r3, #8]
 800eddc:	60da      	str	r2, [r3, #12]
 800edde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ede0:	f107 0314 	add.w	r3, r7, #20
 800ede4:	2298      	movs	r2, #152	@ 0x98
 800ede6:	2100      	movs	r1, #0
 800ede8:	4618      	mov	r0, r3
 800edea:	f001 fb63 	bl	80104b4 <memset>
  if(i2cHandle->Instance==I2C2)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4a21      	ldr	r2, [pc, #132]	@ (800ee78 <HAL_I2C_MspInit+0xb0>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d13b      	bne.n	800ee70 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800edf8:	2380      	movs	r3, #128	@ 0x80
 800edfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800edfc:	2300      	movs	r3, #0
 800edfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ee00:	f107 0314 	add.w	r3, r7, #20
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7f5 fb85 	bl	8004514 <HAL_RCCEx_PeriphCLKConfig>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800ee10:	f000 fb68 	bl	800f4e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee14:	4b19      	ldr	r3, [pc, #100]	@ (800ee7c <HAL_I2C_MspInit+0xb4>)
 800ee16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee18:	4a18      	ldr	r2, [pc, #96]	@ (800ee7c <HAL_I2C_MspInit+0xb4>)
 800ee1a:	f043 0302 	orr.w	r3, r3, #2
 800ee1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ee20:	4b16      	ldr	r3, [pc, #88]	@ (800ee7c <HAL_I2C_MspInit+0xb4>)
 800ee22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee24:	f003 0302 	and.w	r3, r3, #2
 800ee28:	613b      	str	r3, [r7, #16]
 800ee2a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ee2c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ee30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ee34:	2312      	movs	r3, #18
 800ee36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee40:	2303      	movs	r3, #3
 800ee42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800ee46:	2304      	movs	r3, #4
 800ee48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ee4c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800ee50:	4619      	mov	r1, r3
 800ee52:	480b      	ldr	r0, [pc, #44]	@ (800ee80 <HAL_I2C_MspInit+0xb8>)
 800ee54:	f7f2 ff92 	bl	8001d7c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ee58:	4b08      	ldr	r3, [pc, #32]	@ (800ee7c <HAL_I2C_MspInit+0xb4>)
 800ee5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee5c:	4a07      	ldr	r2, [pc, #28]	@ (800ee7c <HAL_I2C_MspInit+0xb4>)
 800ee5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ee62:	6593      	str	r3, [r2, #88]	@ 0x58
 800ee64:	4b05      	ldr	r3, [pc, #20]	@ (800ee7c <HAL_I2C_MspInit+0xb4>)
 800ee66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee6c:	60fb      	str	r3, [r7, #12]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800ee70:	bf00      	nop
 800ee72:	37c0      	adds	r7, #192	@ 0xc0
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	40005800 	.word	0x40005800
 800ee7c:	40021000 	.word	0x40021000
 800ee80:	48000400 	.word	0x48000400

0800ee84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ee84:	b5b0      	push	{r4, r5, r7, lr}
 800ee86:	f5ad 7d20 	sub.w	sp, sp, #640	@ 0x280
 800ee8a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ee8c:	f7f1 fb80 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ee90:	f000 fa92 	bl	800f3b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ee94:	f7ff fe14 	bl	800eac0 <MX_GPIO_Init>
  MX_DMA_Init();
 800ee98:	f7ff fdb8 	bl	800ea0c <MX_DMA_Init>
  MX_DFSDM1_Init();
 800ee9c:	f7ff fbf2 	bl	800e684 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800eea0:	f7ff ff52 	bl	800ed48 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 800eea4:	f000 fc6e 	bl	800f784 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800eea8:	f000 fd30 	bl	800f90c <MX_SPI1_Init>
  MX_SPI2_Init();
 800eeac:	f000 fd6c 	bl	800f988 <MX_SPI2_Init>
  MX_SPI3_Init();
 800eeb0:	f000 fda8 	bl	800fa04 <MX_SPI3_Init>
  MX_FATFS_Init();
 800eeb4:	f7ff fdd4 	bl	800ea60 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800eeb8:	f000 ff8e 	bl	800fdd8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800eebc:	f000 ffd8 	bl	800fe70 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800eec0:	f000 fb22 	bl	800f508 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //microphone
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, rec_buf, AUDIO_BUF_LEN);
 800eec4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800eec8:	49a5      	ldr	r1, [pc, #660]	@ (800f160 <main+0x2dc>)
 800eeca:	48a6      	ldr	r0, [pc, #664]	@ (800f164 <main+0x2e0>)
 800eecc:	f7f2 f986 	bl	80011dc <HAL_DFSDM_FilterRegularStart_DMA>

  //enable backup battery charging
  HAL_PWREx_EnableBatteryCharging(PWR_BATTERY_CHARGING_RESISTOR_5);
 800eed0:	2000      	movs	r0, #0
 800eed2:	f7f4 fa17 	bl	8003304 <HAL_PWREx_EnableBatteryCharging>

  //mags
  const uint8_t tx_data[] = {0x2f|0x80,0};
 800eed6:	23af      	movs	r3, #175	@ 0xaf
 800eed8:	f8a7 3254 	strh.w	r3, [r7, #596]	@ 0x254
  uint8_t rx_data1[] = {0,0};
 800eedc:	2300      	movs	r3, #0
 800eede:	f8a7 3250 	strh.w	r3, [r7, #592]	@ 0x250
  uint8_t rx_data2[] = {0,0};
 800eee2:	2300      	movs	r3, #0
 800eee4:	f8a7 324c 	strh.w	r3, [r7, #588]	@ 0x24c

  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data1, sizeof(tx_data), 1); //prime spi port
 800eee8:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800eeec:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 800eef0:	2301      	movs	r3, #1
 800eef2:	9300      	str	r3, [sp, #0]
 800eef4:	2302      	movs	r3, #2
 800eef6:	489c      	ldr	r0, [pc, #624]	@ (800f168 <main+0x2e4>)
 800eef8:	f7f9 ff82 	bl	8008e00 <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin, GPIO_PIN_RESET);
 800eefc:	2200      	movs	r2, #0
 800eefe:	2110      	movs	r1, #16
 800ef00:	489a      	ldr	r0, [pc, #616]	@ (800f16c <main+0x2e8>)
 800ef02:	f7f3 f9d9 	bl	80022b8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data1, sizeof(tx_data), 1);
 800ef06:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800ef0a:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 800ef0e:	2301      	movs	r3, #1
 800ef10:	9300      	str	r3, [sp, #0]
 800ef12:	2302      	movs	r3, #2
 800ef14:	4894      	ldr	r0, [pc, #592]	@ (800f168 <main+0x2e4>)
 800ef16:	f7f9 ff73 	bl	8008e00 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin, GPIO_PIN_SET);
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	2110      	movs	r1, #16
 800ef1e:	4893      	ldr	r0, [pc, #588]	@ (800f16c <main+0x2e8>)
 800ef20:	f7f3 f9ca 	bl	80022b8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, SPI1_CS2_Pin, GPIO_PIN_RESET);
 800ef24:	2200      	movs	r2, #0
 800ef26:	2120      	movs	r1, #32
 800ef28:	4890      	ldr	r0, [pc, #576]	@ (800f16c <main+0x2e8>)
 800ef2a:	f7f3 f9c5 	bl	80022b8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data2, sizeof(tx_data), 1);
 800ef2e:	f507 7213 	add.w	r2, r7, #588	@ 0x24c
 800ef32:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 800ef36:	2301      	movs	r3, #1
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	2302      	movs	r3, #2
 800ef3c:	488a      	ldr	r0, [pc, #552]	@ (800f168 <main+0x2e4>)
 800ef3e:	f7f9 ff5f 	bl	8008e00 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOC, SPI1_CS2_Pin, GPIO_PIN_SET);
 800ef42:	2201      	movs	r2, #1
 800ef44:	2120      	movs	r1, #32
 800ef46:	4889      	ldr	r0, [pc, #548]	@ (800f16c <main+0x2e8>)
 800ef48:	f7f3 f9b6 	bl	80022b8 <HAL_GPIO_WritePin>

  printf("spi1_cs1 read from 0x2f: 0x%02x\n", rx_data1[1]);
 800ef4c:	f897 3251 	ldrb.w	r3, [r7, #593]	@ 0x251
 800ef50:	4619      	mov	r1, r3
 800ef52:	4887      	ldr	r0, [pc, #540]	@ (800f170 <main+0x2ec>)
 800ef54:	f001 f966 	bl	8010224 <iprintf>
  printf("spi1_cs2 read from 0x2f: 0x%02x\n", rx_data2[1]);
 800ef58:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	4885      	ldr	r0, [pc, #532]	@ (800f174 <main+0x2f0>)
 800ef60:	f001 f960 	bl	8010224 <iprintf>

  //cam spi
  const uint8_t tx_data_cam_write[] = {0x0|0x80,0x4b};
 800ef64:	f44f 4397 	mov.w	r3, #19328	@ 0x4b80
 800ef68:	f8a7 3248 	strh.w	r3, [r7, #584]	@ 0x248
  const uint8_t tx_data_cam_read[] = {0x0|0x00,0x00};
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	f8a7 3244 	strh.w	r3, [r7, #580]	@ 0x244
  uint8_t rx_data_cam[] = {0,0};
 800ef72:	2300      	movs	r3, #0
 800ef74:	f8a7 3240 	strh.w	r3, [r7, #576]	@ 0x240

  HAL_SPI_TransmitReceive(&hspi2, tx_data_cam_write, rx_data_cam, sizeof(tx_data), 1); //prime spi port
 800ef78:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800ef7c:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 800ef80:	2301      	movs	r3, #1
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	2302      	movs	r3, #2
 800ef86:	487c      	ldr	r0, [pc, #496]	@ (800f178 <main+0x2f4>)
 800ef88:	f7f9 ff3a 	bl	8008e00 <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ef92:	487a      	ldr	r0, [pc, #488]	@ (800f17c <main+0x2f8>)
 800ef94:	f7f3 f990 	bl	80022b8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, tx_data_cam_write, rx_data_cam, sizeof(tx_data), 1);
 800ef98:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800ef9c:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 800efa0:	2301      	movs	r3, #1
 800efa2:	9300      	str	r3, [sp, #0]
 800efa4:	2302      	movs	r3, #2
 800efa6:	4874      	ldr	r0, [pc, #464]	@ (800f178 <main+0x2f4>)
 800efa8:	f7f9 ff2a 	bl	8008e00 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800efac:	2201      	movs	r2, #1
 800efae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800efb2:	4872      	ldr	r0, [pc, #456]	@ (800f17c <main+0x2f8>)
 800efb4:	f7f3 f980 	bl	80022b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800efb8:	2200      	movs	r2, #0
 800efba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800efbe:	486f      	ldr	r0, [pc, #444]	@ (800f17c <main+0x2f8>)
 800efc0:	f7f3 f97a 	bl	80022b8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, tx_data_cam_read, rx_data_cam, sizeof(tx_data), 1);
 800efc4:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800efc8:	f507 7111 	add.w	r1, r7, #580	@ 0x244
 800efcc:	2301      	movs	r3, #1
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	2302      	movs	r3, #2
 800efd2:	4869      	ldr	r0, [pc, #420]	@ (800f178 <main+0x2f4>)
 800efd4:	f7f9 ff14 	bl	8008e00 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800efd8:	2201      	movs	r2, #1
 800efda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800efde:	4867      	ldr	r0, [pc, #412]	@ (800f17c <main+0x2f8>)
 800efe0:	f7f3 f96a 	bl	80022b8 <HAL_GPIO_WritePin>
  printf("cam read from 0x00: 0x%02x\n", rx_data_cam[1]);
 800efe4:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 800efe8:	4619      	mov	r1, r3
 800efea:	4865      	ldr	r0, [pc, #404]	@ (800f180 <main+0x2fc>)
 800efec:	f001 f91a 	bl	8010224 <iprintf>

  //cam i2c (sequential read not supported)
  uint8_t tx_data_cam_i2c_set_to_reg_bank_2[] = {0xff, 0x01};
 800eff0:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800eff4:	f8a7 323c 	strh.w	r3, [r7, #572]	@ 0x23c
  uint8_t tx_data_cam_i2c_set_reg_to_read_to_idA = 0x1c;
 800eff8:	231c      	movs	r3, #28
 800effa:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
  uint8_t tx_data_cam_i2c_set_reg_to_read_to_idB = 0x1d;
 800effe:	231d      	movs	r3, #29
 800f000:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a
  uint8_t rx_data_cam_i2c_idA, rx_data_cam_i2c_idB;
  HAL_I2C_Master_Transmit(
 800f004:	f507 720f 	add.w	r2, r7, #572	@ 0x23c
 800f008:	2301      	movs	r3, #1
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	2302      	movs	r3, #2
 800f00e:	2160      	movs	r1, #96	@ 0x60
 800f010:	485c      	ldr	r0, [pc, #368]	@ (800f184 <main+0x300>)
 800f012:	f7f3 faab 	bl	800256c <HAL_I2C_Master_Transmit>
      &hi2c2,
      0x30<<1,
      tx_data_cam_i2c_set_to_reg_bank_2,
      sizeof(tx_data_cam_i2c_set_to_reg_bank_2),
      1);
  HAL_I2C_Master_Transmit(
 800f016:	f207 223b 	addw	r2, r7, #571	@ 0x23b
 800f01a:	2301      	movs	r3, #1
 800f01c:	9300      	str	r3, [sp, #0]
 800f01e:	2301      	movs	r3, #1
 800f020:	2160      	movs	r1, #96	@ 0x60
 800f022:	4858      	ldr	r0, [pc, #352]	@ (800f184 <main+0x300>)
 800f024:	f7f3 faa2 	bl	800256c <HAL_I2C_Master_Transmit>
      &hi2c2,
      0x30<<1,
      &tx_data_cam_i2c_set_reg_to_read_to_idA,
      sizeof(tx_data_cam_i2c_set_reg_to_read_to_idA),
      1);
  HAL_I2C_Master_Receive(
 800f028:	f207 2239 	addw	r2, r7, #569	@ 0x239
 800f02c:	2301      	movs	r3, #1
 800f02e:	9300      	str	r3, [sp, #0]
 800f030:	2301      	movs	r3, #1
 800f032:	2160      	movs	r1, #96	@ 0x60
 800f034:	4853      	ldr	r0, [pc, #332]	@ (800f184 <main+0x300>)
 800f036:	f7f3 fbb1 	bl	800279c <HAL_I2C_Master_Receive>
      &hi2c2,
      0x30<<1,
      &rx_data_cam_i2c_idA,
      sizeof(rx_data_cam_i2c_idA),
      1);
  HAL_I2C_Master_Transmit(
 800f03a:	f207 223a 	addw	r2, r7, #570	@ 0x23a
 800f03e:	2301      	movs	r3, #1
 800f040:	9300      	str	r3, [sp, #0]
 800f042:	2301      	movs	r3, #1
 800f044:	2160      	movs	r1, #96	@ 0x60
 800f046:	484f      	ldr	r0, [pc, #316]	@ (800f184 <main+0x300>)
 800f048:	f7f3 fa90 	bl	800256c <HAL_I2C_Master_Transmit>
      &hi2c2,
      0x30<<1,
      &tx_data_cam_i2c_set_reg_to_read_to_idB,
      sizeof(tx_data_cam_i2c_set_reg_to_read_to_idB),
      1);
  HAL_I2C_Master_Receive(
 800f04c:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800f050:	2301      	movs	r3, #1
 800f052:	9300      	str	r3, [sp, #0]
 800f054:	2301      	movs	r3, #1
 800f056:	2160      	movs	r1, #96	@ 0x60
 800f058:	484a      	ldr	r0, [pc, #296]	@ (800f184 <main+0x300>)
 800f05a:	f7f3 fb9f 	bl	800279c <HAL_I2C_Master_Receive>
      &hi2c2,
      0x30<<1,
      &rx_data_cam_i2c_idB,
      sizeof(rx_data_cam_i2c_idB),
      1);
  uint16_t cam_i2c_id = (uint16_t)rx_data_cam_i2c_idA<<8 | rx_data_cam_i2c_idB;
 800f05e:	f897 3239 	ldrb.w	r3, [r7, #569]	@ 0x239
 800f062:	021b      	lsls	r3, r3, #8
 800f064:	b21a      	sxth	r2, r3
 800f066:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 800f06a:	b21b      	sxth	r3, r3
 800f06c:	4313      	orrs	r3, r2
 800f06e:	b21b      	sxth	r3, r3
 800f070:	f8a7 3262 	strh.w	r3, [r7, #610]	@ 0x262
  printf("cam i2c ID: 0x%04x\n", cam_i2c_id);
 800f074:	f8b7 3262 	ldrh.w	r3, [r7, #610]	@ 0x262
 800f078:	4619      	mov	r1, r3
 800f07a:	4843      	ldr	r0, [pc, #268]	@ (800f188 <main+0x304>)
 800f07c:	f001 f8d2 	bl	8010224 <iprintf>

  //sd card file system
  FRESULT res; /* FatFs function common result code */
  uint32_t byteswritten, bytesread; /* File write/read counts */
  uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 800f080:	4b42      	ldr	r3, [pc, #264]	@ (800f18c <main+0x308>)
 800f082:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 800f086:	461d      	mov	r5, r3
 800f088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f08a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f08c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f090:	c403      	stmia	r4!, {r0, r1}
 800f092:	7022      	strb	r2, [r4, #0]
  uint8_t rtext[_MAX_SS];/* File read buffer */

  res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800f094:	2200      	movs	r2, #0
 800f096:	493e      	ldr	r1, [pc, #248]	@ (800f190 <main+0x30c>)
 800f098:	483e      	ldr	r0, [pc, #248]	@ (800f194 <main+0x310>)
 800f09a:	f7fe fc07 	bl	800d8ac <f_mount>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	f887 3261 	strb.w	r3, [r7, #609]	@ 0x261
  if(res != FR_OK)
 800f0a4:	f897 3261 	ldrb.w	r3, [r7, #609]	@ 0x261
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d001      	beq.n	800f0b0 <main+0x22c>
   {
       Error_Handler();
 800f0ac:	f000 fa1a 	bl	800f4e4 <Error_Handler>
//         }
//       }
//     }
   }
// f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
  res = f_open(&SDFile, "audio_sample_long_file_name.wav", FA_CREATE_ALWAYS | FA_WRITE); //max 8 chars before '.'?
 800f0b0:	220a      	movs	r2, #10
 800f0b2:	4939      	ldr	r1, [pc, #228]	@ (800f198 <main+0x314>)
 800f0b4:	4839      	ldr	r0, [pc, #228]	@ (800f19c <main+0x318>)
 800f0b6:	f7fe fc3f 	bl	800d938 <f_open>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	f887 3261 	strb.w	r3, [r7, #609]	@ 0x261
  printf("res: %d\n", res);
 800f0c0:	f897 3261 	ldrb.w	r3, [r7, #609]	@ 0x261
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	4836      	ldr	r0, [pc, #216]	@ (800f1a0 <main+0x31c>)
 800f0c8:	f001 f8ac 	bl	8010224 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t tick;
  int light_state = 0;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
  int last_light_state = -1;
 800f0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d6:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    tick = HAL_GetTick();
 800f0da:	f7f1 fac1 	bl	8000660 <HAL_GetTick>
 800f0de:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
    if (dma_rec_buf_cplt_count > 1) { //skip the first 2 buffer-fulls of data (232 ms each at 10240 size)
 800f0e2:	4b30      	ldr	r3, [pc, #192]	@ (800f1a4 <main+0x320>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	f340 8092 	ble.w	800f210 <main+0x38c>
      if (dma_rec_half_buf_cplt) {
 800f0ec:	4b2e      	ldr	r3, [pc, #184]	@ (800f1a8 <main+0x324>)
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d02d      	beq.n	800f150 <main+0x2cc>
        //it takes about 15 ms to do this conversion and saving (mostly saving) for 116 ms of audio data
        for (int i = 0; i<AUDIO_BUF_LEN/2; i++) {
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800f0fa:	e019      	b.n	800f130 <main+0x2ac>
          // full scale range with Sinc3 and FOSR set to 68 is +/- 68^3, approximately 2^18.26
          save_buf[i] = ((float)(rec_buf[i]>>8)) / (2<<18);
 800f0fc:	4a18      	ldr	r2, [pc, #96]	@ (800f160 <main+0x2dc>)
 800f0fe:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800f102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f106:	121b      	asrs	r3, r3, #8
 800f108:	ee07 3a90 	vmov	s15, r3
 800f10c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f110:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800f1ac <main+0x328>
 800f114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f118:	4a25      	ldr	r2, [pc, #148]	@ (800f1b0 <main+0x32c>)
 800f11a:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4413      	add	r3, r2
 800f122:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i<AUDIO_BUF_LEN/2; i++) {
 800f126:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800f12a:	3301      	adds	r3, #1
 800f12c:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800f130:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800f134:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f138:	dbe0      	blt.n	800f0fc <main+0x278>
        }
        dma_rec_half_buf_cplt = false;
 800f13a:	4b1b      	ldr	r3, [pc, #108]	@ (800f1a8 <main+0x324>)
 800f13c:	2200      	movs	r2, #0
 800f13e:	701a      	strb	r2, [r3, #0]
        f_write(&SDFile, (const void*)save_buf, sizeof(save_buf), (void *)&byteswritten);
 800f140:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 800f144:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800f148:	4919      	ldr	r1, [pc, #100]	@ (800f1b0 <main+0x32c>)
 800f14a:	4814      	ldr	r0, [pc, #80]	@ (800f19c <main+0x318>)
 800f14c:	f7fe fea7 	bl	800de9e <f_write>
      }
      if (dma_rec_buf_cplt) {
 800f150:	4b18      	ldr	r3, [pc, #96]	@ (800f1b4 <main+0x330>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d05b      	beq.n	800f210 <main+0x38c>
        for (int i = 0; i<AUDIO_BUF_LEN/2; i++) {
 800f158:	2300      	movs	r3, #0
 800f15a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800f15e:	e047      	b.n	800f1f0 <main+0x36c>
 800f160:	20000694 	.word	0x20000694
 800f164:	200000e0 	.word	0x200000e0
 800f168:	2000f740 	.word	0x2000f740
 800f16c:	48000800 	.word	0x48000800
 800f170:	08011388 	.word	0x08011388
 800f174:	080113ac 	.word	0x080113ac
 800f178:	2000f7a4 	.word	0x2000f7a4
 800f17c:	48000400 	.word	0x48000400
 800f180:	080113d0 	.word	0x080113d0
 800f184:	20000640 	.word	0x20000640
 800f188:	080113ec 	.word	0x080113ec
 800f18c:	08011460 	.word	0x08011460
 800f190:	200001d8 	.word	0x200001d8
 800f194:	200001dc 	.word	0x200001dc
 800f198:	08011400 	.word	0x08011400
 800f19c:	20000410 	.word	0x20000410
 800f1a0:	08011420 	.word	0x08011420
 800f1a4:	2000f698 	.word	0x2000f698
 800f1a8:	2000f694 	.word	0x2000f694
 800f1ac:	49000000 	.word	0x49000000
 800f1b0:	2000a694 	.word	0x2000a694
 800f1b4:	2000f695 	.word	0x2000f695
          save_buf[i] = ((float)(rec_buf[i + AUDIO_BUF_LEN/2]>>8)) / (2<<18);
 800f1b8:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800f1bc:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800f1c0:	4a6c      	ldr	r2, [pc, #432]	@ (800f374 <main+0x4f0>)
 800f1c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1c6:	121b      	asrs	r3, r3, #8
 800f1c8:	ee07 3a90 	vmov	s15, r3
 800f1cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f1d0:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800f378 <main+0x4f4>
 800f1d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f1d8:	4a68      	ldr	r2, [pc, #416]	@ (800f37c <main+0x4f8>)
 800f1da:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	4413      	add	r3, r2
 800f1e2:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i<AUDIO_BUF_LEN/2; i++) {
 800f1e6:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800f1f0:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800f1f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f1f8:	dbde      	blt.n	800f1b8 <main+0x334>
        }
        dma_rec_buf_cplt = false;
 800f1fa:	4b61      	ldr	r3, [pc, #388]	@ (800f380 <main+0x4fc>)
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	701a      	strb	r2, [r3, #0]
        f_write(&SDFile, (const void*)save_buf, sizeof(save_buf), (void *)&byteswritten);
 800f200:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 800f204:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800f208:	495c      	ldr	r1, [pc, #368]	@ (800f37c <main+0x4f8>)
 800f20a:	485e      	ldr	r0, [pc, #376]	@ (800f384 <main+0x500>)
 800f20c:	f7fe fe47 	bl	800de9e <f_write>
      }
    }

    light_state = (tick%3000) / 1000;
 800f210:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800f214:	4b5c      	ldr	r3, [pc, #368]	@ (800f388 <main+0x504>)
 800f216:	fba3 1302 	umull	r1, r3, r3, r2
 800f21a:	099b      	lsrs	r3, r3, #6
 800f21c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800f220:	fb01 f303 	mul.w	r3, r1, r3
 800f224:	1ad3      	subs	r3, r2, r3
 800f226:	4a59      	ldr	r2, [pc, #356]	@ (800f38c <main+0x508>)
 800f228:	fba2 2303 	umull	r2, r3, r2, r3
 800f22c:	099b      	lsrs	r3, r3, #6
 800f22e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    if (light_state != last_light_state) {
 800f232:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800f236:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d03d      	beq.n	800f2ba <main+0x436>
      last_light_state = light_state;
 800f23e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800f242:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
      switch (light_state) {
 800f246:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d028      	beq.n	800f2a0 <main+0x41c>
 800f24e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800f252:	2b02      	cmp	r3, #2
 800f254:	dc31      	bgt.n	800f2ba <main+0x436>
 800f256:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d004      	beq.n	800f268 <main+0x3e4>
 800f25e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800f262:	2b01      	cmp	r3, #1
 800f264:	d00e      	beq.n	800f284 <main+0x400>
 800f266:	e028      	b.n	800f2ba <main+0x436>
        case 0:
          HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 800f268:	2200      	movs	r2, #0
 800f26a:	2120      	movs	r1, #32
 800f26c:	4848      	ldr	r0, [pc, #288]	@ (800f390 <main+0x50c>)
 800f26e:	f7f3 f823 	bl	80022b8 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_SET);
 800f272:	2201      	movs	r2, #1
 800f274:	2108      	movs	r1, #8
 800f276:	4846      	ldr	r0, [pc, #280]	@ (800f390 <main+0x50c>)
 800f278:	f7f3 f81e 	bl	80022b8 <HAL_GPIO_WritePin>
          printf("green\n");
 800f27c:	4845      	ldr	r0, [pc, #276]	@ (800f394 <main+0x510>)
 800f27e:	f001 f839 	bl	80102f4 <puts>
          break;
 800f282:	e01a      	b.n	800f2ba <main+0x436>
        case 1:
          HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_RESET);
 800f284:	2200      	movs	r2, #0
 800f286:	2108      	movs	r1, #8
 800f288:	4841      	ldr	r0, [pc, #260]	@ (800f390 <main+0x50c>)
 800f28a:	f7f3 f815 	bl	80022b8 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOE, LED2_Pin, GPIO_PIN_SET);
 800f28e:	2201      	movs	r2, #1
 800f290:	2110      	movs	r1, #16
 800f292:	483f      	ldr	r0, [pc, #252]	@ (800f390 <main+0x50c>)
 800f294:	f7f3 f810 	bl	80022b8 <HAL_GPIO_WritePin>
          printf("yellow\n");
 800f298:	483f      	ldr	r0, [pc, #252]	@ (800f398 <main+0x514>)
 800f29a:	f001 f82b 	bl	80102f4 <puts>
          break;
 800f29e:	e00c      	b.n	800f2ba <main+0x436>
        case 2:
          HAL_GPIO_WritePin(GPIOE, LED2_Pin, GPIO_PIN_RESET);
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	2110      	movs	r1, #16
 800f2a4:	483a      	ldr	r0, [pc, #232]	@ (800f390 <main+0x50c>)
 800f2a6:	f7f3 f807 	bl	80022b8 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	2120      	movs	r1, #32
 800f2ae:	4838      	ldr	r0, [pc, #224]	@ (800f390 <main+0x50c>)
 800f2b0:	f7f3 f802 	bl	80022b8 <HAL_GPIO_WritePin>
          printf("red\n");
 800f2b4:	4839      	ldr	r0, [pc, #228]	@ (800f39c <main+0x518>)
 800f2b6:	f001 f81d 	bl	80102f4 <puts>
      }
    }
    if (tick%4111 == 0) {
 800f2ba:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f2be:	4b38      	ldr	r3, [pc, #224]	@ (800f3a0 <main+0x51c>)
 800f2c0:	fba3 2301 	umull	r2, r3, r3, r1
 800f2c4:	0ada      	lsrs	r2, r3, #11
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	021b      	lsls	r3, r3, #8
 800f2ca:	4413      	add	r3, r2
 800f2cc:	011b      	lsls	r3, r3, #4
 800f2ce:	1a9b      	subs	r3, r3, r2
 800f2d0:	1aca      	subs	r2, r1, r3
 800f2d2:	2a00      	cmp	r2, #0
 800f2d4:	d138      	bne.n	800f348 <main+0x4c4>
      RTC_TimeTypeDef time;
      RTC_DateTypeDef date;
      HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800f2d6:	1d3b      	adds	r3, r7, #4
 800f2d8:	2200      	movs	r2, #0
 800f2da:	4619      	mov	r1, r3
 800f2dc:	4831      	ldr	r0, [pc, #196]	@ (800f3a4 <main+0x520>)
 800f2de:	f7f7 faed 	bl	80068bc <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800f2e2:	463b      	mov	r3, r7
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	482e      	ldr	r0, [pc, #184]	@ (800f3a4 <main+0x520>)
 800f2ea:	f7f7 fb51 	bl	8006990 <HAL_RTC_GetDate>
      printf("%02d/%02d/%04d %02d:%02d:%02d\n", date.Month, date.Date, 1980 + date.Year, time.Hours, time.Minutes, time.Seconds);
 800f2ee:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800f2f2:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 800f2f6:	785b      	ldrb	r3, [r3, #1]
 800f2f8:	461c      	mov	r4, r3
 800f2fa:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800f2fe:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 800f302:	789b      	ldrb	r3, [r3, #2]
 800f304:	461d      	mov	r5, r3
 800f306:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800f30a:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 800f30e:	78db      	ldrb	r3, [r3, #3]
 800f310:	f203 72bc 	addw	r2, r3, #1980	@ 0x7bc
 800f314:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800f318:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	4619      	mov	r1, r3
 800f320:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800f324:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800f328:	785b      	ldrb	r3, [r3, #1]
 800f32a:	4618      	mov	r0, r3
 800f32c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800f330:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800f334:	789b      	ldrb	r3, [r3, #2]
 800f336:	9302      	str	r3, [sp, #8]
 800f338:	9001      	str	r0, [sp, #4]
 800f33a:	9100      	str	r1, [sp, #0]
 800f33c:	4613      	mov	r3, r2
 800f33e:	462a      	mov	r2, r5
 800f340:	4621      	mov	r1, r4
 800f342:	4819      	ldr	r0, [pc, #100]	@ (800f3a8 <main+0x524>)
 800f344:	f000 ff6e 	bl	8010224 <iprintf>
    }
    if (dma_rec_buf_cplt_count > 65) { //end after 66-2 total buffers (14.85 seconds)
 800f348:	4b18      	ldr	r3, [pc, #96]	@ (800f3ac <main+0x528>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b41      	cmp	r3, #65	@ 0x41
 800f34e:	f77f aec4 	ble.w	800f0da <main+0x256>
      HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 800f352:	4817      	ldr	r0, [pc, #92]	@ (800f3b0 <main+0x52c>)
 800f354:	f7f1 ffe6 	bl	8001324 <HAL_DFSDM_FilterRegularStop_DMA>
      f_close(&SDFile);
 800f358:	480a      	ldr	r0, [pc, #40]	@ (800f384 <main+0x500>)
 800f35a:	f7fe ff93 	bl	800e284 <f_close>
      f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800f35e:	2200      	movs	r2, #0
 800f360:	2100      	movs	r1, #0
 800f362:	4814      	ldr	r0, [pc, #80]	@ (800f3b4 <main+0x530>)
 800f364:	f7fe faa2 	bl	800d8ac <f_mount>
      return 0;
 800f368:	2300      	movs	r3, #0
    }
  }
  /* USER CODE END 3 */
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 800f370:	46bd      	mov	sp, r7
 800f372:	bdb0      	pop	{r4, r5, r7, pc}
 800f374:	20000694 	.word	0x20000694
 800f378:	49000000 	.word	0x49000000
 800f37c:	2000a694 	.word	0x2000a694
 800f380:	2000f695 	.word	0x2000f695
 800f384:	20000410 	.word	0x20000410
 800f388:	057619f1 	.word	0x057619f1
 800f38c:	10624dd3 	.word	0x10624dd3
 800f390:	48001000 	.word	0x48001000
 800f394:	0801142c 	.word	0x0801142c
 800f398:	08011434 	.word	0x08011434
 800f39c:	0801143c 	.word	0x0801143c
 800f3a0:	7f887017 	.word	0x7f887017
 800f3a4:	2000f69c 	.word	0x2000f69c
 800f3a8:	08011440 	.word	0x08011440
 800f3ac:	2000f698 	.word	0x2000f698
 800f3b0:	200000e0 	.word	0x200000e0
 800f3b4:	200001dc 	.word	0x200001dc

0800f3b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b096      	sub	sp, #88	@ 0x58
 800f3bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f3be:	f107 0314 	add.w	r3, r7, #20
 800f3c2:	2244      	movs	r2, #68	@ 0x44
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f001 f874 	bl	80104b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f3cc:	463b      	mov	r3, r7
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	601a      	str	r2, [r3, #0]
 800f3d2:	605a      	str	r2, [r3, #4]
 800f3d4:	609a      	str	r2, [r3, #8]
 800f3d6:	60da      	str	r2, [r3, #12]
 800f3d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800f3da:	2000      	movs	r0, #0
 800f3dc:	f7f3 fede 	bl	800319c <HAL_PWREx_ControlVoltageScaling>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d001      	beq.n	800f3ea <SystemClock_Config+0x32>
  {
    Error_Handler();
 800f3e6:	f000 f87d 	bl	800f4e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800f3ea:	f7f3 fea7 	bl	800313c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800f3ee:	4b1f      	ldr	r3, [pc, #124]	@ (800f46c <SystemClock_Config+0xb4>)
 800f3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3f4:	4a1d      	ldr	r2, [pc, #116]	@ (800f46c <SystemClock_Config+0xb4>)
 800f3f6:	f023 0318 	bic.w	r3, r3, #24
 800f3fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800f3fe:	2305      	movs	r3, #5
 800f400:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f402:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800f406:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800f408:	2301      	movs	r3, #1
 800f40a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f40c:	2302      	movs	r3, #2
 800f40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f410:	2303      	movs	r3, #3
 800f412:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800f414:	2302      	movs	r3, #2
 800f416:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800f418:	2314      	movs	r3, #20
 800f41a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f41c:	2302      	movs	r3, #2
 800f41e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800f420:	2302      	movs	r3, #2
 800f422:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800f424:	2302      	movs	r3, #2
 800f426:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f428:	f107 0314 	add.w	r3, r7, #20
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7f3 ff9f 	bl	8003370 <HAL_RCC_OscConfig>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d001      	beq.n	800f43c <SystemClock_Config+0x84>
  {
    Error_Handler();
 800f438:	f000 f854 	bl	800f4e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f43c:	230f      	movs	r3, #15
 800f43e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f440:	2303      	movs	r3, #3
 800f442:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f444:	2300      	movs	r3, #0
 800f446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800f448:	2300      	movs	r3, #0
 800f44a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f44c:	2300      	movs	r3, #0
 800f44e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f450:	463b      	mov	r3, r7
 800f452:	2105      	movs	r1, #5
 800f454:	4618      	mov	r0, r3
 800f456:	f7f4 fcdb 	bl	8003e10 <HAL_RCC_ClockConfig>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d001      	beq.n	800f464 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800f460:	f000 f840 	bl	800f4e4 <Error_Handler>
  }
}
 800f464:	bf00      	nop
 800f466:	3758      	adds	r7, #88	@ 0x58
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	40021000 	.word	0x40021000

0800f470 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	607a      	str	r2, [r7, #4]
  (void)file;

  HAL_UART_Transmit(&huart2, (const uint8_t *)ptr, len, 10);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	b29a      	uxth	r2, r3
 800f480:	230a      	movs	r3, #10
 800f482:	68b9      	ldr	r1, [r7, #8]
 800f484:	4803      	ldr	r0, [pc, #12]	@ (800f494 <_write+0x24>)
 800f486:	f7fa f8f3 	bl	8009670 <HAL_UART_Transmit>
  return len;
 800f48a:	687b      	ldr	r3, [r7, #4]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3710      	adds	r7, #16
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	2000f904 	.word	0x2000f904

0800f498 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  dma_rec_half_buf_cplt = true;
 800f4a0:	4b04      	ldr	r3, [pc, #16]	@ (800f4b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	701a      	strb	r2, [r3, #0]
}
 800f4a6:	bf00      	nop
 800f4a8:	370c      	adds	r7, #12
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	2000f694 	.word	0x2000f694

0800f4b8 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  dma_rec_buf_cplt = true;
 800f4c0:	4b06      	ldr	r3, [pc, #24]	@ (800f4dc <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	701a      	strb	r2, [r3, #0]
  dma_rec_buf_cplt_count++;
 800f4c6:	4b06      	ldr	r3, [pc, #24]	@ (800f4e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	4a04      	ldr	r2, [pc, #16]	@ (800f4e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>)
 800f4ce:	6013      	str	r3, [r2, #0]
}
 800f4d0:	bf00      	nop
 800f4d2:	370c      	adds	r7, #12
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr
 800f4dc:	2000f695 	.word	0x2000f695
 800f4e0:	2000f698 	.word	0x2000f698

0800f4e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800f4e8:	b672      	cpsid	i
}
 800f4ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f4ec:	bf00      	nop
 800f4ee:	e7fd      	b.n	800f4ec <Error_Handler+0x8>

0800f4f0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800f4fa:	bf00      	nop
 800f4fc:	370c      	adds	r7, #12
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr
	...

0800f508 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800f50c:	4b10      	ldr	r3, [pc, #64]	@ (800f550 <MX_RTC_Init+0x48>)
 800f50e:	4a11      	ldr	r2, [pc, #68]	@ (800f554 <MX_RTC_Init+0x4c>)
 800f510:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800f512:	4b0f      	ldr	r3, [pc, #60]	@ (800f550 <MX_RTC_Init+0x48>)
 800f514:	2200      	movs	r2, #0
 800f516:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800f518:	4b0d      	ldr	r3, [pc, #52]	@ (800f550 <MX_RTC_Init+0x48>)
 800f51a:	227f      	movs	r2, #127	@ 0x7f
 800f51c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800f51e:	4b0c      	ldr	r3, [pc, #48]	@ (800f550 <MX_RTC_Init+0x48>)
 800f520:	22ff      	movs	r2, #255	@ 0xff
 800f522:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f524:	4b0a      	ldr	r3, [pc, #40]	@ (800f550 <MX_RTC_Init+0x48>)
 800f526:	2200      	movs	r2, #0
 800f528:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800f52a:	4b09      	ldr	r3, [pc, #36]	@ (800f550 <MX_RTC_Init+0x48>)
 800f52c:	2200      	movs	r2, #0
 800f52e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f530:	4b07      	ldr	r3, [pc, #28]	@ (800f550 <MX_RTC_Init+0x48>)
 800f532:	2200      	movs	r2, #0
 800f534:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f536:	4b06      	ldr	r3, [pc, #24]	@ (800f550 <MX_RTC_Init+0x48>)
 800f538:	2200      	movs	r2, #0
 800f53a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800f53c:	4804      	ldr	r0, [pc, #16]	@ (800f550 <MX_RTC_Init+0x48>)
 800f53e:	f7f7 f8c7 	bl	80066d0 <HAL_RTC_Init>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d001      	beq.n	800f54c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800f548:	f7ff ffcc 	bl	800f4e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800f54c:	bf00      	nop
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	2000f69c 	.word	0x2000f69c
 800f554:	40002800 	.word	0x40002800

0800f558 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b0a8      	sub	sp, #160	@ 0xa0
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f560:	f107 0308 	add.w	r3, r7, #8
 800f564:	2298      	movs	r2, #152	@ 0x98
 800f566:	2100      	movs	r1, #0
 800f568:	4618      	mov	r0, r3
 800f56a:	f000 ffa3 	bl	80104b4 <memset>
  if(rtcHandle->Instance==RTC)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	4a10      	ldr	r2, [pc, #64]	@ (800f5b4 <HAL_RTC_MspInit+0x5c>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d118      	bne.n	800f5aa <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800f578:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f57c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800f57e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f582:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f586:	f107 0308 	add.w	r3, r7, #8
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7f4 ffc2 	bl	8004514 <HAL_RCCEx_PeriphCLKConfig>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d001      	beq.n	800f59a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800f596:	f7ff ffa5 	bl	800f4e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800f59a:	4b07      	ldr	r3, [pc, #28]	@ (800f5b8 <HAL_RTC_MspInit+0x60>)
 800f59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f5a0:	4a05      	ldr	r2, [pc, #20]	@ (800f5b8 <HAL_RTC_MspInit+0x60>)
 800f5a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f5a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800f5aa:	bf00      	nop
 800f5ac:	37a0      	adds	r7, #160	@ 0xa0
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
 800f5b2:	bf00      	nop
 800f5b4:	40002800 	.word	0x40002800
 800f5b8:	40021000 	.word	0x40021000

0800f5bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f5c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f5f4 <SD_CheckStatus+0x38>)
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f5cc:	f7ff f808 	bl	800e5e0 <BSP_SD_GetCardState>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d107      	bne.n	800f5e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f5d6:	4b07      	ldr	r3, [pc, #28]	@ (800f5f4 <SD_CheckStatus+0x38>)
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	f023 0301 	bic.w	r3, r3, #1
 800f5e0:	b2da      	uxtb	r2, r3
 800f5e2:	4b04      	ldr	r3, [pc, #16]	@ (800f5f4 <SD_CheckStatus+0x38>)
 800f5e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f5e6:	4b03      	ldr	r3, [pc, #12]	@ (800f5f4 <SD_CheckStatus+0x38>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	b2db      	uxtb	r3, r3
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	20000005 	.word	0x20000005

0800f5f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	4603      	mov	r3, r0
 800f600:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f602:	4b0b      	ldr	r3, [pc, #44]	@ (800f630 <SD_initialize+0x38>)
 800f604:	2201      	movs	r2, #1
 800f606:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f608:	f7fe ff88 	bl	800e51c <BSP_SD_Init>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d107      	bne.n	800f622 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f612:	79fb      	ldrb	r3, [r7, #7]
 800f614:	4618      	mov	r0, r3
 800f616:	f7ff ffd1 	bl	800f5bc <SD_CheckStatus>
 800f61a:	4603      	mov	r3, r0
 800f61c:	461a      	mov	r2, r3
 800f61e:	4b04      	ldr	r3, [pc, #16]	@ (800f630 <SD_initialize+0x38>)
 800f620:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f622:	4b03      	ldr	r3, [pc, #12]	@ (800f630 <SD_initialize+0x38>)
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	b2db      	uxtb	r3, r3
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	20000005 	.word	0x20000005

0800f634 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	4603      	mov	r3, r0
 800f63c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f63e:	79fb      	ldrb	r3, [r7, #7]
 800f640:	4618      	mov	r0, r3
 800f642:	f7ff ffbb 	bl	800f5bc <SD_CheckStatus>
 800f646:	4603      	mov	r3, r0
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b086      	sub	sp, #24
 800f654:	af00      	add	r7, sp, #0
 800f656:	60b9      	str	r1, [r7, #8]
 800f658:	607a      	str	r2, [r7, #4]
 800f65a:	603b      	str	r3, [r7, #0]
 800f65c:	4603      	mov	r3, r0
 800f65e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f660:	2301      	movs	r3, #1
 800f662:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f664:	f04f 33ff 	mov.w	r3, #4294967295
 800f668:	683a      	ldr	r2, [r7, #0]
 800f66a:	6879      	ldr	r1, [r7, #4]
 800f66c:	68b8      	ldr	r0, [r7, #8]
 800f66e:	f7fe ff7b 	bl	800e568 <BSP_SD_ReadBlocks>
 800f672:	4603      	mov	r3, r0
 800f674:	2b00      	cmp	r3, #0
 800f676:	d107      	bne.n	800f688 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f678:	bf00      	nop
 800f67a:	f7fe ffb1 	bl	800e5e0 <BSP_SD_GetCardState>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	d1fa      	bne.n	800f67a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f684:	2300      	movs	r3, #0
 800f686:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f688:	7dfb      	ldrb	r3, [r7, #23]
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3718      	adds	r7, #24
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b086      	sub	sp, #24
 800f696:	af00      	add	r7, sp, #0
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
 800f69c:	603b      	str	r3, [r7, #0]
 800f69e:	4603      	mov	r3, r0
 800f6a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6aa:	683a      	ldr	r2, [r7, #0]
 800f6ac:	6879      	ldr	r1, [r7, #4]
 800f6ae:	68b8      	ldr	r0, [r7, #8]
 800f6b0:	f7fe ff78 	bl	800e5a4 <BSP_SD_WriteBlocks>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d107      	bne.n	800f6ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f6ba:	bf00      	nop
 800f6bc:	f7fe ff90 	bl	800e5e0 <BSP_SD_GetCardState>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1fa      	bne.n	800f6bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f6ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3718      	adds	r7, #24
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b08c      	sub	sp, #48	@ 0x30
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	603a      	str	r2, [r7, #0]
 800f6de:	71fb      	strb	r3, [r7, #7]
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f6ea:	4b25      	ldr	r3, [pc, #148]	@ (800f780 <SD_ioctl+0xac>)
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	f003 0301 	and.w	r3, r3, #1
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d001      	beq.n	800f6fc <SD_ioctl+0x28>
 800f6f8:	2303      	movs	r3, #3
 800f6fa:	e03c      	b.n	800f776 <SD_ioctl+0xa2>

  switch (cmd)
 800f6fc:	79bb      	ldrb	r3, [r7, #6]
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d834      	bhi.n	800f76c <SD_ioctl+0x98>
 800f702:	a201      	add	r2, pc, #4	@ (adr r2, 800f708 <SD_ioctl+0x34>)
 800f704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f708:	0800f719 	.word	0x0800f719
 800f70c:	0800f721 	.word	0x0800f721
 800f710:	0800f739 	.word	0x0800f739
 800f714:	0800f753 	.word	0x0800f753
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f718:	2300      	movs	r3, #0
 800f71a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f71e:	e028      	b.n	800f772 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f720:	f107 0308 	add.w	r3, r7, #8
 800f724:	4618      	mov	r0, r3
 800f726:	f7fe ff6b 	bl	800e600 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f72a:	6a3a      	ldr	r2, [r7, #32]
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f736:	e01c      	b.n	800f772 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f738:	f107 0308 	add.w	r3, r7, #8
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fe ff5f 	bl	800e600 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f744:	b29a      	uxth	r2, r3
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f74a:	2300      	movs	r3, #0
 800f74c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f750:	e00f      	b.n	800f772 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f752:	f107 0308 	add.w	r3, r7, #8
 800f756:	4618      	mov	r0, r3
 800f758:	f7fe ff52 	bl	800e600 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75e:	0a5a      	lsrs	r2, r3, #9
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f764:	2300      	movs	r3, #0
 800f766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f76a:	e002      	b.n	800f772 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f76c:	2304      	movs	r3, #4
 800f76e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f772:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f776:	4618      	mov	r0, r3
 800f778:	3730      	adds	r7, #48	@ 0x30
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	20000005 	.word	0x20000005

0800f784 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800f784:	b480      	push	{r7}
 800f786:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800f788:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c0 <MX_SDMMC1_SD_Init+0x3c>)
 800f78a:	4a0e      	ldr	r2, [pc, #56]	@ (800f7c4 <MX_SDMMC1_SD_Init+0x40>)
 800f78c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800f78e:	4b0c      	ldr	r3, [pc, #48]	@ (800f7c0 <MX_SDMMC1_SD_Init+0x3c>)
 800f790:	2200      	movs	r2, #0
 800f792:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f794:	4b0a      	ldr	r3, [pc, #40]	@ (800f7c0 <MX_SDMMC1_SD_Init+0x3c>)
 800f796:	2200      	movs	r2, #0
 800f798:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800f79a:	4b09      	ldr	r3, [pc, #36]	@ (800f7c0 <MX_SDMMC1_SD_Init+0x3c>)
 800f79c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800f7a0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f7a2:	4b07      	ldr	r3, [pc, #28]	@ (800f7c0 <MX_SDMMC1_SD_Init+0x3c>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 800f7a8:	4b05      	ldr	r3, [pc, #20]	@ (800f7c0 <MX_SDMMC1_SD_Init+0x3c>)
 800f7aa:	220a      	movs	r2, #10
 800f7ac:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800f7ae:	4b04      	ldr	r3, [pc, #16]	@ (800f7c0 <MX_SDMMC1_SD_Init+0x3c>)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800f7b4:	bf00      	nop
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop
 800f7c0:	2000f6c0 	.word	0x2000f6c0
 800f7c4:	50062400 	.word	0x50062400

0800f7c8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b0b0      	sub	sp, #192	@ 0xc0
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	601a      	str	r2, [r3, #0]
 800f7d8:	605a      	str	r2, [r3, #4]
 800f7da:	609a      	str	r2, [r3, #8]
 800f7dc:	60da      	str	r2, [r3, #12]
 800f7de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f7e0:	f107 0314 	add.w	r3, r7, #20
 800f7e4:	2298      	movs	r2, #152	@ 0x98
 800f7e6:	2100      	movs	r1, #0
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f000 fe63 	bl	80104b4 <memset>
  if(sdHandle->Instance==SDMMC1)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	4a42      	ldr	r2, [pc, #264]	@ (800f8fc <HAL_SD_MspInit+0x134>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d17d      	bne.n	800f8f4 <HAL_SD_MspInit+0x12c>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800f7f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f7fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800f7fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f806:	f107 0314 	add.w	r3, r7, #20
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7f4 fe82 	bl	8004514 <HAL_RCCEx_PeriphCLKConfig>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d001      	beq.n	800f81a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800f816:	f7ff fe65 	bl	800f4e4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800f81a:	4b39      	ldr	r3, [pc, #228]	@ (800f900 <HAL_SD_MspInit+0x138>)
 800f81c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f81e:	4a38      	ldr	r2, [pc, #224]	@ (800f900 <HAL_SD_MspInit+0x138>)
 800f820:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f826:	4b36      	ldr	r3, [pc, #216]	@ (800f900 <HAL_SD_MspInit+0x138>)
 800f828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f82a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f82e:	613b      	str	r3, [r7, #16]
 800f830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f832:	4b33      	ldr	r3, [pc, #204]	@ (800f900 <HAL_SD_MspInit+0x138>)
 800f834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f836:	4a32      	ldr	r2, [pc, #200]	@ (800f900 <HAL_SD_MspInit+0x138>)
 800f838:	f043 0304 	orr.w	r3, r3, #4
 800f83c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f83e:	4b30      	ldr	r3, [pc, #192]	@ (800f900 <HAL_SD_MspInit+0x138>)
 800f840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f842:	f003 0304 	and.w	r3, r3, #4
 800f846:	60fb      	str	r3, [r7, #12]
 800f848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f84a:	4b2d      	ldr	r3, [pc, #180]	@ (800f900 <HAL_SD_MspInit+0x138>)
 800f84c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f84e:	4a2c      	ldr	r2, [pc, #176]	@ (800f900 <HAL_SD_MspInit+0x138>)
 800f850:	f043 0308 	orr.w	r3, r3, #8
 800f854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f856:	4b2a      	ldr	r3, [pc, #168]	@ (800f900 <HAL_SD_MspInit+0x138>)
 800f858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f85a:	f003 0308 	and.w	r3, r3, #8
 800f85e:	60bb      	str	r3, [r7, #8]
 800f860:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800f862:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800f866:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f86a:	2302      	movs	r3, #2
 800f86c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f870:	2301      	movs	r3, #1
 800f872:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f876:	2303      	movs	r3, #3
 800f878:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f87c:	230c      	movs	r3, #12
 800f87e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f882:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f886:	4619      	mov	r1, r3
 800f888:	481e      	ldr	r0, [pc, #120]	@ (800f904 <HAL_SD_MspInit+0x13c>)
 800f88a:	f7f2 fa77 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800f88e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f892:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f896:	2302      	movs	r3, #2
 800f898:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f89c:	2300      	movs	r3, #0
 800f89e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8a2:	2303      	movs	r3, #3
 800f8a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f8a8:	230c      	movs	r3, #12
 800f8aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f8ae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	4813      	ldr	r0, [pc, #76]	@ (800f904 <HAL_SD_MspInit+0x13c>)
 800f8b6:	f7f2 fa61 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f8ba:	2304      	movs	r3, #4
 800f8bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8c0:	2302      	movs	r3, #2
 800f8c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8cc:	2303      	movs	r3, #3
 800f8ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f8d2:	230c      	movs	r3, #12
 800f8d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f8d8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f8dc:	4619      	mov	r1, r3
 800f8de:	480a      	ldr	r0, [pc, #40]	@ (800f908 <HAL_SD_MspInit+0x140>)
 800f8e0:	f7f2 fa4c 	bl	8001d7c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	2031      	movs	r0, #49	@ 0x31
 800f8ea:	f7f0 ffd9 	bl	80008a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800f8ee:	2031      	movs	r0, #49	@ 0x31
 800f8f0:	f7f1 f802 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800f8f4:	bf00      	nop
 800f8f6:	37c0      	adds	r7, #192	@ 0xc0
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}
 800f8fc:	50062400 	.word	0x50062400
 800f900:	40021000 	.word	0x40021000
 800f904:	48000800 	.word	0x48000800
 800f908:	48000c00 	.word	0x48000c00

0800f90c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800f910:	4b1b      	ldr	r3, [pc, #108]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f912:	4a1c      	ldr	r2, [pc, #112]	@ (800f984 <MX_SPI1_Init+0x78>)
 800f914:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800f916:	4b1a      	ldr	r3, [pc, #104]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f918:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800f91c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800f91e:	4b18      	ldr	r3, [pc, #96]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f920:	2200      	movs	r2, #0
 800f922:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800f924:	4b16      	ldr	r3, [pc, #88]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f926:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800f92a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800f92c:	4b14      	ldr	r3, [pc, #80]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f92e:	2202      	movs	r2, #2
 800f930:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f932:	4b13      	ldr	r3, [pc, #76]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f934:	2201      	movs	r2, #1
 800f936:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800f938:	4b11      	ldr	r3, [pc, #68]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f93a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f93e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800f940:	4b0f      	ldr	r3, [pc, #60]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f942:	2228      	movs	r2, #40	@ 0x28
 800f944:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f946:	4b0e      	ldr	r3, [pc, #56]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f948:	2200      	movs	r2, #0
 800f94a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800f94c:	4b0c      	ldr	r3, [pc, #48]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f94e:	2200      	movs	r2, #0
 800f950:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f952:	4b0b      	ldr	r3, [pc, #44]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f954:	2200      	movs	r2, #0
 800f956:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800f958:	4b09      	ldr	r3, [pc, #36]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f95a:	2207      	movs	r2, #7
 800f95c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800f95e:	4b08      	ldr	r3, [pc, #32]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f960:	2200      	movs	r2, #0
 800f962:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800f964:	4b06      	ldr	r3, [pc, #24]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f966:	2200      	movs	r2, #0
 800f968:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800f96a:	4805      	ldr	r0, [pc, #20]	@ (800f980 <MX_SPI1_Init+0x74>)
 800f96c:	f7f9 f85a 	bl	8008a24 <HAL_SPI_Init>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800f976:	f7ff fdb5 	bl	800f4e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800f97a:	bf00      	nop
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	2000f740 	.word	0x2000f740
 800f984:	40013000 	.word	0x40013000

0800f988 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800f98c:	4b1b      	ldr	r3, [pc, #108]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f98e:	4a1c      	ldr	r2, [pc, #112]	@ (800fa00 <MX_SPI2_Init+0x78>)
 800f990:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800f992:	4b1a      	ldr	r3, [pc, #104]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f994:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800f998:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800f99a:	4b18      	ldr	r3, [pc, #96]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f99c:	2200      	movs	r2, #0
 800f99e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800f9a0:	4b16      	ldr	r3, [pc, #88]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800f9a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f9a8:	4b14      	ldr	r3, [pc, #80]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800f9ae:	4b13      	ldr	r3, [pc, #76]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800f9b4:	4b11      	ldr	r3, [pc, #68]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f9ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800f9bc:	4b0f      	ldr	r3, [pc, #60]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9be:	2218      	movs	r2, #24
 800f9c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800f9c8:	4b0c      	ldr	r3, [pc, #48]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f9ce:	4b0b      	ldr	r3, [pc, #44]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800f9d4:	4b09      	ldr	r3, [pc, #36]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9d6:	2207      	movs	r2, #7
 800f9d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800f9da:	4b08      	ldr	r3, [pc, #32]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800f9e0:	4b06      	ldr	r3, [pc, #24]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9e2:	2208      	movs	r2, #8
 800f9e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800f9e6:	4805      	ldr	r0, [pc, #20]	@ (800f9fc <MX_SPI2_Init+0x74>)
 800f9e8:	f7f9 f81c 	bl	8008a24 <HAL_SPI_Init>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d001      	beq.n	800f9f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800f9f2:	f7ff fd77 	bl	800f4e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800f9f6:	bf00      	nop
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	2000f7a4 	.word	0x2000f7a4
 800fa00:	40003800 	.word	0x40003800

0800fa04 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800fa08:	4b1b      	ldr	r3, [pc, #108]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa0a:	4a1c      	ldr	r2, [pc, #112]	@ (800fa7c <MX_SPI3_Init+0x78>)
 800fa0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800fa0e:	4b1a      	ldr	r3, [pc, #104]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800fa14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800fa16:	4b18      	ldr	r3, [pc, #96]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa18:	2200      	movs	r2, #0
 800fa1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800fa1c:	4b16      	ldr	r3, [pc, #88]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa1e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800fa22:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800fa24:	4b14      	ldr	r3, [pc, #80]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa26:	2200      	movs	r2, #0
 800fa28:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800fa2a:	4b13      	ldr	r3, [pc, #76]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800fa30:	4b11      	ldr	r3, [pc, #68]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800fa36:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fa38:	4b0f      	ldr	r3, [pc, #60]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800fa3e:	4b0e      	ldr	r3, [pc, #56]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa40:	2200      	movs	r2, #0
 800fa42:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800fa44:	4b0c      	ldr	r3, [pc, #48]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa46:	2200      	movs	r2, #0
 800fa48:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fa4a:	4b0b      	ldr	r3, [pc, #44]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800fa50:	4b09      	ldr	r3, [pc, #36]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa52:	2207      	movs	r2, #7
 800fa54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800fa56:	4b08      	ldr	r3, [pc, #32]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa58:	2200      	movs	r2, #0
 800fa5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800fa5c:	4b06      	ldr	r3, [pc, #24]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa5e:	2208      	movs	r2, #8
 800fa60:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800fa62:	4805      	ldr	r0, [pc, #20]	@ (800fa78 <MX_SPI3_Init+0x74>)
 800fa64:	f7f8 ffde 	bl	8008a24 <HAL_SPI_Init>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d001      	beq.n	800fa72 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800fa6e:	f7ff fd39 	bl	800f4e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800fa72:	bf00      	nop
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	2000f808 	.word	0x2000f808
 800fa7c:	40003c00 	.word	0x40003c00

0800fa80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b08e      	sub	sp, #56	@ 0x38
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	601a      	str	r2, [r3, #0]
 800fa90:	605a      	str	r2, [r3, #4]
 800fa92:	609a      	str	r2, [r3, #8]
 800fa94:	60da      	str	r2, [r3, #12]
 800fa96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4a47      	ldr	r2, [pc, #284]	@ (800fbbc <HAL_SPI_MspInit+0x13c>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d129      	bne.n	800faf6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800faa2:	4b47      	ldr	r3, [pc, #284]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800faa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800faa6:	4a46      	ldr	r2, [pc, #280]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800faa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800faac:	6613      	str	r3, [r2, #96]	@ 0x60
 800faae:	4b44      	ldr	r3, [pc, #272]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800fab6:	623b      	str	r3, [r7, #32]
 800fab8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800faba:	4b41      	ldr	r3, [pc, #260]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fabc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fabe:	4a40      	ldr	r2, [pc, #256]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fac0:	f043 0301 	orr.w	r3, r3, #1
 800fac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fac6:	4b3e      	ldr	r3, [pc, #248]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800faca:	f003 0301 	and.w	r3, r3, #1
 800face:	61fb      	str	r3, [r7, #28]
 800fad0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800fad2:	23e0      	movs	r3, #224	@ 0xe0
 800fad4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fad6:	2302      	movs	r3, #2
 800fad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fada:	2300      	movs	r3, #0
 800fadc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fade:	2300      	movs	r3, #0
 800fae0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800fae2:	2305      	movs	r3, #5
 800fae4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800faea:	4619      	mov	r1, r3
 800faec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800faf0:	f7f2 f944 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800faf4:	e05e      	b.n	800fbb4 <HAL_SPI_MspInit+0x134>
  else if(spiHandle->Instance==SPI2)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4a32      	ldr	r2, [pc, #200]	@ (800fbc4 <HAL_SPI_MspInit+0x144>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d129      	bne.n	800fb54 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800fb00:	4b2f      	ldr	r3, [pc, #188]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb04:	4a2e      	ldr	r2, [pc, #184]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fb0a:	6593      	str	r3, [r2, #88]	@ 0x58
 800fb0c:	4b2c      	ldr	r3, [pc, #176]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fb14:	61bb      	str	r3, [r7, #24]
 800fb16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fb18:	4b29      	ldr	r3, [pc, #164]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb1c:	4a28      	ldr	r2, [pc, #160]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb1e:	f043 0302 	orr.w	r3, r3, #2
 800fb22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fb24:	4b26      	ldr	r3, [pc, #152]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb28:	f003 0302 	and.w	r3, r3, #2
 800fb2c:	617b      	str	r3, [r7, #20]
 800fb2e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800fb30:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800fb34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb36:	2302      	movs	r3, #2
 800fb38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb3e:	2303      	movs	r3, #3
 800fb40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800fb42:	2305      	movs	r3, #5
 800fb44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fb46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	481e      	ldr	r0, [pc, #120]	@ (800fbc8 <HAL_SPI_MspInit+0x148>)
 800fb4e:	f7f2 f915 	bl	8001d7c <HAL_GPIO_Init>
}
 800fb52:	e02f      	b.n	800fbb4 <HAL_SPI_MspInit+0x134>
  else if(spiHandle->Instance==SPI3)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a1c      	ldr	r2, [pc, #112]	@ (800fbcc <HAL_SPI_MspInit+0x14c>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d12a      	bne.n	800fbb4 <HAL_SPI_MspInit+0x134>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800fb5e:	4b18      	ldr	r3, [pc, #96]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb62:	4a17      	ldr	r2, [pc, #92]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fb68:	6593      	str	r3, [r2, #88]	@ 0x58
 800fb6a:	4b15      	ldr	r3, [pc, #84]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fb72:	613b      	str	r3, [r7, #16]
 800fb74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800fb76:	4b12      	ldr	r3, [pc, #72]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb7a:	4a11      	ldr	r2, [pc, #68]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fb82:	4b0f      	ldr	r3, [pc, #60]	@ (800fbc0 <HAL_SPI_MspInit+0x140>)
 800fb84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb8a:	60fb      	str	r3, [r7, #12]
 800fb8c:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 800fb8e:	f7f3 fbdf 	bl	8003350 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800fb92:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800fb96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb98:	2302      	movs	r3, #2
 800fb9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fba0:	2303      	movs	r3, #3
 800fba2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800fba4:	2306      	movs	r3, #6
 800fba6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbac:	4619      	mov	r1, r3
 800fbae:	4808      	ldr	r0, [pc, #32]	@ (800fbd0 <HAL_SPI_MspInit+0x150>)
 800fbb0:	f7f2 f8e4 	bl	8001d7c <HAL_GPIO_Init>
}
 800fbb4:	bf00      	nop
 800fbb6:	3738      	adds	r7, #56	@ 0x38
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	40013000 	.word	0x40013000
 800fbc0:	40021000 	.word	0x40021000
 800fbc4:	40003800 	.word	0x40003800
 800fbc8:	48000400 	.word	0x48000400
 800fbcc:	40003c00 	.word	0x40003c00
 800fbd0:	48001800 	.word	0x48001800

0800fbd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fbda:	4b0f      	ldr	r3, [pc, #60]	@ (800fc18 <HAL_MspInit+0x44>)
 800fbdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fbde:	4a0e      	ldr	r2, [pc, #56]	@ (800fc18 <HAL_MspInit+0x44>)
 800fbe0:	f043 0301 	orr.w	r3, r3, #1
 800fbe4:	6613      	str	r3, [r2, #96]	@ 0x60
 800fbe6:	4b0c      	ldr	r3, [pc, #48]	@ (800fc18 <HAL_MspInit+0x44>)
 800fbe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fbea:	f003 0301 	and.w	r3, r3, #1
 800fbee:	607b      	str	r3, [r7, #4]
 800fbf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800fbf2:	4b09      	ldr	r3, [pc, #36]	@ (800fc18 <HAL_MspInit+0x44>)
 800fbf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbf6:	4a08      	ldr	r2, [pc, #32]	@ (800fc18 <HAL_MspInit+0x44>)
 800fbf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fbfc:	6593      	str	r3, [r2, #88]	@ 0x58
 800fbfe:	4b06      	ldr	r3, [pc, #24]	@ (800fc18 <HAL_MspInit+0x44>)
 800fc00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc06:	603b      	str	r3, [r7, #0]
 800fc08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fc0a:	bf00      	nop
 800fc0c:	370c      	adds	r7, #12
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	40021000 	.word	0x40021000

0800fc1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800fc20:	bf00      	nop
 800fc22:	e7fd      	b.n	800fc20 <NMI_Handler+0x4>

0800fc24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800fc24:	b480      	push	{r7}
 800fc26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800fc28:	bf00      	nop
 800fc2a:	e7fd      	b.n	800fc28 <HardFault_Handler+0x4>

0800fc2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800fc30:	bf00      	nop
 800fc32:	e7fd      	b.n	800fc30 <MemManage_Handler+0x4>

0800fc34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800fc34:	b480      	push	{r7}
 800fc36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800fc38:	bf00      	nop
 800fc3a:	e7fd      	b.n	800fc38 <BusFault_Handler+0x4>

0800fc3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800fc40:	bf00      	nop
 800fc42:	e7fd      	b.n	800fc40 <UsageFault_Handler+0x4>

0800fc44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800fc44:	b480      	push	{r7}
 800fc46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800fc48:	bf00      	nop
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr

0800fc52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800fc52:	b480      	push	{r7}
 800fc54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800fc56:	bf00      	nop
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800fc60:	b480      	push	{r7}
 800fc62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800fc64:	bf00      	nop
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr

0800fc6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800fc72:	f7f0 fce1 	bl	8000638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800fc76:	bf00      	nop
 800fc78:	bd80      	pop	{r7, pc}
	...

0800fc7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800fc80:	4802      	ldr	r0, [pc, #8]	@ (800fc8c <DMA1_Channel1_IRQHandler+0x10>)
 800fc82:	f7f1 ff2b 	bl	8001adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800fc86:	bf00      	nop
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	2000016c 	.word	0x2000016c

0800fc90 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800fc94:	4802      	ldr	r0, [pc, #8]	@ (800fca0 <SDMMC1_IRQHandler+0x10>)
 800fc96:	f7f7 fc35 	bl	8007504 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800fc9a:	bf00      	nop
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	2000f6c0 	.word	0x2000f6c0

0800fca4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	617b      	str	r3, [r7, #20]
 800fcb4:	e00a      	b.n	800fccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800fcb6:	f3af 8000 	nop.w
 800fcba:	4601      	mov	r1, r0
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	1c5a      	adds	r2, r3, #1
 800fcc0:	60ba      	str	r2, [r7, #8]
 800fcc2:	b2ca      	uxtb	r2, r1
 800fcc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	617b      	str	r3, [r7, #20]
 800fccc:	697a      	ldr	r2, [r7, #20]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	dbf0      	blt.n	800fcb6 <_read+0x12>
  }

  return len;
 800fcd4:	687b      	ldr	r3, [r7, #4]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3718      	adds	r7, #24
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}

0800fcde <_close>:
  }
  return len;
}

int _close(int file)
{
 800fcde:	b480      	push	{r7}
 800fce0:	b083      	sub	sp, #12
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800fce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	370c      	adds	r7, #12
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf4:	4770      	bx	lr

0800fcf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800fcf6:	b480      	push	{r7}
 800fcf8:	b083      	sub	sp, #12
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	6078      	str	r0, [r7, #4]
 800fcfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800fd06:	605a      	str	r2, [r3, #4]
  return 0;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <_isatty>:

int _isatty(int file)
{
 800fd16:	b480      	push	{r7}
 800fd18:	b083      	sub	sp, #12
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800fd1e:	2301      	movs	r3, #1
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b085      	sub	sp, #20
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	60b9      	str	r1, [r7, #8]
 800fd36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800fd38:	2300      	movs	r3, #0
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3714      	adds	r7, #20
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr
	...

0800fd48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b086      	sub	sp, #24
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800fd50:	4a14      	ldr	r2, [pc, #80]	@ (800fda4 <_sbrk+0x5c>)
 800fd52:	4b15      	ldr	r3, [pc, #84]	@ (800fda8 <_sbrk+0x60>)
 800fd54:	1ad3      	subs	r3, r2, r3
 800fd56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800fd5c:	4b13      	ldr	r3, [pc, #76]	@ (800fdac <_sbrk+0x64>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d102      	bne.n	800fd6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800fd64:	4b11      	ldr	r3, [pc, #68]	@ (800fdac <_sbrk+0x64>)
 800fd66:	4a12      	ldr	r2, [pc, #72]	@ (800fdb0 <_sbrk+0x68>)
 800fd68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800fd6a:	4b10      	ldr	r3, [pc, #64]	@ (800fdac <_sbrk+0x64>)
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4413      	add	r3, r2
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d207      	bcs.n	800fd88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800fd78:	f000 fbea 	bl	8010550 <__errno>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	220c      	movs	r2, #12
 800fd80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800fd82:	f04f 33ff 	mov.w	r3, #4294967295
 800fd86:	e009      	b.n	800fd9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800fd88:	4b08      	ldr	r3, [pc, #32]	@ (800fdac <_sbrk+0x64>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800fd8e:	4b07      	ldr	r3, [pc, #28]	@ (800fdac <_sbrk+0x64>)
 800fd90:	681a      	ldr	r2, [r3, #0]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4413      	add	r3, r2
 800fd96:	4a05      	ldr	r2, [pc, #20]	@ (800fdac <_sbrk+0x64>)
 800fd98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3718      	adds	r7, #24
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	200a0000 	.word	0x200a0000
 800fda8:	00000800 	.word	0x00000800
 800fdac:	2000f86c 	.word	0x2000f86c
 800fdb0:	2000fae8 	.word	0x2000fae8

0800fdb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800fdb8:	4b06      	ldr	r3, [pc, #24]	@ (800fdd4 <SystemInit+0x20>)
 800fdba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdbe:	4a05      	ldr	r2, [pc, #20]	@ (800fdd4 <SystemInit+0x20>)
 800fdc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fdc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800fdc8:	bf00      	nop
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	e000ed00 	.word	0xe000ed00

0800fdd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800fddc:	4b22      	ldr	r3, [pc, #136]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fdde:	4a23      	ldr	r2, [pc, #140]	@ (800fe6c <MX_USART1_UART_Init+0x94>)
 800fde0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800fde2:	4b21      	ldr	r3, [pc, #132]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fde4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fde8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800fdea:	4b1f      	ldr	r3, [pc, #124]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800fdf0:	4b1d      	ldr	r3, [pc, #116]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800fdf6:	4b1c      	ldr	r3, [pc, #112]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800fdfc:	4b1a      	ldr	r3, [pc, #104]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fdfe:	220c      	movs	r2, #12
 800fe00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fe02:	4b19      	ldr	r3, [pc, #100]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800fe08:	4b17      	ldr	r3, [pc, #92]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fe0e:	4b16      	ldr	r3, [pc, #88]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fe10:	2200      	movs	r2, #0
 800fe12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fe14:	4b14      	ldr	r3, [pc, #80]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fe16:	2200      	movs	r2, #0
 800fe18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fe1a:	4b13      	ldr	r3, [pc, #76]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800fe20:	4811      	ldr	r0, [pc, #68]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fe22:	f7f9 fb7b 	bl	800951c <HAL_UART_Init>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d001      	beq.n	800fe30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800fe2c:	f7ff fb5a 	bl	800f4e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fe30:	2100      	movs	r1, #0
 800fe32:	480d      	ldr	r0, [pc, #52]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fe34:	f7fa fbd0 	bl	800a5d8 <HAL_UARTEx_SetTxFifoThreshold>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800fe3e:	f7ff fb51 	bl	800f4e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fe42:	2100      	movs	r1, #0
 800fe44:	4808      	ldr	r0, [pc, #32]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fe46:	f7fa fc53 	bl	800a6f0 <HAL_UARTEx_SetRxFifoThreshold>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d001      	beq.n	800fe54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800fe50:	f7ff fb48 	bl	800f4e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800fe54:	4804      	ldr	r0, [pc, #16]	@ (800fe68 <MX_USART1_UART_Init+0x90>)
 800fe56:	f7fa fb57 	bl	800a508 <HAL_UARTEx_DisableFifoMode>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d001      	beq.n	800fe64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800fe60:	f7ff fb40 	bl	800f4e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800fe64:	bf00      	nop
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	2000f870 	.word	0x2000f870
 800fe6c:	40013800 	.word	0x40013800

0800fe70 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800fe74:	4b22      	ldr	r3, [pc, #136]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fe76:	4a23      	ldr	r2, [pc, #140]	@ (800ff04 <MX_USART2_UART_Init+0x94>)
 800fe78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800fe7a:	4b21      	ldr	r3, [pc, #132]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fe7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fe80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800fe82:	4b1f      	ldr	r3, [pc, #124]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fe84:	2200      	movs	r2, #0
 800fe86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800fe88:	4b1d      	ldr	r3, [pc, #116]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800fe8e:	4b1c      	ldr	r3, [pc, #112]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fe90:	2200      	movs	r2, #0
 800fe92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800fe94:	4b1a      	ldr	r3, [pc, #104]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fe96:	220c      	movs	r2, #12
 800fe98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fe9a:	4b19      	ldr	r3, [pc, #100]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800fea0:	4b17      	ldr	r3, [pc, #92]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fea2:	2200      	movs	r2, #0
 800fea4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fea6:	4b16      	ldr	r3, [pc, #88]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fea8:	2200      	movs	r2, #0
 800feaa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800feac:	4b14      	ldr	r3, [pc, #80]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800feae:	2200      	movs	r2, #0
 800feb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800feb2:	4b13      	ldr	r3, [pc, #76]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800feb4:	2200      	movs	r2, #0
 800feb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800feb8:	4811      	ldr	r0, [pc, #68]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800feba:	f7f9 fb2f 	bl	800951c <HAL_UART_Init>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d001      	beq.n	800fec8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800fec4:	f7ff fb0e 	bl	800f4e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fec8:	2100      	movs	r1, #0
 800feca:	480d      	ldr	r0, [pc, #52]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fecc:	f7fa fb84 	bl	800a5d8 <HAL_UARTEx_SetTxFifoThreshold>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d001      	beq.n	800feda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800fed6:	f7ff fb05 	bl	800f4e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800feda:	2100      	movs	r1, #0
 800fedc:	4808      	ldr	r0, [pc, #32]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800fede:	f7fa fc07 	bl	800a6f0 <HAL_UARTEx_SetRxFifoThreshold>
 800fee2:	4603      	mov	r3, r0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d001      	beq.n	800feec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800fee8:	f7ff fafc 	bl	800f4e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800feec:	4804      	ldr	r0, [pc, #16]	@ (800ff00 <MX_USART2_UART_Init+0x90>)
 800feee:	f7fa fb0b 	bl	800a508 <HAL_UARTEx_DisableFifoMode>
 800fef2:	4603      	mov	r3, r0
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d001      	beq.n	800fefc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800fef8:	f7ff faf4 	bl	800f4e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800fefc:	bf00      	nop
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	2000f904 	.word	0x2000f904
 800ff04:	40004400 	.word	0x40004400

0800ff08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b0b2      	sub	sp, #200	@ 0xc8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff10:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800ff14:	2200      	movs	r2, #0
 800ff16:	601a      	str	r2, [r3, #0]
 800ff18:	605a      	str	r2, [r3, #4]
 800ff1a:	609a      	str	r2, [r3, #8]
 800ff1c:	60da      	str	r2, [r3, #12]
 800ff1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ff20:	f107 031c 	add.w	r3, r7, #28
 800ff24:	2298      	movs	r2, #152	@ 0x98
 800ff26:	2100      	movs	r1, #0
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f000 fac3 	bl	80104b4 <memset>
  if(uartHandle->Instance==USART1)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4a43      	ldr	r2, [pc, #268]	@ (8010040 <HAL_UART_MspInit+0x138>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d13d      	bne.n	800ffb4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800ff38:	2301      	movs	r3, #1
 800ff3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ff40:	f107 031c 	add.w	r3, r7, #28
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7f4 fae5 	bl	8004514 <HAL_RCCEx_PeriphCLKConfig>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d001      	beq.n	800ff54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800ff50:	f7ff fac8 	bl	800f4e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ff54:	4b3b      	ldr	r3, [pc, #236]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800ff56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ff58:	4a3a      	ldr	r2, [pc, #232]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800ff5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ff5e:	6613      	str	r3, [r2, #96]	@ 0x60
 800ff60:	4b38      	ldr	r3, [pc, #224]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800ff62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ff64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ff68:	61bb      	str	r3, [r7, #24]
 800ff6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ff6c:	4b35      	ldr	r3, [pc, #212]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800ff6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff70:	4a34      	ldr	r2, [pc, #208]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800ff72:	f043 0301 	orr.w	r3, r3, #1
 800ff76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ff78:	4b32      	ldr	r3, [pc, #200]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800ff7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff7c:	f003 0301 	and.w	r3, r3, #1
 800ff80:	617b      	str	r3, [r7, #20]
 800ff82:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ff84:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800ff88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff8c:	2302      	movs	r3, #2
 800ff8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff92:	2300      	movs	r3, #0
 800ff94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ff98:	2303      	movs	r3, #3
 800ff9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ff9e:	2307      	movs	r3, #7
 800ffa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ffa4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ffae:	f7f1 fee5 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800ffb2:	e040      	b.n	8010036 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a23      	ldr	r2, [pc, #140]	@ (8010048 <HAL_UART_MspInit+0x140>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d13b      	bne.n	8010036 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800ffbe:	2302      	movs	r3, #2
 800ffc0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ffc6:	f107 031c 	add.w	r3, r7, #28
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7f4 faa2 	bl	8004514 <HAL_RCCEx_PeriphCLKConfig>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d001      	beq.n	800ffda <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800ffd6:	f7ff fa85 	bl	800f4e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ffda:	4b1a      	ldr	r3, [pc, #104]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800ffdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffde:	4a19      	ldr	r2, [pc, #100]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800ffe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ffe4:	6593      	str	r3, [r2, #88]	@ 0x58
 800ffe6:	4b17      	ldr	r3, [pc, #92]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800ffe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffee:	613b      	str	r3, [r7, #16]
 800fff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fff2:	4b14      	ldr	r3, [pc, #80]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800fff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fff6:	4a13      	ldr	r2, [pc, #76]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 800fff8:	f043 0301 	orr.w	r3, r3, #1
 800fffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fffe:	4b11      	ldr	r3, [pc, #68]	@ (8010044 <HAL_UART_MspInit+0x13c>)
 8010000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010002:	f003 0301 	and.w	r3, r3, #1
 8010006:	60fb      	str	r3, [r7, #12]
 8010008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 801000a:	230c      	movs	r3, #12
 801000c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010010:	2302      	movs	r3, #2
 8010012:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010016:	2300      	movs	r3, #0
 8010018:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801001c:	2303      	movs	r3, #3
 801001e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010022:	2307      	movs	r3, #7
 8010024:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010028:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 801002c:	4619      	mov	r1, r3
 801002e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8010032:	f7f1 fea3 	bl	8001d7c <HAL_GPIO_Init>
}
 8010036:	bf00      	nop
 8010038:	37c8      	adds	r7, #200	@ 0xc8
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	40013800 	.word	0x40013800
 8010044:	40021000 	.word	0x40021000
 8010048:	40004400 	.word	0x40004400

0801004c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 801004c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8010084 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8010050:	f7ff feb0 	bl	800fdb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010054:	480c      	ldr	r0, [pc, #48]	@ (8010088 <LoopForever+0x6>)
  ldr r1, =_edata
 8010056:	490d      	ldr	r1, [pc, #52]	@ (801008c <LoopForever+0xa>)
  ldr r2, =_sidata
 8010058:	4a0d      	ldr	r2, [pc, #52]	@ (8010090 <LoopForever+0xe>)
  movs r3, #0
 801005a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801005c:	e002      	b.n	8010064 <LoopCopyDataInit>

0801005e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801005e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010062:	3304      	adds	r3, #4

08010064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010068:	d3f9      	bcc.n	801005e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801006a:	4a0a      	ldr	r2, [pc, #40]	@ (8010094 <LoopForever+0x12>)
  ldr r4, =_ebss
 801006c:	4c0a      	ldr	r4, [pc, #40]	@ (8010098 <LoopForever+0x16>)
  movs r3, #0
 801006e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010070:	e001      	b.n	8010076 <LoopFillZerobss>

08010072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010074:	3204      	adds	r2, #4

08010076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010078:	d3fb      	bcc.n	8010072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801007a:	f000 fa6f 	bl	801055c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801007e:	f7fe ff01 	bl	800ee84 <main>

08010082 <LoopForever>:

LoopForever:
    b LoopForever
 8010082:	e7fe      	b.n	8010082 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8010084:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8010088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801008c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8010090:	08011984 	.word	0x08011984
  ldr r2, =_sbss
 8010094:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8010098:	2000fae4 	.word	0x2000fae4

0801009c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801009c:	e7fe      	b.n	801009c <ADC1_IRQHandler>
	...

080100a0 <std>:
 80100a0:	2300      	movs	r3, #0
 80100a2:	b510      	push	{r4, lr}
 80100a4:	4604      	mov	r4, r0
 80100a6:	e9c0 3300 	strd	r3, r3, [r0]
 80100aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100ae:	6083      	str	r3, [r0, #8]
 80100b0:	8181      	strh	r1, [r0, #12]
 80100b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80100b4:	81c2      	strh	r2, [r0, #14]
 80100b6:	6183      	str	r3, [r0, #24]
 80100b8:	4619      	mov	r1, r3
 80100ba:	2208      	movs	r2, #8
 80100bc:	305c      	adds	r0, #92	@ 0x5c
 80100be:	f000 f9f9 	bl	80104b4 <memset>
 80100c2:	4b0d      	ldr	r3, [pc, #52]	@ (80100f8 <std+0x58>)
 80100c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80100c6:	4b0d      	ldr	r3, [pc, #52]	@ (80100fc <std+0x5c>)
 80100c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80100ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010100 <std+0x60>)
 80100cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80100ce:	4b0d      	ldr	r3, [pc, #52]	@ (8010104 <std+0x64>)
 80100d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80100d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010108 <std+0x68>)
 80100d4:	6224      	str	r4, [r4, #32]
 80100d6:	429c      	cmp	r4, r3
 80100d8:	d006      	beq.n	80100e8 <std+0x48>
 80100da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80100de:	4294      	cmp	r4, r2
 80100e0:	d002      	beq.n	80100e8 <std+0x48>
 80100e2:	33d0      	adds	r3, #208	@ 0xd0
 80100e4:	429c      	cmp	r4, r3
 80100e6:	d105      	bne.n	80100f4 <std+0x54>
 80100e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80100ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100f0:	f000 ba58 	b.w	80105a4 <__retarget_lock_init_recursive>
 80100f4:	bd10      	pop	{r4, pc}
 80100f6:	bf00      	nop
 80100f8:	08010305 	.word	0x08010305
 80100fc:	08010327 	.word	0x08010327
 8010100:	0801035f 	.word	0x0801035f
 8010104:	08010383 	.word	0x08010383
 8010108:	2000f998 	.word	0x2000f998

0801010c <stdio_exit_handler>:
 801010c:	4a02      	ldr	r2, [pc, #8]	@ (8010118 <stdio_exit_handler+0xc>)
 801010e:	4903      	ldr	r1, [pc, #12]	@ (801011c <stdio_exit_handler+0x10>)
 8010110:	4803      	ldr	r0, [pc, #12]	@ (8010120 <stdio_exit_handler+0x14>)
 8010112:	f000 b869 	b.w	80101e8 <_fwalk_sglue>
 8010116:	bf00      	nop
 8010118:	2000000c 	.word	0x2000000c
 801011c:	08010e45 	.word	0x08010e45
 8010120:	2000001c 	.word	0x2000001c

08010124 <cleanup_stdio>:
 8010124:	6841      	ldr	r1, [r0, #4]
 8010126:	4b0c      	ldr	r3, [pc, #48]	@ (8010158 <cleanup_stdio+0x34>)
 8010128:	4299      	cmp	r1, r3
 801012a:	b510      	push	{r4, lr}
 801012c:	4604      	mov	r4, r0
 801012e:	d001      	beq.n	8010134 <cleanup_stdio+0x10>
 8010130:	f000 fe88 	bl	8010e44 <_fflush_r>
 8010134:	68a1      	ldr	r1, [r4, #8]
 8010136:	4b09      	ldr	r3, [pc, #36]	@ (801015c <cleanup_stdio+0x38>)
 8010138:	4299      	cmp	r1, r3
 801013a:	d002      	beq.n	8010142 <cleanup_stdio+0x1e>
 801013c:	4620      	mov	r0, r4
 801013e:	f000 fe81 	bl	8010e44 <_fflush_r>
 8010142:	68e1      	ldr	r1, [r4, #12]
 8010144:	4b06      	ldr	r3, [pc, #24]	@ (8010160 <cleanup_stdio+0x3c>)
 8010146:	4299      	cmp	r1, r3
 8010148:	d004      	beq.n	8010154 <cleanup_stdio+0x30>
 801014a:	4620      	mov	r0, r4
 801014c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010150:	f000 be78 	b.w	8010e44 <_fflush_r>
 8010154:	bd10      	pop	{r4, pc}
 8010156:	bf00      	nop
 8010158:	2000f998 	.word	0x2000f998
 801015c:	2000fa00 	.word	0x2000fa00
 8010160:	2000fa68 	.word	0x2000fa68

08010164 <global_stdio_init.part.0>:
 8010164:	b510      	push	{r4, lr}
 8010166:	4b0b      	ldr	r3, [pc, #44]	@ (8010194 <global_stdio_init.part.0+0x30>)
 8010168:	4c0b      	ldr	r4, [pc, #44]	@ (8010198 <global_stdio_init.part.0+0x34>)
 801016a:	4a0c      	ldr	r2, [pc, #48]	@ (801019c <global_stdio_init.part.0+0x38>)
 801016c:	601a      	str	r2, [r3, #0]
 801016e:	4620      	mov	r0, r4
 8010170:	2200      	movs	r2, #0
 8010172:	2104      	movs	r1, #4
 8010174:	f7ff ff94 	bl	80100a0 <std>
 8010178:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801017c:	2201      	movs	r2, #1
 801017e:	2109      	movs	r1, #9
 8010180:	f7ff ff8e 	bl	80100a0 <std>
 8010184:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010188:	2202      	movs	r2, #2
 801018a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801018e:	2112      	movs	r1, #18
 8010190:	f7ff bf86 	b.w	80100a0 <std>
 8010194:	2000fad0 	.word	0x2000fad0
 8010198:	2000f998 	.word	0x2000f998
 801019c:	0801010d 	.word	0x0801010d

080101a0 <__sfp_lock_acquire>:
 80101a0:	4801      	ldr	r0, [pc, #4]	@ (80101a8 <__sfp_lock_acquire+0x8>)
 80101a2:	f000 ba00 	b.w	80105a6 <__retarget_lock_acquire_recursive>
 80101a6:	bf00      	nop
 80101a8:	2000fad9 	.word	0x2000fad9

080101ac <__sfp_lock_release>:
 80101ac:	4801      	ldr	r0, [pc, #4]	@ (80101b4 <__sfp_lock_release+0x8>)
 80101ae:	f000 b9fb 	b.w	80105a8 <__retarget_lock_release_recursive>
 80101b2:	bf00      	nop
 80101b4:	2000fad9 	.word	0x2000fad9

080101b8 <__sinit>:
 80101b8:	b510      	push	{r4, lr}
 80101ba:	4604      	mov	r4, r0
 80101bc:	f7ff fff0 	bl	80101a0 <__sfp_lock_acquire>
 80101c0:	6a23      	ldr	r3, [r4, #32]
 80101c2:	b11b      	cbz	r3, 80101cc <__sinit+0x14>
 80101c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101c8:	f7ff bff0 	b.w	80101ac <__sfp_lock_release>
 80101cc:	4b04      	ldr	r3, [pc, #16]	@ (80101e0 <__sinit+0x28>)
 80101ce:	6223      	str	r3, [r4, #32]
 80101d0:	4b04      	ldr	r3, [pc, #16]	@ (80101e4 <__sinit+0x2c>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d1f5      	bne.n	80101c4 <__sinit+0xc>
 80101d8:	f7ff ffc4 	bl	8010164 <global_stdio_init.part.0>
 80101dc:	e7f2      	b.n	80101c4 <__sinit+0xc>
 80101de:	bf00      	nop
 80101e0:	08010125 	.word	0x08010125
 80101e4:	2000fad0 	.word	0x2000fad0

080101e8 <_fwalk_sglue>:
 80101e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101ec:	4607      	mov	r7, r0
 80101ee:	4688      	mov	r8, r1
 80101f0:	4614      	mov	r4, r2
 80101f2:	2600      	movs	r6, #0
 80101f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101f8:	f1b9 0901 	subs.w	r9, r9, #1
 80101fc:	d505      	bpl.n	801020a <_fwalk_sglue+0x22>
 80101fe:	6824      	ldr	r4, [r4, #0]
 8010200:	2c00      	cmp	r4, #0
 8010202:	d1f7      	bne.n	80101f4 <_fwalk_sglue+0xc>
 8010204:	4630      	mov	r0, r6
 8010206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801020a:	89ab      	ldrh	r3, [r5, #12]
 801020c:	2b01      	cmp	r3, #1
 801020e:	d907      	bls.n	8010220 <_fwalk_sglue+0x38>
 8010210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010214:	3301      	adds	r3, #1
 8010216:	d003      	beq.n	8010220 <_fwalk_sglue+0x38>
 8010218:	4629      	mov	r1, r5
 801021a:	4638      	mov	r0, r7
 801021c:	47c0      	blx	r8
 801021e:	4306      	orrs	r6, r0
 8010220:	3568      	adds	r5, #104	@ 0x68
 8010222:	e7e9      	b.n	80101f8 <_fwalk_sglue+0x10>

08010224 <iprintf>:
 8010224:	b40f      	push	{r0, r1, r2, r3}
 8010226:	b507      	push	{r0, r1, r2, lr}
 8010228:	4906      	ldr	r1, [pc, #24]	@ (8010244 <iprintf+0x20>)
 801022a:	ab04      	add	r3, sp, #16
 801022c:	6808      	ldr	r0, [r1, #0]
 801022e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010232:	6881      	ldr	r1, [r0, #8]
 8010234:	9301      	str	r3, [sp, #4]
 8010236:	f000 fadb 	bl	80107f0 <_vfiprintf_r>
 801023a:	b003      	add	sp, #12
 801023c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010240:	b004      	add	sp, #16
 8010242:	4770      	bx	lr
 8010244:	20000018 	.word	0x20000018

08010248 <_puts_r>:
 8010248:	6a03      	ldr	r3, [r0, #32]
 801024a:	b570      	push	{r4, r5, r6, lr}
 801024c:	6884      	ldr	r4, [r0, #8]
 801024e:	4605      	mov	r5, r0
 8010250:	460e      	mov	r6, r1
 8010252:	b90b      	cbnz	r3, 8010258 <_puts_r+0x10>
 8010254:	f7ff ffb0 	bl	80101b8 <__sinit>
 8010258:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801025a:	07db      	lsls	r3, r3, #31
 801025c:	d405      	bmi.n	801026a <_puts_r+0x22>
 801025e:	89a3      	ldrh	r3, [r4, #12]
 8010260:	0598      	lsls	r0, r3, #22
 8010262:	d402      	bmi.n	801026a <_puts_r+0x22>
 8010264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010266:	f000 f99e 	bl	80105a6 <__retarget_lock_acquire_recursive>
 801026a:	89a3      	ldrh	r3, [r4, #12]
 801026c:	0719      	lsls	r1, r3, #28
 801026e:	d502      	bpl.n	8010276 <_puts_r+0x2e>
 8010270:	6923      	ldr	r3, [r4, #16]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d135      	bne.n	80102e2 <_puts_r+0x9a>
 8010276:	4621      	mov	r1, r4
 8010278:	4628      	mov	r0, r5
 801027a:	f000 f8c5 	bl	8010408 <__swsetup_r>
 801027e:	b380      	cbz	r0, 80102e2 <_puts_r+0x9a>
 8010280:	f04f 35ff 	mov.w	r5, #4294967295
 8010284:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010286:	07da      	lsls	r2, r3, #31
 8010288:	d405      	bmi.n	8010296 <_puts_r+0x4e>
 801028a:	89a3      	ldrh	r3, [r4, #12]
 801028c:	059b      	lsls	r3, r3, #22
 801028e:	d402      	bmi.n	8010296 <_puts_r+0x4e>
 8010290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010292:	f000 f989 	bl	80105a8 <__retarget_lock_release_recursive>
 8010296:	4628      	mov	r0, r5
 8010298:	bd70      	pop	{r4, r5, r6, pc}
 801029a:	2b00      	cmp	r3, #0
 801029c:	da04      	bge.n	80102a8 <_puts_r+0x60>
 801029e:	69a2      	ldr	r2, [r4, #24]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	dc17      	bgt.n	80102d4 <_puts_r+0x8c>
 80102a4:	290a      	cmp	r1, #10
 80102a6:	d015      	beq.n	80102d4 <_puts_r+0x8c>
 80102a8:	6823      	ldr	r3, [r4, #0]
 80102aa:	1c5a      	adds	r2, r3, #1
 80102ac:	6022      	str	r2, [r4, #0]
 80102ae:	7019      	strb	r1, [r3, #0]
 80102b0:	68a3      	ldr	r3, [r4, #8]
 80102b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80102b6:	3b01      	subs	r3, #1
 80102b8:	60a3      	str	r3, [r4, #8]
 80102ba:	2900      	cmp	r1, #0
 80102bc:	d1ed      	bne.n	801029a <_puts_r+0x52>
 80102be:	2b00      	cmp	r3, #0
 80102c0:	da11      	bge.n	80102e6 <_puts_r+0x9e>
 80102c2:	4622      	mov	r2, r4
 80102c4:	210a      	movs	r1, #10
 80102c6:	4628      	mov	r0, r5
 80102c8:	f000 f85f 	bl	801038a <__swbuf_r>
 80102cc:	3001      	adds	r0, #1
 80102ce:	d0d7      	beq.n	8010280 <_puts_r+0x38>
 80102d0:	250a      	movs	r5, #10
 80102d2:	e7d7      	b.n	8010284 <_puts_r+0x3c>
 80102d4:	4622      	mov	r2, r4
 80102d6:	4628      	mov	r0, r5
 80102d8:	f000 f857 	bl	801038a <__swbuf_r>
 80102dc:	3001      	adds	r0, #1
 80102de:	d1e7      	bne.n	80102b0 <_puts_r+0x68>
 80102e0:	e7ce      	b.n	8010280 <_puts_r+0x38>
 80102e2:	3e01      	subs	r6, #1
 80102e4:	e7e4      	b.n	80102b0 <_puts_r+0x68>
 80102e6:	6823      	ldr	r3, [r4, #0]
 80102e8:	1c5a      	adds	r2, r3, #1
 80102ea:	6022      	str	r2, [r4, #0]
 80102ec:	220a      	movs	r2, #10
 80102ee:	701a      	strb	r2, [r3, #0]
 80102f0:	e7ee      	b.n	80102d0 <_puts_r+0x88>
	...

080102f4 <puts>:
 80102f4:	4b02      	ldr	r3, [pc, #8]	@ (8010300 <puts+0xc>)
 80102f6:	4601      	mov	r1, r0
 80102f8:	6818      	ldr	r0, [r3, #0]
 80102fa:	f7ff bfa5 	b.w	8010248 <_puts_r>
 80102fe:	bf00      	nop
 8010300:	20000018 	.word	0x20000018

08010304 <__sread>:
 8010304:	b510      	push	{r4, lr}
 8010306:	460c      	mov	r4, r1
 8010308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801030c:	f000 f8fc 	bl	8010508 <_read_r>
 8010310:	2800      	cmp	r0, #0
 8010312:	bfab      	itete	ge
 8010314:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010316:	89a3      	ldrhlt	r3, [r4, #12]
 8010318:	181b      	addge	r3, r3, r0
 801031a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801031e:	bfac      	ite	ge
 8010320:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010322:	81a3      	strhlt	r3, [r4, #12]
 8010324:	bd10      	pop	{r4, pc}

08010326 <__swrite>:
 8010326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801032a:	461f      	mov	r7, r3
 801032c:	898b      	ldrh	r3, [r1, #12]
 801032e:	05db      	lsls	r3, r3, #23
 8010330:	4605      	mov	r5, r0
 8010332:	460c      	mov	r4, r1
 8010334:	4616      	mov	r6, r2
 8010336:	d505      	bpl.n	8010344 <__swrite+0x1e>
 8010338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801033c:	2302      	movs	r3, #2
 801033e:	2200      	movs	r2, #0
 8010340:	f000 f8d0 	bl	80104e4 <_lseek_r>
 8010344:	89a3      	ldrh	r3, [r4, #12]
 8010346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801034a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801034e:	81a3      	strh	r3, [r4, #12]
 8010350:	4632      	mov	r2, r6
 8010352:	463b      	mov	r3, r7
 8010354:	4628      	mov	r0, r5
 8010356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801035a:	f000 b8e7 	b.w	801052c <_write_r>

0801035e <__sseek>:
 801035e:	b510      	push	{r4, lr}
 8010360:	460c      	mov	r4, r1
 8010362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010366:	f000 f8bd 	bl	80104e4 <_lseek_r>
 801036a:	1c43      	adds	r3, r0, #1
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	bf15      	itete	ne
 8010370:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010372:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010376:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801037a:	81a3      	strheq	r3, [r4, #12]
 801037c:	bf18      	it	ne
 801037e:	81a3      	strhne	r3, [r4, #12]
 8010380:	bd10      	pop	{r4, pc}

08010382 <__sclose>:
 8010382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010386:	f000 b89d 	b.w	80104c4 <_close_r>

0801038a <__swbuf_r>:
 801038a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801038c:	460e      	mov	r6, r1
 801038e:	4614      	mov	r4, r2
 8010390:	4605      	mov	r5, r0
 8010392:	b118      	cbz	r0, 801039c <__swbuf_r+0x12>
 8010394:	6a03      	ldr	r3, [r0, #32]
 8010396:	b90b      	cbnz	r3, 801039c <__swbuf_r+0x12>
 8010398:	f7ff ff0e 	bl	80101b8 <__sinit>
 801039c:	69a3      	ldr	r3, [r4, #24]
 801039e:	60a3      	str	r3, [r4, #8]
 80103a0:	89a3      	ldrh	r3, [r4, #12]
 80103a2:	071a      	lsls	r2, r3, #28
 80103a4:	d501      	bpl.n	80103aa <__swbuf_r+0x20>
 80103a6:	6923      	ldr	r3, [r4, #16]
 80103a8:	b943      	cbnz	r3, 80103bc <__swbuf_r+0x32>
 80103aa:	4621      	mov	r1, r4
 80103ac:	4628      	mov	r0, r5
 80103ae:	f000 f82b 	bl	8010408 <__swsetup_r>
 80103b2:	b118      	cbz	r0, 80103bc <__swbuf_r+0x32>
 80103b4:	f04f 37ff 	mov.w	r7, #4294967295
 80103b8:	4638      	mov	r0, r7
 80103ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103bc:	6823      	ldr	r3, [r4, #0]
 80103be:	6922      	ldr	r2, [r4, #16]
 80103c0:	1a98      	subs	r0, r3, r2
 80103c2:	6963      	ldr	r3, [r4, #20]
 80103c4:	b2f6      	uxtb	r6, r6
 80103c6:	4283      	cmp	r3, r0
 80103c8:	4637      	mov	r7, r6
 80103ca:	dc05      	bgt.n	80103d8 <__swbuf_r+0x4e>
 80103cc:	4621      	mov	r1, r4
 80103ce:	4628      	mov	r0, r5
 80103d0:	f000 fd38 	bl	8010e44 <_fflush_r>
 80103d4:	2800      	cmp	r0, #0
 80103d6:	d1ed      	bne.n	80103b4 <__swbuf_r+0x2a>
 80103d8:	68a3      	ldr	r3, [r4, #8]
 80103da:	3b01      	subs	r3, #1
 80103dc:	60a3      	str	r3, [r4, #8]
 80103de:	6823      	ldr	r3, [r4, #0]
 80103e0:	1c5a      	adds	r2, r3, #1
 80103e2:	6022      	str	r2, [r4, #0]
 80103e4:	701e      	strb	r6, [r3, #0]
 80103e6:	6962      	ldr	r2, [r4, #20]
 80103e8:	1c43      	adds	r3, r0, #1
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d004      	beq.n	80103f8 <__swbuf_r+0x6e>
 80103ee:	89a3      	ldrh	r3, [r4, #12]
 80103f0:	07db      	lsls	r3, r3, #31
 80103f2:	d5e1      	bpl.n	80103b8 <__swbuf_r+0x2e>
 80103f4:	2e0a      	cmp	r6, #10
 80103f6:	d1df      	bne.n	80103b8 <__swbuf_r+0x2e>
 80103f8:	4621      	mov	r1, r4
 80103fa:	4628      	mov	r0, r5
 80103fc:	f000 fd22 	bl	8010e44 <_fflush_r>
 8010400:	2800      	cmp	r0, #0
 8010402:	d0d9      	beq.n	80103b8 <__swbuf_r+0x2e>
 8010404:	e7d6      	b.n	80103b4 <__swbuf_r+0x2a>
	...

08010408 <__swsetup_r>:
 8010408:	b538      	push	{r3, r4, r5, lr}
 801040a:	4b29      	ldr	r3, [pc, #164]	@ (80104b0 <__swsetup_r+0xa8>)
 801040c:	4605      	mov	r5, r0
 801040e:	6818      	ldr	r0, [r3, #0]
 8010410:	460c      	mov	r4, r1
 8010412:	b118      	cbz	r0, 801041c <__swsetup_r+0x14>
 8010414:	6a03      	ldr	r3, [r0, #32]
 8010416:	b90b      	cbnz	r3, 801041c <__swsetup_r+0x14>
 8010418:	f7ff fece 	bl	80101b8 <__sinit>
 801041c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010420:	0719      	lsls	r1, r3, #28
 8010422:	d422      	bmi.n	801046a <__swsetup_r+0x62>
 8010424:	06da      	lsls	r2, r3, #27
 8010426:	d407      	bmi.n	8010438 <__swsetup_r+0x30>
 8010428:	2209      	movs	r2, #9
 801042a:	602a      	str	r2, [r5, #0]
 801042c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	f04f 30ff 	mov.w	r0, #4294967295
 8010436:	e033      	b.n	80104a0 <__swsetup_r+0x98>
 8010438:	0758      	lsls	r0, r3, #29
 801043a:	d512      	bpl.n	8010462 <__swsetup_r+0x5a>
 801043c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801043e:	b141      	cbz	r1, 8010452 <__swsetup_r+0x4a>
 8010440:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010444:	4299      	cmp	r1, r3
 8010446:	d002      	beq.n	801044e <__swsetup_r+0x46>
 8010448:	4628      	mov	r0, r5
 801044a:	f000 f8af 	bl	80105ac <_free_r>
 801044e:	2300      	movs	r3, #0
 8010450:	6363      	str	r3, [r4, #52]	@ 0x34
 8010452:	89a3      	ldrh	r3, [r4, #12]
 8010454:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010458:	81a3      	strh	r3, [r4, #12]
 801045a:	2300      	movs	r3, #0
 801045c:	6063      	str	r3, [r4, #4]
 801045e:	6923      	ldr	r3, [r4, #16]
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	f043 0308 	orr.w	r3, r3, #8
 8010468:	81a3      	strh	r3, [r4, #12]
 801046a:	6923      	ldr	r3, [r4, #16]
 801046c:	b94b      	cbnz	r3, 8010482 <__swsetup_r+0x7a>
 801046e:	89a3      	ldrh	r3, [r4, #12]
 8010470:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010478:	d003      	beq.n	8010482 <__swsetup_r+0x7a>
 801047a:	4621      	mov	r1, r4
 801047c:	4628      	mov	r0, r5
 801047e:	f000 fd2f 	bl	8010ee0 <__smakebuf_r>
 8010482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010486:	f013 0201 	ands.w	r2, r3, #1
 801048a:	d00a      	beq.n	80104a2 <__swsetup_r+0x9a>
 801048c:	2200      	movs	r2, #0
 801048e:	60a2      	str	r2, [r4, #8]
 8010490:	6962      	ldr	r2, [r4, #20]
 8010492:	4252      	negs	r2, r2
 8010494:	61a2      	str	r2, [r4, #24]
 8010496:	6922      	ldr	r2, [r4, #16]
 8010498:	b942      	cbnz	r2, 80104ac <__swsetup_r+0xa4>
 801049a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801049e:	d1c5      	bne.n	801042c <__swsetup_r+0x24>
 80104a0:	bd38      	pop	{r3, r4, r5, pc}
 80104a2:	0799      	lsls	r1, r3, #30
 80104a4:	bf58      	it	pl
 80104a6:	6962      	ldrpl	r2, [r4, #20]
 80104a8:	60a2      	str	r2, [r4, #8]
 80104aa:	e7f4      	b.n	8010496 <__swsetup_r+0x8e>
 80104ac:	2000      	movs	r0, #0
 80104ae:	e7f7      	b.n	80104a0 <__swsetup_r+0x98>
 80104b0:	20000018 	.word	0x20000018

080104b4 <memset>:
 80104b4:	4402      	add	r2, r0
 80104b6:	4603      	mov	r3, r0
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d100      	bne.n	80104be <memset+0xa>
 80104bc:	4770      	bx	lr
 80104be:	f803 1b01 	strb.w	r1, [r3], #1
 80104c2:	e7f9      	b.n	80104b8 <memset+0x4>

080104c4 <_close_r>:
 80104c4:	b538      	push	{r3, r4, r5, lr}
 80104c6:	4d06      	ldr	r5, [pc, #24]	@ (80104e0 <_close_r+0x1c>)
 80104c8:	2300      	movs	r3, #0
 80104ca:	4604      	mov	r4, r0
 80104cc:	4608      	mov	r0, r1
 80104ce:	602b      	str	r3, [r5, #0]
 80104d0:	f7ff fc05 	bl	800fcde <_close>
 80104d4:	1c43      	adds	r3, r0, #1
 80104d6:	d102      	bne.n	80104de <_close_r+0x1a>
 80104d8:	682b      	ldr	r3, [r5, #0]
 80104da:	b103      	cbz	r3, 80104de <_close_r+0x1a>
 80104dc:	6023      	str	r3, [r4, #0]
 80104de:	bd38      	pop	{r3, r4, r5, pc}
 80104e0:	2000fad4 	.word	0x2000fad4

080104e4 <_lseek_r>:
 80104e4:	b538      	push	{r3, r4, r5, lr}
 80104e6:	4d07      	ldr	r5, [pc, #28]	@ (8010504 <_lseek_r+0x20>)
 80104e8:	4604      	mov	r4, r0
 80104ea:	4608      	mov	r0, r1
 80104ec:	4611      	mov	r1, r2
 80104ee:	2200      	movs	r2, #0
 80104f0:	602a      	str	r2, [r5, #0]
 80104f2:	461a      	mov	r2, r3
 80104f4:	f7ff fc1a 	bl	800fd2c <_lseek>
 80104f8:	1c43      	adds	r3, r0, #1
 80104fa:	d102      	bne.n	8010502 <_lseek_r+0x1e>
 80104fc:	682b      	ldr	r3, [r5, #0]
 80104fe:	b103      	cbz	r3, 8010502 <_lseek_r+0x1e>
 8010500:	6023      	str	r3, [r4, #0]
 8010502:	bd38      	pop	{r3, r4, r5, pc}
 8010504:	2000fad4 	.word	0x2000fad4

08010508 <_read_r>:
 8010508:	b538      	push	{r3, r4, r5, lr}
 801050a:	4d07      	ldr	r5, [pc, #28]	@ (8010528 <_read_r+0x20>)
 801050c:	4604      	mov	r4, r0
 801050e:	4608      	mov	r0, r1
 8010510:	4611      	mov	r1, r2
 8010512:	2200      	movs	r2, #0
 8010514:	602a      	str	r2, [r5, #0]
 8010516:	461a      	mov	r2, r3
 8010518:	f7ff fbc4 	bl	800fca4 <_read>
 801051c:	1c43      	adds	r3, r0, #1
 801051e:	d102      	bne.n	8010526 <_read_r+0x1e>
 8010520:	682b      	ldr	r3, [r5, #0]
 8010522:	b103      	cbz	r3, 8010526 <_read_r+0x1e>
 8010524:	6023      	str	r3, [r4, #0]
 8010526:	bd38      	pop	{r3, r4, r5, pc}
 8010528:	2000fad4 	.word	0x2000fad4

0801052c <_write_r>:
 801052c:	b538      	push	{r3, r4, r5, lr}
 801052e:	4d07      	ldr	r5, [pc, #28]	@ (801054c <_write_r+0x20>)
 8010530:	4604      	mov	r4, r0
 8010532:	4608      	mov	r0, r1
 8010534:	4611      	mov	r1, r2
 8010536:	2200      	movs	r2, #0
 8010538:	602a      	str	r2, [r5, #0]
 801053a:	461a      	mov	r2, r3
 801053c:	f7fe ff98 	bl	800f470 <_write>
 8010540:	1c43      	adds	r3, r0, #1
 8010542:	d102      	bne.n	801054a <_write_r+0x1e>
 8010544:	682b      	ldr	r3, [r5, #0]
 8010546:	b103      	cbz	r3, 801054a <_write_r+0x1e>
 8010548:	6023      	str	r3, [r4, #0]
 801054a:	bd38      	pop	{r3, r4, r5, pc}
 801054c:	2000fad4 	.word	0x2000fad4

08010550 <__errno>:
 8010550:	4b01      	ldr	r3, [pc, #4]	@ (8010558 <__errno+0x8>)
 8010552:	6818      	ldr	r0, [r3, #0]
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	20000018 	.word	0x20000018

0801055c <__libc_init_array>:
 801055c:	b570      	push	{r4, r5, r6, lr}
 801055e:	4d0d      	ldr	r5, [pc, #52]	@ (8010594 <__libc_init_array+0x38>)
 8010560:	4c0d      	ldr	r4, [pc, #52]	@ (8010598 <__libc_init_array+0x3c>)
 8010562:	1b64      	subs	r4, r4, r5
 8010564:	10a4      	asrs	r4, r4, #2
 8010566:	2600      	movs	r6, #0
 8010568:	42a6      	cmp	r6, r4
 801056a:	d109      	bne.n	8010580 <__libc_init_array+0x24>
 801056c:	4d0b      	ldr	r5, [pc, #44]	@ (801059c <__libc_init_array+0x40>)
 801056e:	4c0c      	ldr	r4, [pc, #48]	@ (80105a0 <__libc_init_array+0x44>)
 8010570:	f000 fd24 	bl	8010fbc <_init>
 8010574:	1b64      	subs	r4, r4, r5
 8010576:	10a4      	asrs	r4, r4, #2
 8010578:	2600      	movs	r6, #0
 801057a:	42a6      	cmp	r6, r4
 801057c:	d105      	bne.n	801058a <__libc_init_array+0x2e>
 801057e:	bd70      	pop	{r4, r5, r6, pc}
 8010580:	f855 3b04 	ldr.w	r3, [r5], #4
 8010584:	4798      	blx	r3
 8010586:	3601      	adds	r6, #1
 8010588:	e7ee      	b.n	8010568 <__libc_init_array+0xc>
 801058a:	f855 3b04 	ldr.w	r3, [r5], #4
 801058e:	4798      	blx	r3
 8010590:	3601      	adds	r6, #1
 8010592:	e7f2      	b.n	801057a <__libc_init_array+0x1e>
 8010594:	0801197c 	.word	0x0801197c
 8010598:	0801197c 	.word	0x0801197c
 801059c:	0801197c 	.word	0x0801197c
 80105a0:	08011980 	.word	0x08011980

080105a4 <__retarget_lock_init_recursive>:
 80105a4:	4770      	bx	lr

080105a6 <__retarget_lock_acquire_recursive>:
 80105a6:	4770      	bx	lr

080105a8 <__retarget_lock_release_recursive>:
 80105a8:	4770      	bx	lr
	...

080105ac <_free_r>:
 80105ac:	b538      	push	{r3, r4, r5, lr}
 80105ae:	4605      	mov	r5, r0
 80105b0:	2900      	cmp	r1, #0
 80105b2:	d041      	beq.n	8010638 <_free_r+0x8c>
 80105b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105b8:	1f0c      	subs	r4, r1, #4
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	bfb8      	it	lt
 80105be:	18e4      	addlt	r4, r4, r3
 80105c0:	f000 f8e0 	bl	8010784 <__malloc_lock>
 80105c4:	4a1d      	ldr	r2, [pc, #116]	@ (801063c <_free_r+0x90>)
 80105c6:	6813      	ldr	r3, [r2, #0]
 80105c8:	b933      	cbnz	r3, 80105d8 <_free_r+0x2c>
 80105ca:	6063      	str	r3, [r4, #4]
 80105cc:	6014      	str	r4, [r2, #0]
 80105ce:	4628      	mov	r0, r5
 80105d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105d4:	f000 b8dc 	b.w	8010790 <__malloc_unlock>
 80105d8:	42a3      	cmp	r3, r4
 80105da:	d908      	bls.n	80105ee <_free_r+0x42>
 80105dc:	6820      	ldr	r0, [r4, #0]
 80105de:	1821      	adds	r1, r4, r0
 80105e0:	428b      	cmp	r3, r1
 80105e2:	bf01      	itttt	eq
 80105e4:	6819      	ldreq	r1, [r3, #0]
 80105e6:	685b      	ldreq	r3, [r3, #4]
 80105e8:	1809      	addeq	r1, r1, r0
 80105ea:	6021      	streq	r1, [r4, #0]
 80105ec:	e7ed      	b.n	80105ca <_free_r+0x1e>
 80105ee:	461a      	mov	r2, r3
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	b10b      	cbz	r3, 80105f8 <_free_r+0x4c>
 80105f4:	42a3      	cmp	r3, r4
 80105f6:	d9fa      	bls.n	80105ee <_free_r+0x42>
 80105f8:	6811      	ldr	r1, [r2, #0]
 80105fa:	1850      	adds	r0, r2, r1
 80105fc:	42a0      	cmp	r0, r4
 80105fe:	d10b      	bne.n	8010618 <_free_r+0x6c>
 8010600:	6820      	ldr	r0, [r4, #0]
 8010602:	4401      	add	r1, r0
 8010604:	1850      	adds	r0, r2, r1
 8010606:	4283      	cmp	r3, r0
 8010608:	6011      	str	r1, [r2, #0]
 801060a:	d1e0      	bne.n	80105ce <_free_r+0x22>
 801060c:	6818      	ldr	r0, [r3, #0]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	6053      	str	r3, [r2, #4]
 8010612:	4408      	add	r0, r1
 8010614:	6010      	str	r0, [r2, #0]
 8010616:	e7da      	b.n	80105ce <_free_r+0x22>
 8010618:	d902      	bls.n	8010620 <_free_r+0x74>
 801061a:	230c      	movs	r3, #12
 801061c:	602b      	str	r3, [r5, #0]
 801061e:	e7d6      	b.n	80105ce <_free_r+0x22>
 8010620:	6820      	ldr	r0, [r4, #0]
 8010622:	1821      	adds	r1, r4, r0
 8010624:	428b      	cmp	r3, r1
 8010626:	bf04      	itt	eq
 8010628:	6819      	ldreq	r1, [r3, #0]
 801062a:	685b      	ldreq	r3, [r3, #4]
 801062c:	6063      	str	r3, [r4, #4]
 801062e:	bf04      	itt	eq
 8010630:	1809      	addeq	r1, r1, r0
 8010632:	6021      	streq	r1, [r4, #0]
 8010634:	6054      	str	r4, [r2, #4]
 8010636:	e7ca      	b.n	80105ce <_free_r+0x22>
 8010638:	bd38      	pop	{r3, r4, r5, pc}
 801063a:	bf00      	nop
 801063c:	2000fae0 	.word	0x2000fae0

08010640 <sbrk_aligned>:
 8010640:	b570      	push	{r4, r5, r6, lr}
 8010642:	4e0f      	ldr	r6, [pc, #60]	@ (8010680 <sbrk_aligned+0x40>)
 8010644:	460c      	mov	r4, r1
 8010646:	6831      	ldr	r1, [r6, #0]
 8010648:	4605      	mov	r5, r0
 801064a:	b911      	cbnz	r1, 8010652 <sbrk_aligned+0x12>
 801064c:	f000 fca6 	bl	8010f9c <_sbrk_r>
 8010650:	6030      	str	r0, [r6, #0]
 8010652:	4621      	mov	r1, r4
 8010654:	4628      	mov	r0, r5
 8010656:	f000 fca1 	bl	8010f9c <_sbrk_r>
 801065a:	1c43      	adds	r3, r0, #1
 801065c:	d103      	bne.n	8010666 <sbrk_aligned+0x26>
 801065e:	f04f 34ff 	mov.w	r4, #4294967295
 8010662:	4620      	mov	r0, r4
 8010664:	bd70      	pop	{r4, r5, r6, pc}
 8010666:	1cc4      	adds	r4, r0, #3
 8010668:	f024 0403 	bic.w	r4, r4, #3
 801066c:	42a0      	cmp	r0, r4
 801066e:	d0f8      	beq.n	8010662 <sbrk_aligned+0x22>
 8010670:	1a21      	subs	r1, r4, r0
 8010672:	4628      	mov	r0, r5
 8010674:	f000 fc92 	bl	8010f9c <_sbrk_r>
 8010678:	3001      	adds	r0, #1
 801067a:	d1f2      	bne.n	8010662 <sbrk_aligned+0x22>
 801067c:	e7ef      	b.n	801065e <sbrk_aligned+0x1e>
 801067e:	bf00      	nop
 8010680:	2000fadc 	.word	0x2000fadc

08010684 <_malloc_r>:
 8010684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010688:	1ccd      	adds	r5, r1, #3
 801068a:	f025 0503 	bic.w	r5, r5, #3
 801068e:	3508      	adds	r5, #8
 8010690:	2d0c      	cmp	r5, #12
 8010692:	bf38      	it	cc
 8010694:	250c      	movcc	r5, #12
 8010696:	2d00      	cmp	r5, #0
 8010698:	4606      	mov	r6, r0
 801069a:	db01      	blt.n	80106a0 <_malloc_r+0x1c>
 801069c:	42a9      	cmp	r1, r5
 801069e:	d904      	bls.n	80106aa <_malloc_r+0x26>
 80106a0:	230c      	movs	r3, #12
 80106a2:	6033      	str	r3, [r6, #0]
 80106a4:	2000      	movs	r0, #0
 80106a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010780 <_malloc_r+0xfc>
 80106ae:	f000 f869 	bl	8010784 <__malloc_lock>
 80106b2:	f8d8 3000 	ldr.w	r3, [r8]
 80106b6:	461c      	mov	r4, r3
 80106b8:	bb44      	cbnz	r4, 801070c <_malloc_r+0x88>
 80106ba:	4629      	mov	r1, r5
 80106bc:	4630      	mov	r0, r6
 80106be:	f7ff ffbf 	bl	8010640 <sbrk_aligned>
 80106c2:	1c43      	adds	r3, r0, #1
 80106c4:	4604      	mov	r4, r0
 80106c6:	d158      	bne.n	801077a <_malloc_r+0xf6>
 80106c8:	f8d8 4000 	ldr.w	r4, [r8]
 80106cc:	4627      	mov	r7, r4
 80106ce:	2f00      	cmp	r7, #0
 80106d0:	d143      	bne.n	801075a <_malloc_r+0xd6>
 80106d2:	2c00      	cmp	r4, #0
 80106d4:	d04b      	beq.n	801076e <_malloc_r+0xea>
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	4639      	mov	r1, r7
 80106da:	4630      	mov	r0, r6
 80106dc:	eb04 0903 	add.w	r9, r4, r3
 80106e0:	f000 fc5c 	bl	8010f9c <_sbrk_r>
 80106e4:	4581      	cmp	r9, r0
 80106e6:	d142      	bne.n	801076e <_malloc_r+0xea>
 80106e8:	6821      	ldr	r1, [r4, #0]
 80106ea:	1a6d      	subs	r5, r5, r1
 80106ec:	4629      	mov	r1, r5
 80106ee:	4630      	mov	r0, r6
 80106f0:	f7ff ffa6 	bl	8010640 <sbrk_aligned>
 80106f4:	3001      	adds	r0, #1
 80106f6:	d03a      	beq.n	801076e <_malloc_r+0xea>
 80106f8:	6823      	ldr	r3, [r4, #0]
 80106fa:	442b      	add	r3, r5
 80106fc:	6023      	str	r3, [r4, #0]
 80106fe:	f8d8 3000 	ldr.w	r3, [r8]
 8010702:	685a      	ldr	r2, [r3, #4]
 8010704:	bb62      	cbnz	r2, 8010760 <_malloc_r+0xdc>
 8010706:	f8c8 7000 	str.w	r7, [r8]
 801070a:	e00f      	b.n	801072c <_malloc_r+0xa8>
 801070c:	6822      	ldr	r2, [r4, #0]
 801070e:	1b52      	subs	r2, r2, r5
 8010710:	d420      	bmi.n	8010754 <_malloc_r+0xd0>
 8010712:	2a0b      	cmp	r2, #11
 8010714:	d917      	bls.n	8010746 <_malloc_r+0xc2>
 8010716:	1961      	adds	r1, r4, r5
 8010718:	42a3      	cmp	r3, r4
 801071a:	6025      	str	r5, [r4, #0]
 801071c:	bf18      	it	ne
 801071e:	6059      	strne	r1, [r3, #4]
 8010720:	6863      	ldr	r3, [r4, #4]
 8010722:	bf08      	it	eq
 8010724:	f8c8 1000 	streq.w	r1, [r8]
 8010728:	5162      	str	r2, [r4, r5]
 801072a:	604b      	str	r3, [r1, #4]
 801072c:	4630      	mov	r0, r6
 801072e:	f000 f82f 	bl	8010790 <__malloc_unlock>
 8010732:	f104 000b 	add.w	r0, r4, #11
 8010736:	1d23      	adds	r3, r4, #4
 8010738:	f020 0007 	bic.w	r0, r0, #7
 801073c:	1ac2      	subs	r2, r0, r3
 801073e:	bf1c      	itt	ne
 8010740:	1a1b      	subne	r3, r3, r0
 8010742:	50a3      	strne	r3, [r4, r2]
 8010744:	e7af      	b.n	80106a6 <_malloc_r+0x22>
 8010746:	6862      	ldr	r2, [r4, #4]
 8010748:	42a3      	cmp	r3, r4
 801074a:	bf0c      	ite	eq
 801074c:	f8c8 2000 	streq.w	r2, [r8]
 8010750:	605a      	strne	r2, [r3, #4]
 8010752:	e7eb      	b.n	801072c <_malloc_r+0xa8>
 8010754:	4623      	mov	r3, r4
 8010756:	6864      	ldr	r4, [r4, #4]
 8010758:	e7ae      	b.n	80106b8 <_malloc_r+0x34>
 801075a:	463c      	mov	r4, r7
 801075c:	687f      	ldr	r7, [r7, #4]
 801075e:	e7b6      	b.n	80106ce <_malloc_r+0x4a>
 8010760:	461a      	mov	r2, r3
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	42a3      	cmp	r3, r4
 8010766:	d1fb      	bne.n	8010760 <_malloc_r+0xdc>
 8010768:	2300      	movs	r3, #0
 801076a:	6053      	str	r3, [r2, #4]
 801076c:	e7de      	b.n	801072c <_malloc_r+0xa8>
 801076e:	230c      	movs	r3, #12
 8010770:	6033      	str	r3, [r6, #0]
 8010772:	4630      	mov	r0, r6
 8010774:	f000 f80c 	bl	8010790 <__malloc_unlock>
 8010778:	e794      	b.n	80106a4 <_malloc_r+0x20>
 801077a:	6005      	str	r5, [r0, #0]
 801077c:	e7d6      	b.n	801072c <_malloc_r+0xa8>
 801077e:	bf00      	nop
 8010780:	2000fae0 	.word	0x2000fae0

08010784 <__malloc_lock>:
 8010784:	4801      	ldr	r0, [pc, #4]	@ (801078c <__malloc_lock+0x8>)
 8010786:	f7ff bf0e 	b.w	80105a6 <__retarget_lock_acquire_recursive>
 801078a:	bf00      	nop
 801078c:	2000fad8 	.word	0x2000fad8

08010790 <__malloc_unlock>:
 8010790:	4801      	ldr	r0, [pc, #4]	@ (8010798 <__malloc_unlock+0x8>)
 8010792:	f7ff bf09 	b.w	80105a8 <__retarget_lock_release_recursive>
 8010796:	bf00      	nop
 8010798:	2000fad8 	.word	0x2000fad8

0801079c <__sfputc_r>:
 801079c:	6893      	ldr	r3, [r2, #8]
 801079e:	3b01      	subs	r3, #1
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	b410      	push	{r4}
 80107a4:	6093      	str	r3, [r2, #8]
 80107a6:	da08      	bge.n	80107ba <__sfputc_r+0x1e>
 80107a8:	6994      	ldr	r4, [r2, #24]
 80107aa:	42a3      	cmp	r3, r4
 80107ac:	db01      	blt.n	80107b2 <__sfputc_r+0x16>
 80107ae:	290a      	cmp	r1, #10
 80107b0:	d103      	bne.n	80107ba <__sfputc_r+0x1e>
 80107b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107b6:	f7ff bde8 	b.w	801038a <__swbuf_r>
 80107ba:	6813      	ldr	r3, [r2, #0]
 80107bc:	1c58      	adds	r0, r3, #1
 80107be:	6010      	str	r0, [r2, #0]
 80107c0:	7019      	strb	r1, [r3, #0]
 80107c2:	4608      	mov	r0, r1
 80107c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107c8:	4770      	bx	lr

080107ca <__sfputs_r>:
 80107ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107cc:	4606      	mov	r6, r0
 80107ce:	460f      	mov	r7, r1
 80107d0:	4614      	mov	r4, r2
 80107d2:	18d5      	adds	r5, r2, r3
 80107d4:	42ac      	cmp	r4, r5
 80107d6:	d101      	bne.n	80107dc <__sfputs_r+0x12>
 80107d8:	2000      	movs	r0, #0
 80107da:	e007      	b.n	80107ec <__sfputs_r+0x22>
 80107dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107e0:	463a      	mov	r2, r7
 80107e2:	4630      	mov	r0, r6
 80107e4:	f7ff ffda 	bl	801079c <__sfputc_r>
 80107e8:	1c43      	adds	r3, r0, #1
 80107ea:	d1f3      	bne.n	80107d4 <__sfputs_r+0xa>
 80107ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107f0 <_vfiprintf_r>:
 80107f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f4:	460d      	mov	r5, r1
 80107f6:	b09d      	sub	sp, #116	@ 0x74
 80107f8:	4614      	mov	r4, r2
 80107fa:	4698      	mov	r8, r3
 80107fc:	4606      	mov	r6, r0
 80107fe:	b118      	cbz	r0, 8010808 <_vfiprintf_r+0x18>
 8010800:	6a03      	ldr	r3, [r0, #32]
 8010802:	b90b      	cbnz	r3, 8010808 <_vfiprintf_r+0x18>
 8010804:	f7ff fcd8 	bl	80101b8 <__sinit>
 8010808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801080a:	07d9      	lsls	r1, r3, #31
 801080c:	d405      	bmi.n	801081a <_vfiprintf_r+0x2a>
 801080e:	89ab      	ldrh	r3, [r5, #12]
 8010810:	059a      	lsls	r2, r3, #22
 8010812:	d402      	bmi.n	801081a <_vfiprintf_r+0x2a>
 8010814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010816:	f7ff fec6 	bl	80105a6 <__retarget_lock_acquire_recursive>
 801081a:	89ab      	ldrh	r3, [r5, #12]
 801081c:	071b      	lsls	r3, r3, #28
 801081e:	d501      	bpl.n	8010824 <_vfiprintf_r+0x34>
 8010820:	692b      	ldr	r3, [r5, #16]
 8010822:	b99b      	cbnz	r3, 801084c <_vfiprintf_r+0x5c>
 8010824:	4629      	mov	r1, r5
 8010826:	4630      	mov	r0, r6
 8010828:	f7ff fdee 	bl	8010408 <__swsetup_r>
 801082c:	b170      	cbz	r0, 801084c <_vfiprintf_r+0x5c>
 801082e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010830:	07dc      	lsls	r4, r3, #31
 8010832:	d504      	bpl.n	801083e <_vfiprintf_r+0x4e>
 8010834:	f04f 30ff 	mov.w	r0, #4294967295
 8010838:	b01d      	add	sp, #116	@ 0x74
 801083a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801083e:	89ab      	ldrh	r3, [r5, #12]
 8010840:	0598      	lsls	r0, r3, #22
 8010842:	d4f7      	bmi.n	8010834 <_vfiprintf_r+0x44>
 8010844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010846:	f7ff feaf 	bl	80105a8 <__retarget_lock_release_recursive>
 801084a:	e7f3      	b.n	8010834 <_vfiprintf_r+0x44>
 801084c:	2300      	movs	r3, #0
 801084e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010850:	2320      	movs	r3, #32
 8010852:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010856:	f8cd 800c 	str.w	r8, [sp, #12]
 801085a:	2330      	movs	r3, #48	@ 0x30
 801085c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010a0c <_vfiprintf_r+0x21c>
 8010860:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010864:	f04f 0901 	mov.w	r9, #1
 8010868:	4623      	mov	r3, r4
 801086a:	469a      	mov	sl, r3
 801086c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010870:	b10a      	cbz	r2, 8010876 <_vfiprintf_r+0x86>
 8010872:	2a25      	cmp	r2, #37	@ 0x25
 8010874:	d1f9      	bne.n	801086a <_vfiprintf_r+0x7a>
 8010876:	ebba 0b04 	subs.w	fp, sl, r4
 801087a:	d00b      	beq.n	8010894 <_vfiprintf_r+0xa4>
 801087c:	465b      	mov	r3, fp
 801087e:	4622      	mov	r2, r4
 8010880:	4629      	mov	r1, r5
 8010882:	4630      	mov	r0, r6
 8010884:	f7ff ffa1 	bl	80107ca <__sfputs_r>
 8010888:	3001      	adds	r0, #1
 801088a:	f000 80a7 	beq.w	80109dc <_vfiprintf_r+0x1ec>
 801088e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010890:	445a      	add	r2, fp
 8010892:	9209      	str	r2, [sp, #36]	@ 0x24
 8010894:	f89a 3000 	ldrb.w	r3, [sl]
 8010898:	2b00      	cmp	r3, #0
 801089a:	f000 809f 	beq.w	80109dc <_vfiprintf_r+0x1ec>
 801089e:	2300      	movs	r3, #0
 80108a0:	f04f 32ff 	mov.w	r2, #4294967295
 80108a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108a8:	f10a 0a01 	add.w	sl, sl, #1
 80108ac:	9304      	str	r3, [sp, #16]
 80108ae:	9307      	str	r3, [sp, #28]
 80108b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80108b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80108b6:	4654      	mov	r4, sl
 80108b8:	2205      	movs	r2, #5
 80108ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108be:	4853      	ldr	r0, [pc, #332]	@ (8010a0c <_vfiprintf_r+0x21c>)
 80108c0:	f7ef fc9e 	bl	8000200 <memchr>
 80108c4:	9a04      	ldr	r2, [sp, #16]
 80108c6:	b9d8      	cbnz	r0, 8010900 <_vfiprintf_r+0x110>
 80108c8:	06d1      	lsls	r1, r2, #27
 80108ca:	bf44      	itt	mi
 80108cc:	2320      	movmi	r3, #32
 80108ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108d2:	0713      	lsls	r3, r2, #28
 80108d4:	bf44      	itt	mi
 80108d6:	232b      	movmi	r3, #43	@ 0x2b
 80108d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108dc:	f89a 3000 	ldrb.w	r3, [sl]
 80108e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80108e2:	d015      	beq.n	8010910 <_vfiprintf_r+0x120>
 80108e4:	9a07      	ldr	r2, [sp, #28]
 80108e6:	4654      	mov	r4, sl
 80108e8:	2000      	movs	r0, #0
 80108ea:	f04f 0c0a 	mov.w	ip, #10
 80108ee:	4621      	mov	r1, r4
 80108f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108f4:	3b30      	subs	r3, #48	@ 0x30
 80108f6:	2b09      	cmp	r3, #9
 80108f8:	d94b      	bls.n	8010992 <_vfiprintf_r+0x1a2>
 80108fa:	b1b0      	cbz	r0, 801092a <_vfiprintf_r+0x13a>
 80108fc:	9207      	str	r2, [sp, #28]
 80108fe:	e014      	b.n	801092a <_vfiprintf_r+0x13a>
 8010900:	eba0 0308 	sub.w	r3, r0, r8
 8010904:	fa09 f303 	lsl.w	r3, r9, r3
 8010908:	4313      	orrs	r3, r2
 801090a:	9304      	str	r3, [sp, #16]
 801090c:	46a2      	mov	sl, r4
 801090e:	e7d2      	b.n	80108b6 <_vfiprintf_r+0xc6>
 8010910:	9b03      	ldr	r3, [sp, #12]
 8010912:	1d19      	adds	r1, r3, #4
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	9103      	str	r1, [sp, #12]
 8010918:	2b00      	cmp	r3, #0
 801091a:	bfbb      	ittet	lt
 801091c:	425b      	neglt	r3, r3
 801091e:	f042 0202 	orrlt.w	r2, r2, #2
 8010922:	9307      	strge	r3, [sp, #28]
 8010924:	9307      	strlt	r3, [sp, #28]
 8010926:	bfb8      	it	lt
 8010928:	9204      	strlt	r2, [sp, #16]
 801092a:	7823      	ldrb	r3, [r4, #0]
 801092c:	2b2e      	cmp	r3, #46	@ 0x2e
 801092e:	d10a      	bne.n	8010946 <_vfiprintf_r+0x156>
 8010930:	7863      	ldrb	r3, [r4, #1]
 8010932:	2b2a      	cmp	r3, #42	@ 0x2a
 8010934:	d132      	bne.n	801099c <_vfiprintf_r+0x1ac>
 8010936:	9b03      	ldr	r3, [sp, #12]
 8010938:	1d1a      	adds	r2, r3, #4
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	9203      	str	r2, [sp, #12]
 801093e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010942:	3402      	adds	r4, #2
 8010944:	9305      	str	r3, [sp, #20]
 8010946:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010a1c <_vfiprintf_r+0x22c>
 801094a:	7821      	ldrb	r1, [r4, #0]
 801094c:	2203      	movs	r2, #3
 801094e:	4650      	mov	r0, sl
 8010950:	f7ef fc56 	bl	8000200 <memchr>
 8010954:	b138      	cbz	r0, 8010966 <_vfiprintf_r+0x176>
 8010956:	9b04      	ldr	r3, [sp, #16]
 8010958:	eba0 000a 	sub.w	r0, r0, sl
 801095c:	2240      	movs	r2, #64	@ 0x40
 801095e:	4082      	lsls	r2, r0
 8010960:	4313      	orrs	r3, r2
 8010962:	3401      	adds	r4, #1
 8010964:	9304      	str	r3, [sp, #16]
 8010966:	f814 1b01 	ldrb.w	r1, [r4], #1
 801096a:	4829      	ldr	r0, [pc, #164]	@ (8010a10 <_vfiprintf_r+0x220>)
 801096c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010970:	2206      	movs	r2, #6
 8010972:	f7ef fc45 	bl	8000200 <memchr>
 8010976:	2800      	cmp	r0, #0
 8010978:	d03f      	beq.n	80109fa <_vfiprintf_r+0x20a>
 801097a:	4b26      	ldr	r3, [pc, #152]	@ (8010a14 <_vfiprintf_r+0x224>)
 801097c:	bb1b      	cbnz	r3, 80109c6 <_vfiprintf_r+0x1d6>
 801097e:	9b03      	ldr	r3, [sp, #12]
 8010980:	3307      	adds	r3, #7
 8010982:	f023 0307 	bic.w	r3, r3, #7
 8010986:	3308      	adds	r3, #8
 8010988:	9303      	str	r3, [sp, #12]
 801098a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801098c:	443b      	add	r3, r7
 801098e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010990:	e76a      	b.n	8010868 <_vfiprintf_r+0x78>
 8010992:	fb0c 3202 	mla	r2, ip, r2, r3
 8010996:	460c      	mov	r4, r1
 8010998:	2001      	movs	r0, #1
 801099a:	e7a8      	b.n	80108ee <_vfiprintf_r+0xfe>
 801099c:	2300      	movs	r3, #0
 801099e:	3401      	adds	r4, #1
 80109a0:	9305      	str	r3, [sp, #20]
 80109a2:	4619      	mov	r1, r3
 80109a4:	f04f 0c0a 	mov.w	ip, #10
 80109a8:	4620      	mov	r0, r4
 80109aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109ae:	3a30      	subs	r2, #48	@ 0x30
 80109b0:	2a09      	cmp	r2, #9
 80109b2:	d903      	bls.n	80109bc <_vfiprintf_r+0x1cc>
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d0c6      	beq.n	8010946 <_vfiprintf_r+0x156>
 80109b8:	9105      	str	r1, [sp, #20]
 80109ba:	e7c4      	b.n	8010946 <_vfiprintf_r+0x156>
 80109bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80109c0:	4604      	mov	r4, r0
 80109c2:	2301      	movs	r3, #1
 80109c4:	e7f0      	b.n	80109a8 <_vfiprintf_r+0x1b8>
 80109c6:	ab03      	add	r3, sp, #12
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	462a      	mov	r2, r5
 80109cc:	4b12      	ldr	r3, [pc, #72]	@ (8010a18 <_vfiprintf_r+0x228>)
 80109ce:	a904      	add	r1, sp, #16
 80109d0:	4630      	mov	r0, r6
 80109d2:	f3af 8000 	nop.w
 80109d6:	4607      	mov	r7, r0
 80109d8:	1c78      	adds	r0, r7, #1
 80109da:	d1d6      	bne.n	801098a <_vfiprintf_r+0x19a>
 80109dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109de:	07d9      	lsls	r1, r3, #31
 80109e0:	d405      	bmi.n	80109ee <_vfiprintf_r+0x1fe>
 80109e2:	89ab      	ldrh	r3, [r5, #12]
 80109e4:	059a      	lsls	r2, r3, #22
 80109e6:	d402      	bmi.n	80109ee <_vfiprintf_r+0x1fe>
 80109e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109ea:	f7ff fddd 	bl	80105a8 <__retarget_lock_release_recursive>
 80109ee:	89ab      	ldrh	r3, [r5, #12]
 80109f0:	065b      	lsls	r3, r3, #25
 80109f2:	f53f af1f 	bmi.w	8010834 <_vfiprintf_r+0x44>
 80109f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109f8:	e71e      	b.n	8010838 <_vfiprintf_r+0x48>
 80109fa:	ab03      	add	r3, sp, #12
 80109fc:	9300      	str	r3, [sp, #0]
 80109fe:	462a      	mov	r2, r5
 8010a00:	4b05      	ldr	r3, [pc, #20]	@ (8010a18 <_vfiprintf_r+0x228>)
 8010a02:	a904      	add	r1, sp, #16
 8010a04:	4630      	mov	r0, r6
 8010a06:	f000 f879 	bl	8010afc <_printf_i>
 8010a0a:	e7e4      	b.n	80109d6 <_vfiprintf_r+0x1e6>
 8010a0c:	08011940 	.word	0x08011940
 8010a10:	0801194a 	.word	0x0801194a
 8010a14:	00000000 	.word	0x00000000
 8010a18:	080107cb 	.word	0x080107cb
 8010a1c:	08011946 	.word	0x08011946

08010a20 <_printf_common>:
 8010a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a24:	4616      	mov	r6, r2
 8010a26:	4698      	mov	r8, r3
 8010a28:	688a      	ldr	r2, [r1, #8]
 8010a2a:	690b      	ldr	r3, [r1, #16]
 8010a2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010a30:	4293      	cmp	r3, r2
 8010a32:	bfb8      	it	lt
 8010a34:	4613      	movlt	r3, r2
 8010a36:	6033      	str	r3, [r6, #0]
 8010a38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010a3c:	4607      	mov	r7, r0
 8010a3e:	460c      	mov	r4, r1
 8010a40:	b10a      	cbz	r2, 8010a46 <_printf_common+0x26>
 8010a42:	3301      	adds	r3, #1
 8010a44:	6033      	str	r3, [r6, #0]
 8010a46:	6823      	ldr	r3, [r4, #0]
 8010a48:	0699      	lsls	r1, r3, #26
 8010a4a:	bf42      	ittt	mi
 8010a4c:	6833      	ldrmi	r3, [r6, #0]
 8010a4e:	3302      	addmi	r3, #2
 8010a50:	6033      	strmi	r3, [r6, #0]
 8010a52:	6825      	ldr	r5, [r4, #0]
 8010a54:	f015 0506 	ands.w	r5, r5, #6
 8010a58:	d106      	bne.n	8010a68 <_printf_common+0x48>
 8010a5a:	f104 0a19 	add.w	sl, r4, #25
 8010a5e:	68e3      	ldr	r3, [r4, #12]
 8010a60:	6832      	ldr	r2, [r6, #0]
 8010a62:	1a9b      	subs	r3, r3, r2
 8010a64:	42ab      	cmp	r3, r5
 8010a66:	dc26      	bgt.n	8010ab6 <_printf_common+0x96>
 8010a68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010a6c:	6822      	ldr	r2, [r4, #0]
 8010a6e:	3b00      	subs	r3, #0
 8010a70:	bf18      	it	ne
 8010a72:	2301      	movne	r3, #1
 8010a74:	0692      	lsls	r2, r2, #26
 8010a76:	d42b      	bmi.n	8010ad0 <_printf_common+0xb0>
 8010a78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010a7c:	4641      	mov	r1, r8
 8010a7e:	4638      	mov	r0, r7
 8010a80:	47c8      	blx	r9
 8010a82:	3001      	adds	r0, #1
 8010a84:	d01e      	beq.n	8010ac4 <_printf_common+0xa4>
 8010a86:	6823      	ldr	r3, [r4, #0]
 8010a88:	6922      	ldr	r2, [r4, #16]
 8010a8a:	f003 0306 	and.w	r3, r3, #6
 8010a8e:	2b04      	cmp	r3, #4
 8010a90:	bf02      	ittt	eq
 8010a92:	68e5      	ldreq	r5, [r4, #12]
 8010a94:	6833      	ldreq	r3, [r6, #0]
 8010a96:	1aed      	subeq	r5, r5, r3
 8010a98:	68a3      	ldr	r3, [r4, #8]
 8010a9a:	bf0c      	ite	eq
 8010a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010aa0:	2500      	movne	r5, #0
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	bfc4      	itt	gt
 8010aa6:	1a9b      	subgt	r3, r3, r2
 8010aa8:	18ed      	addgt	r5, r5, r3
 8010aaa:	2600      	movs	r6, #0
 8010aac:	341a      	adds	r4, #26
 8010aae:	42b5      	cmp	r5, r6
 8010ab0:	d11a      	bne.n	8010ae8 <_printf_common+0xc8>
 8010ab2:	2000      	movs	r0, #0
 8010ab4:	e008      	b.n	8010ac8 <_printf_common+0xa8>
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	4652      	mov	r2, sl
 8010aba:	4641      	mov	r1, r8
 8010abc:	4638      	mov	r0, r7
 8010abe:	47c8      	blx	r9
 8010ac0:	3001      	adds	r0, #1
 8010ac2:	d103      	bne.n	8010acc <_printf_common+0xac>
 8010ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010acc:	3501      	adds	r5, #1
 8010ace:	e7c6      	b.n	8010a5e <_printf_common+0x3e>
 8010ad0:	18e1      	adds	r1, r4, r3
 8010ad2:	1c5a      	adds	r2, r3, #1
 8010ad4:	2030      	movs	r0, #48	@ 0x30
 8010ad6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010ada:	4422      	add	r2, r4
 8010adc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010ae0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010ae4:	3302      	adds	r3, #2
 8010ae6:	e7c7      	b.n	8010a78 <_printf_common+0x58>
 8010ae8:	2301      	movs	r3, #1
 8010aea:	4622      	mov	r2, r4
 8010aec:	4641      	mov	r1, r8
 8010aee:	4638      	mov	r0, r7
 8010af0:	47c8      	blx	r9
 8010af2:	3001      	adds	r0, #1
 8010af4:	d0e6      	beq.n	8010ac4 <_printf_common+0xa4>
 8010af6:	3601      	adds	r6, #1
 8010af8:	e7d9      	b.n	8010aae <_printf_common+0x8e>
	...

08010afc <_printf_i>:
 8010afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b00:	7e0f      	ldrb	r7, [r1, #24]
 8010b02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010b04:	2f78      	cmp	r7, #120	@ 0x78
 8010b06:	4691      	mov	r9, r2
 8010b08:	4680      	mov	r8, r0
 8010b0a:	460c      	mov	r4, r1
 8010b0c:	469a      	mov	sl, r3
 8010b0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010b12:	d807      	bhi.n	8010b24 <_printf_i+0x28>
 8010b14:	2f62      	cmp	r7, #98	@ 0x62
 8010b16:	d80a      	bhi.n	8010b2e <_printf_i+0x32>
 8010b18:	2f00      	cmp	r7, #0
 8010b1a:	f000 80d2 	beq.w	8010cc2 <_printf_i+0x1c6>
 8010b1e:	2f58      	cmp	r7, #88	@ 0x58
 8010b20:	f000 80b9 	beq.w	8010c96 <_printf_i+0x19a>
 8010b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010b2c:	e03a      	b.n	8010ba4 <_printf_i+0xa8>
 8010b2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010b32:	2b15      	cmp	r3, #21
 8010b34:	d8f6      	bhi.n	8010b24 <_printf_i+0x28>
 8010b36:	a101      	add	r1, pc, #4	@ (adr r1, 8010b3c <_printf_i+0x40>)
 8010b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b3c:	08010b95 	.word	0x08010b95
 8010b40:	08010ba9 	.word	0x08010ba9
 8010b44:	08010b25 	.word	0x08010b25
 8010b48:	08010b25 	.word	0x08010b25
 8010b4c:	08010b25 	.word	0x08010b25
 8010b50:	08010b25 	.word	0x08010b25
 8010b54:	08010ba9 	.word	0x08010ba9
 8010b58:	08010b25 	.word	0x08010b25
 8010b5c:	08010b25 	.word	0x08010b25
 8010b60:	08010b25 	.word	0x08010b25
 8010b64:	08010b25 	.word	0x08010b25
 8010b68:	08010ca9 	.word	0x08010ca9
 8010b6c:	08010bd3 	.word	0x08010bd3
 8010b70:	08010c63 	.word	0x08010c63
 8010b74:	08010b25 	.word	0x08010b25
 8010b78:	08010b25 	.word	0x08010b25
 8010b7c:	08010ccb 	.word	0x08010ccb
 8010b80:	08010b25 	.word	0x08010b25
 8010b84:	08010bd3 	.word	0x08010bd3
 8010b88:	08010b25 	.word	0x08010b25
 8010b8c:	08010b25 	.word	0x08010b25
 8010b90:	08010c6b 	.word	0x08010c6b
 8010b94:	6833      	ldr	r3, [r6, #0]
 8010b96:	1d1a      	adds	r2, r3, #4
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	6032      	str	r2, [r6, #0]
 8010b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ba0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e09d      	b.n	8010ce4 <_printf_i+0x1e8>
 8010ba8:	6833      	ldr	r3, [r6, #0]
 8010baa:	6820      	ldr	r0, [r4, #0]
 8010bac:	1d19      	adds	r1, r3, #4
 8010bae:	6031      	str	r1, [r6, #0]
 8010bb0:	0606      	lsls	r6, r0, #24
 8010bb2:	d501      	bpl.n	8010bb8 <_printf_i+0xbc>
 8010bb4:	681d      	ldr	r5, [r3, #0]
 8010bb6:	e003      	b.n	8010bc0 <_printf_i+0xc4>
 8010bb8:	0645      	lsls	r5, r0, #25
 8010bba:	d5fb      	bpl.n	8010bb4 <_printf_i+0xb8>
 8010bbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010bc0:	2d00      	cmp	r5, #0
 8010bc2:	da03      	bge.n	8010bcc <_printf_i+0xd0>
 8010bc4:	232d      	movs	r3, #45	@ 0x2d
 8010bc6:	426d      	negs	r5, r5
 8010bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010bcc:	4859      	ldr	r0, [pc, #356]	@ (8010d34 <_printf_i+0x238>)
 8010bce:	230a      	movs	r3, #10
 8010bd0:	e011      	b.n	8010bf6 <_printf_i+0xfa>
 8010bd2:	6821      	ldr	r1, [r4, #0]
 8010bd4:	6833      	ldr	r3, [r6, #0]
 8010bd6:	0608      	lsls	r0, r1, #24
 8010bd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8010bdc:	d402      	bmi.n	8010be4 <_printf_i+0xe8>
 8010bde:	0649      	lsls	r1, r1, #25
 8010be0:	bf48      	it	mi
 8010be2:	b2ad      	uxthmi	r5, r5
 8010be4:	2f6f      	cmp	r7, #111	@ 0x6f
 8010be6:	4853      	ldr	r0, [pc, #332]	@ (8010d34 <_printf_i+0x238>)
 8010be8:	6033      	str	r3, [r6, #0]
 8010bea:	bf14      	ite	ne
 8010bec:	230a      	movne	r3, #10
 8010bee:	2308      	moveq	r3, #8
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010bf6:	6866      	ldr	r6, [r4, #4]
 8010bf8:	60a6      	str	r6, [r4, #8]
 8010bfa:	2e00      	cmp	r6, #0
 8010bfc:	bfa2      	ittt	ge
 8010bfe:	6821      	ldrge	r1, [r4, #0]
 8010c00:	f021 0104 	bicge.w	r1, r1, #4
 8010c04:	6021      	strge	r1, [r4, #0]
 8010c06:	b90d      	cbnz	r5, 8010c0c <_printf_i+0x110>
 8010c08:	2e00      	cmp	r6, #0
 8010c0a:	d04b      	beq.n	8010ca4 <_printf_i+0x1a8>
 8010c0c:	4616      	mov	r6, r2
 8010c0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c12:	fb03 5711 	mls	r7, r3, r1, r5
 8010c16:	5dc7      	ldrb	r7, [r0, r7]
 8010c18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c1c:	462f      	mov	r7, r5
 8010c1e:	42bb      	cmp	r3, r7
 8010c20:	460d      	mov	r5, r1
 8010c22:	d9f4      	bls.n	8010c0e <_printf_i+0x112>
 8010c24:	2b08      	cmp	r3, #8
 8010c26:	d10b      	bne.n	8010c40 <_printf_i+0x144>
 8010c28:	6823      	ldr	r3, [r4, #0]
 8010c2a:	07df      	lsls	r7, r3, #31
 8010c2c:	d508      	bpl.n	8010c40 <_printf_i+0x144>
 8010c2e:	6923      	ldr	r3, [r4, #16]
 8010c30:	6861      	ldr	r1, [r4, #4]
 8010c32:	4299      	cmp	r1, r3
 8010c34:	bfde      	ittt	le
 8010c36:	2330      	movle	r3, #48	@ 0x30
 8010c38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010c40:	1b92      	subs	r2, r2, r6
 8010c42:	6122      	str	r2, [r4, #16]
 8010c44:	f8cd a000 	str.w	sl, [sp]
 8010c48:	464b      	mov	r3, r9
 8010c4a:	aa03      	add	r2, sp, #12
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	4640      	mov	r0, r8
 8010c50:	f7ff fee6 	bl	8010a20 <_printf_common>
 8010c54:	3001      	adds	r0, #1
 8010c56:	d14a      	bne.n	8010cee <_printf_i+0x1f2>
 8010c58:	f04f 30ff 	mov.w	r0, #4294967295
 8010c5c:	b004      	add	sp, #16
 8010c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c62:	6823      	ldr	r3, [r4, #0]
 8010c64:	f043 0320 	orr.w	r3, r3, #32
 8010c68:	6023      	str	r3, [r4, #0]
 8010c6a:	4833      	ldr	r0, [pc, #204]	@ (8010d38 <_printf_i+0x23c>)
 8010c6c:	2778      	movs	r7, #120	@ 0x78
 8010c6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010c72:	6823      	ldr	r3, [r4, #0]
 8010c74:	6831      	ldr	r1, [r6, #0]
 8010c76:	061f      	lsls	r7, r3, #24
 8010c78:	f851 5b04 	ldr.w	r5, [r1], #4
 8010c7c:	d402      	bmi.n	8010c84 <_printf_i+0x188>
 8010c7e:	065f      	lsls	r7, r3, #25
 8010c80:	bf48      	it	mi
 8010c82:	b2ad      	uxthmi	r5, r5
 8010c84:	6031      	str	r1, [r6, #0]
 8010c86:	07d9      	lsls	r1, r3, #31
 8010c88:	bf44      	itt	mi
 8010c8a:	f043 0320 	orrmi.w	r3, r3, #32
 8010c8e:	6023      	strmi	r3, [r4, #0]
 8010c90:	b11d      	cbz	r5, 8010c9a <_printf_i+0x19e>
 8010c92:	2310      	movs	r3, #16
 8010c94:	e7ac      	b.n	8010bf0 <_printf_i+0xf4>
 8010c96:	4827      	ldr	r0, [pc, #156]	@ (8010d34 <_printf_i+0x238>)
 8010c98:	e7e9      	b.n	8010c6e <_printf_i+0x172>
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	f023 0320 	bic.w	r3, r3, #32
 8010ca0:	6023      	str	r3, [r4, #0]
 8010ca2:	e7f6      	b.n	8010c92 <_printf_i+0x196>
 8010ca4:	4616      	mov	r6, r2
 8010ca6:	e7bd      	b.n	8010c24 <_printf_i+0x128>
 8010ca8:	6833      	ldr	r3, [r6, #0]
 8010caa:	6825      	ldr	r5, [r4, #0]
 8010cac:	6961      	ldr	r1, [r4, #20]
 8010cae:	1d18      	adds	r0, r3, #4
 8010cb0:	6030      	str	r0, [r6, #0]
 8010cb2:	062e      	lsls	r6, r5, #24
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	d501      	bpl.n	8010cbc <_printf_i+0x1c0>
 8010cb8:	6019      	str	r1, [r3, #0]
 8010cba:	e002      	b.n	8010cc2 <_printf_i+0x1c6>
 8010cbc:	0668      	lsls	r0, r5, #25
 8010cbe:	d5fb      	bpl.n	8010cb8 <_printf_i+0x1bc>
 8010cc0:	8019      	strh	r1, [r3, #0]
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	6123      	str	r3, [r4, #16]
 8010cc6:	4616      	mov	r6, r2
 8010cc8:	e7bc      	b.n	8010c44 <_printf_i+0x148>
 8010cca:	6833      	ldr	r3, [r6, #0]
 8010ccc:	1d1a      	adds	r2, r3, #4
 8010cce:	6032      	str	r2, [r6, #0]
 8010cd0:	681e      	ldr	r6, [r3, #0]
 8010cd2:	6862      	ldr	r2, [r4, #4]
 8010cd4:	2100      	movs	r1, #0
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	f7ef fa92 	bl	8000200 <memchr>
 8010cdc:	b108      	cbz	r0, 8010ce2 <_printf_i+0x1e6>
 8010cde:	1b80      	subs	r0, r0, r6
 8010ce0:	6060      	str	r0, [r4, #4]
 8010ce2:	6863      	ldr	r3, [r4, #4]
 8010ce4:	6123      	str	r3, [r4, #16]
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010cec:	e7aa      	b.n	8010c44 <_printf_i+0x148>
 8010cee:	6923      	ldr	r3, [r4, #16]
 8010cf0:	4632      	mov	r2, r6
 8010cf2:	4649      	mov	r1, r9
 8010cf4:	4640      	mov	r0, r8
 8010cf6:	47d0      	blx	sl
 8010cf8:	3001      	adds	r0, #1
 8010cfa:	d0ad      	beq.n	8010c58 <_printf_i+0x15c>
 8010cfc:	6823      	ldr	r3, [r4, #0]
 8010cfe:	079b      	lsls	r3, r3, #30
 8010d00:	d413      	bmi.n	8010d2a <_printf_i+0x22e>
 8010d02:	68e0      	ldr	r0, [r4, #12]
 8010d04:	9b03      	ldr	r3, [sp, #12]
 8010d06:	4298      	cmp	r0, r3
 8010d08:	bfb8      	it	lt
 8010d0a:	4618      	movlt	r0, r3
 8010d0c:	e7a6      	b.n	8010c5c <_printf_i+0x160>
 8010d0e:	2301      	movs	r3, #1
 8010d10:	4632      	mov	r2, r6
 8010d12:	4649      	mov	r1, r9
 8010d14:	4640      	mov	r0, r8
 8010d16:	47d0      	blx	sl
 8010d18:	3001      	adds	r0, #1
 8010d1a:	d09d      	beq.n	8010c58 <_printf_i+0x15c>
 8010d1c:	3501      	adds	r5, #1
 8010d1e:	68e3      	ldr	r3, [r4, #12]
 8010d20:	9903      	ldr	r1, [sp, #12]
 8010d22:	1a5b      	subs	r3, r3, r1
 8010d24:	42ab      	cmp	r3, r5
 8010d26:	dcf2      	bgt.n	8010d0e <_printf_i+0x212>
 8010d28:	e7eb      	b.n	8010d02 <_printf_i+0x206>
 8010d2a:	2500      	movs	r5, #0
 8010d2c:	f104 0619 	add.w	r6, r4, #25
 8010d30:	e7f5      	b.n	8010d1e <_printf_i+0x222>
 8010d32:	bf00      	nop
 8010d34:	08011951 	.word	0x08011951
 8010d38:	08011962 	.word	0x08011962

08010d3c <__sflush_r>:
 8010d3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d44:	0716      	lsls	r6, r2, #28
 8010d46:	4605      	mov	r5, r0
 8010d48:	460c      	mov	r4, r1
 8010d4a:	d454      	bmi.n	8010df6 <__sflush_r+0xba>
 8010d4c:	684b      	ldr	r3, [r1, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	dc02      	bgt.n	8010d58 <__sflush_r+0x1c>
 8010d52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	dd48      	ble.n	8010dea <__sflush_r+0xae>
 8010d58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d5a:	2e00      	cmp	r6, #0
 8010d5c:	d045      	beq.n	8010dea <__sflush_r+0xae>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010d64:	682f      	ldr	r7, [r5, #0]
 8010d66:	6a21      	ldr	r1, [r4, #32]
 8010d68:	602b      	str	r3, [r5, #0]
 8010d6a:	d030      	beq.n	8010dce <__sflush_r+0x92>
 8010d6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010d6e:	89a3      	ldrh	r3, [r4, #12]
 8010d70:	0759      	lsls	r1, r3, #29
 8010d72:	d505      	bpl.n	8010d80 <__sflush_r+0x44>
 8010d74:	6863      	ldr	r3, [r4, #4]
 8010d76:	1ad2      	subs	r2, r2, r3
 8010d78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010d7a:	b10b      	cbz	r3, 8010d80 <__sflush_r+0x44>
 8010d7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d7e:	1ad2      	subs	r2, r2, r3
 8010d80:	2300      	movs	r3, #0
 8010d82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d84:	6a21      	ldr	r1, [r4, #32]
 8010d86:	4628      	mov	r0, r5
 8010d88:	47b0      	blx	r6
 8010d8a:	1c43      	adds	r3, r0, #1
 8010d8c:	89a3      	ldrh	r3, [r4, #12]
 8010d8e:	d106      	bne.n	8010d9e <__sflush_r+0x62>
 8010d90:	6829      	ldr	r1, [r5, #0]
 8010d92:	291d      	cmp	r1, #29
 8010d94:	d82b      	bhi.n	8010dee <__sflush_r+0xb2>
 8010d96:	4a2a      	ldr	r2, [pc, #168]	@ (8010e40 <__sflush_r+0x104>)
 8010d98:	410a      	asrs	r2, r1
 8010d9a:	07d6      	lsls	r6, r2, #31
 8010d9c:	d427      	bmi.n	8010dee <__sflush_r+0xb2>
 8010d9e:	2200      	movs	r2, #0
 8010da0:	6062      	str	r2, [r4, #4]
 8010da2:	04d9      	lsls	r1, r3, #19
 8010da4:	6922      	ldr	r2, [r4, #16]
 8010da6:	6022      	str	r2, [r4, #0]
 8010da8:	d504      	bpl.n	8010db4 <__sflush_r+0x78>
 8010daa:	1c42      	adds	r2, r0, #1
 8010dac:	d101      	bne.n	8010db2 <__sflush_r+0x76>
 8010dae:	682b      	ldr	r3, [r5, #0]
 8010db0:	b903      	cbnz	r3, 8010db4 <__sflush_r+0x78>
 8010db2:	6560      	str	r0, [r4, #84]	@ 0x54
 8010db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010db6:	602f      	str	r7, [r5, #0]
 8010db8:	b1b9      	cbz	r1, 8010dea <__sflush_r+0xae>
 8010dba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010dbe:	4299      	cmp	r1, r3
 8010dc0:	d002      	beq.n	8010dc8 <__sflush_r+0x8c>
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	f7ff fbf2 	bl	80105ac <_free_r>
 8010dc8:	2300      	movs	r3, #0
 8010dca:	6363      	str	r3, [r4, #52]	@ 0x34
 8010dcc:	e00d      	b.n	8010dea <__sflush_r+0xae>
 8010dce:	2301      	movs	r3, #1
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	47b0      	blx	r6
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	1c50      	adds	r0, r2, #1
 8010dd8:	d1c9      	bne.n	8010d6e <__sflush_r+0x32>
 8010dda:	682b      	ldr	r3, [r5, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d0c6      	beq.n	8010d6e <__sflush_r+0x32>
 8010de0:	2b1d      	cmp	r3, #29
 8010de2:	d001      	beq.n	8010de8 <__sflush_r+0xac>
 8010de4:	2b16      	cmp	r3, #22
 8010de6:	d11e      	bne.n	8010e26 <__sflush_r+0xea>
 8010de8:	602f      	str	r7, [r5, #0]
 8010dea:	2000      	movs	r0, #0
 8010dec:	e022      	b.n	8010e34 <__sflush_r+0xf8>
 8010dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010df2:	b21b      	sxth	r3, r3
 8010df4:	e01b      	b.n	8010e2e <__sflush_r+0xf2>
 8010df6:	690f      	ldr	r7, [r1, #16]
 8010df8:	2f00      	cmp	r7, #0
 8010dfa:	d0f6      	beq.n	8010dea <__sflush_r+0xae>
 8010dfc:	0793      	lsls	r3, r2, #30
 8010dfe:	680e      	ldr	r6, [r1, #0]
 8010e00:	bf08      	it	eq
 8010e02:	694b      	ldreq	r3, [r1, #20]
 8010e04:	600f      	str	r7, [r1, #0]
 8010e06:	bf18      	it	ne
 8010e08:	2300      	movne	r3, #0
 8010e0a:	eba6 0807 	sub.w	r8, r6, r7
 8010e0e:	608b      	str	r3, [r1, #8]
 8010e10:	f1b8 0f00 	cmp.w	r8, #0
 8010e14:	dde9      	ble.n	8010dea <__sflush_r+0xae>
 8010e16:	6a21      	ldr	r1, [r4, #32]
 8010e18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010e1a:	4643      	mov	r3, r8
 8010e1c:	463a      	mov	r2, r7
 8010e1e:	4628      	mov	r0, r5
 8010e20:	47b0      	blx	r6
 8010e22:	2800      	cmp	r0, #0
 8010e24:	dc08      	bgt.n	8010e38 <__sflush_r+0xfc>
 8010e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e2e:	81a3      	strh	r3, [r4, #12]
 8010e30:	f04f 30ff 	mov.w	r0, #4294967295
 8010e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e38:	4407      	add	r7, r0
 8010e3a:	eba8 0800 	sub.w	r8, r8, r0
 8010e3e:	e7e7      	b.n	8010e10 <__sflush_r+0xd4>
 8010e40:	dfbffffe 	.word	0xdfbffffe

08010e44 <_fflush_r>:
 8010e44:	b538      	push	{r3, r4, r5, lr}
 8010e46:	690b      	ldr	r3, [r1, #16]
 8010e48:	4605      	mov	r5, r0
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	b913      	cbnz	r3, 8010e54 <_fflush_r+0x10>
 8010e4e:	2500      	movs	r5, #0
 8010e50:	4628      	mov	r0, r5
 8010e52:	bd38      	pop	{r3, r4, r5, pc}
 8010e54:	b118      	cbz	r0, 8010e5e <_fflush_r+0x1a>
 8010e56:	6a03      	ldr	r3, [r0, #32]
 8010e58:	b90b      	cbnz	r3, 8010e5e <_fflush_r+0x1a>
 8010e5a:	f7ff f9ad 	bl	80101b8 <__sinit>
 8010e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d0f3      	beq.n	8010e4e <_fflush_r+0xa>
 8010e66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010e68:	07d0      	lsls	r0, r2, #31
 8010e6a:	d404      	bmi.n	8010e76 <_fflush_r+0x32>
 8010e6c:	0599      	lsls	r1, r3, #22
 8010e6e:	d402      	bmi.n	8010e76 <_fflush_r+0x32>
 8010e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e72:	f7ff fb98 	bl	80105a6 <__retarget_lock_acquire_recursive>
 8010e76:	4628      	mov	r0, r5
 8010e78:	4621      	mov	r1, r4
 8010e7a:	f7ff ff5f 	bl	8010d3c <__sflush_r>
 8010e7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e80:	07da      	lsls	r2, r3, #31
 8010e82:	4605      	mov	r5, r0
 8010e84:	d4e4      	bmi.n	8010e50 <_fflush_r+0xc>
 8010e86:	89a3      	ldrh	r3, [r4, #12]
 8010e88:	059b      	lsls	r3, r3, #22
 8010e8a:	d4e1      	bmi.n	8010e50 <_fflush_r+0xc>
 8010e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e8e:	f7ff fb8b 	bl	80105a8 <__retarget_lock_release_recursive>
 8010e92:	e7dd      	b.n	8010e50 <_fflush_r+0xc>

08010e94 <__swhatbuf_r>:
 8010e94:	b570      	push	{r4, r5, r6, lr}
 8010e96:	460c      	mov	r4, r1
 8010e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e9c:	2900      	cmp	r1, #0
 8010e9e:	b096      	sub	sp, #88	@ 0x58
 8010ea0:	4615      	mov	r5, r2
 8010ea2:	461e      	mov	r6, r3
 8010ea4:	da0d      	bge.n	8010ec2 <__swhatbuf_r+0x2e>
 8010ea6:	89a3      	ldrh	r3, [r4, #12]
 8010ea8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010eac:	f04f 0100 	mov.w	r1, #0
 8010eb0:	bf14      	ite	ne
 8010eb2:	2340      	movne	r3, #64	@ 0x40
 8010eb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010eb8:	2000      	movs	r0, #0
 8010eba:	6031      	str	r1, [r6, #0]
 8010ebc:	602b      	str	r3, [r5, #0]
 8010ebe:	b016      	add	sp, #88	@ 0x58
 8010ec0:	bd70      	pop	{r4, r5, r6, pc}
 8010ec2:	466a      	mov	r2, sp
 8010ec4:	f000 f848 	bl	8010f58 <_fstat_r>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	dbec      	blt.n	8010ea6 <__swhatbuf_r+0x12>
 8010ecc:	9901      	ldr	r1, [sp, #4]
 8010ece:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010ed2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010ed6:	4259      	negs	r1, r3
 8010ed8:	4159      	adcs	r1, r3
 8010eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ede:	e7eb      	b.n	8010eb8 <__swhatbuf_r+0x24>

08010ee0 <__smakebuf_r>:
 8010ee0:	898b      	ldrh	r3, [r1, #12]
 8010ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ee4:	079d      	lsls	r5, r3, #30
 8010ee6:	4606      	mov	r6, r0
 8010ee8:	460c      	mov	r4, r1
 8010eea:	d507      	bpl.n	8010efc <__smakebuf_r+0x1c>
 8010eec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010ef0:	6023      	str	r3, [r4, #0]
 8010ef2:	6123      	str	r3, [r4, #16]
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	6163      	str	r3, [r4, #20]
 8010ef8:	b003      	add	sp, #12
 8010efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010efc:	ab01      	add	r3, sp, #4
 8010efe:	466a      	mov	r2, sp
 8010f00:	f7ff ffc8 	bl	8010e94 <__swhatbuf_r>
 8010f04:	9f00      	ldr	r7, [sp, #0]
 8010f06:	4605      	mov	r5, r0
 8010f08:	4639      	mov	r1, r7
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	f7ff fbba 	bl	8010684 <_malloc_r>
 8010f10:	b948      	cbnz	r0, 8010f26 <__smakebuf_r+0x46>
 8010f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f16:	059a      	lsls	r2, r3, #22
 8010f18:	d4ee      	bmi.n	8010ef8 <__smakebuf_r+0x18>
 8010f1a:	f023 0303 	bic.w	r3, r3, #3
 8010f1e:	f043 0302 	orr.w	r3, r3, #2
 8010f22:	81a3      	strh	r3, [r4, #12]
 8010f24:	e7e2      	b.n	8010eec <__smakebuf_r+0xc>
 8010f26:	89a3      	ldrh	r3, [r4, #12]
 8010f28:	6020      	str	r0, [r4, #0]
 8010f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f2e:	81a3      	strh	r3, [r4, #12]
 8010f30:	9b01      	ldr	r3, [sp, #4]
 8010f32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010f36:	b15b      	cbz	r3, 8010f50 <__smakebuf_r+0x70>
 8010f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	f000 f81d 	bl	8010f7c <_isatty_r>
 8010f42:	b128      	cbz	r0, 8010f50 <__smakebuf_r+0x70>
 8010f44:	89a3      	ldrh	r3, [r4, #12]
 8010f46:	f023 0303 	bic.w	r3, r3, #3
 8010f4a:	f043 0301 	orr.w	r3, r3, #1
 8010f4e:	81a3      	strh	r3, [r4, #12]
 8010f50:	89a3      	ldrh	r3, [r4, #12]
 8010f52:	431d      	orrs	r5, r3
 8010f54:	81a5      	strh	r5, [r4, #12]
 8010f56:	e7cf      	b.n	8010ef8 <__smakebuf_r+0x18>

08010f58 <_fstat_r>:
 8010f58:	b538      	push	{r3, r4, r5, lr}
 8010f5a:	4d07      	ldr	r5, [pc, #28]	@ (8010f78 <_fstat_r+0x20>)
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	4604      	mov	r4, r0
 8010f60:	4608      	mov	r0, r1
 8010f62:	4611      	mov	r1, r2
 8010f64:	602b      	str	r3, [r5, #0]
 8010f66:	f7fe fec6 	bl	800fcf6 <_fstat>
 8010f6a:	1c43      	adds	r3, r0, #1
 8010f6c:	d102      	bne.n	8010f74 <_fstat_r+0x1c>
 8010f6e:	682b      	ldr	r3, [r5, #0]
 8010f70:	b103      	cbz	r3, 8010f74 <_fstat_r+0x1c>
 8010f72:	6023      	str	r3, [r4, #0]
 8010f74:	bd38      	pop	{r3, r4, r5, pc}
 8010f76:	bf00      	nop
 8010f78:	2000fad4 	.word	0x2000fad4

08010f7c <_isatty_r>:
 8010f7c:	b538      	push	{r3, r4, r5, lr}
 8010f7e:	4d06      	ldr	r5, [pc, #24]	@ (8010f98 <_isatty_r+0x1c>)
 8010f80:	2300      	movs	r3, #0
 8010f82:	4604      	mov	r4, r0
 8010f84:	4608      	mov	r0, r1
 8010f86:	602b      	str	r3, [r5, #0]
 8010f88:	f7fe fec5 	bl	800fd16 <_isatty>
 8010f8c:	1c43      	adds	r3, r0, #1
 8010f8e:	d102      	bne.n	8010f96 <_isatty_r+0x1a>
 8010f90:	682b      	ldr	r3, [r5, #0]
 8010f92:	b103      	cbz	r3, 8010f96 <_isatty_r+0x1a>
 8010f94:	6023      	str	r3, [r4, #0]
 8010f96:	bd38      	pop	{r3, r4, r5, pc}
 8010f98:	2000fad4 	.word	0x2000fad4

08010f9c <_sbrk_r>:
 8010f9c:	b538      	push	{r3, r4, r5, lr}
 8010f9e:	4d06      	ldr	r5, [pc, #24]	@ (8010fb8 <_sbrk_r+0x1c>)
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	4608      	mov	r0, r1
 8010fa6:	602b      	str	r3, [r5, #0]
 8010fa8:	f7fe fece 	bl	800fd48 <_sbrk>
 8010fac:	1c43      	adds	r3, r0, #1
 8010fae:	d102      	bne.n	8010fb6 <_sbrk_r+0x1a>
 8010fb0:	682b      	ldr	r3, [r5, #0]
 8010fb2:	b103      	cbz	r3, 8010fb6 <_sbrk_r+0x1a>
 8010fb4:	6023      	str	r3, [r4, #0]
 8010fb6:	bd38      	pop	{r3, r4, r5, pc}
 8010fb8:	2000fad4 	.word	0x2000fad4

08010fbc <_init>:
 8010fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fbe:	bf00      	nop
 8010fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fc2:	bc08      	pop	{r3}
 8010fc4:	469e      	mov	lr, r3
 8010fc6:	4770      	bx	lr

08010fc8 <_fini>:
 8010fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fca:	bf00      	nop
 8010fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fce:	bc08      	pop	{r3}
 8010fd0:	469e      	mov	lr, r3
 8010fd2:	4770      	bx	lr
